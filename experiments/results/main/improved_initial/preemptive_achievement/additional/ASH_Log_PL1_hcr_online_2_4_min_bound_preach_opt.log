[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,9))', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,9)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 50})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 50})

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 50).
holds(1, complete_tower(red,puzzle_room_table), false, 50).
holds(1, complete_tower(yellow,puzzle_room_table), false, 50).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 50).
holds(1, configuration(manipulator_end_2), aligned_with((block,9)), 50).
holds(1, configuration(manipulator_limb_1), extended, 50).
holds(1, configuration(manipulator_limb_2), extended, 50).
holds(1, configuration(puzzle_room_door), open, 50).
holds(1, configuration(starting_room_door), closed, 50).
holds(1, configuration(store_room_door), open, 50).
holds(1, grasping(manipulator_arm_1), (block,2), 50).
holds(1, grasping(manipulator_arm_2), (block,9), 50).
holds(1, grasping(manipulator_end_1), (block,2), 50).
holds(1, grasping(manipulator_end_2), (block,9), 50).
holds(1, in((block,1)), (puzzle_room,1), 50).
holds(1, in((block,2)), (puzzle_room,1), 50).
holds(1, in((block,3)), (puzzle_room,1), 50).
holds(1, in((block,4)), (store_room,0), 50).
holds(1, in((block,5)), (puzzle_room,1), 50).
holds(1, in((block,6)), (puzzle_room,1), 50).
holds(1, in((block,7)), (puzzle_room,1), 50).
holds(1, in((block,8)), (store_room,0), 50).
holds(1, in((block,9)), (puzzle_room,1), 50).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 50).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 50).
holds(1, in(manipulator_end_1), (puzzle_room,1), 50).
holds(1, in(manipulator_end_2), (puzzle_room,1), 50).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 50).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 50).
holds(1, in(puzzle_room_table), (puzzle_room,1), 50).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 50).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 50).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 50).
holds(1, in(talos), (puzzle_room,1), 50).
holds(1, in_tower((block,1),(block,1)), true, 50).
holds(1, in_tower((block,1),(block,2)), false, 50).
holds(1, in_tower((block,1),(block,3)), false, 50).
holds(1, in_tower((block,1),(block,4)), false, 50).
holds(1, in_tower((block,1),(block,5)), false, 50).
holds(1, in_tower((block,1),(block,6)), false, 50).
holds(1, in_tower((block,1),(block,7)), false, 50).
holds(1, in_tower((block,1),(block,8)), false, 50).
holds(1, in_tower((block,1),(block,9)), false, 50).
holds(1, in_tower((block,2),(block,1)), false, 50).
holds(1, in_tower((block,2),(block,2)), false, 50).
holds(1, in_tower((block,2),(block,3)), false, 50).
holds(1, in_tower((block,2),(block,4)), false, 50).
holds(1, in_tower((block,2),(block,5)), false, 50).
holds(1, in_tower((block,2),(block,6)), false, 50).
holds(1, in_tower((block,2),(block,7)), false, 50).
holds(1, in_tower((block,2),(block,8)), false, 50).
holds(1, in_tower((block,2),(block,9)), false, 50).
holds(1, in_tower((block,3),(block,1)), false, 50).
holds(1, in_tower((block,3),(block,2)), true, 50).
holds(1, in_tower((block,3),(block,3)), true, 50).
holds(1, in_tower((block,3),(block,4)), false, 50).
holds(1, in_tower((block,3),(block,5)), false, 50).
holds(1, in_tower((block,3),(block,6)), false, 50).
holds(1, in_tower((block,3),(block,7)), false, 50).
holds(1, in_tower((block,3),(block,8)), false, 50).
holds(1, in_tower((block,3),(block,9)), false, 50).
holds(1, in_tower((block,4),(block,1)), false, 50).
holds(1, in_tower((block,4),(block,2)), false, 50).
holds(1, in_tower((block,4),(block,3)), false, 50).
holds(1, in_tower((block,4),(block,4)), false, 50).
holds(1, in_tower((block,4),(block,5)), false, 50).
holds(1, in_tower((block,4),(block,6)), false, 50).
holds(1, in_tower((block,4),(block,7)), false, 50).
holds(1, in_tower((block,4),(block,8)), false, 50).
holds(1, in_tower((block,4),(block,9)), false, 50).
holds(1, in_tower((block,5),(block,1)), false, 50).
holds(1, in_tower((block,5),(block,2)), false, 50).
holds(1, in_tower((block,5),(block,3)), false, 50).
holds(1, in_tower((block,5),(block,4)), false, 50).
holds(1, in_tower((block,5),(block,5)), false, 50).
holds(1, in_tower((block,5),(block,6)), false, 50).
holds(1, in_tower((block,5),(block,7)), false, 50).
holds(1, in_tower((block,5),(block,8)), false, 50).
holds(1, in_tower((block,5),(block,9)), false, 50).
holds(1, in_tower((block,6),(block,1)), false, 50).
holds(1, in_tower((block,6),(block,2)), false, 50).
holds(1, in_tower((block,6),(block,3)), false, 50).
holds(1, in_tower((block,6),(block,4)), false, 50).
holds(1, in_tower((block,6),(block,5)), true, 50).
holds(1, in_tower((block,6),(block,6)), true, 50).
holds(1, in_tower((block,6),(block,7)), false, 50).
holds(1, in_tower((block,6),(block,8)), false, 50).
holds(1, in_tower((block,6),(block,9)), false, 50).
holds(1, in_tower((block,7),(block,1)), false, 50).
holds(1, in_tower((block,7),(block,2)), false, 50).
holds(1, in_tower((block,7),(block,3)), false, 50).
holds(1, in_tower((block,7),(block,4)), false, 50).
holds(1, in_tower((block,7),(block,5)), false, 50).
holds(1, in_tower((block,7),(block,6)), false, 50).
holds(1, in_tower((block,7),(block,7)), true, 50).
holds(1, in_tower((block,7),(block,8)), false, 50).
holds(1, in_tower((block,7),(block,9)), true, 50).
holds(1, in_tower((block,8),(block,1)), false, 50).
holds(1, in_tower((block,8),(block,2)), false, 50).
holds(1, in_tower((block,8),(block,3)), false, 50).
holds(1, in_tower((block,8),(block,4)), false, 50).
holds(1, in_tower((block,8),(block,5)), false, 50).
holds(1, in_tower((block,8),(block,6)), false, 50).
holds(1, in_tower((block,8),(block,7)), false, 50).
holds(1, in_tower((block,8),(block,8)), false, 50).
holds(1, in_tower((block,8),(block,9)), false, 50).
holds(1, in_tower((block,9),(block,1)), false, 50).
holds(1, in_tower((block,9),(block,2)), false, 50).
holds(1, in_tower((block,9),(block,3)), false, 50).
holds(1, in_tower((block,9),(block,4)), false, 50).
holds(1, in_tower((block,9),(block,5)), false, 50).
holds(1, in_tower((block,9),(block,6)), false, 50).
holds(1, in_tower((block,9),(block,7)), false, 50).
holds(1, in_tower((block,9),(block,8)), false, 50).
holds(1, in_tower((block,9),(block,9)), false, 50).
holds(1, on((block,1)), puzzle_room_table_left, 50).
holds(1, on((block,2)), (block,3), 50).
holds(1, on((block,3)), puzzle_room_table_left, 50).
holds(1, on((block,4)), nothing, 50).
holds(1, on((block,5)), (block,6), 50).
holds(1, on((block,6)), puzzle_room_table_right, 50).
holds(1, on((block,7)), puzzle_room_table_middle, 50).
holds(1, on((block,8)), nothing, 50).
holds(1, on((block,9)), (block,7), 50).
holds(1, tower_base((block,1),puzzle_room_table), true, 50).
holds(1, tower_base((block,2),puzzle_room_table), false, 50).
holds(1, tower_base((block,3),puzzle_room_table), true, 50).
holds(1, tower_base((block,4),puzzle_room_table), false, 50).
holds(1, tower_base((block,5),puzzle_room_table), false, 50).
holds(1, tower_base((block,6),puzzle_room_table), true, 50).
holds(1, tower_base((block,7),puzzle_room_table), true, 50).
holds(1, tower_base((block,8),puzzle_room_table), false, 50).
holds(1, tower_base((block,9),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 50).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 50).
holds(2, complete_tower(blue,puzzle_room_table), false, 50).
holds(2, complete_tower(red,puzzle_room_table), false, 50).
holds(2, complete_tower(yellow,puzzle_room_table), false, 50).
holds(2, configuration(manipulator_arm_1), extended, 50).
holds(2, configuration(manipulator_arm_2), extended, 50).
holds(2, configuration(puzzle_room_door), open, 50).
holds(2, configuration(starting_room_door), closed, 50).
holds(2, configuration(store_room_door), open, 50).
holds(2, grasping(manipulator_arm_1), (block,2), 50).
holds(2, grasping(manipulator_arm_2), (block,9), 50).
holds(2, in((block,1)), puzzle_room, 50).
holds(2, in((block,2)), puzzle_room, 50).
holds(2, in((block,3)), puzzle_room, 50).
holds(2, in((block,4)), store_room, 50).
holds(2, in((block,5)), puzzle_room, 50).
holds(2, in((block,6)), puzzle_room, 50).
holds(2, in((block,7)), puzzle_room, 50).
holds(2, in((block,8)), store_room, 50).
holds(2, in((block,9)), puzzle_room, 50).
holds(2, in(manipulator_arm_1), puzzle_room, 50).
holds(2, in(manipulator_arm_2), puzzle_room, 50).
holds(2, in(puzzle_room_table), puzzle_room, 50).
holds(2, in(talos), puzzle_room, 50).
holds(2, in_tower((block,1),(block,1)), true, 50).
holds(2, in_tower((block,1),(block,2)), false, 50).
holds(2, in_tower((block,1),(block,3)), false, 50).
holds(2, in_tower((block,1),(block,4)), false, 50).
holds(2, in_tower((block,1),(block,5)), false, 50).
holds(2, in_tower((block,1),(block,6)), false, 50).
holds(2, in_tower((block,1),(block,7)), false, 50).
holds(2, in_tower((block,1),(block,8)), false, 50).
holds(2, in_tower((block,1),(block,9)), false, 50).
holds(2, in_tower((block,2),(block,1)), false, 50).
holds(2, in_tower((block,2),(block,2)), false, 50).
holds(2, in_tower((block,2),(block,3)), false, 50).
holds(2, in_tower((block,2),(block,4)), false, 50).
holds(2, in_tower((block,2),(block,5)), false, 50).
holds(2, in_tower((block,2),(block,6)), false, 50).
holds(2, in_tower((block,2),(block,7)), false, 50).
holds(2, in_tower((block,2),(block,8)), false, 50).
holds(2, in_tower((block,2),(block,9)), false, 50).
holds(2, in_tower((block,3),(block,1)), false, 50).
holds(2, in_tower((block,3),(block,2)), true, 50).
holds(2, in_tower((block,3),(block,3)), true, 50).
holds(2, in_tower((block,3),(block,4)), false, 50).
holds(2, in_tower((block,3),(block,5)), false, 50).
holds(2, in_tower((block,3),(block,6)), false, 50).
holds(2, in_tower((block,3),(block,7)), false, 50).
holds(2, in_tower((block,3),(block,8)), false, 50).
holds(2, in_tower((block,3),(block,9)), false, 50).
holds(2, in_tower((block,4),(block,1)), false, 50).
holds(2, in_tower((block,4),(block,2)), false, 50).
holds(2, in_tower((block,4),(block,3)), false, 50).
holds(2, in_tower((block,4),(block,4)), false, 50).
holds(2, in_tower((block,4),(block,5)), false, 50).
holds(2, in_tower((block,4),(block,6)), false, 50).
holds(2, in_tower((block,4),(block,7)), false, 50).
holds(2, in_tower((block,4),(block,8)), false, 50).
holds(2, in_tower((block,4),(block,9)), false, 50).
holds(2, in_tower((block,5),(block,1)), false, 50).
holds(2, in_tower((block,5),(block,2)), false, 50).
holds(2, in_tower((block,5),(block,3)), false, 50).
holds(2, in_tower((block,5),(block,4)), false, 50).
holds(2, in_tower((block,5),(block,5)), false, 50).
holds(2, in_tower((block,5),(block,6)), false, 50).
holds(2, in_tower((block,5),(block,7)), false, 50).
holds(2, in_tower((block,5),(block,8)), false, 50).
holds(2, in_tower((block,5),(block,9)), false, 50).
holds(2, in_tower((block,6),(block,1)), false, 50).
holds(2, in_tower((block,6),(block,2)), false, 50).
holds(2, in_tower((block,6),(block,3)), false, 50).
holds(2, in_tower((block,6),(block,4)), false, 50).
holds(2, in_tower((block,6),(block,5)), true, 50).
holds(2, in_tower((block,6),(block,6)), true, 50).
holds(2, in_tower((block,6),(block,7)), false, 50).
holds(2, in_tower((block,6),(block,8)), false, 50).
holds(2, in_tower((block,6),(block,9)), false, 50).
holds(2, in_tower((block,7),(block,1)), false, 50).
holds(2, in_tower((block,7),(block,2)), false, 50).
holds(2, in_tower((block,7),(block,3)), false, 50).
holds(2, in_tower((block,7),(block,4)), false, 50).
holds(2, in_tower((block,7),(block,5)), false, 50).
holds(2, in_tower((block,7),(block,6)), false, 50).
holds(2, in_tower((block,7),(block,7)), true, 50).
holds(2, in_tower((block,7),(block,8)), false, 50).
holds(2, in_tower((block,7),(block,9)), true, 50).
holds(2, in_tower((block,8),(block,1)), false, 50).
holds(2, in_tower((block,8),(block,2)), false, 50).
holds(2, in_tower((block,8),(block,3)), false, 50).
holds(2, in_tower((block,8),(block,4)), false, 50).
holds(2, in_tower((block,8),(block,5)), false, 50).
holds(2, in_tower((block,8),(block,6)), false, 50).
holds(2, in_tower((block,8),(block,7)), false, 50).
holds(2, in_tower((block,8),(block,8)), false, 50).
holds(2, in_tower((block,8),(block,9)), false, 50).
holds(2, in_tower((block,9),(block,1)), false, 50).
holds(2, in_tower((block,9),(block,2)), false, 50).
holds(2, in_tower((block,9),(block,3)), false, 50).
holds(2, in_tower((block,9),(block,4)), false, 50).
holds(2, in_tower((block,9),(block,5)), false, 50).
holds(2, in_tower((block,9),(block,6)), false, 50).
holds(2, in_tower((block,9),(block,7)), false, 50).
holds(2, in_tower((block,9),(block,8)), false, 50).
holds(2, in_tower((block,9),(block,9)), false, 50).
holds(2, on((block,1)), puzzle_room_table, 50).
holds(2, on((block,2)), (block,3), 50).
holds(2, on((block,3)), puzzle_room_table, 50).
holds(2, on((block,4)), nothing, 50).
holds(2, on((block,5)), (block,6), 50).
holds(2, on((block,6)), puzzle_room_table, 50).
holds(2, on((block,7)), puzzle_room_table, 50).
holds(2, on((block,8)), nothing, 50).
holds(2, on((block,9)), (block,7), 50).
holds(2, tower_base((block,1),puzzle_room_table), true, 50).
holds(2, tower_base((block,2),puzzle_room_table), false, 50).
holds(2, tower_base((block,3),puzzle_room_table), true, 50).
holds(2, tower_base((block,4),puzzle_room_table), false, 50).
holds(2, tower_base((block,5),puzzle_room_table), false, 50).
holds(2, tower_base((block,6),puzzle_room_table), true, 50).
holds(2, tower_base((block,7),puzzle_room_table), true, 50).
holds(2, tower_base((block,8),puzzle_room_table), false, 50).
holds(2, tower_base((block,9),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 50).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 50).

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=55']

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 36})

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_2,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 31).
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 32).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 33).
sub_goal(2, talos, release(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), nothing, 34).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 35).
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 36).

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=50, step_range=range(0, 51)

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=55']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA231035E0>]
	incrementor = SolveIncrementor(step_start=50, step_increase=1, step_increase_initial=6, step_end_min=56, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1477.8506877999826, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 50), range_=None), IncPart(name='plan_module', args=('#inc', 50, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 50, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 50, 31, 36, 'sequential', 'false'), range_=None)]

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1256 rules

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006433799999285839s

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039340s.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007124s with result Satisfiable.

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA232EFC20>

[28-02-2022_23-08-34] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 50)
	('last_sgoals', 36)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 31)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA232EFC20>)

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 50). %* None *%
#program plan_module(#inc, 50, false, false). %* None *%
#program optimisation_module(#inc, 50, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 50, 31, 36, sequential, false). %* None *%

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     49 : Current =     55
Incrementor step ends | Minimum  =     56 : Maximum =    300

[28-02-2022_23-08-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(50), Number(50)]), ('plan_module', [Number(50), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(50), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(51), Number(50)]), ('plan_module', [Number(51), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(50), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(52), Number(50)]), ('plan_module', [Number(52), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(50), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(50)]), ('plan_module', [Number(53), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(50), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(54), Number(50)]), ('plan_module', [Number(54), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(50), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(55), Number(50)]), ('plan_module', [Number(55), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(50), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.767558s.

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.357500s with result Satisfiable.

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.1250576000020374, Incremental time limit = None
Running cumulative time = 1.1250576000020374, Cumulative time limit = 1477.8506877999826
Used memory = (RSS = 1876.480469Mb, VMS = 1877.164062Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.767558s, Solving = 0.357500s, Total = 1.125058s, Memory = (RSS = 1876.480469Mb, VMS = 1877.164062Mb), Step range = [50-55]), Calls = 1
Final Model :: Total atoms = 10168, Cost = (-5,), Optimality proven = False, Number = 4, Thread ID = 4, Model type = ModelType.StableModel

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     56 : Maximum =    300

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(50)]), ('plan_module', [Number(56), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(50), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.201542s.

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032335s with result Unsatisfiable.

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2338768000008713, Incremental time limit = None
Running cumulative time = 1.3589344000029087, Cumulative time limit = 1477.8506877999826
Used memory = (RSS = 1877.945312Mb, VMS = 1879.082031Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     56 : Maximum =    300

[28-02-2022_23-08-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(50)]), ('plan_module', [Number(57), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(50), Number(31), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.201427s.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056504s with result Satisfiable.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25793110000086017, Incremental time limit = None
Running cumulative time = 1.6168655000037688, Cumulative time limit = 1477.8506877999826
Used memory = (RSS = 1880.656250Mb, VMS = 1880.351562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.170527s, Solving = 0.446339s, Total = 1.616866s, Memory = (RSS = 1880.656250Mb, VMS = 1880.351562Mb), Step range = [50-57]), Calls = 3
Final Model :: Total atoms = 11637, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.767558s, Solving = 0.357500s, Total = 1.125058s, Memory = (RSS = 1876.480469Mb, VMS = 1877.164062Mb), Step range = [50-55]
2 : Statistics :: Grounding = 0.201542s, Solving = 0.032335s, Total = 0.233877s, Memory = (RSS = 1877.945312Mb, VMS = 1879.082031Mb), Step range = [56-56]
3 : Statistics :: Grounding = 0.201427s, Solving = 0.056504s, Total = 0.257931s, Memory = (RSS = 1880.656250Mb, VMS = 1880.351562Mb), Step range = [57-57]

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.616866s due to: Stop condition reached.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 29, 50: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 48, 29: 49, 30: 50}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 15, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 22, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 32, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 29, 50: 30, 51: 31, 52: 31, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 48, 29: 49, 30: 50, 31: 52, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 15, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 22, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 32, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.170527s, Solving = 0.446339s, Total = 1.616866s, Memory = (RSS = 1880.656250Mb, VMS = 1880.351562Mb), Step range = [50-57]), Calls = 3
Model :: Total atoms = 11637, Cost = (-2,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 27:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 51:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 53:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 57:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 55 : Goals achieved = 36 : Goals unachieved = 19 : Complete = False

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 25, Sub-goal Stage Range = [31-55]
Division points [total=3] : [(Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 42, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 48, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-42]

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=57, step_range=range(0, 58)

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-42], problem number = 6, increment number = 6

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 42)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1644.903614399991)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [37-42] : Concurrency disabled : Minimum search length bound enabled with value 62

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 37
last_sgoals = 42
start_step = 57
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 62

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-08-36] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-08-36] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 57 as problem start state.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,1))', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,1)', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'S': 57})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 57})

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 57).
holds(1, complete_tower(red,puzzle_room_table), true, 57).
holds(1, complete_tower(yellow,puzzle_room_table), false, 57).
holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 57).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 57).
holds(1, configuration(manipulator_limb_1), extended, 57).
holds(1, configuration(manipulator_limb_2), retracted, 57).
holds(1, configuration(puzzle_room_door), open, 57).
holds(1, configuration(starting_room_door), closed, 57).
holds(1, configuration(store_room_door), open, 57).
holds(1, grasping(manipulator_arm_1), (block,1), 57).
holds(1, grasping(manipulator_arm_2), nothing, 57).
holds(1, grasping(manipulator_end_1), (block,1), 57).
holds(1, grasping(manipulator_end_2), nothing, 57).
holds(1, in((block,1)), (puzzle_room,1), 57).
holds(1, in((block,2)), (puzzle_room,1), 57).
holds(1, in((block,3)), (puzzle_room,1), 57).
holds(1, in((block,4)), (store_room,0), 57).
holds(1, in((block,5)), (puzzle_room,1), 57).
holds(1, in((block,6)), (puzzle_room,1), 57).
holds(1, in((block,7)), (puzzle_room,1), 57).
holds(1, in((block,8)), (store_room,0), 57).
holds(1, in((block,9)), (puzzle_room,1), 57).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 57).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 57).
holds(1, in(manipulator_end_1), (puzzle_room,1), 57).
holds(1, in(manipulator_end_2), (puzzle_room,1), 57).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 57).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 57).
holds(1, in(talos), (puzzle_room,1), 57).
holds(1, in_tower((block,1),(block,1)), false, 57).
holds(1, in_tower((block,1),(block,2)), false, 57).
holds(1, in_tower((block,1),(block,3)), false, 57).
holds(1, in_tower((block,1),(block,4)), false, 57).
holds(1, in_tower((block,1),(block,5)), false, 57).
holds(1, in_tower((block,1),(block,6)), false, 57).
holds(1, in_tower((block,1),(block,7)), false, 57).
holds(1, in_tower((block,1),(block,8)), false, 57).
holds(1, in_tower((block,1),(block,9)), false, 57).
holds(1, in_tower((block,2),(block,1)), false, 57).
holds(1, in_tower((block,2),(block,2)), false, 57).
holds(1, in_tower((block,2),(block,3)), false, 57).
holds(1, in_tower((block,2),(block,4)), false, 57).
holds(1, in_tower((block,2),(block,5)), false, 57).
holds(1, in_tower((block,2),(block,6)), false, 57).
holds(1, in_tower((block,2),(block,7)), false, 57).
holds(1, in_tower((block,2),(block,8)), false, 57).
holds(1, in_tower((block,2),(block,9)), false, 57).
holds(1, in_tower((block,3),(block,1)), true, 57).
holds(1, in_tower((block,3),(block,2)), true, 57).
holds(1, in_tower((block,3),(block,3)), true, 57).
holds(1, in_tower((block,3),(block,4)), false, 57).
holds(1, in_tower((block,3),(block,5)), false, 57).
holds(1, in_tower((block,3),(block,6)), false, 57).
holds(1, in_tower((block,3),(block,7)), false, 57).
holds(1, in_tower((block,3),(block,8)), false, 57).
holds(1, in_tower((block,3),(block,9)), false, 57).
holds(1, in_tower((block,4),(block,1)), false, 57).
holds(1, in_tower((block,4),(block,2)), false, 57).
holds(1, in_tower((block,4),(block,3)), false, 57).
holds(1, in_tower((block,4),(block,4)), false, 57).
holds(1, in_tower((block,4),(block,5)), false, 57).
holds(1, in_tower((block,4),(block,6)), false, 57).
holds(1, in_tower((block,4),(block,7)), false, 57).
holds(1, in_tower((block,4),(block,8)), false, 57).
holds(1, in_tower((block,4),(block,9)), false, 57).
holds(1, in_tower((block,5),(block,1)), false, 57).
holds(1, in_tower((block,5),(block,2)), false, 57).
holds(1, in_tower((block,5),(block,3)), false, 57).
holds(1, in_tower((block,5),(block,4)), false, 57).
holds(1, in_tower((block,5),(block,5)), false, 57).
holds(1, in_tower((block,5),(block,6)), false, 57).
holds(1, in_tower((block,5),(block,7)), false, 57).
holds(1, in_tower((block,5),(block,8)), false, 57).
holds(1, in_tower((block,5),(block,9)), false, 57).
holds(1, in_tower((block,6),(block,1)), false, 57).
holds(1, in_tower((block,6),(block,2)), false, 57).
holds(1, in_tower((block,6),(block,3)), false, 57).
holds(1, in_tower((block,6),(block,4)), false, 57).
holds(1, in_tower((block,6),(block,5)), true, 57).
holds(1, in_tower((block,6),(block,6)), true, 57).
holds(1, in_tower((block,6),(block,7)), false, 57).
holds(1, in_tower((block,6),(block,8)), false, 57).
holds(1, in_tower((block,6),(block,9)), false, 57).
holds(1, in_tower((block,7),(block,1)), false, 57).
holds(1, in_tower((block,7),(block,2)), false, 57).
holds(1, in_tower((block,7),(block,3)), false, 57).
holds(1, in_tower((block,7),(block,4)), false, 57).
holds(1, in_tower((block,7),(block,5)), false, 57).
holds(1, in_tower((block,7),(block,6)), false, 57).
holds(1, in_tower((block,7),(block,7)), true, 57).
holds(1, in_tower((block,7),(block,8)), false, 57).
holds(1, in_tower((block,7),(block,9)), false, 57).
holds(1, in_tower((block,8),(block,1)), false, 57).
holds(1, in_tower((block,8),(block,2)), false, 57).
holds(1, in_tower((block,8),(block,3)), false, 57).
holds(1, in_tower((block,8),(block,4)), false, 57).
holds(1, in_tower((block,8),(block,5)), false, 57).
holds(1, in_tower((block,8),(block,6)), false, 57).
holds(1, in_tower((block,8),(block,7)), false, 57).
holds(1, in_tower((block,8),(block,8)), false, 57).
holds(1, in_tower((block,8),(block,9)), false, 57).
holds(1, in_tower((block,9),(block,1)), false, 57).
holds(1, in_tower((block,9),(block,2)), false, 57).
holds(1, in_tower((block,9),(block,3)), false, 57).
holds(1, in_tower((block,9),(block,4)), false, 57).
holds(1, in_tower((block,9),(block,5)), false, 57).
holds(1, in_tower((block,9),(block,6)), false, 57).
holds(1, in_tower((block,9),(block,7)), false, 57).
holds(1, in_tower((block,9),(block,8)), false, 57).
holds(1, in_tower((block,9),(block,9)), true, 57).
holds(1, on((block,1)), (block,2), 57).
holds(1, on((block,2)), (block,3), 57).
holds(1, on((block,3)), puzzle_room_table_left, 57).
holds(1, on((block,4)), nothing, 57).
holds(1, on((block,5)), (block,6), 57).
holds(1, on((block,6)), puzzle_room_table_right, 57).
holds(1, on((block,7)), puzzle_room_table_middle, 57).
holds(1, on((block,8)), nothing, 57).
holds(1, on((block,9)), puzzle_room_table_middle, 57).
holds(1, tower_base((block,1),puzzle_room_table), false, 57).
holds(1, tower_base((block,2),puzzle_room_table), false, 57).
holds(1, tower_base((block,3),puzzle_room_table), true, 57).
holds(1, tower_base((block,4),puzzle_room_table), false, 57).
holds(1, tower_base((block,5),puzzle_room_table), false, 57).
holds(1, tower_base((block,6),puzzle_room_table), true, 57).
holds(1, tower_base((block,7),puzzle_room_table), true, 57).
holds(1, tower_base((block,8),puzzle_room_table), false, 57).
holds(1, tower_base((block,9),puzzle_room_table), true, 57).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 57).
holds(2, complete_tower(blue,puzzle_room_table), false, 57).
holds(2, complete_tower(red,puzzle_room_table), true, 57).
holds(2, complete_tower(yellow,puzzle_room_table), false, 57).
holds(2, configuration(manipulator_arm_1), extended, 57).
holds(2, configuration(manipulator_arm_2), retracted, 57).
holds(2, configuration(puzzle_room_door), open, 57).
holds(2, configuration(starting_room_door), closed, 57).
holds(2, configuration(store_room_door), open, 57).
holds(2, grasping(manipulator_arm_1), (block,1), 57).
holds(2, grasping(manipulator_arm_2), nothing, 57).
holds(2, in((block,1)), puzzle_room, 57).
holds(2, in((block,2)), puzzle_room, 57).
holds(2, in((block,3)), puzzle_room, 57).
holds(2, in((block,4)), store_room, 57).
holds(2, in((block,5)), puzzle_room, 57).
holds(2, in((block,6)), puzzle_room, 57).
holds(2, in((block,7)), puzzle_room, 57).
holds(2, in((block,8)), store_room, 57).
holds(2, in((block,9)), puzzle_room, 57).
holds(2, in(manipulator_arm_1), puzzle_room, 57).
holds(2, in(manipulator_arm_2), puzzle_room, 57).
holds(2, in(puzzle_room_table), puzzle_room, 57).
holds(2, in(talos), puzzle_room, 57).
holds(2, in_tower((block,1),(block,1)), false, 57).
holds(2, in_tower((block,1),(block,2)), false, 57).
holds(2, in_tower((block,1),(block,3)), false, 57).
holds(2, in_tower((block,1),(block,4)), false, 57).
holds(2, in_tower((block,1),(block,5)), false, 57).
holds(2, in_tower((block,1),(block,6)), false, 57).
holds(2, in_tower((block,1),(block,7)), false, 57).
holds(2, in_tower((block,1),(block,8)), false, 57).
holds(2, in_tower((block,1),(block,9)), false, 57).
holds(2, in_tower((block,2),(block,1)), false, 57).
holds(2, in_tower((block,2),(block,2)), false, 57).
holds(2, in_tower((block,2),(block,3)), false, 57).
holds(2, in_tower((block,2),(block,4)), false, 57).
holds(2, in_tower((block,2),(block,5)), false, 57).
holds(2, in_tower((block,2),(block,6)), false, 57).
holds(2, in_tower((block,2),(block,7)), false, 57).
holds(2, in_tower((block,2),(block,8)), false, 57).
holds(2, in_tower((block,2),(block,9)), false, 57).
holds(2, in_tower((block,3),(block,1)), true, 57).
holds(2, in_tower((block,3),(block,2)), true, 57).
holds(2, in_tower((block,3),(block,3)), true, 57).
holds(2, in_tower((block,3),(block,4)), false, 57).
holds(2, in_tower((block,3),(block,5)), false, 57).
holds(2, in_tower((block,3),(block,6)), false, 57).
holds(2, in_tower((block,3),(block,7)), false, 57).
holds(2, in_tower((block,3),(block,8)), false, 57).
holds(2, in_tower((block,3),(block,9)), false, 57).
holds(2, in_tower((block,4),(block,1)), false, 57).
holds(2, in_tower((block,4),(block,2)), false, 57).
holds(2, in_tower((block,4),(block,3)), false, 57).
holds(2, in_tower((block,4),(block,4)), false, 57).
holds(2, in_tower((block,4),(block,5)), false, 57).
holds(2, in_tower((block,4),(block,6)), false, 57).
holds(2, in_tower((block,4),(block,7)), false, 57).
holds(2, in_tower((block,4),(block,8)), false, 57).
holds(2, in_tower((block,4),(block,9)), false, 57).
holds(2, in_tower((block,5),(block,1)), false, 57).
holds(2, in_tower((block,5),(block,2)), false, 57).
holds(2, in_tower((block,5),(block,3)), false, 57).
holds(2, in_tower((block,5),(block,4)), false, 57).
holds(2, in_tower((block,5),(block,5)), false, 57).
holds(2, in_tower((block,5),(block,6)), false, 57).
holds(2, in_tower((block,5),(block,7)), false, 57).
holds(2, in_tower((block,5),(block,8)), false, 57).
holds(2, in_tower((block,5),(block,9)), false, 57).
holds(2, in_tower((block,6),(block,1)), false, 57).
holds(2, in_tower((block,6),(block,2)), false, 57).
holds(2, in_tower((block,6),(block,3)), false, 57).
holds(2, in_tower((block,6),(block,4)), false, 57).
holds(2, in_tower((block,6),(block,5)), true, 57).
holds(2, in_tower((block,6),(block,6)), true, 57).
holds(2, in_tower((block,6),(block,7)), false, 57).
holds(2, in_tower((block,6),(block,8)), false, 57).
holds(2, in_tower((block,6),(block,9)), false, 57).
holds(2, in_tower((block,7),(block,1)), false, 57).
holds(2, in_tower((block,7),(block,2)), false, 57).
holds(2, in_tower((block,7),(block,3)), false, 57).
holds(2, in_tower((block,7),(block,4)), false, 57).
holds(2, in_tower((block,7),(block,5)), false, 57).
holds(2, in_tower((block,7),(block,6)), false, 57).
holds(2, in_tower((block,7),(block,7)), true, 57).
holds(2, in_tower((block,7),(block,8)), false, 57).
holds(2, in_tower((block,7),(block,9)), false, 57).
holds(2, in_tower((block,8),(block,1)), false, 57).
holds(2, in_tower((block,8),(block,2)), false, 57).
holds(2, in_tower((block,8),(block,3)), false, 57).
holds(2, in_tower((block,8),(block,4)), false, 57).
holds(2, in_tower((block,8),(block,5)), false, 57).
holds(2, in_tower((block,8),(block,6)), false, 57).
holds(2, in_tower((block,8),(block,7)), false, 57).
holds(2, in_tower((block,8),(block,8)), false, 57).
holds(2, in_tower((block,8),(block,9)), false, 57).
holds(2, in_tower((block,9),(block,1)), false, 57).
holds(2, in_tower((block,9),(block,2)), false, 57).
holds(2, in_tower((block,9),(block,3)), false, 57).
holds(2, in_tower((block,9),(block,4)), false, 57).
holds(2, in_tower((block,9),(block,5)), false, 57).
holds(2, in_tower((block,9),(block,6)), false, 57).
holds(2, in_tower((block,9),(block,7)), false, 57).
holds(2, in_tower((block,9),(block,8)), false, 57).
holds(2, in_tower((block,9),(block,9)), true, 57).
holds(2, on((block,1)), (block,2), 57).
holds(2, on((block,2)), (block,3), 57).
holds(2, on((block,3)), puzzle_room_table, 57).
holds(2, on((block,4)), nothing, 57).
holds(2, on((block,5)), (block,6), 57).
holds(2, on((block,6)), puzzle_room_table, 57).
holds(2, on((block,7)), puzzle_room_table, 57).
holds(2, on((block,8)), nothing, 57).
holds(2, on((block,9)), puzzle_room_table, 57).
holds(2, tower_base((block,1),puzzle_room_table), false, 57).
holds(2, tower_base((block,2),puzzle_room_table), false, 57).
holds(2, tower_base((block,3),puzzle_room_table), true, 57).
holds(2, tower_base((block,4),puzzle_room_table), false, 57).
holds(2, tower_base((block,5),puzzle_room_table), false, 57).
holds(2, tower_base((block,6),puzzle_room_table), true, 57).
holds(2, tower_base((block,7),puzzle_room_table), true, 57).
holds(2, tower_base((block,8),puzzle_room_table), false, 57).
holds(2, tower_base((block,9),puzzle_room_table), true, 57).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 57).

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=62']

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'I': 42})

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), nothing, 37).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 38).
sub_goal(2, talos, move(hallway), in(talos), hallway, 39).
sub_goal(2, talos, move(store_room), in(talos), store_room, 40).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 41).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 42).

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=57, step_range=range(0, 58)

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=62']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA231039D0>]
	incrementor = SolveIncrementor(step_start=57, step_increase=1, step_increase_initial=6, step_end_min=63, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1476.2338222999788, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 57), range_=None), IncPart(name='plan_module', args=('#inc', 57, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 57, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 57, 37, 42, 'sequential', 'false'), range_=None)]

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1256 rules

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00794080000014219s

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.047031s.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008359s with result Satisfiable.

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA79CB0D60>

[28-02-2022_23-08-36] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 57)
	('last_sgoals', 42)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 37)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA79CB0D60>)

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 57). %* None *%
#program plan_module(#inc, 57, false, false). %* None *%
#program optimisation_module(#inc, 57, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 57, 37, 42, sequential, false). %* None *%

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     56 : Current =     62
Incrementor step ends | Minimum  =     63 : Maximum =    300

[28-02-2022_23-08-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(57), Number(57)]), ('plan_module', [Number(57), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(58), Number(57)]), ('plan_module', [Number(58), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(59), Number(57)]), ('plan_module', [Number(59), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(57)]), ('plan_module', [Number(60), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(61), Number(57)]), ('plan_module', [Number(61), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(62), Number(57)]), ('plan_module', [Number(62), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.796785s.

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.330928s with result Satisfiable.

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.1277130000016768, Incremental time limit = None
Running cumulative time = 1.1277130000016768, Cumulative time limit = 1476.2338222999788
Used memory = (RSS = 1878.406250Mb, VMS = 1878.886719Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.796785s, Solving = 0.330928s, Total = 1.127713s, Memory = (RSS = 1878.406250Mb, VMS = 1878.886719Mb), Step range = [57-62]), Calls = 1
Final Model :: Total atoms = 10172, Cost = (-5,), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     63 : Maximum =    300

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(57)]), ('plan_module', [Number(63), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.197803s.

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036061s with result Unsatisfiable.

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23386370000116585, Incremental time limit = None
Running cumulative time = 1.3615767000028427, Cumulative time limit = 1476.2338222999788
Used memory = (RSS = 1880.277344Mb, VMS = 1880.996094Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     63 : Maximum =    300

[28-02-2022_23-08-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(57)]), ('plan_module', [Number(64), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.210750s.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042461s with result Unsatisfiable.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.253211299999748, Incremental time limit = None
Running cumulative time = 1.6147880000025907, Cumulative time limit = 1476.2338222999788
Used memory = (RSS = 1882.187500Mb, VMS = 1881.519531Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     63 : Maximum =    300

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(57)]), ('plan_module', [Number(65), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.217257s.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055085s with result Unsatisfiable.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27234239999961574, Incremental time limit = None
Running cumulative time = 1.8871304000022064, Cumulative time limit = 1476.2338222999788
Used memory = (RSS = 1883.996094Mb, VMS = 1886.890625Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     63 : Maximum =    300

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(57)]), ('plan_module', [Number(66), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.211168s.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051952s with result Unsatisfiable.

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2631197999999131, Incremental time limit = None
Running cumulative time = 2.1502502000021195, Cumulative time limit = 1476.2338222999788
Used memory = (RSS = 1885.917969Mb, VMS = 1887.414062Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     63 : Maximum =    300

[28-02-2022_23-08-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(57)]), ('plan_module', [Number(67), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218214s.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051283s with result Unsatisfiable.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2694967999996152, Incremental time limit = None
Running cumulative time = 2.4197470000017347, Cumulative time limit = 1476.2338222999788
Used memory = (RSS = 1887.726562Mb, VMS = 1887.933594Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     63 : Maximum =    300

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(57)]), ('plan_module', [Number(68), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(57), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.217531s.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078237s with result Satisfiable.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2957681000007142, Incremental time limit = None
Running cumulative time = 2.715515100002449, Cumulative time limit = 1476.2338222999788
Used memory = (RSS = 1889.488281Mb, VMS = 1888.460938Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.069508s, Solving = 0.646007s, Total = 2.715515s, Memory = (RSS = 1889.488281Mb, VMS = 1888.460938Mb), Step range = [57-68]), Calls = 7
Final Model :: Total atoms = 14577, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.796785s, Solving = 0.330928s, Total = 1.127713s, Memory = (RSS = 1878.406250Mb, VMS = 1878.886719Mb), Step range = [57-62]
2 : Statistics :: Grounding = 0.197803s, Solving = 0.036061s, Total = 0.233864s, Memory = (RSS = 1880.277344Mb, VMS = 1880.996094Mb), Step range = [63-63]
3 : Statistics :: Grounding = 0.210750s, Solving = 0.042461s, Total = 0.253211s, Memory = (RSS = 1882.187500Mb, VMS = 1881.519531Mb), Step range = [64-64]
4 : Statistics :: Grounding = 0.217257s, Solving = 0.055085s, Total = 0.272342s, Memory = (RSS = 1883.996094Mb, VMS = 1886.890625Mb), Step range = [65-65]
5 : Statistics :: Grounding = 0.211168s, Solving = 0.051952s, Total = 0.263120s, Memory = (RSS = 1885.917969Mb, VMS = 1887.414062Mb), Step range = [66-66]
6 : Statistics :: Grounding = 0.218214s, Solving = 0.051283s, Total = 0.269497s, Memory = (RSS = 1887.726562Mb, VMS = 1887.933594Mb), Step range = [67-67]
7 : Statistics :: Grounding = 0.217531s, Solving = 0.078237s, Total = 0.295768s, Memory = (RSS = 1889.488281Mb, VMS = 1888.460938Mb), Step range = [68-68]

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.715515s due to: Stop condition reached.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 29, 50: 30, 51: 31, 52: 31, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 48, 29: 49, 30: 50, 31: 52, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 15, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 22, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 32, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 29, 50: 30, 51: 31, 52: 31, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36, 58: 37, 59: 38, 60: 39, 61: 39, 62: 40, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 48, 29: 49, 30: 50, 31: 52, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57, 37: 58, 38: 59, 39: 61, 40: 64, 41: 66, 42: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 15, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 22, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 32, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 42, Last requested goal index = 42, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.069508s, Solving = 0.646007s, Total = 2.715515s, Memory = (RSS = 1889.488281Mb, VMS = 1888.460938Mb), Step range = [57-68]), Calls = 7
Model :: Total atoms = 14577, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 11 :: Actions = 11                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 27:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 51:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 53:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 57:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 58:
    Current Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,1))
Step 59:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 61:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 67:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 68:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 55 : Goals achieved = 42 : Goals unachieved = 13 : Complete = False

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-1].

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 25, Sub-goal Stage Range = [31-55]
Division points [total=3] : [(Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 42, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 48, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [43-48]

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=68, step_range=range(0, 69)

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [43-48], problem number = 7, increment number = 7

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 43)
	('last_sgoals', 48)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1644.903614399991)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [43-48] : Concurrency disabled : Minimum search length bound enabled with value 73

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 43
last_sgoals = 48
start_step = 68
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 73

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-08-39] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-08-39] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 68 as problem start state.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,8))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,8)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 68})

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 68).
holds(1, complete_tower(red,puzzle_room_table), true, 68).
holds(1, complete_tower(yellow,puzzle_room_table), false, 68).
holds(1, configuration(manipulator_end_1), aligned_with((block,8)), 68).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 68).
holds(1, configuration(manipulator_limb_1), extended, 68).
holds(1, configuration(manipulator_limb_2), retracted, 68).
holds(1, configuration(puzzle_room_door), open, 68).
holds(1, configuration(starting_room_door), closed, 68).
holds(1, configuration(store_room_door), open, 68).
holds(1, grasping(manipulator_arm_1), (block,8), 68).
holds(1, grasping(manipulator_arm_2), nothing, 68).
holds(1, grasping(manipulator_end_1), (block,8), 68).
holds(1, grasping(manipulator_end_2), nothing, 68).
holds(1, in((block,1)), (puzzle_room,1), 68).
holds(1, in((block,2)), (puzzle_room,1), 68).
holds(1, in((block,3)), (puzzle_room,1), 68).
holds(1, in((block,4)), (store_room,0), 68).
holds(1, in((block,5)), (puzzle_room,1), 68).
holds(1, in((block,6)), (puzzle_room,1), 68).
holds(1, in((block,7)), (puzzle_room,1), 68).
holds(1, in((block,8)), (store_room,0), 68).
holds(1, in((block,9)), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_1), (store_room,0), 68).
holds(1, in(manipulator_arm_2), (store_room,0), 68).
holds(1, in(manipulator_end_1), (store_room,0), 68).
holds(1, in(manipulator_end_2), (store_room,0), 68).
holds(1, in(manipulator_limb_1), (store_room,0), 68).
holds(1, in(manipulator_limb_2), (store_room,0), 68).
holds(1, in(puzzle_room_table), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 68).
holds(1, in(talos), (store_room,0), 68).
holds(1, in_tower((block,1),(block,1)), false, 68).
holds(1, in_tower((block,1),(block,2)), false, 68).
holds(1, in_tower((block,1),(block,3)), false, 68).
holds(1, in_tower((block,1),(block,4)), false, 68).
holds(1, in_tower((block,1),(block,5)), false, 68).
holds(1, in_tower((block,1),(block,6)), false, 68).
holds(1, in_tower((block,1),(block,7)), false, 68).
holds(1, in_tower((block,1),(block,8)), false, 68).
holds(1, in_tower((block,1),(block,9)), false, 68).
holds(1, in_tower((block,2),(block,1)), false, 68).
holds(1, in_tower((block,2),(block,2)), false, 68).
holds(1, in_tower((block,2),(block,3)), false, 68).
holds(1, in_tower((block,2),(block,4)), false, 68).
holds(1, in_tower((block,2),(block,5)), false, 68).
holds(1, in_tower((block,2),(block,6)), false, 68).
holds(1, in_tower((block,2),(block,7)), false, 68).
holds(1, in_tower((block,2),(block,8)), false, 68).
holds(1, in_tower((block,2),(block,9)), false, 68).
holds(1, in_tower((block,3),(block,1)), true, 68).
holds(1, in_tower((block,3),(block,2)), true, 68).
holds(1, in_tower((block,3),(block,3)), true, 68).
holds(1, in_tower((block,3),(block,4)), false, 68).
holds(1, in_tower((block,3),(block,5)), false, 68).
holds(1, in_tower((block,3),(block,6)), false, 68).
holds(1, in_tower((block,3),(block,7)), false, 68).
holds(1, in_tower((block,3),(block,8)), false, 68).
holds(1, in_tower((block,3),(block,9)), false, 68).
holds(1, in_tower((block,4),(block,1)), false, 68).
holds(1, in_tower((block,4),(block,2)), false, 68).
holds(1, in_tower((block,4),(block,3)), false, 68).
holds(1, in_tower((block,4),(block,4)), false, 68).
holds(1, in_tower((block,4),(block,5)), false, 68).
holds(1, in_tower((block,4),(block,6)), false, 68).
holds(1, in_tower((block,4),(block,7)), false, 68).
holds(1, in_tower((block,4),(block,8)), false, 68).
holds(1, in_tower((block,4),(block,9)), false, 68).
holds(1, in_tower((block,5),(block,1)), false, 68).
holds(1, in_tower((block,5),(block,2)), false, 68).
holds(1, in_tower((block,5),(block,3)), false, 68).
holds(1, in_tower((block,5),(block,4)), false, 68).
holds(1, in_tower((block,5),(block,5)), false, 68).
holds(1, in_tower((block,5),(block,6)), false, 68).
holds(1, in_tower((block,5),(block,7)), false, 68).
holds(1, in_tower((block,5),(block,8)), false, 68).
holds(1, in_tower((block,5),(block,9)), false, 68).
holds(1, in_tower((block,6),(block,1)), false, 68).
holds(1, in_tower((block,6),(block,2)), false, 68).
holds(1, in_tower((block,6),(block,3)), false, 68).
holds(1, in_tower((block,6),(block,4)), false, 68).
holds(1, in_tower((block,6),(block,5)), true, 68).
holds(1, in_tower((block,6),(block,6)), true, 68).
holds(1, in_tower((block,6),(block,7)), false, 68).
holds(1, in_tower((block,6),(block,8)), false, 68).
holds(1, in_tower((block,6),(block,9)), false, 68).
holds(1, in_tower((block,7),(block,1)), false, 68).
holds(1, in_tower((block,7),(block,2)), false, 68).
holds(1, in_tower((block,7),(block,3)), false, 68).
holds(1, in_tower((block,7),(block,4)), false, 68).
holds(1, in_tower((block,7),(block,5)), false, 68).
holds(1, in_tower((block,7),(block,6)), false, 68).
holds(1, in_tower((block,7),(block,7)), true, 68).
holds(1, in_tower((block,7),(block,8)), false, 68).
holds(1, in_tower((block,7),(block,9)), false, 68).
holds(1, in_tower((block,8),(block,1)), false, 68).
holds(1, in_tower((block,8),(block,2)), false, 68).
holds(1, in_tower((block,8),(block,3)), false, 68).
holds(1, in_tower((block,8),(block,4)), false, 68).
holds(1, in_tower((block,8),(block,5)), false, 68).
holds(1, in_tower((block,8),(block,6)), false, 68).
holds(1, in_tower((block,8),(block,7)), false, 68).
holds(1, in_tower((block,8),(block,8)), false, 68).
holds(1, in_tower((block,8),(block,9)), false, 68).
holds(1, in_tower((block,9),(block,1)), false, 68).
holds(1, in_tower((block,9),(block,2)), false, 68).
holds(1, in_tower((block,9),(block,3)), false, 68).
holds(1, in_tower((block,9),(block,4)), false, 68).
holds(1, in_tower((block,9),(block,5)), false, 68).
holds(1, in_tower((block,9),(block,6)), false, 68).
holds(1, in_tower((block,9),(block,7)), false, 68).
holds(1, in_tower((block,9),(block,8)), false, 68).
holds(1, in_tower((block,9),(block,9)), true, 68).
holds(1, on((block,1)), (block,2), 68).
holds(1, on((block,2)), (block,3), 68).
holds(1, on((block,3)), puzzle_room_table_left, 68).
holds(1, on((block,4)), nothing, 68).
holds(1, on((block,5)), (block,6), 68).
holds(1, on((block,6)), puzzle_room_table_right, 68).
holds(1, on((block,7)), puzzle_room_table_middle, 68).
holds(1, on((block,8)), nothing, 68).
holds(1, on((block,9)), puzzle_room_table_middle, 68).
holds(1, tower_base((block,1),puzzle_room_table), false, 68).
holds(1, tower_base((block,2),puzzle_room_table), false, 68).
holds(1, tower_base((block,3),puzzle_room_table), true, 68).
holds(1, tower_base((block,4),puzzle_room_table), false, 68).
holds(1, tower_base((block,5),puzzle_room_table), false, 68).
holds(1, tower_base((block,6),puzzle_room_table), true, 68).
holds(1, tower_base((block,7),puzzle_room_table), true, 68).
holds(1, tower_base((block,8),puzzle_room_table), false, 68).
holds(1, tower_base((block,9),puzzle_room_table), true, 68).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 68).
holds(2, complete_tower(blue,puzzle_room_table), false, 68).
holds(2, complete_tower(red,puzzle_room_table), true, 68).
holds(2, complete_tower(yellow,puzzle_room_table), false, 68).
holds(2, configuration(manipulator_arm_1), extended, 68).
holds(2, configuration(manipulator_arm_2), retracted, 68).
holds(2, configuration(puzzle_room_door), open, 68).
holds(2, configuration(starting_room_door), closed, 68).
holds(2, configuration(store_room_door), open, 68).
holds(2, grasping(manipulator_arm_1), (block,8), 68).
holds(2, grasping(manipulator_arm_2), nothing, 68).
holds(2, in((block,1)), puzzle_room, 68).
holds(2, in((block,2)), puzzle_room, 68).
holds(2, in((block,3)), puzzle_room, 68).
holds(2, in((block,4)), store_room, 68).
holds(2, in((block,5)), puzzle_room, 68).
holds(2, in((block,6)), puzzle_room, 68).
holds(2, in((block,7)), puzzle_room, 68).
holds(2, in((block,8)), store_room, 68).
holds(2, in((block,9)), puzzle_room, 68).
holds(2, in(manipulator_arm_1), store_room, 68).
holds(2, in(manipulator_arm_2), store_room, 68).
holds(2, in(puzzle_room_table), puzzle_room, 68).
holds(2, in(talos), store_room, 68).
holds(2, in_tower((block,1),(block,1)), false, 68).
holds(2, in_tower((block,1),(block,2)), false, 68).
holds(2, in_tower((block,1),(block,3)), false, 68).
holds(2, in_tower((block,1),(block,4)), false, 68).
holds(2, in_tower((block,1),(block,5)), false, 68).
holds(2, in_tower((block,1),(block,6)), false, 68).
holds(2, in_tower((block,1),(block,7)), false, 68).
holds(2, in_tower((block,1),(block,8)), false, 68).
holds(2, in_tower((block,1),(block,9)), false, 68).
holds(2, in_tower((block,2),(block,1)), false, 68).
holds(2, in_tower((block,2),(block,2)), false, 68).
holds(2, in_tower((block,2),(block,3)), false, 68).
holds(2, in_tower((block,2),(block,4)), false, 68).
holds(2, in_tower((block,2),(block,5)), false, 68).
holds(2, in_tower((block,2),(block,6)), false, 68).
holds(2, in_tower((block,2),(block,7)), false, 68).
holds(2, in_tower((block,2),(block,8)), false, 68).
holds(2, in_tower((block,2),(block,9)), false, 68).
holds(2, in_tower((block,3),(block,1)), true, 68).
holds(2, in_tower((block,3),(block,2)), true, 68).
holds(2, in_tower((block,3),(block,3)), true, 68).
holds(2, in_tower((block,3),(block,4)), false, 68).
holds(2, in_tower((block,3),(block,5)), false, 68).
holds(2, in_tower((block,3),(block,6)), false, 68).
holds(2, in_tower((block,3),(block,7)), false, 68).
holds(2, in_tower((block,3),(block,8)), false, 68).
holds(2, in_tower((block,3),(block,9)), false, 68).
holds(2, in_tower((block,4),(block,1)), false, 68).
holds(2, in_tower((block,4),(block,2)), false, 68).
holds(2, in_tower((block,4),(block,3)), false, 68).
holds(2, in_tower((block,4),(block,4)), false, 68).
holds(2, in_tower((block,4),(block,5)), false, 68).
holds(2, in_tower((block,4),(block,6)), false, 68).
holds(2, in_tower((block,4),(block,7)), false, 68).
holds(2, in_tower((block,4),(block,8)), false, 68).
holds(2, in_tower((block,4),(block,9)), false, 68).
holds(2, in_tower((block,5),(block,1)), false, 68).
holds(2, in_tower((block,5),(block,2)), false, 68).
holds(2, in_tower((block,5),(block,3)), false, 68).
holds(2, in_tower((block,5),(block,4)), false, 68).
holds(2, in_tower((block,5),(block,5)), false, 68).
holds(2, in_tower((block,5),(block,6)), false, 68).
holds(2, in_tower((block,5),(block,7)), false, 68).
holds(2, in_tower((block,5),(block,8)), false, 68).
holds(2, in_tower((block,5),(block,9)), false, 68).
holds(2, in_tower((block,6),(block,1)), false, 68).
holds(2, in_tower((block,6),(block,2)), false, 68).
holds(2, in_tower((block,6),(block,3)), false, 68).
holds(2, in_tower((block,6),(block,4)), false, 68).
holds(2, in_tower((block,6),(block,5)), true, 68).
holds(2, in_tower((block,6),(block,6)), true, 68).
holds(2, in_tower((block,6),(block,7)), false, 68).
holds(2, in_tower((block,6),(block,8)), false, 68).
holds(2, in_tower((block,6),(block,9)), false, 68).
holds(2, in_tower((block,7),(block,1)), false, 68).
holds(2, in_tower((block,7),(block,2)), false, 68).
holds(2, in_tower((block,7),(block,3)), false, 68).
holds(2, in_tower((block,7),(block,4)), false, 68).
holds(2, in_tower((block,7),(block,5)), false, 68).
holds(2, in_tower((block,7),(block,6)), false, 68).
holds(2, in_tower((block,7),(block,7)), true, 68).
holds(2, in_tower((block,7),(block,8)), false, 68).
holds(2, in_tower((block,7),(block,9)), false, 68).
holds(2, in_tower((block,8),(block,1)), false, 68).
holds(2, in_tower((block,8),(block,2)), false, 68).
holds(2, in_tower((block,8),(block,3)), false, 68).
holds(2, in_tower((block,8),(block,4)), false, 68).
holds(2, in_tower((block,8),(block,5)), false, 68).
holds(2, in_tower((block,8),(block,6)), false, 68).
holds(2, in_tower((block,8),(block,7)), false, 68).
holds(2, in_tower((block,8),(block,8)), false, 68).
holds(2, in_tower((block,8),(block,9)), false, 68).
holds(2, in_tower((block,9),(block,1)), false, 68).
holds(2, in_tower((block,9),(block,2)), false, 68).
holds(2, in_tower((block,9),(block,3)), false, 68).
holds(2, in_tower((block,9),(block,4)), false, 68).
holds(2, in_tower((block,9),(block,5)), false, 68).
holds(2, in_tower((block,9),(block,6)), false, 68).
holds(2, in_tower((block,9),(block,7)), false, 68).
holds(2, in_tower((block,9),(block,8)), false, 68).
holds(2, in_tower((block,9),(block,9)), true, 68).
holds(2, on((block,1)), (block,2), 68).
holds(2, on((block,2)), (block,3), 68).
holds(2, on((block,3)), puzzle_room_table, 68).
holds(2, on((block,4)), nothing, 68).
holds(2, on((block,5)), (block,6), 68).
holds(2, on((block,6)), puzzle_room_table, 68).
holds(2, on((block,7)), puzzle_room_table, 68).
holds(2, on((block,8)), nothing, 68).
holds(2, on((block,9)), puzzle_room_table, 68).
holds(2, tower_base((block,1),puzzle_room_table), false, 68).
holds(2, tower_base((block,2),puzzle_room_table), false, 68).
holds(2, tower_base((block,3),puzzle_room_table), true, 68).
holds(2, tower_base((block,4),puzzle_room_table), false, 68).
holds(2, tower_base((block,5),puzzle_room_table), false, 68).
holds(2, tower_base((block,6),puzzle_room_table), true, 68).
holds(2, tower_base((block,7),puzzle_room_table), true, 68).
holds(2, tower_base((block,8),puzzle_room_table), false, 68).
holds(2, tower_base((block,9),puzzle_room_table), true, 68).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 68).

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=73']

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 48})

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 43).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 44).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 45).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 46).
sub_goal(2, talos, move(hallway), in(talos), hallway, 47).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 48).

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=68, step_range=range(0, 69)

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-39] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=73']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA23103EE0>]
	incrementor = SolveIncrementor(step_start=68, step_increase=1, step_increase_initial=6, step_end_min=74, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1473.5183071999763, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 68), range_=None), IncPart(name='plan_module', args=('#inc', 68, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 68, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 68, 43, 48, 'sequential', 'false'), range_=None)]

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1256 rules

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0067245999998704065s

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.040070s.

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007523s with result Satisfiable.

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA22714D60>

[28-02-2022_23-08-40] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 68)
	('last_sgoals', 48)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 43)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA22714D60>)

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 68). %* None *%
#program plan_module(#inc, 68, false, false). %* None *%
#program optimisation_module(#inc, 68, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 68, 43, 48, sequential, false). %* None *%

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     67 : Current =     73
Incrementor step ends | Minimum  =     74 : Maximum =    300

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(68), Number(68)]), ('plan_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(68)]), ('plan_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(70), Number(68)]), ('plan_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(71), Number(68)]), ('plan_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(72), Number(68)]), ('plan_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(73), Number(68)]), ('plan_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.803838s.

[28-02-2022_23-08-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.313621s with result Satisfiable.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.117459199998848, Incremental time limit = None
Running cumulative time = 1.117459199998848, Cumulative time limit = 1473.5183071999763
Used memory = (RSS = 1880.238281Mb, VMS = 1880.914062Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.803838s, Solving = 0.313621s, Total = 1.117459s, Memory = (RSS = 1880.238281Mb, VMS = 1880.914062Mb), Step range = [68-73]), Calls = 1
Final Model :: Total atoms = 10175, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     73 : Current =     74
Incrementor step ends | Minimum  =     74 : Maximum =    300

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(74)]), ('state_module', [Number(74), Number(68)]), ('plan_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.190882s.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024739s with result Unsatisfiable.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21562059999996563, Incremental time limit = None
Running cumulative time = 1.3330797999988135, Cumulative time limit = 1473.5183071999763
Used memory = (RSS = 1880.699219Mb, VMS = 1882.687500Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     74 : Current =     75
Incrementor step ends | Minimum  =     74 : Maximum =    300

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(75)]), ('state_module', [Number(75), Number(68)]), ('plan_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.197580s.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031361s with result Unsatisfiable.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22894129999804136, Incremental time limit = None
Running cumulative time = 1.562021099996855, Cumulative time limit = 1473.5183071999763
Used memory = (RSS = 1881.726562Mb, VMS = 1882.964844Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     75 : Current =     76
Incrementor step ends | Minimum  =     74 : Maximum =    300

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(76)]), ('state_module', [Number(76), Number(68)]), ('plan_module', [Number(76), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(76), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.195231s.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039098s with result Unsatisfiable.

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23432950000096753, Incremental time limit = None
Running cumulative time = 1.7963505999978224, Cumulative time limit = 1473.5183071999763
Used memory = (RSS = 1882.781250Mb, VMS = 1883.273438Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     76 : Current =     77
Incrementor step ends | Minimum  =     74 : Maximum =    300

[28-02-2022_23-08-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(77)]), ('state_module', [Number(77), Number(68)]), ('plan_module', [Number(77), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(77), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.204714s.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046906s with result Unsatisfiable.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2516197999993892, Incremental time limit = None
Running cumulative time = 2.0479703999972116, Cumulative time limit = 1473.5183071999763
Used memory = (RSS = 1884.343750Mb, VMS = 1883.714844Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     77 : Current =     78
Incrementor step ends | Minimum  =     74 : Maximum =    300

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(78)]), ('state_module', [Number(78), Number(68)]), ('plan_module', [Number(78), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(78), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(68), Number(43), Number(48), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.214828s.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.077475s with result Satisfiable.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29230310000093596, Incremental time limit = None
Running cumulative time = 2.3402734999981476, Cumulative time limit = 1473.5183071999763
Used memory = (RSS = 1886.003906Mb, VMS = 1889.136719Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.807075s, Solving = 0.533199s, Total = 2.340273s, Memory = (RSS = 1886.003906Mb, VMS = 1889.136719Mb), Step range = [68-78]), Calls = 6
Final Model :: Total atoms = 13828, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.803838s, Solving = 0.313621s, Total = 1.117459s, Memory = (RSS = 1880.238281Mb, VMS = 1880.914062Mb), Step range = [68-73]
2 : Statistics :: Grounding = 0.190882s, Solving = 0.024739s, Total = 0.215621s, Memory = (RSS = 1880.699219Mb, VMS = 1882.687500Mb), Step range = [74-74]
3 : Statistics :: Grounding = 0.197580s, Solving = 0.031361s, Total = 0.228941s, Memory = (RSS = 1881.726562Mb, VMS = 1882.964844Mb), Step range = [75-75]
4 : Statistics :: Grounding = 0.195231s, Solving = 0.039098s, Total = 0.234330s, Memory = (RSS = 1882.781250Mb, VMS = 1883.273438Mb), Step range = [76-76]
5 : Statistics :: Grounding = 0.204714s, Solving = 0.046906s, Total = 0.251620s, Memory = (RSS = 1884.343750Mb, VMS = 1883.714844Mb), Step range = [77-77]
6 : Statistics :: Grounding = 0.214828s, Solving = 0.077475s, Total = 0.292303s, Memory = (RSS = 1886.003906Mb, VMS = 1889.136719Mb), Step range = [78-78]

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.340273s due to: Stop condition reached.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-08-42] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 29, 50: 30, 51: 31, 52: 31, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36, 58: 37, 59: 38, 60: 39, 61: 39, 62: 40, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 48, 29: 49, 30: 50, 31: 52, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57, 37: 58, 38: 59, 39: 61, 40: 64, 41: 66, 42: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 15, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 22, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 32, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 29, 50: 30, 51: 31, 52: 31, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36, 58: 37, 59: 38, 60: 39, 61: 39, 62: 40, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42, 69: 43, 70: 44, 71: 44, 72: 45, 73: 45, 74: 46, 75: 47, 76: 48, 77: 48, 78: 48}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 48, 29: 49, 30: 50, 31: 52, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57, 37: 58, 38: 59, 39: 61, 40: 64, 41: 66, 42: 68, 43: 69, 44: 71, 45: 73, 46: 74, 47: 75, 48: 78}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 15, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 22, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 32, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 48, Last requested goal index = 48, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.807075s, Solving = 0.533199s, Total = 2.340273s, Memory = (RSS = 1886.003906Mb, VMS = 1889.136719Mb), Step range = [68-78]), Calls = 6
Model :: Total atoms = 13828, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 10 :: Actions = 10                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 27:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 51:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 53:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 57:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 58:
    Current Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,1))
Step 59:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 61:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 67:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 68:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 69:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 70:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 72:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 73:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 74:
    Current Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 75:
    Current Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 76:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 77:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 55 : Goals achieved = 48 : Goals unachieved = 7 : Complete = False

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 25, Sub-goal Stage Range = [31-55]
Division points [total=3] : [(Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 42, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 48, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [49-55]

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=78, step_range=range(0, 79)

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [49-55], problem number = 8, increment number = 8

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 49)
	('last_sgoals', 55)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1644.903614399991)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [49-55] : Concurrency disabled : Minimum search length bound enabled with value 84

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 49
last_sgoals = 55
start_step = 78
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 84

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[28-02-2022_23-08-43] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-08-43] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 78 as problem start state.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,8))', 'S': 78})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 78})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 78})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 78})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 78})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 78})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 78})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 78})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 78})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,8)', 'S': 78})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 78})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 78})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 78})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 78})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 78})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 78})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 78})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 78})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 78})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 78})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 78})

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 78).
holds(1, complete_tower(red,puzzle_room_table), true, 78).
holds(1, complete_tower(yellow,puzzle_room_table), false, 78).
holds(1, configuration(manipulator_end_1), aligned_with((block,8)), 78).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 78).
holds(1, configuration(manipulator_limb_1), retracted, 78).
holds(1, configuration(manipulator_limb_2), retracted, 78).
holds(1, configuration(puzzle_room_door), open, 78).
holds(1, configuration(starting_room_door), closed, 78).
holds(1, configuration(store_room_door), open, 78).
holds(1, grasping(manipulator_arm_1), (block,8), 78).
holds(1, grasping(manipulator_arm_2), (block,4), 78).
holds(1, grasping(manipulator_end_1), (block,8), 78).
holds(1, grasping(manipulator_end_2), (block,4), 78).
holds(1, in((block,1)), (puzzle_room,1), 78).
holds(1, in((block,2)), (puzzle_room,1), 78).
holds(1, in((block,3)), (puzzle_room,1), 78).
holds(1, in((block,4)), (puzzle_room,0), 78).
holds(1, in((block,5)), (puzzle_room,1), 78).
holds(1, in((block,6)), (puzzle_room,1), 78).
holds(1, in((block,7)), (puzzle_room,1), 78).
holds(1, in((block,8)), (puzzle_room,0), 78).
holds(1, in((block,9)), (puzzle_room,1), 78).
holds(1, in(manipulator_arm_1), (puzzle_room,0), 78).
holds(1, in(manipulator_arm_2), (puzzle_room,0), 78).
holds(1, in(manipulator_end_1), (puzzle_room,0), 78).
holds(1, in(manipulator_end_2), (puzzle_room,0), 78).
holds(1, in(manipulator_limb_1), (puzzle_room,0), 78).
holds(1, in(manipulator_limb_2), (puzzle_room,0), 78).
holds(1, in(puzzle_room_table), (puzzle_room,1), 78).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 78).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 78).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 78).
holds(1, in(talos), (puzzle_room,0), 78).
holds(1, in_tower((block,1),(block,1)), false, 78).
holds(1, in_tower((block,1),(block,2)), false, 78).
holds(1, in_tower((block,1),(block,3)), false, 78).
holds(1, in_tower((block,1),(block,4)), false, 78).
holds(1, in_tower((block,1),(block,5)), false, 78).
holds(1, in_tower((block,1),(block,6)), false, 78).
holds(1, in_tower((block,1),(block,7)), false, 78).
holds(1, in_tower((block,1),(block,8)), false, 78).
holds(1, in_tower((block,1),(block,9)), false, 78).
holds(1, in_tower((block,2),(block,1)), false, 78).
holds(1, in_tower((block,2),(block,2)), false, 78).
holds(1, in_tower((block,2),(block,3)), false, 78).
holds(1, in_tower((block,2),(block,4)), false, 78).
holds(1, in_tower((block,2),(block,5)), false, 78).
holds(1, in_tower((block,2),(block,6)), false, 78).
holds(1, in_tower((block,2),(block,7)), false, 78).
holds(1, in_tower((block,2),(block,8)), false, 78).
holds(1, in_tower((block,2),(block,9)), false, 78).
holds(1, in_tower((block,3),(block,1)), true, 78).
holds(1, in_tower((block,3),(block,2)), true, 78).
holds(1, in_tower((block,3),(block,3)), true, 78).
holds(1, in_tower((block,3),(block,4)), false, 78).
holds(1, in_tower((block,3),(block,5)), false, 78).
holds(1, in_tower((block,3),(block,6)), false, 78).
holds(1, in_tower((block,3),(block,7)), false, 78).
holds(1, in_tower((block,3),(block,8)), false, 78).
holds(1, in_tower((block,3),(block,9)), false, 78).
holds(1, in_tower((block,4),(block,1)), false, 78).
holds(1, in_tower((block,4),(block,2)), false, 78).
holds(1, in_tower((block,4),(block,3)), false, 78).
holds(1, in_tower((block,4),(block,4)), false, 78).
holds(1, in_tower((block,4),(block,5)), false, 78).
holds(1, in_tower((block,4),(block,6)), false, 78).
holds(1, in_tower((block,4),(block,7)), false, 78).
holds(1, in_tower((block,4),(block,8)), false, 78).
holds(1, in_tower((block,4),(block,9)), false, 78).
holds(1, in_tower((block,5),(block,1)), false, 78).
holds(1, in_tower((block,5),(block,2)), false, 78).
holds(1, in_tower((block,5),(block,3)), false, 78).
holds(1, in_tower((block,5),(block,4)), false, 78).
holds(1, in_tower((block,5),(block,5)), false, 78).
holds(1, in_tower((block,5),(block,6)), false, 78).
holds(1, in_tower((block,5),(block,7)), false, 78).
holds(1, in_tower((block,5),(block,8)), false, 78).
holds(1, in_tower((block,5),(block,9)), false, 78).
holds(1, in_tower((block,6),(block,1)), false, 78).
holds(1, in_tower((block,6),(block,2)), false, 78).
holds(1, in_tower((block,6),(block,3)), false, 78).
holds(1, in_tower((block,6),(block,4)), false, 78).
holds(1, in_tower((block,6),(block,5)), true, 78).
holds(1, in_tower((block,6),(block,6)), true, 78).
holds(1, in_tower((block,6),(block,7)), false, 78).
holds(1, in_tower((block,6),(block,8)), false, 78).
holds(1, in_tower((block,6),(block,9)), false, 78).
holds(1, in_tower((block,7),(block,1)), false, 78).
holds(1, in_tower((block,7),(block,2)), false, 78).
holds(1, in_tower((block,7),(block,3)), false, 78).
holds(1, in_tower((block,7),(block,4)), false, 78).
holds(1, in_tower((block,7),(block,5)), false, 78).
holds(1, in_tower((block,7),(block,6)), false, 78).
holds(1, in_tower((block,7),(block,7)), true, 78).
holds(1, in_tower((block,7),(block,8)), false, 78).
holds(1, in_tower((block,7),(block,9)), false, 78).
holds(1, in_tower((block,8),(block,1)), false, 78).
holds(1, in_tower((block,8),(block,2)), false, 78).
holds(1, in_tower((block,8),(block,3)), false, 78).
holds(1, in_tower((block,8),(block,4)), false, 78).
holds(1, in_tower((block,8),(block,5)), false, 78).
holds(1, in_tower((block,8),(block,6)), false, 78).
holds(1, in_tower((block,8),(block,7)), false, 78).
holds(1, in_tower((block,8),(block,8)), false, 78).
holds(1, in_tower((block,8),(block,9)), false, 78).
holds(1, in_tower((block,9),(block,1)), false, 78).
holds(1, in_tower((block,9),(block,2)), false, 78).
holds(1, in_tower((block,9),(block,3)), false, 78).
holds(1, in_tower((block,9),(block,4)), false, 78).
holds(1, in_tower((block,9),(block,5)), false, 78).
holds(1, in_tower((block,9),(block,6)), false, 78).
holds(1, in_tower((block,9),(block,7)), false, 78).
holds(1, in_tower((block,9),(block,8)), false, 78).
holds(1, in_tower((block,9),(block,9)), true, 78).
holds(1, on((block,1)), (block,2), 78).
holds(1, on((block,2)), (block,3), 78).
holds(1, on((block,3)), puzzle_room_table_left, 78).
holds(1, on((block,4)), nothing, 78).
holds(1, on((block,5)), (block,6), 78).
holds(1, on((block,6)), puzzle_room_table_right, 78).
holds(1, on((block,7)), puzzle_room_table_middle, 78).
holds(1, on((block,8)), nothing, 78).
holds(1, on((block,9)), puzzle_room_table_middle, 78).
holds(1, tower_base((block,1),puzzle_room_table), false, 78).
holds(1, tower_base((block,2),puzzle_room_table), false, 78).
holds(1, tower_base((block,3),puzzle_room_table), true, 78).
holds(1, tower_base((block,4),puzzle_room_table), false, 78).
holds(1, tower_base((block,5),puzzle_room_table), false, 78).
holds(1, tower_base((block,6),puzzle_room_table), true, 78).
holds(1, tower_base((block,7),puzzle_room_table), true, 78).
holds(1, tower_base((block,8),puzzle_room_table), false, 78).
holds(1, tower_base((block,9),puzzle_room_table), true, 78).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 78).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 78).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 78).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 78).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 78).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 78).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 78).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 78).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 78).
holds(2, complete_tower(blue,puzzle_room_table), false, 78).
holds(2, complete_tower(red,puzzle_room_table), true, 78).
holds(2, complete_tower(yellow,puzzle_room_table), false, 78).
holds(2, configuration(manipulator_arm_1), retracted, 78).
holds(2, configuration(manipulator_arm_2), retracted, 78).
holds(2, configuration(puzzle_room_door), open, 78).
holds(2, configuration(starting_room_door), closed, 78).
holds(2, configuration(store_room_door), open, 78).
holds(2, grasping(manipulator_arm_1), (block,8), 78).
holds(2, grasping(manipulator_arm_2), (block,4), 78).
holds(2, in((block,1)), puzzle_room, 78).
holds(2, in((block,2)), puzzle_room, 78).
holds(2, in((block,3)), puzzle_room, 78).
holds(2, in((block,4)), puzzle_room, 78).
holds(2, in((block,5)), puzzle_room, 78).
holds(2, in((block,6)), puzzle_room, 78).
holds(2, in((block,7)), puzzle_room, 78).
holds(2, in((block,8)), puzzle_room, 78).
holds(2, in((block,9)), puzzle_room, 78).
holds(2, in(manipulator_arm_1), puzzle_room, 78).
holds(2, in(manipulator_arm_2), puzzle_room, 78).
holds(2, in(puzzle_room_table), puzzle_room, 78).
holds(2, in(talos), puzzle_room, 78).
holds(2, in_tower((block,1),(block,1)), false, 78).
holds(2, in_tower((block,1),(block,2)), false, 78).
holds(2, in_tower((block,1),(block,3)), false, 78).
holds(2, in_tower((block,1),(block,4)), false, 78).
holds(2, in_tower((block,1),(block,5)), false, 78).
holds(2, in_tower((block,1),(block,6)), false, 78).
holds(2, in_tower((block,1),(block,7)), false, 78).
holds(2, in_tower((block,1),(block,8)), false, 78).
holds(2, in_tower((block,1),(block,9)), false, 78).
holds(2, in_tower((block,2),(block,1)), false, 78).
holds(2, in_tower((block,2),(block,2)), false, 78).
holds(2, in_tower((block,2),(block,3)), false, 78).
holds(2, in_tower((block,2),(block,4)), false, 78).
holds(2, in_tower((block,2),(block,5)), false, 78).
holds(2, in_tower((block,2),(block,6)), false, 78).
holds(2, in_tower((block,2),(block,7)), false, 78).
holds(2, in_tower((block,2),(block,8)), false, 78).
holds(2, in_tower((block,2),(block,9)), false, 78).
holds(2, in_tower((block,3),(block,1)), true, 78).
holds(2, in_tower((block,3),(block,2)), true, 78).
holds(2, in_tower((block,3),(block,3)), true, 78).
holds(2, in_tower((block,3),(block,4)), false, 78).
holds(2, in_tower((block,3),(block,5)), false, 78).
holds(2, in_tower((block,3),(block,6)), false, 78).
holds(2, in_tower((block,3),(block,7)), false, 78).
holds(2, in_tower((block,3),(block,8)), false, 78).
holds(2, in_tower((block,3),(block,9)), false, 78).
holds(2, in_tower((block,4),(block,1)), false, 78).
holds(2, in_tower((block,4),(block,2)), false, 78).
holds(2, in_tower((block,4),(block,3)), false, 78).
holds(2, in_tower((block,4),(block,4)), false, 78).
holds(2, in_tower((block,4),(block,5)), false, 78).
holds(2, in_tower((block,4),(block,6)), false, 78).
holds(2, in_tower((block,4),(block,7)), false, 78).
holds(2, in_tower((block,4),(block,8)), false, 78).
holds(2, in_tower((block,4),(block,9)), false, 78).
holds(2, in_tower((block,5),(block,1)), false, 78).
holds(2, in_tower((block,5),(block,2)), false, 78).
holds(2, in_tower((block,5),(block,3)), false, 78).
holds(2, in_tower((block,5),(block,4)), false, 78).
holds(2, in_tower((block,5),(block,5)), false, 78).
holds(2, in_tower((block,5),(block,6)), false, 78).
holds(2, in_tower((block,5),(block,7)), false, 78).
holds(2, in_tower((block,5),(block,8)), false, 78).
holds(2, in_tower((block,5),(block,9)), false, 78).
holds(2, in_tower((block,6),(block,1)), false, 78).
holds(2, in_tower((block,6),(block,2)), false, 78).
holds(2, in_tower((block,6),(block,3)), false, 78).
holds(2, in_tower((block,6),(block,4)), false, 78).
holds(2, in_tower((block,6),(block,5)), true, 78).
holds(2, in_tower((block,6),(block,6)), true, 78).
holds(2, in_tower((block,6),(block,7)), false, 78).
holds(2, in_tower((block,6),(block,8)), false, 78).
holds(2, in_tower((block,6),(block,9)), false, 78).
holds(2, in_tower((block,7),(block,1)), false, 78).
holds(2, in_tower((block,7),(block,2)), false, 78).
holds(2, in_tower((block,7),(block,3)), false, 78).
holds(2, in_tower((block,7),(block,4)), false, 78).
holds(2, in_tower((block,7),(block,5)), false, 78).
holds(2, in_tower((block,7),(block,6)), false, 78).
holds(2, in_tower((block,7),(block,7)), true, 78).
holds(2, in_tower((block,7),(block,8)), false, 78).
holds(2, in_tower((block,7),(block,9)), false, 78).
holds(2, in_tower((block,8),(block,1)), false, 78).
holds(2, in_tower((block,8),(block,2)), false, 78).
holds(2, in_tower((block,8),(block,3)), false, 78).
holds(2, in_tower((block,8),(block,4)), false, 78).
holds(2, in_tower((block,8),(block,5)), false, 78).
holds(2, in_tower((block,8),(block,6)), false, 78).
holds(2, in_tower((block,8),(block,7)), false, 78).
holds(2, in_tower((block,8),(block,8)), false, 78).
holds(2, in_tower((block,8),(block,9)), false, 78).
holds(2, in_tower((block,9),(block,1)), false, 78).
holds(2, in_tower((block,9),(block,2)), false, 78).
holds(2, in_tower((block,9),(block,3)), false, 78).
holds(2, in_tower((block,9),(block,4)), false, 78).
holds(2, in_tower((block,9),(block,5)), false, 78).
holds(2, in_tower((block,9),(block,6)), false, 78).
holds(2, in_tower((block,9),(block,7)), false, 78).
holds(2, in_tower((block,9),(block,8)), false, 78).
holds(2, in_tower((block,9),(block,9)), true, 78).
holds(2, on((block,1)), (block,2), 78).
holds(2, on((block,2)), (block,3), 78).
holds(2, on((block,3)), puzzle_room_table, 78).
holds(2, on((block,4)), nothing, 78).
holds(2, on((block,5)), (block,6), 78).
holds(2, on((block,6)), puzzle_room_table, 78).
holds(2, on((block,7)), puzzle_room_table, 78).
holds(2, on((block,8)), nothing, 78).
holds(2, on((block,9)), puzzle_room_table, 78).
holds(2, tower_base((block,1),puzzle_room_table), false, 78).
holds(2, tower_base((block,2),puzzle_room_table), false, 78).
holds(2, tower_base((block,3),puzzle_room_table), true, 78).
holds(2, tower_base((block,4),puzzle_room_table), false, 78).
holds(2, tower_base((block,5),puzzle_room_table), false, 78).
holds(2, tower_base((block,6),puzzle_room_table), true, 78).
holds(2, tower_base((block,7),puzzle_room_table), true, 78).
holds(2, tower_base((block,8),puzzle_room_table), false, 78).
holds(2, tower_base((block,9),puzzle_room_table), true, 78).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 78).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 78).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 78).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 78).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 78).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 78).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 78).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 78).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 78).

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=84']

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 49})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 50})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 51})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 52})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'I': 53})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 55})

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 49).
sub_goal(2, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 50).
sub_goal(2, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 51).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 52).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 53).
sub_goal(2, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 54).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 55).

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=78, step_range=range(0, 79)

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=84']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA79425430>]
	incrementor = SolveIncrementor(step_start=78, step_increase=1, step_increase_initial=7, step_end_min=85, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1471.1780336999782, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 78), range_=None), IncPart(name='plan_module', args=('#inc', 78, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 78, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 78, 49, 55, 'sequential', 'false'), range_=None)]

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1257 rules

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006671799999821815s

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039198s.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007038s with result Satisfiable.

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7961EEA0>

[28-02-2022_23-08-43] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 78)
	('last_sgoals', 55)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 49)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7961EEA0>)

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 78). %* None *%
#program plan_module(#inc, 78, false, true). %* None *%
#program optimisation_module(#inc, 78, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 78, 49, 55, sequential, false). %* None *%

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     77 : Current =     84
Incrementor step ends | Minimum  =     85 : Maximum =    300

[28-02-2022_23-08-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(78), Number(78)]), ('plan_module', [Number(78), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(78), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(79), Number(78)]), ('plan_module', [Number(79), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(79), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(80), Number(78)]), ('plan_module', [Number(80), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(80), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(81), Number(78)]), ('plan_module', [Number(81), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(81), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(82), Number(78)]), ('plan_module', [Number(82), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(82), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(83), Number(78)]), ('plan_module', [Number(83), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(83), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(84), Number(78)]), ('plan_module', [Number(84), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(84), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.980361s.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.338102s with result Satisfiable.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.3184622999997373, Incremental time limit = None
Running cumulative time = 1.3184622999997373, Cumulative time limit = 1471.1780336999782
Used memory = (RSS = 1880.953125Mb, VMS = 1880.386719Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.980361s, Solving = 0.338102s, Total = 1.318462s, Memory = (RSS = 1880.953125Mb, VMS = 1880.386719Mb), Step range = [78-84]), Calls = 1
Final Model :: Total atoms = 12963, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     84 : Current =     85
Incrementor step ends | Minimum  =     85 : Maximum =    300

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(85), Number(78)]), ('plan_module', [Number(85), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(85), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.211104s.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042382s with result Unsatisfiable.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2534856000020227, Incremental time limit = None
Running cumulative time = 1.57194790000176, Cumulative time limit = 1471.1780336999782
Used memory = (RSS = 1882.371094Mb, VMS = 1883.691406Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     85 : Maximum =    300

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(78)]), ('plan_module', [Number(86), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(86), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.204802s.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049815s with result Unsatisfiable.

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2546167999989848, Incremental time limit = None
Running cumulative time = 1.8265647000007448, Cumulative time limit = 1471.1780336999782
Used memory = (RSS = 1883.894531Mb, VMS = 1884.093750Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     85 : Maximum =    300

[28-02-2022_23-08-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(78)]), ('plan_module', [Number(87), Number(78), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(87), Number(78), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(78), Number(49), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.215859s.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059971s with result Satisfiable.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27582989999973506, Incremental time limit = None
Running cumulative time = 2.10239460000048, Cumulative time limit = 1471.1780336999782
Used memory = (RSS = 1885.871094Mb, VMS = 1885.050781Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.612126s, Solving = 0.490269s, Total = 2.102395s, Memory = (RSS = 1885.871094Mb, VMS = 1885.050781Mb), Step range = [78-87]), Calls = 4
Final Model :: Total atoms = 16089, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.980361s, Solving = 0.338102s, Total = 1.318462s, Memory = (RSS = 1880.953125Mb, VMS = 1880.386719Mb), Step range = [78-84]
2 : Statistics :: Grounding = 0.211104s, Solving = 0.042382s, Total = 0.253486s, Memory = (RSS = 1882.371094Mb, VMS = 1883.691406Mb), Step range = [85-85]
3 : Statistics :: Grounding = 0.204802s, Solving = 0.049815s, Total = 0.254617s, Memory = (RSS = 1883.894531Mb, VMS = 1884.093750Mb), Step range = [86-86]
4 : Statistics :: Grounding = 0.215859s, Solving = 0.059971s, Total = 0.275830s, Memory = (RSS = 1885.871094Mb, VMS = 1885.050781Mb), Step range = [87-87]

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.102395s due to: Stop condition reached.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 29, 50: 30, 51: 31, 52: 31, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36, 58: 37, 59: 38, 60: 39, 61: 39, 62: 40, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42, 69: 43, 70: 44, 71: 44, 72: 45, 73: 45, 74: 46, 75: 47, 76: 48, 77: 48, 78: 48}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 48, 29: 49, 30: 50, 31: 52, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57, 37: 58, 38: 59, 39: 61, 40: 64, 41: 66, 42: 68, 43: 69, 44: 71, 45: 73, 46: 74, 47: 75, 48: 78}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 15, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 22, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 32, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 19, 37: 20, 38: 21, 39: 22, 40: 22, 41: 23, 42: 23, 43: 23, 44: 24, 45: 25, 46: 26, 47: 27, 48: 28, 49: 29, 50: 30, 51: 31, 52: 31, 53: 32, 54: 33, 55: 34, 56: 35, 57: 36, 58: 37, 59: 38, 60: 39, 61: 39, 62: 40, 63: 40, 64: 40, 65: 41, 66: 41, 67: 42, 68: 42, 69: 43, 70: 44, 71: 44, 72: 45, 73: 45, 74: 46, 75: 47, 76: 48, 77: 48, 78: 48, 79: 49, 80: 49, 81: 49, 82: 50, 83: 51, 84: 52, 85: 53, 86: 54, 87: 55}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 36, 20: 37, 21: 38, 22: 40, 23: 43, 24: 44, 25: 45, 26: 46, 27: 47, 28: 48, 29: 49, 30: 50, 31: 52, 32: 53, 33: 54, 34: 55, 35: 56, 36: 57, 37: 58, 38: 59, 39: 61, 40: 64, 41: 66, 42: 68, 43: 69, 44: 71, 45: 73, 46: 74, 47: 75, 48: 78, 49: 81, 50: 82, 51: 83, 52: 84, 53: 85, 54: 86, 55: 87}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 8, 25: 9, 26: 10, 27: 11, 28: 12, 29: 13, 30: 14, 31: 15, 32: 15, 33: 16, 34: 17, 35: 18, 36: 19, 37: 20, 38: 21, 39: 21, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 24, 46: 24, 47: 24, 48: 24, 49: 25, 50: 25, 51: 26, 52: 27, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 22, 8: 24, 9: 25, 10: 26, 11: 27, 12: 28, 13: 29, 14: 30, 15: 32, 16: 33, 17: 34, 18: 35, 19: 36, 20: 37, 21: 40, 22: 42, 23: 44, 24: 48, 25: 50, 26: 51, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 55, Last requested goal index = 55, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.612126s, Solving = 0.490269s, Total = 2.102395s, Memory = (RSS = 1885.871094Mb, VMS = 1885.050781Mb), Step range = [78-87]), Calls = 4
Model :: Total atoms = 16089, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 27:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 36:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 38:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 39:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 40:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 23] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 44:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 46:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 49:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 50:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 51:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 53:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 34] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 56:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 57:
    Current Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 36] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
Step 58:
    Current Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 37] talos : release(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,1))
Step 59:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 61:
    Current Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 39] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 62:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 40] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 67:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 68:
    Current Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 42] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 69:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 70:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 72:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 73:
    Current Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 45] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 74:
    Current Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 46] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 75:
    Current Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 47] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 76:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 77:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 48] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 79:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 80:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 81:
    Current Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 49] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 82:
    Current Sub-goals:
        [Index = 50] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 50] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_1,(block,8),(block,9))
Step 83:
    Current Sub-goals:
        [Index = 51] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 51] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,8))
Step 84:
    Current Sub-goals:
        [Index = 52] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 52] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,7)))
Step 85:
    Current Sub-goals:
        [Index = 53] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 53] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,7))
Step 86:
    Current Sub-goals:
        [Index = 54] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 54] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_1,(block,7),(block,8))
Step 87:
    Current Sub-goals:
        [Index = 55] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 55] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=87, step_range=range(0, 88)

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 87, Actions = 87

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 152.43692590000137, Average ground wait time = 22.025111575001574, Absolution time = 175.82797530001335)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  29, AC =  29, CF = 1.0, GT =   3.66s, ST = 138.29s, OT = 0.00s, TT = 141.95s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  55, AC =  55, CF = 1.0, GT =   7.20s, ST =   5.94s, OT = 0.00s, TT =  13.14s, EF = (LE = 1.9, AC = 1.9), ED = (LE = 1.8, AC = 1.8), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  87, AC =  87, CF = 1.0, GT =  15.56s, ST =   5.18s, OT = 0.00s, TT =  20.73s, EF = (LE = 1.6, AC = 1.6), ED = (LE = 0.9, AC = 0.9), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=87, step_range=range(0, 88)

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-08-45] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 49 : Time 185.572051s           
      ================================================      

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', 3)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 2 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False
Level = 1 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 3, Highest = 3.

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [1-3].

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 3] classical : Concurrency disabled : Minimum search length bound disabled with value 0

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[28-02-2022_23-08-45] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-08-45] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 126 rules into program part ash_initial_state:

holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), store_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_table), true, 0).
holds(3, tower_base((block,8),puzzle_room_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0).

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 294 rules into program part ash_goal_state:

final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA79425C10>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800.0, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 789 rules

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004692900000009104s

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025750s.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003785s with result Satisfiable.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7A262B80>

[28-02-2022_23-08-45] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7A262B80>)

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.113742s.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011136s with result Unsatisfiable.

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12487829999918176, Incremental time limit = None
Running cumulative time = 0.12487829999918176, Cumulative time limit = 1800.0
Used memory = (RSS = 1865.050781Mb, VMS = 1864.054688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089664s.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004672s with result Unsatisfiable.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09433569999782776, Incremental time limit = None
Running cumulative time = 0.21921399999700952, Cumulative time limit = 1800.0
Used memory = (RSS = 1865.050781Mb, VMS = 1864.054688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098404s.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011575s with result Unsatisfiable.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10997959999986051, Incremental time limit = None
Running cumulative time = 0.32919359999687003, Cumulative time limit = 1800.0
Used memory = (RSS = 1865.050781Mb, VMS = 1864.054688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098824s.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012223s with result Unsatisfiable.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11104660000091826, Incremental time limit = None
Running cumulative time = 0.4402401999977883, Cumulative time limit = 1800.0
Used memory = (RSS = 1865.050781Mb, VMS = 1864.054688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099206s.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012744s with result Unsatisfiable.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11195070000030682, Incremental time limit = None
Running cumulative time = 0.5521908999980951, Cumulative time limit = 1800.0
Used memory = (RSS = 1865.062500Mb, VMS = 1864.054688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101829s.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013640s with result Unsatisfiable.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1154685999990761, Incremental time limit = None
Running cumulative time = 0.6676594999971712, Cumulative time limit = 1800.0
Used memory = (RSS = 1865.066406Mb, VMS = 1864.054688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104364s.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017024s with result Unsatisfiable.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12138799999956973, Incremental time limit = None
Running cumulative time = 0.789047499996741, Cumulative time limit = 1800.0
Used memory = (RSS = 1865.066406Mb, VMS = 1864.054688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116052s.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020111s with result Unsatisfiable.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13616340000044147, Incremental time limit = None
Running cumulative time = 0.9252108999971824, Cumulative time limit = 1800.0
Used memory = (RSS = 1866.234375Mb, VMS = 1865.222656Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108952s.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020027s with result Unsatisfiable.

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12897960000009334, Incremental time limit = None
Running cumulative time = 1.0541904999972758, Cumulative time limit = 1800.0
Used memory = (RSS = 1866.417969Mb, VMS = 1865.406250Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.111886s.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024290s with result Unsatisfiable.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.136176300000443, Incremental time limit = None
Running cumulative time = 1.1903667999977188, Cumulative time limit = 1800.0
Used memory = (RSS = 1866.605469Mb, VMS = 1865.593750Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.113708s.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030725s with result Unsatisfiable.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1444325000011304, Incremental time limit = None
Running cumulative time = 1.3347992999988492, Cumulative time limit = 1800.0
Used memory = (RSS = 1866.789062Mb, VMS = 1865.777344Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116731s.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046388s with result Unsatisfiable.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1631190999996761, Incremental time limit = None
Running cumulative time = 1.4979183999985253, Cumulative time limit = 1800.0
Used memory = (RSS = 1866.972656Mb, VMS = 1865.960938Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116583s.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.085549s with result Unsatisfiable.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20213259999763977, Incremental time limit = None
Running cumulative time = 1.700050999996165, Cumulative time limit = 1800.0
Used memory = (RSS = 1872.722656Mb, VMS = 1873.660156Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120217s.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.111817s with result Unsatisfiable.

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23203359999934037, Incremental time limit = None
Running cumulative time = 1.9320845999955054, Cumulative time limit = 1800.0
Used memory = (RSS = 1873.457031Mb, VMS = 1873.847656Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)])]

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123574s.

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.146913s with result Unsatisfiable.

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.270486899999014, Incremental time limit = None
Running cumulative time = 2.2025714999945194, Cumulative time limit = 1800.0
Used memory = (RSS = 1874.019531Mb, VMS = 1874.031250Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125498s.

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.251749s with result Unsatisfiable.

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3772469999985333, Incremental time limit = None
Running cumulative time = 2.5798184999930527, Cumulative time limit = 1800.0
Used memory = (RSS = 1874.703125Mb, VMS = 1874.218750Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137362s.

[28-02-2022_23-08-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.389656s with result Unsatisfiable.

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5270182999993267, Incremental time limit = None
Running cumulative time = 3.1068367999923794, Cumulative time limit = 1800.0
Used memory = (RSS = 1875.257812Mb, VMS = 1874.402344Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)])]

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.128359s.

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.651213s with result Unsatisfiable.

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7795718999987002, Incremental time limit = None
Running cumulative time = 3.8864086999910796, Cumulative time limit = 1800.0
Used memory = (RSS = 1876.078125Mb, VMS = 1878.343750Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)])]

[28-02-2022_23-08-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131451s.

[28-02-2022_23-08-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.722084s with result Unsatisfiable.

[28-02-2022_23-08-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8535346000007848, Incremental time limit = None
Running cumulative time = 4.7399432999918645, Cumulative time limit = 1800.0
Used memory = (RSS = 1876.734375Mb, VMS = 1878.527344Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)])]

[28-02-2022_23-08-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.144680s.

[28-02-2022_23-08-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.079623s with result Unsatisfiable.

[28-02-2022_23-08-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.2243025000007037, Incremental time limit = None
Running cumulative time = 5.964245799992568, Cumulative time limit = 1800.0
Used memory = (RSS = 1877.343750Mb, VMS = 1878.714844Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)])]

[28-02-2022_23-08-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146923s.

[28-02-2022_23-08-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.650006s with result Unsatisfiable.

[28-02-2022_23-08-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.7969293000005564, Incremental time limit = None
Running cumulative time = 7.761175099993125, Cumulative time limit = 1800.0
Used memory = (RSS = 1878.007812Mb, VMS = 1878.898438Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)])]

[28-02-2022_23-08-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150987s.

[28-02-2022_23-08-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-08-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 3.175170s with result Unsatisfiable.

[28-02-2022_23-08-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.3261560999999347, Incremental time limit = None
Running cumulative time = 11.08733119999306, Cumulative time limit = 1800.0
Used memory = (RSS = 1878.757812Mb, VMS = 1879.082031Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-08-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-08-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)])]

[28-02-2022_23-08-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153185s.

[28-02-2022_23-08-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-09-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 4.278192s with result Unsatisfiable.

[28-02-2022_23-09-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.431376600001386, Incremental time limit = None
Running cumulative time = 15.518707799994445, Cumulative time limit = 1800.0
Used memory = (RSS = 1879.410156Mb, VMS = 1879.273438Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-09-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-09-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)])]

[28-02-2022_23-09-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.155591s.

[28-02-2022_23-09-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-09-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 5.278354s with result Unsatisfiable.

[28-02-2022_23-09-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 5.433945100001438, Incremental time limit = None
Running cumulative time = 20.952652899995883, Cumulative time limit = 1800.0
Used memory = (RSS = 1880.042969Mb, VMS = 1879.453125Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-09-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-09-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)])]

[28-02-2022_23-09-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159458s.

[28-02-2022_23-09-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-09-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 12.257801s with result Unsatisfiable.

[28-02-2022_23-09-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 12.41725850000148, Incremental time limit = None
Running cumulative time = 33.36991139999736, Cumulative time limit = 1800.0
Used memory = (RSS = 1880.613281Mb, VMS = 1879.640625Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-09-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-09-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)])]

[28-02-2022_23-09-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.160434s.

[28-02-2022_23-09-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-09-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 18.630474s with result Unsatisfiable.

[28-02-2022_23-09-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 18.790908899998612, Incremental time limit = None
Running cumulative time = 52.160820299995976, Cumulative time limit = 1800.0
Used memory = (RSS = 1881.453125Mb, VMS = 1885.453125Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-09-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-09-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)])]

[28-02-2022_23-09-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161856s.

[28-02-2022_23-09-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-10-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 30.381556s with result Unsatisfiable.

[28-02-2022_23-10-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 30.543412899998657, Incremental time limit = None
Running cumulative time = 82.70423319999463, Cumulative time limit = 1800.0
Used memory = (RSS = 1883.210938Mb, VMS = 1887.042969Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-10-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-10-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)])]

[28-02-2022_23-10-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164801s.

[28-02-2022_23-10-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 59.817769s with result Unsatisfiable.

[28-02-2022_23-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 59.98256920000131, Incremental time limit = None
Running cumulative time = 142.68680239999594, Cumulative time limit = 1800.0
Used memory = (RSS = 1884.675781Mb, VMS = 1888.292969Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =      1 : Maximum =    300

[28-02-2022_23-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)])]

[28-02-2022_23-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.173480s.

[28-02-2022_23-11-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.301929s with result Satisfiable.

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.4754087000001164, Incremental time limit = None
Running cumulative time = 145.16221109999606, Cumulative time limit = 1800.0
Used memory = (RSS = 1887.863281Mb, VMS = 1891.792969Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.727803s, Solving = 141.434408s, Total = 145.162211s, Memory = (RSS = 1887.863281Mb, VMS = 1891.792969Mb), Step range = [0-29]), Calls = 29
Final Model :: Total atoms = 26246, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.113742s, Solving = 0.011136s, Total = 0.124878s, Memory = (RSS = 1865.050781Mb, VMS = 1864.054688Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.089664s, Solving = 0.004672s, Total = 0.094336s, Memory = (RSS = 1865.050781Mb, VMS = 1864.054688Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.098404s, Solving = 0.011575s, Total = 0.109980s, Memory = (RSS = 1865.050781Mb, VMS = 1864.054688Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.098824s, Solving = 0.012223s, Total = 0.111047s, Memory = (RSS = 1865.050781Mb, VMS = 1864.054688Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.099206s, Solving = 0.012744s, Total = 0.111951s, Memory = (RSS = 1865.062500Mb, VMS = 1864.054688Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.101829s, Solving = 0.013640s, Total = 0.115469s, Memory = (RSS = 1865.066406Mb, VMS = 1864.054688Mb), Step range = [6-6]
7 : Statistics :: Grounding = 0.104364s, Solving = 0.017024s, Total = 0.121388s, Memory = (RSS = 1865.066406Mb, VMS = 1864.054688Mb), Step range = [7-7]
8 : Statistics :: Grounding = 0.116052s, Solving = 0.020111s, Total = 0.136163s, Memory = (RSS = 1866.234375Mb, VMS = 1865.222656Mb), Step range = [8-8]
9 : Statistics :: Grounding = 0.108952s, Solving = 0.020027s, Total = 0.128980s, Memory = (RSS = 1866.417969Mb, VMS = 1865.406250Mb), Step range = [9-9]
10 : Statistics :: Grounding = 0.111886s, Solving = 0.024290s, Total = 0.136176s, Memory = (RSS = 1866.605469Mb, VMS = 1865.593750Mb), Step range = [10-10]
11 : Statistics :: Grounding = 0.113708s, Solving = 0.030725s, Total = 0.144433s, Memory = (RSS = 1866.789062Mb, VMS = 1865.777344Mb), Step range = [11-11]
12 : Statistics :: Grounding = 0.116731s, Solving = 0.046388s, Total = 0.163119s, Memory = (RSS = 1866.972656Mb, VMS = 1865.960938Mb), Step range = [12-12]
13 : Statistics :: Grounding = 0.116583s, Solving = 0.085549s, Total = 0.202133s, Memory = (RSS = 1872.722656Mb, VMS = 1873.660156Mb), Step range = [13-13]
14 : Statistics :: Grounding = 0.120217s, Solving = 0.111817s, Total = 0.232034s, Memory = (RSS = 1873.457031Mb, VMS = 1873.847656Mb), Step range = [14-14]
15 : Statistics :: Grounding = 0.123574s, Solving = 0.146913s, Total = 0.270487s, Memory = (RSS = 1874.019531Mb, VMS = 1874.031250Mb), Step range = [15-15]
16 : Statistics :: Grounding = 0.125498s, Solving = 0.251749s, Total = 0.377247s, Memory = (RSS = 1874.703125Mb, VMS = 1874.218750Mb), Step range = [16-16]
17 : Statistics :: Grounding = 0.137362s, Solving = 0.389656s, Total = 0.527018s, Memory = (RSS = 1875.257812Mb, VMS = 1874.402344Mb), Step range = [17-17]
18 : Statistics :: Grounding = 0.128359s, Solving = 0.651213s, Total = 0.779572s, Memory = (RSS = 1876.078125Mb, VMS = 1878.343750Mb), Step range = [18-18]
19 : Statistics :: Grounding = 0.131451s, Solving = 0.722084s, Total = 0.853535s, Memory = (RSS = 1876.734375Mb, VMS = 1878.527344Mb), Step range = [19-19]
20 : Statistics :: Grounding = 0.144680s, Solving = 1.079623s, Total = 1.224303s, Memory = (RSS = 1877.343750Mb, VMS = 1878.714844Mb), Step range = [20-20]
21 : Statistics :: Grounding = 0.146923s, Solving = 1.650006s, Total = 1.796929s, Memory = (RSS = 1878.007812Mb, VMS = 1878.898438Mb), Step range = [21-21]
22 : Statistics :: Grounding = 0.150987s, Solving = 3.175170s, Total = 3.326156s, Memory = (RSS = 1878.757812Mb, VMS = 1879.082031Mb), Step range = [22-22]
23 : Statistics :: Grounding = 0.153185s, Solving = 4.278192s, Total = 4.431377s, Memory = (RSS = 1879.410156Mb, VMS = 1879.273438Mb), Step range = [23-23]
24 : Statistics :: Grounding = 0.155591s, Solving = 5.278354s, Total = 5.433945s, Memory = (RSS = 1880.042969Mb, VMS = 1879.453125Mb), Step range = [24-24]
25 : Statistics :: Grounding = 0.159458s, Solving = 12.257801s, Total = 12.417259s, Memory = (RSS = 1880.613281Mb, VMS = 1879.640625Mb), Step range = [25-25]
26 : Statistics :: Grounding = 0.160434s, Solving = 18.630474s, Total = 18.790909s, Memory = (RSS = 1881.453125Mb, VMS = 1885.453125Mb), Step range = [26-26]
27 : Statistics :: Grounding = 0.161856s, Solving = 30.381556s, Total = 30.543413s, Memory = (RSS = 1883.210938Mb, VMS = 1887.042969Mb), Step range = [27-27]
28 : Statistics :: Grounding = 0.164801s, Solving = 59.817769s, Total = 59.982569s, Memory = (RSS = 1884.675781Mb, VMS = 1888.292969Mb), Step range = [28-28]
29 : Statistics :: Grounding = 0.173480s, Solving = 2.301929s, Total = 2.475409s, Memory = (RSS = 1887.863281Mb, VMS = 1891.792969Mb), Step range = [29-29]

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 145.162211s due to: Stop condition reached.

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.727803s, Solving = 141.434408s, Total = 145.162211s, Memory = (RSS = 1887.863281Mb, VMS = 1891.792969Mb), Step range = [0-29]), Calls = 29
Model :: Total atoms = 26246, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 29 :: Actions = 29                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 3:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 4:
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 6:
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 7:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 8:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 9:
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 10:
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 11:
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 12:
    Planned actions:
        talos : move(store_room)
Step 13:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 14:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))
Step 15:
    Planned actions:
        talos : move(puzzle_room)
Step 16:
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 17:
    Planned actions:
        talos : release(manipulator_arm_2,(block,4))
Step 18:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
Step 19:
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
Step 20:
    Planned actions:
        talos : release(manipulator_arm_2,(block,9))
Step 21:
    Planned actions:
        talos : put(manipulator_arm_1,(block,8),(block,9))
Step 22:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 23:
    Planned actions:
        talos : release(manipulator_arm_1,(block,8))
Step 24:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,7))
Step 25:
    Planned actions:
        talos : put(manipulator_arm_1,(block,7),(block,8))
Step 26:
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 27:
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 28:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 29:
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (classic), LE =  29, AC =  29, CF = 1.0, GT =   3.75s, ST = 141.44s, OT = 0.00s, TT = 145.19s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[28-02-2022_23-11-12] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=29, start_step=0, blend=Blend(left=0, right=0)

[28-02-2022_23-11-12] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=14, large_group_size=15

[28-02-2022_23-11-12] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=14, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 29, Sub-goal Stage Range = [1-29]
Division points [total=1] : [(Index = 14, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 3 solved.

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 1 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 29, Sub-goal Stage Range = [1-29]
Division points [total=1] : [(Index = 14, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-14]

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-14], problem number = 1, increment number = 1

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 14)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1654.8082540000032)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [1-14] : Concurrency disabled : Minimum search length bound enabled with value 13

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 14
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 13

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-11-12] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-12] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, complete_tower(yellow,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), store_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), true, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), false, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), nothing, 0).
holds(3, on((block,9)), (block,7), 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, tower_base((block,7),puzzle_room_table), true, 0).
holds(3, tower_base((block,8),puzzle_room_table), false, 0).
holds(3, tower_base((block,9),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 0).

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=13']

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'I': 14})

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 14 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 3).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 6).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 7).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 9).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 10).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 11).
sub_goal(3, talos, move(store_room), in(talos), store_room, 12).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 13).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 14).

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=13']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA79425F70>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=14, step_end_min=14, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1654.8082540000032, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 14, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1230 rules

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00642610000068089s

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032175s.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005807s with result Satisfiable.

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7A261400>

[28-02-2022_23-11-12] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 14)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7A261400>)

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 14, sequential, false). %* None *%

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =     13
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.169183s.

[28-02-2022_23-11-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.700430s with result Satisfiable.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.869613399998343, Incremental time limit = None
Running cumulative time = 1.869613399998343, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1909.363281Mb, VMS = 1912.742188Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.169183s, Solving = 0.700430s, Total = 1.869613s, Memory = (RSS = 1909.363281Mb, VMS = 1912.742188Mb), Step range = [0-13]), Calls = 1
Final Model :: Total atoms = 14322, Cost = (-4,), Optimality proven = False, Number = 5, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152056s.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032864s with result Unsatisfiable.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18492000000151165, Incremental time limit = None
Running cumulative time = 2.0545333999998547, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1913.730469Mb, VMS = 1920.242188Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145529s.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030466s with result Unsatisfiable.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17599490000065998, Incremental time limit = None
Running cumulative time = 2.2305283000005147, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1915.613281Mb, VMS = 1920.675781Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147380s.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032376s with result Unsatisfiable.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17975529999966966, Incremental time limit = None
Running cumulative time = 2.4102836000001844, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1917.554688Mb, VMS = 1921.101562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152495s.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033911s with result Unsatisfiable.

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18640520000190008, Incremental time limit = None
Running cumulative time = 2.5966888000020845, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1919.539062Mb, VMS = 1921.785156Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.154437s.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034228s with result Unsatisfiable.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18866509999861591, Incremental time limit = None
Running cumulative time = 2.7853539000007004, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1921.410156Mb, VMS = 1922.214844Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157363s.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035811s with result Unsatisfiable.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19317389999923762, Incremental time limit = None
Running cumulative time = 2.978527799999938, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1923.214844Mb, VMS = 1922.648438Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161122s.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053403s with result Unsatisfiable.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21452529999805847, Incremental time limit = None
Running cumulative time = 3.1930530999979965, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1926.105469Mb, VMS = 1938.269531Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165364s.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053882s with result Unsatisfiable.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21924570000192034, Incremental time limit = None
Running cumulative time = 3.412298799999917, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1929.011719Mb, VMS = 1940.113281Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.166993s.

[28-02-2022_23-11-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061734s with result Unsatisfiable.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.228726800000004, Incremental time limit = None
Running cumulative time = 3.641025599999921, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1930.882812Mb, VMS = 1940.539062Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169261s.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070274s with result Unsatisfiable.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23953550000078394, Incremental time limit = None
Running cumulative time = 3.8805611000007048, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1933.031250Mb, VMS = 1940.976562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.173185s.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.097107s with result Unsatisfiable.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2702924000004714, Incremental time limit = None
Running cumulative time = 4.150853500001176, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1934.984375Mb, VMS = 1941.406250Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.176431s.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083908s with result Unsatisfiable.

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26033900000038557, Incremental time limit = None
Running cumulative time = 4.411192500001562, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1939.578125Mb, VMS = 1944.863281Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.178968s.

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.175402s with result Unsatisfiable.

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3543704000003345, Incremental time limit = None
Running cumulative time = 4.765562900001896, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1940.222656Mb, VMS = 1943.785156Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.181615s.

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.190760s with result Unsatisfiable.

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3723744999988412, Incremental time limit = None
Running cumulative time = 5.137937400000737, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1943.023438Mb, VMS = 1945.074219Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.186037s.

[28-02-2022_23-11-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.351034s with result Unsatisfiable.

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5370706000012433, Incremental time limit = None
Running cumulative time = 5.675008000001981, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1945.183594Mb, VMS = 1945.593750Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.187777s.

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.552976s with result Unsatisfiable.

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7407523999991099, Incremental time limit = None
Running cumulative time = 6.415760400001091, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1954.500000Mb, VMS = 1978.464844Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.191396s.

[28-02-2022_23-11-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.883713s with result Unsatisfiable.

[28-02-2022_23-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0751091000001907, Incremental time limit = None
Running cumulative time = 7.490869500001281, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1964.515625Mb, VMS = 1988.117188Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.195291s.

[28-02-2022_23-11-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.112787s with result Unsatisfiable.

[28-02-2022_23-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.3080781000007846, Incremental time limit = None
Running cumulative time = 8.798947600002066, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1966.949219Mb, VMS = 1989.367188Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.196673s.

[28-02-2022_23-11-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.868175s with result Unsatisfiable.

[28-02-2022_23-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0648485999972763, Incremental time limit = None
Running cumulative time = 9.863796199999342, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1970.410156Mb, VMS = 1990.835938Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.197990s.

[28-02-2022_23-11-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.147048s with result Unsatisfiable.

[28-02-2022_23-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.3450372999977844, Incremental time limit = None
Running cumulative time = 11.208833499997127, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1978.472656Mb, VMS = 1998.710938Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.201550s.

[28-02-2022_23-11-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.456006s with result Unsatisfiable.

[28-02-2022_23-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.657555700001467, Incremental time limit = None
Running cumulative time = 12.866389199998594, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1981.011719Mb, VMS = 1999.242188Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     14 : Maximum =    300

[28-02-2022_23-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(0), Number(1), Number(14), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.205542s.

[28-02-2022_23-11-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.283434s with result Satisfiable.

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.4889767999993637, Incremental time limit = None
Running cumulative time = 15.355365999997957, Cumulative time limit = 1654.8082540000032
Used memory = (RSS = 1986.867188Mb, VMS = 2002.726562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.013638s, Solving = 10.341728s, Total = 15.355366s, Memory = (RSS = 1986.867188Mb, VMS = 2002.726562Mb), Step range = [0-35]), Calls = 23
Final Model :: Total atoms = 28684, Cost = (-3,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.169183s, Solving = 0.700430s, Total = 1.869613s, Memory = (RSS = 1909.363281Mb, VMS = 1912.742188Mb), Step range = [0-13]
2 : Statistics :: Grounding = 0.152056s, Solving = 0.032864s, Total = 0.184920s, Memory = (RSS = 1913.730469Mb, VMS = 1920.242188Mb), Step range = [14-14]
3 : Statistics :: Grounding = 0.145529s, Solving = 0.030466s, Total = 0.175995s, Memory = (RSS = 1915.613281Mb, VMS = 1920.675781Mb), Step range = [15-15]
4 : Statistics :: Grounding = 0.147380s, Solving = 0.032376s, Total = 0.179755s, Memory = (RSS = 1917.554688Mb, VMS = 1921.101562Mb), Step range = [16-16]
5 : Statistics :: Grounding = 0.152495s, Solving = 0.033911s, Total = 0.186405s, Memory = (RSS = 1919.539062Mb, VMS = 1921.785156Mb), Step range = [17-17]
6 : Statistics :: Grounding = 0.154437s, Solving = 0.034228s, Total = 0.188665s, Memory = (RSS = 1921.410156Mb, VMS = 1922.214844Mb), Step range = [18-18]
7 : Statistics :: Grounding = 0.157363s, Solving = 0.035811s, Total = 0.193174s, Memory = (RSS = 1923.214844Mb, VMS = 1922.648438Mb), Step range = [19-19]
8 : Statistics :: Grounding = 0.161122s, Solving = 0.053403s, Total = 0.214525s, Memory = (RSS = 1926.105469Mb, VMS = 1938.269531Mb), Step range = [20-20]
9 : Statistics :: Grounding = 0.165364s, Solving = 0.053882s, Total = 0.219246s, Memory = (RSS = 1929.011719Mb, VMS = 1940.113281Mb), Step range = [21-21]
10 : Statistics :: Grounding = 0.166993s, Solving = 0.061734s, Total = 0.228727s, Memory = (RSS = 1930.882812Mb, VMS = 1940.539062Mb), Step range = [22-22]
11 : Statistics :: Grounding = 0.169261s, Solving = 0.070274s, Total = 0.239536s, Memory = (RSS = 1933.031250Mb, VMS = 1940.976562Mb), Step range = [23-23]
12 : Statistics :: Grounding = 0.173185s, Solving = 0.097107s, Total = 0.270292s, Memory = (RSS = 1934.984375Mb, VMS = 1941.406250Mb), Step range = [24-24]
13 : Statistics :: Grounding = 0.176431s, Solving = 0.083908s, Total = 0.260339s, Memory = (RSS = 1939.578125Mb, VMS = 1944.863281Mb), Step range = [25-25]
14 : Statistics :: Grounding = 0.178968s, Solving = 0.175402s, Total = 0.354370s, Memory = (RSS = 1940.222656Mb, VMS = 1943.785156Mb), Step range = [26-26]
15 : Statistics :: Grounding = 0.181615s, Solving = 0.190760s, Total = 0.372374s, Memory = (RSS = 1943.023438Mb, VMS = 1945.074219Mb), Step range = [27-27]
16 : Statistics :: Grounding = 0.186037s, Solving = 0.351034s, Total = 0.537071s, Memory = (RSS = 1945.183594Mb, VMS = 1945.593750Mb), Step range = [28-28]
17 : Statistics :: Grounding = 0.187777s, Solving = 0.552976s, Total = 0.740752s, Memory = (RSS = 1954.500000Mb, VMS = 1978.464844Mb), Step range = [29-29]
18 : Statistics :: Grounding = 0.191396s, Solving = 0.883713s, Total = 1.075109s, Memory = (RSS = 1964.515625Mb, VMS = 1988.117188Mb), Step range = [30-30]
19 : Statistics :: Grounding = 0.195291s, Solving = 1.112787s, Total = 1.308078s, Memory = (RSS = 1966.949219Mb, VMS = 1989.367188Mb), Step range = [31-31]
20 : Statistics :: Grounding = 0.196673s, Solving = 0.868175s, Total = 1.064849s, Memory = (RSS = 1970.410156Mb, VMS = 1990.835938Mb), Step range = [32-32]
21 : Statistics :: Grounding = 0.197990s, Solving = 1.147048s, Total = 1.345037s, Memory = (RSS = 1978.472656Mb, VMS = 1998.710938Mb), Step range = [33-33]
22 : Statistics :: Grounding = 0.201550s, Solving = 1.456006s, Total = 1.657556s, Memory = (RSS = 1981.011719Mb, VMS = 1999.242188Mb), Step range = [34-34]
23 : Statistics :: Grounding = 0.205542s, Solving = 2.283434s, Total = 2.488977s, Memory = (RSS = 1986.867188Mb, VMS = 2002.726562Mb), Step range = [35-35]

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 15.355366s due to: Stop condition reached.

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 14, Last requested goal index = 14, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.013638s, Solving = 10.341728s, Total = 15.355366s, Memory = (RSS = 1986.867188Mb, VMS = 2002.726562Mb), Step range = [0-35]), Calls = 23
Model :: Total atoms = 28684, Cost = (-3,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 35 :: Actions = 35                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 27:
    Current Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 32:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 33:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 34:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  35, AC =  35, CF = 1.0, GT =   5.05s, ST =  10.35s, OT = 0.00s, TT =  15.39s, EF = (LE = 2.5, AC = 2.5), ED = (LE = 2.4, AC = 2.4), EB = (LE = 1.0, AC = 1.0)

[28-02-2022_23-11-29] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=4, plan_length=35, start_step=0, blend=Blend(left=0, right=0)

[28-02-2022_23-11-29] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=3, small_group_size=8, large_group_size=9

[28-02-2022_23-11-29] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=17, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=26, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 4, Problem Range = [1-4], Size = 35, Sub-goal Stage Range = [1-35]
Division points [total=3] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 26, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 2 solved.

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 1 at level 1:
Total Templated Partial Problems = 4, Problem Range = [1-4], Size = 35, Sub-goal Stage Range = [1-35]
Division points [total=3] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 26, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-8], problem number = 1, increment number = 1

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1639.4149060000054)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [1-8] : Concurrency disabled : Minimum search length bound enabled with value 7

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 7

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-11-29] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-29] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 0})

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 0).
holds(1, complete_tower(red,puzzle_room_table), false, 0).
holds(1, complete_tower(yellow,puzzle_room_table), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in((block,7)), (puzzle_room,1), 0).
holds(1, in((block,8)), (store_room,0), 0).
holds(1, in((block,9)), (puzzle_room,1), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,1),(block,7)), false, 0).
holds(1, in_tower((block,1),(block,8)), false, 0).
holds(1, in_tower((block,1),(block,9)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,7)), false, 0).
holds(1, in_tower((block,2),(block,8)), false, 0).
holds(1, in_tower((block,2),(block,9)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,7)), false, 0).
holds(1, in_tower((block,3),(block,8)), false, 0).
holds(1, in_tower((block,3),(block,9)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,7)), false, 0).
holds(1, in_tower((block,4),(block,8)), false, 0).
holds(1, in_tower((block,4),(block,9)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,7)), false, 0).
holds(1, in_tower((block,5),(block,8)), false, 0).
holds(1, in_tower((block,5),(block,9)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,7)), false, 0).
holds(1, in_tower((block,6),(block,8)), false, 0).
holds(1, in_tower((block,6),(block,9)), false, 0).
holds(1, in_tower((block,7),(block,1)), false, 0).
holds(1, in_tower((block,7),(block,2)), false, 0).
holds(1, in_tower((block,7),(block,3)), false, 0).
holds(1, in_tower((block,7),(block,4)), false, 0).
holds(1, in_tower((block,7),(block,5)), false, 0).
holds(1, in_tower((block,7),(block,6)), false, 0).
holds(1, in_tower((block,7),(block,7)), true, 0).
holds(1, in_tower((block,7),(block,8)), false, 0).
holds(1, in_tower((block,7),(block,9)), true, 0).
holds(1, in_tower((block,8),(block,1)), false, 0).
holds(1, in_tower((block,8),(block,2)), false, 0).
holds(1, in_tower((block,8),(block,3)), false, 0).
holds(1, in_tower((block,8),(block,4)), false, 0).
holds(1, in_tower((block,8),(block,5)), false, 0).
holds(1, in_tower((block,8),(block,6)), false, 0).
holds(1, in_tower((block,8),(block,7)), false, 0).
holds(1, in_tower((block,8),(block,8)), false, 0).
holds(1, in_tower((block,8),(block,9)), false, 0).
holds(1, in_tower((block,9),(block,1)), false, 0).
holds(1, in_tower((block,9),(block,2)), false, 0).
holds(1, in_tower((block,9),(block,3)), false, 0).
holds(1, in_tower((block,9),(block,4)), false, 0).
holds(1, in_tower((block,9),(block,5)), false, 0).
holds(1, in_tower((block,9),(block,6)), false, 0).
holds(1, in_tower((block,9),(block,7)), false, 0).
holds(1, in_tower((block,9),(block,8)), false, 0).
holds(1, in_tower((block,9),(block,9)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, on((block,7)), puzzle_room_table_middle, 0).
holds(1, on((block,8)), nothing, 0).
holds(1, on((block,9)), (block,7), 0).
holds(1, tower_base((block,1),puzzle_room_table), true, 0).
holds(1, tower_base((block,2),puzzle_room_table), true, 0).
holds(1, tower_base((block,3),puzzle_room_table), false, 0).
holds(1, tower_base((block,4),puzzle_room_table), false, 0).
holds(1, tower_base((block,5),puzzle_room_table), false, 0).
holds(1, tower_base((block,6),puzzle_room_table), false, 0).
holds(1, tower_base((block,7),puzzle_room_table), true, 0).
holds(1, tower_base((block,8),puzzle_room_table), false, 0).
holds(1, tower_base((block,9),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 0).
holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, complete_tower(yellow,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), store_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), true, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), false, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), nothing, 0).
holds(2, on((block,9)), (block,7), 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, tower_base((block,7),puzzle_room_table), true, 0).
holds(2, tower_base((block,8),puzzle_room_table), false, 0).
holds(2, tower_base((block,9),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 0).

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=7']

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'store_room_door_handle_outer', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, grasp(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), store_room_door_handle_outer, 6).
sub_goal(2, talos, actuate(manipulator_arm_1,store_room_door), configuration(store_room_door), open, 7).
sub_goal(2, talos, release(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 8).

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=7']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA79425EE0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=8, step_end_min=8, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1639.4149060000054, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 8, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1258 rules

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006356200001391699s

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.038926s.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007426s with result Satisfiable.

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7A27A400>

[28-02-2022_23-11-29] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7A27A400>)

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 8, sequential, false). %* None *%

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      7
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.068095s.

[28-02-2022_23-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.465733s with result Satisfiable.

[28-02-2022_23-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.5338276000002224, Incremental time limit = None
Running cumulative time = 1.5338276000002224, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1897.070312Mb, VMS = 1898.492188Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.068095s, Solving = 0.465733s, Total = 1.533828s, Memory = (RSS = 1897.070312Mb, VMS = 1898.492188Mb), Step range = [0-7]), Calls = 1
Final Model :: Total atoms = 11662, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[28-02-2022_23-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.204243s.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036058s with result Unsatisfiable.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24030100000163657, Incremental time limit = None
Running cumulative time = 1.774128600001859, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1898.402344Mb, VMS = 1901.207031Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199110s.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042855s with result Unsatisfiable.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2419651000000158, Incremental time limit = None
Running cumulative time = 2.016093700001875, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1899.789062Mb, VMS = 1901.601562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.203649s.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040806s with result Unsatisfiable.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2444551999997202, Incremental time limit = None
Running cumulative time = 2.260548900001595, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1901.742188Mb, VMS = 1902.121094Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.206817s.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045137s with result Unsatisfiable.

[28-02-2022_23-11-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2519538000015018, Incremental time limit = None
Running cumulative time = 2.512502700003097, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1903.406250Mb, VMS = 1902.644531Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.212059s.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053729s with result Unsatisfiable.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26578800000061165, Incremental time limit = None
Running cumulative time = 2.7782907000037085, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1912.289062Mb, VMS = 1919.750000Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.222431s.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054613s with result Unsatisfiable.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2770438000006834, Incremental time limit = None
Running cumulative time = 3.055334500004392, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1914.945312Mb, VMS = 1920.269531Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.229686s.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068819s with result Unsatisfiable.

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2985050000006595, Incremental time limit = None
Running cumulative time = 3.3538395000050514, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1917.472656Mb, VMS = 1920.804688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.228999s.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070468s with result Unsatisfiable.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29946709999967425, Incremental time limit = None
Running cumulative time = 3.6533066000047256, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1919.746094Mb, VMS = 1921.328125Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      8 : Maximum =    300

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235866s.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108255s with result Satisfiable.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34412110000084795, Incremental time limit = None
Running cumulative time = 3.9974277000055736, Cumulative time limit = 1639.4149060000054
Used memory = (RSS = 1922.371094Mb, VMS = 1921.855469Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.010955s, Solving = 0.986473s, Total = 3.997428s, Memory = (RSS = 1922.371094Mb, VMS = 1921.855469Mb), Step range = [0-16]), Calls = 10
Final Model :: Total atoms = 18282, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.068095s, Solving = 0.465733s, Total = 1.533828s, Memory = (RSS = 1897.070312Mb, VMS = 1898.492188Mb), Step range = [0-7]
2 : Statistics :: Grounding = 0.204243s, Solving = 0.036058s, Total = 0.240301s, Memory = (RSS = 1898.402344Mb, VMS = 1901.207031Mb), Step range = [8-8]
3 : Statistics :: Grounding = 0.199110s, Solving = 0.042855s, Total = 0.241965s, Memory = (RSS = 1899.789062Mb, VMS = 1901.601562Mb), Step range = [9-9]
4 : Statistics :: Grounding = 0.203649s, Solving = 0.040806s, Total = 0.244455s, Memory = (RSS = 1901.742188Mb, VMS = 1902.121094Mb), Step range = [10-10]
5 : Statistics :: Grounding = 0.206817s, Solving = 0.045137s, Total = 0.251954s, Memory = (RSS = 1903.406250Mb, VMS = 1902.644531Mb), Step range = [11-11]
6 : Statistics :: Grounding = 0.212059s, Solving = 0.053729s, Total = 0.265788s, Memory = (RSS = 1912.289062Mb, VMS = 1919.750000Mb), Step range = [12-12]
7 : Statistics :: Grounding = 0.222431s, Solving = 0.054613s, Total = 0.277044s, Memory = (RSS = 1914.945312Mb, VMS = 1920.269531Mb), Step range = [13-13]
8 : Statistics :: Grounding = 0.229686s, Solving = 0.068819s, Total = 0.298505s, Memory = (RSS = 1917.472656Mb, VMS = 1920.804688Mb), Step range = [14-14]
9 : Statistics :: Grounding = 0.228999s, Solving = 0.070468s, Total = 0.299467s, Memory = (RSS = 1919.746094Mb, VMS = 1921.328125Mb), Step range = [15-15]
10 : Statistics :: Grounding = 0.235866s, Solving = 0.108255s, Total = 0.344121s, Memory = (RSS = 1922.371094Mb, VMS = 1921.855469Mb), Step range = [16-16]

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.997428s due to: Stop condition reached.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.010955s, Solving = 0.986473s, Total = 3.997428s, Memory = (RSS = 1922.371094Mb, VMS = 1921.855469Mb), Step range = [0-16]), Calls = 10
Model :: Total atoms = 18282, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 16 :: Actions = 16                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 1 solved.

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 29 : Goals achieved = 14 : Goals unachieved = 15 : Complete = False
Level = 1 : Solved problems = 1 : Total constraining sub-goal stages = 35 : Goals achieved = 8 : Goals unachieved = 27 : Complete = False

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 2 by method ground-first is [1-1].

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 2 at level 1:
Total Templated Partial Problems = 4, Problem Range = [1-4], Size = 35, Sub-goal Stage Range = [1-35]
Division points [total=3] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 26, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-17]

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=16, step_range=range(0, 17)

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 16, Total actions = 16, Produced sub-goal stages = 0

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 16, Total actions = 16, Produced sub-goal stages = 0

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 16, Total actions = 16, Produced sub-goal stages = 0

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-17], problem number = 2, increment number = 2

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 17)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1639.4149060000054)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [9-17] : Concurrency disabled : Minimum search length bound enabled with value 24

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 17
start_step = 16
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 24

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-11-34] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-34] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 16 as problem start state.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 16})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 16})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 16})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 16})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 16})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 16})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 16})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 16})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 16})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 16})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 16})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 16})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 16})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 16})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 16})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 16})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 16})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 16})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 16})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 16})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 16})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 16})

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 16).
holds(1, complete_tower(red,puzzle_room_table), false, 16).
holds(1, complete_tower(yellow,puzzle_room_table), false, 16).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16).
holds(1, configuration(manipulator_limb_1), extended, 16).
holds(1, configuration(manipulator_limb_2), retracted, 16).
holds(1, configuration(puzzle_room_door), open, 16).
holds(1, configuration(starting_room_door), closed, 16).
holds(1, configuration(store_room_door), open, 16).
holds(1, grasping(manipulator_arm_1), nothing, 16).
holds(1, grasping(manipulator_arm_2), nothing, 16).
holds(1, grasping(manipulator_end_1), nothing, 16).
holds(1, grasping(manipulator_end_2), nothing, 16).
holds(1, in((block,1)), (puzzle_room,1), 16).
holds(1, in((block,2)), (puzzle_room,1), 16).
holds(1, in((block,3)), (puzzle_room,1), 16).
holds(1, in((block,4)), (store_room,0), 16).
holds(1, in((block,5)), (store_room,0), 16).
holds(1, in((block,6)), (store_room,0), 16).
holds(1, in((block,7)), (puzzle_room,1), 16).
holds(1, in((block,8)), (store_room,0), 16).
holds(1, in((block,9)), (puzzle_room,1), 16).
holds(1, in(manipulator_arm_1), (hallway,0), 16).
holds(1, in(manipulator_arm_2), (hallway,0), 16).
holds(1, in(manipulator_end_1), (hallway,0), 16).
holds(1, in(manipulator_end_2), (hallway,0), 16).
holds(1, in(manipulator_limb_1), (hallway,0), 16).
holds(1, in(manipulator_limb_2), (hallway,0), 16).
holds(1, in(puzzle_room_table), (puzzle_room,1), 16).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 16).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16).
holds(1, in(talos), (hallway,0), 16).
holds(1, in_tower((block,1),(block,1)), true, 16).
holds(1, in_tower((block,1),(block,2)), false, 16).
holds(1, in_tower((block,1),(block,3)), true, 16).
holds(1, in_tower((block,1),(block,4)), false, 16).
holds(1, in_tower((block,1),(block,5)), false, 16).
holds(1, in_tower((block,1),(block,6)), false, 16).
holds(1, in_tower((block,1),(block,7)), false, 16).
holds(1, in_tower((block,1),(block,8)), false, 16).
holds(1, in_tower((block,1),(block,9)), false, 16).
holds(1, in_tower((block,2),(block,1)), false, 16).
holds(1, in_tower((block,2),(block,2)), true, 16).
holds(1, in_tower((block,2),(block,3)), false, 16).
holds(1, in_tower((block,2),(block,4)), false, 16).
holds(1, in_tower((block,2),(block,5)), false, 16).
holds(1, in_tower((block,2),(block,6)), false, 16).
holds(1, in_tower((block,2),(block,7)), false, 16).
holds(1, in_tower((block,2),(block,8)), false, 16).
holds(1, in_tower((block,2),(block,9)), false, 16).
holds(1, in_tower((block,3),(block,1)), false, 16).
holds(1, in_tower((block,3),(block,2)), false, 16).
holds(1, in_tower((block,3),(block,3)), false, 16).
holds(1, in_tower((block,3),(block,4)), false, 16).
holds(1, in_tower((block,3),(block,5)), false, 16).
holds(1, in_tower((block,3),(block,6)), false, 16).
holds(1, in_tower((block,3),(block,7)), false, 16).
holds(1, in_tower((block,3),(block,8)), false, 16).
holds(1, in_tower((block,3),(block,9)), false, 16).
holds(1, in_tower((block,4),(block,1)), false, 16).
holds(1, in_tower((block,4),(block,2)), false, 16).
holds(1, in_tower((block,4),(block,3)), false, 16).
holds(1, in_tower((block,4),(block,4)), false, 16).
holds(1, in_tower((block,4),(block,5)), false, 16).
holds(1, in_tower((block,4),(block,6)), false, 16).
holds(1, in_tower((block,4),(block,7)), false, 16).
holds(1, in_tower((block,4),(block,8)), false, 16).
holds(1, in_tower((block,4),(block,9)), false, 16).
holds(1, in_tower((block,5),(block,1)), false, 16).
holds(1, in_tower((block,5),(block,2)), false, 16).
holds(1, in_tower((block,5),(block,3)), false, 16).
holds(1, in_tower((block,5),(block,4)), false, 16).
holds(1, in_tower((block,5),(block,5)), false, 16).
holds(1, in_tower((block,5),(block,6)), false, 16).
holds(1, in_tower((block,5),(block,7)), false, 16).
holds(1, in_tower((block,5),(block,8)), false, 16).
holds(1, in_tower((block,5),(block,9)), false, 16).
holds(1, in_tower((block,6),(block,1)), false, 16).
holds(1, in_tower((block,6),(block,2)), false, 16).
holds(1, in_tower((block,6),(block,3)), false, 16).
holds(1, in_tower((block,6),(block,4)), false, 16).
holds(1, in_tower((block,6),(block,5)), false, 16).
holds(1, in_tower((block,6),(block,6)), false, 16).
holds(1, in_tower((block,6),(block,7)), false, 16).
holds(1, in_tower((block,6),(block,8)), false, 16).
holds(1, in_tower((block,6),(block,9)), false, 16).
holds(1, in_tower((block,7),(block,1)), false, 16).
holds(1, in_tower((block,7),(block,2)), false, 16).
holds(1, in_tower((block,7),(block,3)), false, 16).
holds(1, in_tower((block,7),(block,4)), false, 16).
holds(1, in_tower((block,7),(block,5)), false, 16).
holds(1, in_tower((block,7),(block,6)), false, 16).
holds(1, in_tower((block,7),(block,7)), true, 16).
holds(1, in_tower((block,7),(block,8)), false, 16).
holds(1, in_tower((block,7),(block,9)), true, 16).
holds(1, in_tower((block,8),(block,1)), false, 16).
holds(1, in_tower((block,8),(block,2)), false, 16).
holds(1, in_tower((block,8),(block,3)), false, 16).
holds(1, in_tower((block,8),(block,4)), false, 16).
holds(1, in_tower((block,8),(block,5)), false, 16).
holds(1, in_tower((block,8),(block,6)), false, 16).
holds(1, in_tower((block,8),(block,7)), false, 16).
holds(1, in_tower((block,8),(block,8)), false, 16).
holds(1, in_tower((block,8),(block,9)), false, 16).
holds(1, in_tower((block,9),(block,1)), false, 16).
holds(1, in_tower((block,9),(block,2)), false, 16).
holds(1, in_tower((block,9),(block,3)), false, 16).
holds(1, in_tower((block,9),(block,4)), false, 16).
holds(1, in_tower((block,9),(block,5)), false, 16).
holds(1, in_tower((block,9),(block,6)), false, 16).
holds(1, in_tower((block,9),(block,7)), false, 16).
holds(1, in_tower((block,9),(block,8)), false, 16).
holds(1, in_tower((block,9),(block,9)), false, 16).
holds(1, on((block,1)), puzzle_room_table_left, 16).
holds(1, on((block,2)), puzzle_room_table_right, 16).
holds(1, on((block,3)), (block,1), 16).
holds(1, on((block,4)), nothing, 16).
holds(1, on((block,5)), nothing, 16).
holds(1, on((block,6)), nothing, 16).
holds(1, on((block,7)), puzzle_room_table_middle, 16).
holds(1, on((block,8)), nothing, 16).
holds(1, on((block,9)), (block,7), 16).
holds(1, tower_base((block,1),puzzle_room_table), true, 16).
holds(1, tower_base((block,2),puzzle_room_table), true, 16).
holds(1, tower_base((block,3),puzzle_room_table), false, 16).
holds(1, tower_base((block,4),puzzle_room_table), false, 16).
holds(1, tower_base((block,5),puzzle_room_table), false, 16).
holds(1, tower_base((block,6),puzzle_room_table), false, 16).
holds(1, tower_base((block,7),puzzle_room_table), true, 16).
holds(1, tower_base((block,8),puzzle_room_table), false, 16).
holds(1, tower_base((block,9),puzzle_room_table), false, 16).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 16).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 16).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 16).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 16).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 16).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 16).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 16).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 16).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 16).
holds(2, complete_tower(blue,puzzle_room_table), false, 16).
holds(2, complete_tower(red,puzzle_room_table), false, 16).
holds(2, complete_tower(yellow,puzzle_room_table), false, 16).
holds(2, configuration(manipulator_arm_1), extended, 16).
holds(2, configuration(manipulator_arm_2), retracted, 16).
holds(2, configuration(puzzle_room_door), open, 16).
holds(2, configuration(starting_room_door), closed, 16).
holds(2, configuration(store_room_door), open, 16).
holds(2, grasping(manipulator_arm_1), nothing, 16).
holds(2, grasping(manipulator_arm_2), nothing, 16).
holds(2, in((block,1)), puzzle_room, 16).
holds(2, in((block,2)), puzzle_room, 16).
holds(2, in((block,3)), puzzle_room, 16).
holds(2, in((block,4)), store_room, 16).
holds(2, in((block,5)), store_room, 16).
holds(2, in((block,6)), store_room, 16).
holds(2, in((block,7)), puzzle_room, 16).
holds(2, in((block,8)), store_room, 16).
holds(2, in((block,9)), puzzle_room, 16).
holds(2, in(manipulator_arm_1), hallway, 16).
holds(2, in(manipulator_arm_2), hallway, 16).
holds(2, in(puzzle_room_table), puzzle_room, 16).
holds(2, in(talos), hallway, 16).
holds(2, in_tower((block,1),(block,1)), true, 16).
holds(2, in_tower((block,1),(block,2)), false, 16).
holds(2, in_tower((block,1),(block,3)), true, 16).
holds(2, in_tower((block,1),(block,4)), false, 16).
holds(2, in_tower((block,1),(block,5)), false, 16).
holds(2, in_tower((block,1),(block,6)), false, 16).
holds(2, in_tower((block,1),(block,7)), false, 16).
holds(2, in_tower((block,1),(block,8)), false, 16).
holds(2, in_tower((block,1),(block,9)), false, 16).
holds(2, in_tower((block,2),(block,1)), false, 16).
holds(2, in_tower((block,2),(block,2)), true, 16).
holds(2, in_tower((block,2),(block,3)), false, 16).
holds(2, in_tower((block,2),(block,4)), false, 16).
holds(2, in_tower((block,2),(block,5)), false, 16).
holds(2, in_tower((block,2),(block,6)), false, 16).
holds(2, in_tower((block,2),(block,7)), false, 16).
holds(2, in_tower((block,2),(block,8)), false, 16).
holds(2, in_tower((block,2),(block,9)), false, 16).
holds(2, in_tower((block,3),(block,1)), false, 16).
holds(2, in_tower((block,3),(block,2)), false, 16).
holds(2, in_tower((block,3),(block,3)), false, 16).
holds(2, in_tower((block,3),(block,4)), false, 16).
holds(2, in_tower((block,3),(block,5)), false, 16).
holds(2, in_tower((block,3),(block,6)), false, 16).
holds(2, in_tower((block,3),(block,7)), false, 16).
holds(2, in_tower((block,3),(block,8)), false, 16).
holds(2, in_tower((block,3),(block,9)), false, 16).
holds(2, in_tower((block,4),(block,1)), false, 16).
holds(2, in_tower((block,4),(block,2)), false, 16).
holds(2, in_tower((block,4),(block,3)), false, 16).
holds(2, in_tower((block,4),(block,4)), false, 16).
holds(2, in_tower((block,4),(block,5)), false, 16).
holds(2, in_tower((block,4),(block,6)), false, 16).
holds(2, in_tower((block,4),(block,7)), false, 16).
holds(2, in_tower((block,4),(block,8)), false, 16).
holds(2, in_tower((block,4),(block,9)), false, 16).
holds(2, in_tower((block,5),(block,1)), false, 16).
holds(2, in_tower((block,5),(block,2)), false, 16).
holds(2, in_tower((block,5),(block,3)), false, 16).
holds(2, in_tower((block,5),(block,4)), false, 16).
holds(2, in_tower((block,5),(block,5)), false, 16).
holds(2, in_tower((block,5),(block,6)), false, 16).
holds(2, in_tower((block,5),(block,7)), false, 16).
holds(2, in_tower((block,5),(block,8)), false, 16).
holds(2, in_tower((block,5),(block,9)), false, 16).
holds(2, in_tower((block,6),(block,1)), false, 16).
holds(2, in_tower((block,6),(block,2)), false, 16).
holds(2, in_tower((block,6),(block,3)), false, 16).
holds(2, in_tower((block,6),(block,4)), false, 16).
holds(2, in_tower((block,6),(block,5)), false, 16).
holds(2, in_tower((block,6),(block,6)), false, 16).
holds(2, in_tower((block,6),(block,7)), false, 16).
holds(2, in_tower((block,6),(block,8)), false, 16).
holds(2, in_tower((block,6),(block,9)), false, 16).
holds(2, in_tower((block,7),(block,1)), false, 16).
holds(2, in_tower((block,7),(block,2)), false, 16).
holds(2, in_tower((block,7),(block,3)), false, 16).
holds(2, in_tower((block,7),(block,4)), false, 16).
holds(2, in_tower((block,7),(block,5)), false, 16).
holds(2, in_tower((block,7),(block,6)), false, 16).
holds(2, in_tower((block,7),(block,7)), true, 16).
holds(2, in_tower((block,7),(block,8)), false, 16).
holds(2, in_tower((block,7),(block,9)), true, 16).
holds(2, in_tower((block,8),(block,1)), false, 16).
holds(2, in_tower((block,8),(block,2)), false, 16).
holds(2, in_tower((block,8),(block,3)), false, 16).
holds(2, in_tower((block,8),(block,4)), false, 16).
holds(2, in_tower((block,8),(block,5)), false, 16).
holds(2, in_tower((block,8),(block,6)), false, 16).
holds(2, in_tower((block,8),(block,7)), false, 16).
holds(2, in_tower((block,8),(block,8)), false, 16).
holds(2, in_tower((block,8),(block,9)), false, 16).
holds(2, in_tower((block,9),(block,1)), false, 16).
holds(2, in_tower((block,9),(block,2)), false, 16).
holds(2, in_tower((block,9),(block,3)), false, 16).
holds(2, in_tower((block,9),(block,4)), false, 16).
holds(2, in_tower((block,9),(block,5)), false, 16).
holds(2, in_tower((block,9),(block,6)), false, 16).
holds(2, in_tower((block,9),(block,7)), false, 16).
holds(2, in_tower((block,9),(block,8)), false, 16).
holds(2, in_tower((block,9),(block,9)), false, 16).
holds(2, on((block,1)), puzzle_room_table, 16).
holds(2, on((block,2)), puzzle_room_table, 16).
holds(2, on((block,3)), (block,1), 16).
holds(2, on((block,4)), nothing, 16).
holds(2, on((block,5)), nothing, 16).
holds(2, on((block,6)), nothing, 16).
holds(2, on((block,7)), puzzle_room_table, 16).
holds(2, on((block,8)), nothing, 16).
holds(2, on((block,9)), (block,7), 16).
holds(2, tower_base((block,1),puzzle_room_table), true, 16).
holds(2, tower_base((block,2),puzzle_room_table), true, 16).
holds(2, tower_base((block,3),puzzle_room_table), false, 16).
holds(2, tower_base((block,4),puzzle_room_table), false, 16).
holds(2, tower_base((block,5),puzzle_room_table), false, 16).
holds(2, tower_base((block,6),puzzle_room_table), false, 16).
holds(2, tower_base((block,7),puzzle_room_table), true, 16).
holds(2, tower_base((block,8),puzzle_room_table), false, 16).
holds(2, tower_base((block,9),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 16).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 16).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 16).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 16).

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=24']

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 17})

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 9).
sub_goal(2, talos, move(store_room), in(talos), store_room, 10).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 12).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 13).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 14).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 15).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 16).
sub_goal(2, talos, move(hallway), in(talos), hallway, 17).

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=16, step_range=range(0, 17)

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 16, Total actions = 16, Produced sub-goal stages = 0

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 16, Total actions = 16, Produced sub-goal stages = 0

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 16, Total actions = 16, Produced sub-goal stages = 0

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=24']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA79A7F700>]
	incrementor = SolveIncrementor(step_start=16, step_increase=1, step_increase_initial=9, step_end_min=25, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1474.786032200007, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 16), range_=None), IncPart(name='plan_module', args=('#inc', 16, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 16, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 16, 9, 17, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1259 rules

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006462299999839161s

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039045s.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007403s with result Satisfiable.

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7AA13770>

[28-02-2022_23-11-34] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 16)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7AA13770>)

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 16). %* None *%
#program plan_module(#inc, 16, false, false). %* None *%
#program optimisation_module(#inc, 16, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 16, 9, 17, sequential, false). %* None *%

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     15 : Current =     24
Incrementor step ends | Minimum  =     25 : Maximum =    300

[28-02-2022_23-11-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(16), Number(16)]), ('plan_module', [Number(16), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(17), Number(16)]), ('plan_module', [Number(17), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(18), Number(16)]), ('plan_module', [Number(18), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(19), Number(16)]), ('plan_module', [Number(19), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(20), Number(16)]), ('plan_module', [Number(20), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(21), Number(16)]), ('plan_module', [Number(21), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(22), Number(16)]), ('plan_module', [Number(22), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(23), Number(16)]), ('plan_module', [Number(23), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(24), Number(16)]), ('plan_module', [Number(24), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.250058s.

[28-02-2022_23-11-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.621004s with result Satisfiable.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.871061700001519, Incremental time limit = None
Running cumulative time = 3.871061700001519, Cumulative time limit = 1474.786032200007
Used memory = (RSS = 1909.300781Mb, VMS = 1910.808594Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.250058s, Solving = 2.621004s, Total = 3.871062s, Memory = (RSS = 1909.300781Mb, VMS = 1910.808594Mb), Step range = [16-24]), Calls = 1
Final Model :: Total atoms = 12411, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     25 : Maximum =    300

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(16)]), ('plan_module', [Number(25), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.206623s.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043862s with result Unsatisfiable.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2504847999989579, Incremental time limit = None
Running cumulative time = 4.121546500000477, Cumulative time limit = 1474.786032200007
Used memory = (RSS = 1911.148438Mb, VMS = 1914.027344Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     25 : Maximum =    300

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(16)]), ('plan_module', [Number(26), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.208026s.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049117s with result Unsatisfiable.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2571434000001318, Incremental time limit = None
Running cumulative time = 4.378689900000609, Cumulative time limit = 1474.786032200007
Used memory = (RSS = 1913.058594Mb, VMS = 1914.558594Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     25 : Maximum =    300

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(16)]), ('plan_module', [Number(27), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.211602s.

[28-02-2022_23-11-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051646s with result Unsatisfiable.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2632484999994631, Incremental time limit = None
Running cumulative time = 4.641938400000072, Cumulative time limit = 1474.786032200007
Used memory = (RSS = 1914.789062Mb, VMS = 1915.085938Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     25 : Maximum =    300

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(16)]), ('plan_module', [Number(28), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.223681s.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057775s with result Unsatisfiable.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28145609999955923, Incremental time limit = None
Running cumulative time = 4.923394499999631, Cumulative time limit = 1474.786032200007
Used memory = (RSS = 1918.394531Mb, VMS = 1918.078125Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     25 : Maximum =    300

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(16)]), ('plan_module', [Number(29), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(16), Number(9), Number(17), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.227220s.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.096511s with result Satisfiable.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3237307999988843, Incremental time limit = None
Running cumulative time = 5.247125299998515, Cumulative time limit = 1474.786032200007
Used memory = (RSS = 1926.671875Mb, VMS = 1934.824219Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.327210s, Solving = 2.919915s, Total = 5.247125s, Memory = (RSS = 1926.671875Mb, VMS = 1934.824219Mb), Step range = [16-29]), Calls = 6
Final Model :: Total atoms = 16085, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.250058s, Solving = 2.621004s, Total = 3.871062s, Memory = (RSS = 1909.300781Mb, VMS = 1910.808594Mb), Step range = [16-24]
2 : Statistics :: Grounding = 0.206623s, Solving = 0.043862s, Total = 0.250485s, Memory = (RSS = 1911.148438Mb, VMS = 1914.027344Mb), Step range = [25-25]
3 : Statistics :: Grounding = 0.208026s, Solving = 0.049117s, Total = 0.257143s, Memory = (RSS = 1913.058594Mb, VMS = 1914.558594Mb), Step range = [26-26]
4 : Statistics :: Grounding = 0.211602s, Solving = 0.051646s, Total = 0.263248s, Memory = (RSS = 1914.789062Mb, VMS = 1915.085938Mb), Step range = [27-27]
5 : Statistics :: Grounding = 0.223681s, Solving = 0.057775s, Total = 0.281456s, Memory = (RSS = 1918.394531Mb, VMS = 1918.078125Mb), Step range = [28-28]
6 : Statistics :: Grounding = 0.227220s, Solving = 0.096511s, Total = 0.323731s, Memory = (RSS = 1926.671875Mb, VMS = 1934.824219Mb), Step range = [29-29]

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.247125s due to: Stop condition reached.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.327210s, Solving = 2.919915s, Total = 5.247125s, Memory = (RSS = 1926.671875Mb, VMS = 1934.824219Mb), Step range = [16-29]), Calls = 6
Model :: Total atoms = 16085, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 13 :: Actions = 13                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 29 : Goals achieved = 14 : Goals unachieved = 15 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 35 : Goals achieved = 17 : Goals unachieved = 18 : Complete = False

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-1].

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 4, Problem Range = [1-4], Size = 35, Sub-goal Stage Range = [1-35]
Division points [total=3] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 26, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-26]

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 29, Total actions = 29, Produced sub-goal stages = 0

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 29, Total actions = 29, Produced sub-goal stages = 0

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 29, Total actions = 29, Produced sub-goal stages = 0

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-26], problem number = 3, increment number = 3

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 26)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1639.4149060000054)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [18-26] : Concurrency disabled : Minimum search length bound enabled with value 37

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 18
last_sgoals = 26
start_step = 29
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 37

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-11-40] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-40] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 29 as problem start state.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 29})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 29})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 29})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 29})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 29})

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 29).
holds(1, complete_tower(red,puzzle_room_table), false, 29).
holds(1, complete_tower(yellow,puzzle_room_table), false, 29).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 29).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 29).
holds(1, configuration(manipulator_limb_1), retracted, 29).
holds(1, configuration(manipulator_limb_2), retracted, 29).
holds(1, configuration(puzzle_room_door), open, 29).
holds(1, configuration(starting_room_door), closed, 29).
holds(1, configuration(store_room_door), open, 29).
holds(1, grasping(manipulator_arm_1), (block,6), 29).
holds(1, grasping(manipulator_arm_2), (block,5), 29).
holds(1, grasping(manipulator_end_1), (block,6), 29).
holds(1, grasping(manipulator_end_2), (block,5), 29).
holds(1, in((block,1)), (puzzle_room,1), 29).
holds(1, in((block,2)), (puzzle_room,1), 29).
holds(1, in((block,3)), (puzzle_room,1), 29).
holds(1, in((block,4)), (store_room,0), 29).
holds(1, in((block,5)), (hallway,0), 29).
holds(1, in((block,6)), (hallway,0), 29).
holds(1, in((block,7)), (puzzle_room,1), 29).
holds(1, in((block,8)), (store_room,0), 29).
holds(1, in((block,9)), (puzzle_room,1), 29).
holds(1, in(manipulator_arm_1), (hallway,0), 29).
holds(1, in(manipulator_arm_2), (hallway,0), 29).
holds(1, in(manipulator_end_1), (hallway,0), 29).
holds(1, in(manipulator_end_2), (hallway,0), 29).
holds(1, in(manipulator_limb_1), (hallway,0), 29).
holds(1, in(manipulator_limb_2), (hallway,0), 29).
holds(1, in(puzzle_room_table), (puzzle_room,1), 29).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 29).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29).
holds(1, in(talos), (hallway,0), 29).
holds(1, in_tower((block,1),(block,1)), true, 29).
holds(1, in_tower((block,1),(block,2)), false, 29).
holds(1, in_tower((block,1),(block,3)), true, 29).
holds(1, in_tower((block,1),(block,4)), false, 29).
holds(1, in_tower((block,1),(block,5)), false, 29).
holds(1, in_tower((block,1),(block,6)), false, 29).
holds(1, in_tower((block,1),(block,7)), false, 29).
holds(1, in_tower((block,1),(block,8)), false, 29).
holds(1, in_tower((block,1),(block,9)), false, 29).
holds(1, in_tower((block,2),(block,1)), false, 29).
holds(1, in_tower((block,2),(block,2)), true, 29).
holds(1, in_tower((block,2),(block,3)), false, 29).
holds(1, in_tower((block,2),(block,4)), false, 29).
holds(1, in_tower((block,2),(block,5)), false, 29).
holds(1, in_tower((block,2),(block,6)), false, 29).
holds(1, in_tower((block,2),(block,7)), false, 29).
holds(1, in_tower((block,2),(block,8)), false, 29).
holds(1, in_tower((block,2),(block,9)), false, 29).
holds(1, in_tower((block,3),(block,1)), false, 29).
holds(1, in_tower((block,3),(block,2)), false, 29).
holds(1, in_tower((block,3),(block,3)), false, 29).
holds(1, in_tower((block,3),(block,4)), false, 29).
holds(1, in_tower((block,3),(block,5)), false, 29).
holds(1, in_tower((block,3),(block,6)), false, 29).
holds(1, in_tower((block,3),(block,7)), false, 29).
holds(1, in_tower((block,3),(block,8)), false, 29).
holds(1, in_tower((block,3),(block,9)), false, 29).
holds(1, in_tower((block,4),(block,1)), false, 29).
holds(1, in_tower((block,4),(block,2)), false, 29).
holds(1, in_tower((block,4),(block,3)), false, 29).
holds(1, in_tower((block,4),(block,4)), false, 29).
holds(1, in_tower((block,4),(block,5)), false, 29).
holds(1, in_tower((block,4),(block,6)), false, 29).
holds(1, in_tower((block,4),(block,7)), false, 29).
holds(1, in_tower((block,4),(block,8)), false, 29).
holds(1, in_tower((block,4),(block,9)), false, 29).
holds(1, in_tower((block,5),(block,1)), false, 29).
holds(1, in_tower((block,5),(block,2)), false, 29).
holds(1, in_tower((block,5),(block,3)), false, 29).
holds(1, in_tower((block,5),(block,4)), false, 29).
holds(1, in_tower((block,5),(block,5)), false, 29).
holds(1, in_tower((block,5),(block,6)), false, 29).
holds(1, in_tower((block,5),(block,7)), false, 29).
holds(1, in_tower((block,5),(block,8)), false, 29).
holds(1, in_tower((block,5),(block,9)), false, 29).
holds(1, in_tower((block,6),(block,1)), false, 29).
holds(1, in_tower((block,6),(block,2)), false, 29).
holds(1, in_tower((block,6),(block,3)), false, 29).
holds(1, in_tower((block,6),(block,4)), false, 29).
holds(1, in_tower((block,6),(block,5)), false, 29).
holds(1, in_tower((block,6),(block,6)), false, 29).
holds(1, in_tower((block,6),(block,7)), false, 29).
holds(1, in_tower((block,6),(block,8)), false, 29).
holds(1, in_tower((block,6),(block,9)), false, 29).
holds(1, in_tower((block,7),(block,1)), false, 29).
holds(1, in_tower((block,7),(block,2)), false, 29).
holds(1, in_tower((block,7),(block,3)), false, 29).
holds(1, in_tower((block,7),(block,4)), false, 29).
holds(1, in_tower((block,7),(block,5)), false, 29).
holds(1, in_tower((block,7),(block,6)), false, 29).
holds(1, in_tower((block,7),(block,7)), true, 29).
holds(1, in_tower((block,7),(block,8)), false, 29).
holds(1, in_tower((block,7),(block,9)), true, 29).
holds(1, in_tower((block,8),(block,1)), false, 29).
holds(1, in_tower((block,8),(block,2)), false, 29).
holds(1, in_tower((block,8),(block,3)), false, 29).
holds(1, in_tower((block,8),(block,4)), false, 29).
holds(1, in_tower((block,8),(block,5)), false, 29).
holds(1, in_tower((block,8),(block,6)), false, 29).
holds(1, in_tower((block,8),(block,7)), false, 29).
holds(1, in_tower((block,8),(block,8)), false, 29).
holds(1, in_tower((block,8),(block,9)), false, 29).
holds(1, in_tower((block,9),(block,1)), false, 29).
holds(1, in_tower((block,9),(block,2)), false, 29).
holds(1, in_tower((block,9),(block,3)), false, 29).
holds(1, in_tower((block,9),(block,4)), false, 29).
holds(1, in_tower((block,9),(block,5)), false, 29).
holds(1, in_tower((block,9),(block,6)), false, 29).
holds(1, in_tower((block,9),(block,7)), false, 29).
holds(1, in_tower((block,9),(block,8)), false, 29).
holds(1, in_tower((block,9),(block,9)), false, 29).
holds(1, on((block,1)), puzzle_room_table_left, 29).
holds(1, on((block,2)), puzzle_room_table_right, 29).
holds(1, on((block,3)), (block,1), 29).
holds(1, on((block,4)), nothing, 29).
holds(1, on((block,5)), nothing, 29).
holds(1, on((block,6)), nothing, 29).
holds(1, on((block,7)), puzzle_room_table_middle, 29).
holds(1, on((block,8)), nothing, 29).
holds(1, on((block,9)), (block,7), 29).
holds(1, tower_base((block,1),puzzle_room_table), true, 29).
holds(1, tower_base((block,2),puzzle_room_table), true, 29).
holds(1, tower_base((block,3),puzzle_room_table), false, 29).
holds(1, tower_base((block,4),puzzle_room_table), false, 29).
holds(1, tower_base((block,5),puzzle_room_table), false, 29).
holds(1, tower_base((block,6),puzzle_room_table), false, 29).
holds(1, tower_base((block,7),puzzle_room_table), true, 29).
holds(1, tower_base((block,8),puzzle_room_table), false, 29).
holds(1, tower_base((block,9),puzzle_room_table), false, 29).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 29).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 29).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 29).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 29).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 29).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 29).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 29).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 29).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 29).
holds(2, complete_tower(blue,puzzle_room_table), false, 29).
holds(2, complete_tower(red,puzzle_room_table), false, 29).
holds(2, complete_tower(yellow,puzzle_room_table), false, 29).
holds(2, configuration(manipulator_arm_1), retracted, 29).
holds(2, configuration(manipulator_arm_2), retracted, 29).
holds(2, configuration(puzzle_room_door), open, 29).
holds(2, configuration(starting_room_door), closed, 29).
holds(2, configuration(store_room_door), open, 29).
holds(2, grasping(manipulator_arm_1), (block,6), 29).
holds(2, grasping(manipulator_arm_2), (block,5), 29).
holds(2, in((block,1)), puzzle_room, 29).
holds(2, in((block,2)), puzzle_room, 29).
holds(2, in((block,3)), puzzle_room, 29).
holds(2, in((block,4)), store_room, 29).
holds(2, in((block,5)), hallway, 29).
holds(2, in((block,6)), hallway, 29).
holds(2, in((block,7)), puzzle_room, 29).
holds(2, in((block,8)), store_room, 29).
holds(2, in((block,9)), puzzle_room, 29).
holds(2, in(manipulator_arm_1), hallway, 29).
holds(2, in(manipulator_arm_2), hallway, 29).
holds(2, in(puzzle_room_table), puzzle_room, 29).
holds(2, in(talos), hallway, 29).
holds(2, in_tower((block,1),(block,1)), true, 29).
holds(2, in_tower((block,1),(block,2)), false, 29).
holds(2, in_tower((block,1),(block,3)), true, 29).
holds(2, in_tower((block,1),(block,4)), false, 29).
holds(2, in_tower((block,1),(block,5)), false, 29).
holds(2, in_tower((block,1),(block,6)), false, 29).
holds(2, in_tower((block,1),(block,7)), false, 29).
holds(2, in_tower((block,1),(block,8)), false, 29).
holds(2, in_tower((block,1),(block,9)), false, 29).
holds(2, in_tower((block,2),(block,1)), false, 29).
holds(2, in_tower((block,2),(block,2)), true, 29).
holds(2, in_tower((block,2),(block,3)), false, 29).
holds(2, in_tower((block,2),(block,4)), false, 29).
holds(2, in_tower((block,2),(block,5)), false, 29).
holds(2, in_tower((block,2),(block,6)), false, 29).
holds(2, in_tower((block,2),(block,7)), false, 29).
holds(2, in_tower((block,2),(block,8)), false, 29).
holds(2, in_tower((block,2),(block,9)), false, 29).
holds(2, in_tower((block,3),(block,1)), false, 29).
holds(2, in_tower((block,3),(block,2)), false, 29).
holds(2, in_tower((block,3),(block,3)), false, 29).
holds(2, in_tower((block,3),(block,4)), false, 29).
holds(2, in_tower((block,3),(block,5)), false, 29).
holds(2, in_tower((block,3),(block,6)), false, 29).
holds(2, in_tower((block,3),(block,7)), false, 29).
holds(2, in_tower((block,3),(block,8)), false, 29).
holds(2, in_tower((block,3),(block,9)), false, 29).
holds(2, in_tower((block,4),(block,1)), false, 29).
holds(2, in_tower((block,4),(block,2)), false, 29).
holds(2, in_tower((block,4),(block,3)), false, 29).
holds(2, in_tower((block,4),(block,4)), false, 29).
holds(2, in_tower((block,4),(block,5)), false, 29).
holds(2, in_tower((block,4),(block,6)), false, 29).
holds(2, in_tower((block,4),(block,7)), false, 29).
holds(2, in_tower((block,4),(block,8)), false, 29).
holds(2, in_tower((block,4),(block,9)), false, 29).
holds(2, in_tower((block,5),(block,1)), false, 29).
holds(2, in_tower((block,5),(block,2)), false, 29).
holds(2, in_tower((block,5),(block,3)), false, 29).
holds(2, in_tower((block,5),(block,4)), false, 29).
holds(2, in_tower((block,5),(block,5)), false, 29).
holds(2, in_tower((block,5),(block,6)), false, 29).
holds(2, in_tower((block,5),(block,7)), false, 29).
holds(2, in_tower((block,5),(block,8)), false, 29).
holds(2, in_tower((block,5),(block,9)), false, 29).
holds(2, in_tower((block,6),(block,1)), false, 29).
holds(2, in_tower((block,6),(block,2)), false, 29).
holds(2, in_tower((block,6),(block,3)), false, 29).
holds(2, in_tower((block,6),(block,4)), false, 29).
holds(2, in_tower((block,6),(block,5)), false, 29).
holds(2, in_tower((block,6),(block,6)), false, 29).
holds(2, in_tower((block,6),(block,7)), false, 29).
holds(2, in_tower((block,6),(block,8)), false, 29).
holds(2, in_tower((block,6),(block,9)), false, 29).
holds(2, in_tower((block,7),(block,1)), false, 29).
holds(2, in_tower((block,7),(block,2)), false, 29).
holds(2, in_tower((block,7),(block,3)), false, 29).
holds(2, in_tower((block,7),(block,4)), false, 29).
holds(2, in_tower((block,7),(block,5)), false, 29).
holds(2, in_tower((block,7),(block,6)), false, 29).
holds(2, in_tower((block,7),(block,7)), true, 29).
holds(2, in_tower((block,7),(block,8)), false, 29).
holds(2, in_tower((block,7),(block,9)), true, 29).
holds(2, in_tower((block,8),(block,1)), false, 29).
holds(2, in_tower((block,8),(block,2)), false, 29).
holds(2, in_tower((block,8),(block,3)), false, 29).
holds(2, in_tower((block,8),(block,4)), false, 29).
holds(2, in_tower((block,8),(block,5)), false, 29).
holds(2, in_tower((block,8),(block,6)), false, 29).
holds(2, in_tower((block,8),(block,7)), false, 29).
holds(2, in_tower((block,8),(block,8)), false, 29).
holds(2, in_tower((block,8),(block,9)), false, 29).
holds(2, in_tower((block,9),(block,1)), false, 29).
holds(2, in_tower((block,9),(block,2)), false, 29).
holds(2, in_tower((block,9),(block,3)), false, 29).
holds(2, in_tower((block,9),(block,4)), false, 29).
holds(2, in_tower((block,9),(block,5)), false, 29).
holds(2, in_tower((block,9),(block,6)), false, 29).
holds(2, in_tower((block,9),(block,7)), false, 29).
holds(2, in_tower((block,9),(block,8)), false, 29).
holds(2, in_tower((block,9),(block,9)), false, 29).
holds(2, on((block,1)), puzzle_room_table, 29).
holds(2, on((block,2)), puzzle_room_table, 29).
holds(2, on((block,3)), (block,1), 29).
holds(2, on((block,4)), nothing, 29).
holds(2, on((block,5)), nothing, 29).
holds(2, on((block,6)), nothing, 29).
holds(2, on((block,7)), puzzle_room_table, 29).
holds(2, on((block,8)), nothing, 29).
holds(2, on((block,9)), (block,7), 29).
holds(2, tower_base((block,1),puzzle_room_table), true, 29).
holds(2, tower_base((block,2),puzzle_room_table), true, 29).
holds(2, tower_base((block,3),puzzle_room_table), false, 29).
holds(2, tower_base((block,4),puzzle_room_table), false, 29).
holds(2, tower_base((block,5),puzzle_room_table), false, 29).
holds(2, tower_base((block,6),puzzle_room_table), false, 29).
holds(2, tower_base((block,7),puzzle_room_table), true, 29).
holds(2, tower_base((block,8),puzzle_room_table), false, 29).
holds(2, tower_base((block,9),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 29).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 29).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 29).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 29).

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=37']

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 26})

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 18).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 19).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 21).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 22).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 23).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 24).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 25).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 26).

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 29, Total actions = 29, Produced sub-goal stages = 0

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 29, Total actions = 29, Produced sub-goal stages = 0

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 29, Total actions = 29, Produced sub-goal stages = 0

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=37']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA79425C10>]
	incrementor = SolveIncrementor(step_start=29, step_increase=1, step_increase_initial=9, step_end_min=38, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1469.5389069000084, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 29), range_=None), IncPart(name='plan_module', args=('#inc', 29, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 29, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 29, 18, 26, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1259 rules

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00648899999941932s

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039801s.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007133s with result Satisfiable.

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7B4ADC70>

[28-02-2022_23-11-40] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 29)
	('last_sgoals', 26)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 18)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7B4ADC70>)

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 29). %* None *%
#program plan_module(#inc, 29, false, false). %* None *%
#program optimisation_module(#inc, 29, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 29, 18, 26, sequential, false). %* None *%

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     28 : Current =     37
Incrementor step ends | Minimum  =     38 : Maximum =    300

[28-02-2022_23-11-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(29), Number(29)]), ('plan_module', [Number(29), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(29)]), ('plan_module', [Number(30), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(29)]), ('plan_module', [Number(31), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(29)]), ('plan_module', [Number(32), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(29)]), ('plan_module', [Number(33), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(29)]), ('plan_module', [Number(34), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(29)]), ('plan_module', [Number(35), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(29)]), ('plan_module', [Number(36), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(29)]), ('plan_module', [Number(37), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.244409s.

[28-02-2022_23-11-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.570875s with result Satisfiable.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.8152836000008392, Incremental time limit = None
Running cumulative time = 1.8152836000008392, Cumulative time limit = 1469.5389069000084
Used memory = (RSS = 1912.535156Mb, VMS = 1913.941406Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.244409s, Solving = 0.570875s, Total = 1.815284s, Memory = (RSS = 1912.535156Mb, VMS = 1913.941406Mb), Step range = [29-37]), Calls = 1
Final Model :: Total atoms = 12396, Cost = (-3,), Optimality proven = False, Number = 4, Thread ID = 3, Model type = ModelType.StableModel

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     38 : Maximum =    300

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(29)]), ('plan_module', [Number(38), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.207593s.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052245s with result Unsatisfiable.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25983800000176416, Incremental time limit = None
Running cumulative time = 2.0751216000026034, Cumulative time limit = 1469.5389069000084
Used memory = (RSS = 1914.265625Mb, VMS = 1917.316406Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     38 : Maximum =    300

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(29)]), ('plan_module', [Number(39), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.206514s.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041135s with result Unsatisfiable.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2476487999992969, Incremental time limit = None
Running cumulative time = 2.3227704000019003, Cumulative time limit = 1469.5389069000084
Used memory = (RSS = 1916.050781Mb, VMS = 1917.843750Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     38 : Maximum =    300

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(29)]), ('plan_module', [Number(40), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.213696s.

[28-02-2022_23-11-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044213s with result Unsatisfiable.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25790929999857326, Incremental time limit = None
Running cumulative time = 2.5806797000004735, Cumulative time limit = 1469.5389069000084
Used memory = (RSS = 1917.972656Mb, VMS = 1918.367188Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     38 : Maximum =    300

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(29)]), ('plan_module', [Number(41), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.217127s.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050412s with result Unsatisfiable.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26753910000115866, Incremental time limit = None
Running cumulative time = 2.848218800001632, Cumulative time limit = 1469.5389069000084
Used memory = (RSS = 1921.582031Mb, VMS = 1921.375000Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     38 : Maximum =    300

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(29)]), ('plan_module', [Number(42), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(29), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(29), Number(18), Number(26), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.221558s.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.089245s with result Satisfiable.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3108030000003055, Incremental time limit = None
Running cumulative time = 3.1590218000019377, Cumulative time limit = 1469.5389069000084
Used memory = (RSS = 1932.113281Mb, VMS = 1940.500000Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.310897s, Solving = 0.848125s, Total = 3.159022s, Memory = (RSS = 1932.113281Mb, VMS = 1940.500000Mb), Step range = [29-42]), Calls = 6
Final Model :: Total atoms = 16069, Cost = (-3,), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.244409s, Solving = 0.570875s, Total = 1.815284s, Memory = (RSS = 1912.535156Mb, VMS = 1913.941406Mb), Step range = [29-37]
2 : Statistics :: Grounding = 0.207593s, Solving = 0.052245s, Total = 0.259838s, Memory = (RSS = 1914.265625Mb, VMS = 1917.316406Mb), Step range = [38-38]
3 : Statistics :: Grounding = 0.206514s, Solving = 0.041135s, Total = 0.247649s, Memory = (RSS = 1916.050781Mb, VMS = 1917.843750Mb), Step range = [39-39]
4 : Statistics :: Grounding = 0.213696s, Solving = 0.044213s, Total = 0.257909s, Memory = (RSS = 1917.972656Mb, VMS = 1918.367188Mb), Step range = [40-40]
5 : Statistics :: Grounding = 0.217127s, Solving = 0.050412s, Total = 0.267539s, Memory = (RSS = 1921.582031Mb, VMS = 1921.375000Mb), Step range = [41-41]
6 : Statistics :: Grounding = 0.221558s, Solving = 0.089245s, Total = 0.310803s, Memory = (RSS = 1932.113281Mb, VMS = 1940.500000Mb), Step range = [42-42]

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.159022s due to: Stop condition reached.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 26, Last requested goal index = 26, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.310897s, Solving = 0.848125s, Total = 3.159022s, Memory = (RSS = 1932.113281Mb, VMS = 1940.500000Mb), Step range = [29-42]), Calls = 6
Model :: Total atoms = 16069, Cost = (-3,), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 13 :: Actions = 13                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 29 : Goals achieved = 14 : Goals unachieved = 15 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 35 : Goals achieved = 26 : Goals unachieved = 9 : Complete = False

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-1].

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 4, Problem Range = [1-4], Size = 35, Sub-goal Stage Range = [1-35]
Division points [total=3] : [(Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 26, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [27-35]

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=42, step_range=range(0, 43)

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [27-35], problem number = 4, increment number = 4

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 27)
	('last_sgoals', 35)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1639.4149060000054)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [27-35] : Concurrency disabled : Minimum search length bound enabled with value 50

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 27
last_sgoals = 35
start_step = 42
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 50

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-11-44] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-44] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 42 as problem start state.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 42})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 42})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 42})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 42})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 42})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 42})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 42})

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 42).
holds(1, complete_tower(red,puzzle_room_table), false, 42).
holds(1, complete_tower(yellow,puzzle_room_table), false, 42).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 42).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 42).
holds(1, configuration(manipulator_limb_1), extended, 42).
holds(1, configuration(manipulator_limb_2), extended, 42).
holds(1, configuration(puzzle_room_door), open, 42).
holds(1, configuration(starting_room_door), closed, 42).
holds(1, configuration(store_room_door), open, 42).
holds(1, grasping(manipulator_arm_1), nothing, 42).
holds(1, grasping(manipulator_arm_2), (block,5), 42).
holds(1, grasping(manipulator_end_1), nothing, 42).
holds(1, grasping(manipulator_end_2), (block,5), 42).
holds(1, in((block,1)), (puzzle_room,1), 42).
holds(1, in((block,2)), (puzzle_room,1), 42).
holds(1, in((block,3)), (puzzle_room,1), 42).
holds(1, in((block,4)), (store_room,0), 42).
holds(1, in((block,5)), (puzzle_room,1), 42).
holds(1, in((block,6)), (puzzle_room,1), 42).
holds(1, in((block,7)), (puzzle_room,1), 42).
holds(1, in((block,8)), (store_room,0), 42).
holds(1, in((block,9)), (puzzle_room,1), 42).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 42).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 42).
holds(1, in(manipulator_end_1), (puzzle_room,1), 42).
holds(1, in(manipulator_end_2), (puzzle_room,1), 42).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 42).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 42).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 42).
holds(1, in(talos), (puzzle_room,1), 42).
holds(1, in_tower((block,1),(block,1)), true, 42).
holds(1, in_tower((block,1),(block,2)), false, 42).
holds(1, in_tower((block,1),(block,3)), false, 42).
holds(1, in_tower((block,1),(block,4)), false, 42).
holds(1, in_tower((block,1),(block,5)), false, 42).
holds(1, in_tower((block,1),(block,6)), false, 42).
holds(1, in_tower((block,1),(block,7)), false, 42).
holds(1, in_tower((block,1),(block,8)), false, 42).
holds(1, in_tower((block,1),(block,9)), false, 42).
holds(1, in_tower((block,2),(block,1)), false, 42).
holds(1, in_tower((block,2),(block,2)), true, 42).
holds(1, in_tower((block,2),(block,3)), false, 42).
holds(1, in_tower((block,2),(block,4)), false, 42).
holds(1, in_tower((block,2),(block,5)), false, 42).
holds(1, in_tower((block,2),(block,6)), false, 42).
holds(1, in_tower((block,2),(block,7)), false, 42).
holds(1, in_tower((block,2),(block,8)), false, 42).
holds(1, in_tower((block,2),(block,9)), false, 42).
holds(1, in_tower((block,3),(block,1)), false, 42).
holds(1, in_tower((block,3),(block,2)), false, 42).
holds(1, in_tower((block,3),(block,3)), true, 42).
holds(1, in_tower((block,3),(block,4)), false, 42).
holds(1, in_tower((block,3),(block,5)), false, 42).
holds(1, in_tower((block,3),(block,6)), false, 42).
holds(1, in_tower((block,3),(block,7)), false, 42).
holds(1, in_tower((block,3),(block,8)), false, 42).
holds(1, in_tower((block,3),(block,9)), false, 42).
holds(1, in_tower((block,4),(block,1)), false, 42).
holds(1, in_tower((block,4),(block,2)), false, 42).
holds(1, in_tower((block,4),(block,3)), false, 42).
holds(1, in_tower((block,4),(block,4)), false, 42).
holds(1, in_tower((block,4),(block,5)), false, 42).
holds(1, in_tower((block,4),(block,6)), false, 42).
holds(1, in_tower((block,4),(block,7)), false, 42).
holds(1, in_tower((block,4),(block,8)), false, 42).
holds(1, in_tower((block,4),(block,9)), false, 42).
holds(1, in_tower((block,5),(block,1)), false, 42).
holds(1, in_tower((block,5),(block,2)), false, 42).
holds(1, in_tower((block,5),(block,3)), false, 42).
holds(1, in_tower((block,5),(block,4)), false, 42).
holds(1, in_tower((block,5),(block,5)), false, 42).
holds(1, in_tower((block,5),(block,6)), false, 42).
holds(1, in_tower((block,5),(block,7)), false, 42).
holds(1, in_tower((block,5),(block,8)), false, 42).
holds(1, in_tower((block,5),(block,9)), false, 42).
holds(1, in_tower((block,6),(block,1)), false, 42).
holds(1, in_tower((block,6),(block,2)), false, 42).
holds(1, in_tower((block,6),(block,3)), false, 42).
holds(1, in_tower((block,6),(block,4)), false, 42).
holds(1, in_tower((block,6),(block,5)), true, 42).
holds(1, in_tower((block,6),(block,6)), true, 42).
holds(1, in_tower((block,6),(block,7)), false, 42).
holds(1, in_tower((block,6),(block,8)), false, 42).
holds(1, in_tower((block,6),(block,9)), false, 42).
holds(1, in_tower((block,7),(block,1)), false, 42).
holds(1, in_tower((block,7),(block,2)), false, 42).
holds(1, in_tower((block,7),(block,3)), false, 42).
holds(1, in_tower((block,7),(block,4)), false, 42).
holds(1, in_tower((block,7),(block,5)), false, 42).
holds(1, in_tower((block,7),(block,6)), false, 42).
holds(1, in_tower((block,7),(block,7)), true, 42).
holds(1, in_tower((block,7),(block,8)), false, 42).
holds(1, in_tower((block,7),(block,9)), true, 42).
holds(1, in_tower((block,8),(block,1)), false, 42).
holds(1, in_tower((block,8),(block,2)), false, 42).
holds(1, in_tower((block,8),(block,3)), false, 42).
holds(1, in_tower((block,8),(block,4)), false, 42).
holds(1, in_tower((block,8),(block,5)), false, 42).
holds(1, in_tower((block,8),(block,6)), false, 42).
holds(1, in_tower((block,8),(block,7)), false, 42).
holds(1, in_tower((block,8),(block,8)), false, 42).
holds(1, in_tower((block,8),(block,9)), false, 42).
holds(1, in_tower((block,9),(block,1)), false, 42).
holds(1, in_tower((block,9),(block,2)), false, 42).
holds(1, in_tower((block,9),(block,3)), false, 42).
holds(1, in_tower((block,9),(block,4)), false, 42).
holds(1, in_tower((block,9),(block,5)), false, 42).
holds(1, in_tower((block,9),(block,6)), false, 42).
holds(1, in_tower((block,9),(block,7)), false, 42).
holds(1, in_tower((block,9),(block,8)), false, 42).
holds(1, in_tower((block,9),(block,9)), false, 42).
holds(1, on((block,1)), puzzle_room_table_left, 42).
holds(1, on((block,2)), puzzle_room_table_right, 42).
holds(1, on((block,3)), puzzle_room_table_left, 42).
holds(1, on((block,4)), nothing, 42).
holds(1, on((block,5)), (block,6), 42).
holds(1, on((block,6)), puzzle_room_table_right, 42).
holds(1, on((block,7)), puzzle_room_table_middle, 42).
holds(1, on((block,8)), nothing, 42).
holds(1, on((block,9)), (block,7), 42).
holds(1, tower_base((block,1),puzzle_room_table), true, 42).
holds(1, tower_base((block,2),puzzle_room_table), true, 42).
holds(1, tower_base((block,3),puzzle_room_table), true, 42).
holds(1, tower_base((block,4),puzzle_room_table), false, 42).
holds(1, tower_base((block,5),puzzle_room_table), false, 42).
holds(1, tower_base((block,6),puzzle_room_table), true, 42).
holds(1, tower_base((block,7),puzzle_room_table), true, 42).
holds(1, tower_base((block,8),puzzle_room_table), false, 42).
holds(1, tower_base((block,9),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 42).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 42).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 42).
holds(2, complete_tower(blue,puzzle_room_table), false, 42).
holds(2, complete_tower(red,puzzle_room_table), false, 42).
holds(2, complete_tower(yellow,puzzle_room_table), false, 42).
holds(2, configuration(manipulator_arm_1), extended, 42).
holds(2, configuration(manipulator_arm_2), extended, 42).
holds(2, configuration(puzzle_room_door), open, 42).
holds(2, configuration(starting_room_door), closed, 42).
holds(2, configuration(store_room_door), open, 42).
holds(2, grasping(manipulator_arm_1), nothing, 42).
holds(2, grasping(manipulator_arm_2), (block,5), 42).
holds(2, in((block,1)), puzzle_room, 42).
holds(2, in((block,2)), puzzle_room, 42).
holds(2, in((block,3)), puzzle_room, 42).
holds(2, in((block,4)), store_room, 42).
holds(2, in((block,5)), puzzle_room, 42).
holds(2, in((block,6)), puzzle_room, 42).
holds(2, in((block,7)), puzzle_room, 42).
holds(2, in((block,8)), store_room, 42).
holds(2, in((block,9)), puzzle_room, 42).
holds(2, in(manipulator_arm_1), puzzle_room, 42).
holds(2, in(manipulator_arm_2), puzzle_room, 42).
holds(2, in(puzzle_room_table), puzzle_room, 42).
holds(2, in(talos), puzzle_room, 42).
holds(2, in_tower((block,1),(block,1)), true, 42).
holds(2, in_tower((block,1),(block,2)), false, 42).
holds(2, in_tower((block,1),(block,3)), false, 42).
holds(2, in_tower((block,1),(block,4)), false, 42).
holds(2, in_tower((block,1),(block,5)), false, 42).
holds(2, in_tower((block,1),(block,6)), false, 42).
holds(2, in_tower((block,1),(block,7)), false, 42).
holds(2, in_tower((block,1),(block,8)), false, 42).
holds(2, in_tower((block,1),(block,9)), false, 42).
holds(2, in_tower((block,2),(block,1)), false, 42).
holds(2, in_tower((block,2),(block,2)), true, 42).
holds(2, in_tower((block,2),(block,3)), false, 42).
holds(2, in_tower((block,2),(block,4)), false, 42).
holds(2, in_tower((block,2),(block,5)), false, 42).
holds(2, in_tower((block,2),(block,6)), false, 42).
holds(2, in_tower((block,2),(block,7)), false, 42).
holds(2, in_tower((block,2),(block,8)), false, 42).
holds(2, in_tower((block,2),(block,9)), false, 42).
holds(2, in_tower((block,3),(block,1)), false, 42).
holds(2, in_tower((block,3),(block,2)), false, 42).
holds(2, in_tower((block,3),(block,3)), true, 42).
holds(2, in_tower((block,3),(block,4)), false, 42).
holds(2, in_tower((block,3),(block,5)), false, 42).
holds(2, in_tower((block,3),(block,6)), false, 42).
holds(2, in_tower((block,3),(block,7)), false, 42).
holds(2, in_tower((block,3),(block,8)), false, 42).
holds(2, in_tower((block,3),(block,9)), false, 42).
holds(2, in_tower((block,4),(block,1)), false, 42).
holds(2, in_tower((block,4),(block,2)), false, 42).
holds(2, in_tower((block,4),(block,3)), false, 42).
holds(2, in_tower((block,4),(block,4)), false, 42).
holds(2, in_tower((block,4),(block,5)), false, 42).
holds(2, in_tower((block,4),(block,6)), false, 42).
holds(2, in_tower((block,4),(block,7)), false, 42).
holds(2, in_tower((block,4),(block,8)), false, 42).
holds(2, in_tower((block,4),(block,9)), false, 42).
holds(2, in_tower((block,5),(block,1)), false, 42).
holds(2, in_tower((block,5),(block,2)), false, 42).
holds(2, in_tower((block,5),(block,3)), false, 42).
holds(2, in_tower((block,5),(block,4)), false, 42).
holds(2, in_tower((block,5),(block,5)), false, 42).
holds(2, in_tower((block,5),(block,6)), false, 42).
holds(2, in_tower((block,5),(block,7)), false, 42).
holds(2, in_tower((block,5),(block,8)), false, 42).
holds(2, in_tower((block,5),(block,9)), false, 42).
holds(2, in_tower((block,6),(block,1)), false, 42).
holds(2, in_tower((block,6),(block,2)), false, 42).
holds(2, in_tower((block,6),(block,3)), false, 42).
holds(2, in_tower((block,6),(block,4)), false, 42).
holds(2, in_tower((block,6),(block,5)), true, 42).
holds(2, in_tower((block,6),(block,6)), true, 42).
holds(2, in_tower((block,6),(block,7)), false, 42).
holds(2, in_tower((block,6),(block,8)), false, 42).
holds(2, in_tower((block,6),(block,9)), false, 42).
holds(2, in_tower((block,7),(block,1)), false, 42).
holds(2, in_tower((block,7),(block,2)), false, 42).
holds(2, in_tower((block,7),(block,3)), false, 42).
holds(2, in_tower((block,7),(block,4)), false, 42).
holds(2, in_tower((block,7),(block,5)), false, 42).
holds(2, in_tower((block,7),(block,6)), false, 42).
holds(2, in_tower((block,7),(block,7)), true, 42).
holds(2, in_tower((block,7),(block,8)), false, 42).
holds(2, in_tower((block,7),(block,9)), true, 42).
holds(2, in_tower((block,8),(block,1)), false, 42).
holds(2, in_tower((block,8),(block,2)), false, 42).
holds(2, in_tower((block,8),(block,3)), false, 42).
holds(2, in_tower((block,8),(block,4)), false, 42).
holds(2, in_tower((block,8),(block,5)), false, 42).
holds(2, in_tower((block,8),(block,6)), false, 42).
holds(2, in_tower((block,8),(block,7)), false, 42).
holds(2, in_tower((block,8),(block,8)), false, 42).
holds(2, in_tower((block,8),(block,9)), false, 42).
holds(2, in_tower((block,9),(block,1)), false, 42).
holds(2, in_tower((block,9),(block,2)), false, 42).
holds(2, in_tower((block,9),(block,3)), false, 42).
holds(2, in_tower((block,9),(block,4)), false, 42).
holds(2, in_tower((block,9),(block,5)), false, 42).
holds(2, in_tower((block,9),(block,6)), false, 42).
holds(2, in_tower((block,9),(block,7)), false, 42).
holds(2, in_tower((block,9),(block,8)), false, 42).
holds(2, in_tower((block,9),(block,9)), false, 42).
holds(2, on((block,1)), puzzle_room_table, 42).
holds(2, on((block,2)), puzzle_room_table, 42).
holds(2, on((block,3)), puzzle_room_table, 42).
holds(2, on((block,4)), nothing, 42).
holds(2, on((block,5)), (block,6), 42).
holds(2, on((block,6)), puzzle_room_table, 42).
holds(2, on((block,7)), puzzle_room_table, 42).
holds(2, on((block,8)), nothing, 42).
holds(2, on((block,9)), (block,7), 42).
holds(2, tower_base((block,1),puzzle_room_table), true, 42).
holds(2, tower_base((block,2),puzzle_room_table), true, 42).
holds(2, tower_base((block,3),puzzle_room_table), true, 42).
holds(2, tower_base((block,4),puzzle_room_table), false, 42).
holds(2, tower_base((block,5),puzzle_room_table), false, 42).
holds(2, tower_base((block,6),puzzle_room_table), true, 42).
holds(2, tower_base((block,7),puzzle_room_table), true, 42).
holds(2, tower_base((block,8),puzzle_room_table), false, 42).
holds(2, tower_base((block,9),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 42).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 42).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 42).

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=50']

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'I': 35})

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 9 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 27).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 28).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 29).
sub_goal(2, talos, move(hallway), in(talos), hallway, 30).
sub_goal(2, talos, move(store_room), in(talos), store_room, 31).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 32).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 33).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 34).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 35).

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=42, step_range=range(0, 43)

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 42, Total actions = 42, Produced sub-goal stages = 0

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=50']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA79425430>]
	incrementor = SolveIncrementor(step_start=42, step_increase=1, step_increase_initial=9, step_end_min=51, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1466.3798851000065, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 42), range_=None), IncPart(name='plan_module', args=('#inc', 42, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 42, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 42, 27, 35, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1259 rules

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006485699999757344s

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.038941s.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007872s with result Satisfiable.

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7CA8CF40>

[28-02-2022_23-11-44] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 42)
	('last_sgoals', 35)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 27)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7CA8CF40>)

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 42). %* None *%
#program plan_module(#inc, 42, false, false). %* None *%
#program optimisation_module(#inc, 42, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 42, 27, 35, sequential, false). %* None *%

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     41 : Current =     50
Incrementor step ends | Minimum  =     51 : Maximum =    300

[28-02-2022_23-11-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(42), Number(42)]), ('plan_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(42)]), ('plan_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(42)]), ('plan_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(42)]), ('plan_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(46), Number(42)]), ('plan_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(47), Number(42)]), ('plan_module', [Number(47), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(48), Number(42)]), ('plan_module', [Number(48), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(49), Number(42)]), ('plan_module', [Number(49), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(50), Number(42)]), ('plan_module', [Number(50), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.220927s.

[28-02-2022_23-11-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.669027s with result Satisfiable.

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.8899540000002162, Incremental time limit = None
Running cumulative time = 1.8899540000002162, Cumulative time limit = 1466.3798851000065
Used memory = (RSS = 1917.867188Mb, VMS = 1919.398438Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.220927s, Solving = 0.669027s, Total = 1.889954s, Memory = (RSS = 1917.867188Mb, VMS = 1919.398438Mb), Step range = [42-50]), Calls = 1
Final Model :: Total atoms = 12398, Cost = (-8,), Optimality proven = False, Number = 7, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     51 : Maximum =    300

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(42)]), ('plan_module', [Number(51), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.210638s.

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043102s with result Unsatisfiable.

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2537399999982881, Incremental time limit = None
Running cumulative time = 2.1436939999985043, Cumulative time limit = 1466.3798851000065
Used memory = (RSS = 1919.773438Mb, VMS = 1922.625000Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     51 : Maximum =    300

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(42)]), ('plan_module', [Number(52), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.210466s.

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044588s with result Unsatisfiable.

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2550539000003482, Incremental time limit = None
Running cumulative time = 2.3987478999988525, Cumulative time limit = 1466.3798851000065
Used memory = (RSS = 1921.671875Mb, VMS = 1923.156250Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     51 : Maximum =    300

[28-02-2022_23-11-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(42)]), ('plan_module', [Number(53), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.214813s.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049886s with result Unsatisfiable.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.26469879999967816, Incremental time limit = None
Running cumulative time = 2.6634466999985307, Cumulative time limit = 1466.3798851000065
Used memory = (RSS = 1923.511719Mb, VMS = 1923.683594Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     51 : Maximum =    300

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(42)]), ('plan_module', [Number(54), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218963s.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055065s with result Unsatisfiable.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2740284999981668, Incremental time limit = None
Running cumulative time = 2.9374751999966975, Cumulative time limit = 1466.3798851000065
Used memory = (RSS = 1927.078125Mb, VMS = 1926.679688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     51 : Maximum =    300

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(42)]), ('plan_module', [Number(55), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.223123s.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058316s with result Unsatisfiable.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28143869999985327, Incremental time limit = None
Running cumulative time = 3.2189138999965508, Cumulative time limit = 1466.3798851000065
Used memory = (RSS = 1935.296875Mb, VMS = 1943.507812Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     51 : Maximum =    300

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(42)]), ('plan_module', [Number(56), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.227217s.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057617s with result Unsatisfiable.

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2848340999989887, Incremental time limit = None
Running cumulative time = 3.5037479999955394, Cumulative time limit = 1466.3798851000065
Used memory = (RSS = 1937.855469Mb, VMS = 1944.035156Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     51 : Maximum =    300

[28-02-2022_23-11-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(42)]), ('plan_module', [Number(57), Number(42), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(42), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(42), Number(27), Number(35), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.228127s.

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.091701s with result Satisfiable.

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3198283999990963, Incremental time limit = None
Running cumulative time = 3.8235763999946357, Cumulative time limit = 1466.3798851000065
Used memory = (RSS = 1941.570312Mb, VMS = 1946.058594Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.754274s, Solving = 1.069302s, Total = 3.823576s, Memory = (RSS = 1941.570312Mb, VMS = 1946.058594Mb), Step range = [42-57]), Calls = 8
Final Model :: Total atoms = 17558, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.220927s, Solving = 0.669027s, Total = 1.889954s, Memory = (RSS = 1917.867188Mb, VMS = 1919.398438Mb), Step range = [42-50]
2 : Statistics :: Grounding = 0.210638s, Solving = 0.043102s, Total = 0.253740s, Memory = (RSS = 1919.773438Mb, VMS = 1922.625000Mb), Step range = [51-51]
3 : Statistics :: Grounding = 0.210466s, Solving = 0.044588s, Total = 0.255054s, Memory = (RSS = 1921.671875Mb, VMS = 1923.156250Mb), Step range = [52-52]
4 : Statistics :: Grounding = 0.214813s, Solving = 0.049886s, Total = 0.264699s, Memory = (RSS = 1923.511719Mb, VMS = 1923.683594Mb), Step range = [53-53]
5 : Statistics :: Grounding = 0.218963s, Solving = 0.055065s, Total = 0.274028s, Memory = (RSS = 1927.078125Mb, VMS = 1926.679688Mb), Step range = [54-54]
6 : Statistics :: Grounding = 0.223123s, Solving = 0.058316s, Total = 0.281439s, Memory = (RSS = 1935.296875Mb, VMS = 1943.507812Mb), Step range = [55-55]
7 : Statistics :: Grounding = 0.227217s, Solving = 0.057617s, Total = 0.284834s, Memory = (RSS = 1937.855469Mb, VMS = 1944.035156Mb), Step range = [56-56]
8 : Statistics :: Grounding = 0.228127s, Solving = 0.091701s, Total = 0.319828s, Memory = (RSS = 1941.570312Mb, VMS = 1946.058594Mb), Step range = [57-57]

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.823576s due to: Stop condition reached.

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-48] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-48] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-48] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 35, Last requested goal index = 35, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-48] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.754274s, Solving = 1.069302s, Total = 3.823576s, Memory = (RSS = 1941.570312Mb, VMS = 1946.058594Mb), Step range = [42-57]), Calls = 8
Model :: Total atoms = 17558, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-48] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 15 :: Actions = 15                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 56:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 57:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 29 : Goals achieved = 14 : Goals unachieved = 15 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 35 : Goals achieved = 35 : Goals unachieved = 0 : Complete = False

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-2].

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 29, Sub-goal Stage Range = [1-29]
Division points [total=1] : [(Index = 14, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [15-29]

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [15-29], problem number = 2, increment number = 5

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 15)
	('last_sgoals', 29)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1654.8082540000032)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [15-29] : Concurrency disabled : Minimum search length bound enabled with value 49

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 15
last_sgoals = 29
start_step = 35
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 49

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[28-02-2022_23-11-49] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 35 as problem start state.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 35})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 35})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 35})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 35})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 35})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 35})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 35})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 35})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'store_room', 'S': 35})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 35})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 35})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 35})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'store_room', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'S': 35})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 35})
Fluent({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 35})

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 35).
holds(2, complete_tower(red,puzzle_room_table), false, 35).
holds(2, complete_tower(yellow,puzzle_room_table), false, 35).
holds(2, configuration(manipulator_arm_1), extended, 35).
holds(2, configuration(manipulator_arm_2), extended, 35).
holds(2, configuration(puzzle_room_door), open, 35).
holds(2, configuration(starting_room_door), closed, 35).
holds(2, configuration(store_room_door), open, 35).
holds(2, grasping(manipulator_arm_1), (block,8), 35).
holds(2, grasping(manipulator_arm_2), (block,4), 35).
holds(2, in((block,1)), puzzle_room, 35).
holds(2, in((block,2)), puzzle_room, 35).
holds(2, in((block,3)), puzzle_room, 35).
holds(2, in((block,4)), store_room, 35).
holds(2, in((block,5)), puzzle_room, 35).
holds(2, in((block,6)), puzzle_room, 35).
holds(2, in((block,7)), puzzle_room, 35).
holds(2, in((block,8)), store_room, 35).
holds(2, in((block,9)), puzzle_room, 35).
holds(2, in(manipulator_arm_1), store_room, 35).
holds(2, in(manipulator_arm_2), store_room, 35).
holds(2, in(puzzle_room_table), puzzle_room, 35).
holds(2, in(talos), store_room, 35).
holds(2, in_tower((block,1),(block,1)), true, 35).
holds(2, in_tower((block,1),(block,2)), false, 35).
holds(2, in_tower((block,1),(block,3)), false, 35).
holds(2, in_tower((block,1),(block,4)), false, 35).
holds(2, in_tower((block,1),(block,5)), false, 35).
holds(2, in_tower((block,1),(block,6)), false, 35).
holds(2, in_tower((block,1),(block,7)), false, 35).
holds(2, in_tower((block,1),(block,8)), false, 35).
holds(2, in_tower((block,1),(block,9)), false, 35).
holds(2, in_tower((block,2),(block,1)), false, 35).
holds(2, in_tower((block,2),(block,2)), true, 35).
holds(2, in_tower((block,2),(block,3)), false, 35).
holds(2, in_tower((block,2),(block,4)), false, 35).
holds(2, in_tower((block,2),(block,5)), false, 35).
holds(2, in_tower((block,2),(block,6)), false, 35).
holds(2, in_tower((block,2),(block,7)), false, 35).
holds(2, in_tower((block,2),(block,8)), false, 35).
holds(2, in_tower((block,2),(block,9)), false, 35).
holds(2, in_tower((block,3),(block,1)), false, 35).
holds(2, in_tower((block,3),(block,2)), false, 35).
holds(2, in_tower((block,3),(block,3)), true, 35).
holds(2, in_tower((block,3),(block,4)), false, 35).
holds(2, in_tower((block,3),(block,5)), false, 35).
holds(2, in_tower((block,3),(block,6)), false, 35).
holds(2, in_tower((block,3),(block,7)), false, 35).
holds(2, in_tower((block,3),(block,8)), false, 35).
holds(2, in_tower((block,3),(block,9)), false, 35).
holds(2, in_tower((block,4),(block,1)), false, 35).
holds(2, in_tower((block,4),(block,2)), false, 35).
holds(2, in_tower((block,4),(block,3)), false, 35).
holds(2, in_tower((block,4),(block,4)), false, 35).
holds(2, in_tower((block,4),(block,5)), false, 35).
holds(2, in_tower((block,4),(block,6)), false, 35).
holds(2, in_tower((block,4),(block,7)), false, 35).
holds(2, in_tower((block,4),(block,8)), false, 35).
holds(2, in_tower((block,4),(block,9)), false, 35).
holds(2, in_tower((block,5),(block,1)), false, 35).
holds(2, in_tower((block,5),(block,2)), false, 35).
holds(2, in_tower((block,5),(block,3)), false, 35).
holds(2, in_tower((block,5),(block,4)), false, 35).
holds(2, in_tower((block,5),(block,5)), false, 35).
holds(2, in_tower((block,5),(block,6)), false, 35).
holds(2, in_tower((block,5),(block,7)), false, 35).
holds(2, in_tower((block,5),(block,8)), false, 35).
holds(2, in_tower((block,5),(block,9)), false, 35).
holds(2, in_tower((block,6),(block,1)), false, 35).
holds(2, in_tower((block,6),(block,2)), false, 35).
holds(2, in_tower((block,6),(block,3)), false, 35).
holds(2, in_tower((block,6),(block,4)), false, 35).
holds(2, in_tower((block,6),(block,5)), true, 35).
holds(2, in_tower((block,6),(block,6)), true, 35).
holds(2, in_tower((block,6),(block,7)), false, 35).
holds(2, in_tower((block,6),(block,8)), false, 35).
holds(2, in_tower((block,6),(block,9)), false, 35).
holds(2, in_tower((block,7),(block,1)), false, 35).
holds(2, in_tower((block,7),(block,2)), false, 35).
holds(2, in_tower((block,7),(block,3)), false, 35).
holds(2, in_tower((block,7),(block,4)), false, 35).
holds(2, in_tower((block,7),(block,5)), false, 35).
holds(2, in_tower((block,7),(block,6)), false, 35).
holds(2, in_tower((block,7),(block,7)), true, 35).
holds(2, in_tower((block,7),(block,8)), false, 35).
holds(2, in_tower((block,7),(block,9)), true, 35).
holds(2, in_tower((block,8),(block,1)), false, 35).
holds(2, in_tower((block,8),(block,2)), false, 35).
holds(2, in_tower((block,8),(block,3)), false, 35).
holds(2, in_tower((block,8),(block,4)), false, 35).
holds(2, in_tower((block,8),(block,5)), false, 35).
holds(2, in_tower((block,8),(block,6)), false, 35).
holds(2, in_tower((block,8),(block,7)), false, 35).
holds(2, in_tower((block,8),(block,8)), false, 35).
holds(2, in_tower((block,8),(block,9)), false, 35).
holds(2, in_tower((block,9),(block,1)), false, 35).
holds(2, in_tower((block,9),(block,2)), false, 35).
holds(2, in_tower((block,9),(block,3)), false, 35).
holds(2, in_tower((block,9),(block,4)), false, 35).
holds(2, in_tower((block,9),(block,5)), false, 35).
holds(2, in_tower((block,9),(block,6)), false, 35).
holds(2, in_tower((block,9),(block,7)), false, 35).
holds(2, in_tower((block,9),(block,8)), false, 35).
holds(2, in_tower((block,9),(block,9)), false, 35).
holds(2, on((block,1)), puzzle_room_table, 35).
holds(2, on((block,2)), puzzle_room_table, 35).
holds(2, on((block,3)), puzzle_room_table, 35).
holds(2, on((block,4)), nothing, 35).
holds(2, on((block,5)), (block,6), 35).
holds(2, on((block,6)), puzzle_room_table, 35).
holds(2, on((block,7)), puzzle_room_table, 35).
holds(2, on((block,8)), nothing, 35).
holds(2, on((block,9)), (block,7), 35).
holds(2, tower_base((block,1),puzzle_room_table), true, 35).
holds(2, tower_base((block,2),puzzle_room_table), true, 35).
holds(2, tower_base((block,3),puzzle_room_table), true, 35).
holds(2, tower_base((block,4),puzzle_room_table), false, 35).
holds(2, tower_base((block,5),puzzle_room_table), false, 35).
holds(2, tower_base((block,6),puzzle_room_table), true, 35).
holds(2, tower_base((block,7),puzzle_room_table), true, 35).
holds(2, tower_base((block,8),puzzle_room_table), false, 35).
holds(2, tower_base((block,9),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 35).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 35).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 35).
holds(3, complete_tower(blue,puzzle_room_table), false, 35).
holds(3, complete_tower(red,puzzle_room_table), false, 35).
holds(3, complete_tower(yellow,puzzle_room_table), false, 35).
holds(3, grasping(manipulator_arm_1), (block,8), 35).
holds(3, grasping(manipulator_arm_2), (block,4), 35).
holds(3, in((block,1)), puzzle_room, 35).
holds(3, in((block,2)), puzzle_room, 35).
holds(3, in((block,3)), puzzle_room, 35).
holds(3, in((block,4)), store_room, 35).
holds(3, in((block,5)), puzzle_room, 35).
holds(3, in((block,6)), puzzle_room, 35).
holds(3, in((block,7)), puzzle_room, 35).
holds(3, in((block,8)), store_room, 35).
holds(3, in((block,9)), puzzle_room, 35).
holds(3, in(manipulator_arm_1), store_room, 35).
holds(3, in(manipulator_arm_2), store_room, 35).
holds(3, in(puzzle_room_table), puzzle_room, 35).
holds(3, in(talos), store_room, 35).
holds(3, in_tower((block,1),(block,1)), true, 35).
holds(3, in_tower((block,1),(block,2)), false, 35).
holds(3, in_tower((block,1),(block,3)), false, 35).
holds(3, in_tower((block,1),(block,4)), false, 35).
holds(3, in_tower((block,1),(block,5)), false, 35).
holds(3, in_tower((block,1),(block,6)), false, 35).
holds(3, in_tower((block,1),(block,7)), false, 35).
holds(3, in_tower((block,1),(block,8)), false, 35).
holds(3, in_tower((block,1),(block,9)), false, 35).
holds(3, in_tower((block,2),(block,1)), false, 35).
holds(3, in_tower((block,2),(block,2)), true, 35).
holds(3, in_tower((block,2),(block,3)), false, 35).
holds(3, in_tower((block,2),(block,4)), false, 35).
holds(3, in_tower((block,2),(block,5)), false, 35).
holds(3, in_tower((block,2),(block,6)), false, 35).
holds(3, in_tower((block,2),(block,7)), false, 35).
holds(3, in_tower((block,2),(block,8)), false, 35).
holds(3, in_tower((block,2),(block,9)), false, 35).
holds(3, in_tower((block,3),(block,1)), false, 35).
holds(3, in_tower((block,3),(block,2)), false, 35).
holds(3, in_tower((block,3),(block,3)), true, 35).
holds(3, in_tower((block,3),(block,4)), false, 35).
holds(3, in_tower((block,3),(block,5)), false, 35).
holds(3, in_tower((block,3),(block,6)), false, 35).
holds(3, in_tower((block,3),(block,7)), false, 35).
holds(3, in_tower((block,3),(block,8)), false, 35).
holds(3, in_tower((block,3),(block,9)), false, 35).
holds(3, in_tower((block,4),(block,1)), false, 35).
holds(3, in_tower((block,4),(block,2)), false, 35).
holds(3, in_tower((block,4),(block,3)), false, 35).
holds(3, in_tower((block,4),(block,4)), false, 35).
holds(3, in_tower((block,4),(block,5)), false, 35).
holds(3, in_tower((block,4),(block,6)), false, 35).
holds(3, in_tower((block,4),(block,7)), false, 35).
holds(3, in_tower((block,4),(block,8)), false, 35).
holds(3, in_tower((block,4),(block,9)), false, 35).
holds(3, in_tower((block,5),(block,1)), false, 35).
holds(3, in_tower((block,5),(block,2)), false, 35).
holds(3, in_tower((block,5),(block,3)), false, 35).
holds(3, in_tower((block,5),(block,4)), false, 35).
holds(3, in_tower((block,5),(block,5)), false, 35).
holds(3, in_tower((block,5),(block,6)), false, 35).
holds(3, in_tower((block,5),(block,7)), false, 35).
holds(3, in_tower((block,5),(block,8)), false, 35).
holds(3, in_tower((block,5),(block,9)), false, 35).
holds(3, in_tower((block,6),(block,1)), false, 35).
holds(3, in_tower((block,6),(block,2)), false, 35).
holds(3, in_tower((block,6),(block,3)), false, 35).
holds(3, in_tower((block,6),(block,4)), false, 35).
holds(3, in_tower((block,6),(block,5)), true, 35).
holds(3, in_tower((block,6),(block,6)), true, 35).
holds(3, in_tower((block,6),(block,7)), false, 35).
holds(3, in_tower((block,6),(block,8)), false, 35).
holds(3, in_tower((block,6),(block,9)), false, 35).
holds(3, in_tower((block,7),(block,1)), false, 35).
holds(3, in_tower((block,7),(block,2)), false, 35).
holds(3, in_tower((block,7),(block,3)), false, 35).
holds(3, in_tower((block,7),(block,4)), false, 35).
holds(3, in_tower((block,7),(block,5)), false, 35).
holds(3, in_tower((block,7),(block,6)), false, 35).
holds(3, in_tower((block,7),(block,7)), true, 35).
holds(3, in_tower((block,7),(block,8)), false, 35).
holds(3, in_tower((block,7),(block,9)), true, 35).
holds(3, in_tower((block,8),(block,1)), false, 35).
holds(3, in_tower((block,8),(block,2)), false, 35).
holds(3, in_tower((block,8),(block,3)), false, 35).
holds(3, in_tower((block,8),(block,4)), false, 35).
holds(3, in_tower((block,8),(block,5)), false, 35).
holds(3, in_tower((block,8),(block,6)), false, 35).
holds(3, in_tower((block,8),(block,7)), false, 35).
holds(3, in_tower((block,8),(block,8)), false, 35).
holds(3, in_tower((block,8),(block,9)), false, 35).
holds(3, in_tower((block,9),(block,1)), false, 35).
holds(3, in_tower((block,9),(block,2)), false, 35).
holds(3, in_tower((block,9),(block,3)), false, 35).
holds(3, in_tower((block,9),(block,4)), false, 35).
holds(3, in_tower((block,9),(block,5)), false, 35).
holds(3, in_tower((block,9),(block,6)), false, 35).
holds(3, in_tower((block,9),(block,7)), false, 35).
holds(3, in_tower((block,9),(block,8)), false, 35).
holds(3, in_tower((block,9),(block,9)), false, 35).
holds(3, on((block,1)), puzzle_room_table, 35).
holds(3, on((block,2)), puzzle_room_table, 35).
holds(3, on((block,3)), puzzle_room_table, 35).
holds(3, on((block,4)), nothing, 35).
holds(3, on((block,5)), (block,6), 35).
holds(3, on((block,6)), puzzle_room_table, 35).
holds(3, on((block,7)), puzzle_room_table, 35).
holds(3, on((block,8)), nothing, 35).
holds(3, on((block,9)), (block,7), 35).
holds(3, tower_base((block,1),puzzle_room_table), true, 35).
holds(3, tower_base((block,2),puzzle_room_table), true, 35).
holds(3, tower_base((block,3),puzzle_room_table), true, 35).
holds(3, tower_base((block,4),puzzle_room_table), false, 35).
holds(3, tower_base((block,5),puzzle_room_table), false, 35).
holds(3, tower_base((block,6),puzzle_room_table), true, 35).
holds(3, tower_base((block,7),puzzle_room_table), true, 35).
holds(3, tower_base((block,8),puzzle_room_table), false, 35).
holds(3, tower_base((block,9),puzzle_room_table), false, 35).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 35).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 35).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 35).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 35).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 35).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 35).
holds(3, unordered_tower((block,7),puzzle_room_table), true, 35).
holds(3, unordered_tower((block,8),puzzle_room_table), false, 35).
holds(3, unordered_tower((block,9),puzzle_room_table), false, 35).

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(3, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, tower_base((block,7),puzzle_room_table), false, true).
final_goal(3, tower_base((block,7),puzzle_room_table), true, false).
final_goal(3, tower_base((block,8),puzzle_room_table), false, true).
final_goal(3, tower_base((block,8),puzzle_room_table), true, false).
final_goal(3, tower_base((block,9),puzzle_room_table), false, false).
final_goal(3, tower_base((block,9),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=49']

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 20})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 21})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 22})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 23})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'I': 24})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 25})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 26})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 27})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 28})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 29})

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 15 rules into program part base:

sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 15).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 16).
sub_goal(3, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 17).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), (block,9), 18).
sub_goal(3, talos, put(manipulator_arm_2,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 19).
sub_goal(3, talos, release(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), nothing, 20).
sub_goal(3, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 21).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 22).
sub_goal(3, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 23).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 24).
sub_goal(3, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 25).
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 26).
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 27).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 28).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 29).

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=35, step_range=range(0, 36)

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 35, Total actions = 35, Produced sub-goal stages = 35
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=49']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA2D7EFDC0>]
	incrementor = SolveIncrementor(step_start=35, step_increase=1, step_increase_initial=15, step_end_min=50, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1494.2231600000086, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 35), range_=None), IncPart(name='plan_module', args=('#inc', 35, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 35, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 35, 15, 29, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1231 rules

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00663410000015574s

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032094s.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005575s with result Satisfiable.

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7B4C9DB0>

[28-02-2022_23-11-49] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 35)
	('last_sgoals', 29)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 15)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7B4C9DB0>)

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 35). %* None *%
#program plan_module(#inc, 35, false, true). %* None *%
#program optimisation_module(#inc, 35, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 35, 15, 29, sequential, false). %* None *%

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     34 : Current =     49
Incrementor step ends | Minimum  =     50 : Maximum =    300

[28-02-2022_23-11-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(35), Number(35)]), ('plan_module', [Number(35), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(35), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(35)]), ('plan_module', [Number(36), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(35)]), ('plan_module', [Number(37), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(37), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(35)]), ('plan_module', [Number(38), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(38), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(35)]), ('plan_module', [Number(39), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(39), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(40), Number(35)]), ('plan_module', [Number(40), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(40), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(41), Number(35)]), ('plan_module', [Number(41), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(41), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(42), Number(35)]), ('plan_module', [Number(42), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(43), Number(35)]), ('plan_module', [Number(43), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(43), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(44), Number(35)]), ('plan_module', [Number(44), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(44), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(45), Number(35)]), ('plan_module', [Number(45), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(45), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(46), Number(35)]), ('plan_module', [Number(46), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(46), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(47), Number(35)]), ('plan_module', [Number(47), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(47), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(48), Number(35)]), ('plan_module', [Number(48), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(48), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(49), Number(35)]), ('plan_module', [Number(49), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(49), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.245851s.

[28-02-2022_23-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.625125s with result Satisfiable.

[28-02-2022_23-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.8709759999983362, Incremental time limit = None
Running cumulative time = 1.8709759999983362, Cumulative time limit = 1494.2231600000086
Used memory = (RSS = 1922.003906Mb, VMS = 1922.265625Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.245851s, Solving = 0.625125s, Total = 1.870976s, Memory = (RSS = 1922.003906Mb, VMS = 1922.265625Mb), Step range = [35-49]), Calls = 1
Final Model :: Total atoms = 18682, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[28-02-2022_23-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     50 : Maximum =    300

[28-02-2022_23-11-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(35)]), ('plan_module', [Number(50), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(50), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153091s.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033041s with result Unsatisfiable.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1861322000004293, Incremental time limit = None
Running cumulative time = 2.0571081999987655, Cumulative time limit = 1494.2231600000086
Used memory = (RSS = 1927.621094Mb, VMS = 1933.851562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     50 : Maximum =    300

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(35)]), ('plan_module', [Number(51), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(51), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153712s.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030228s with result Unsatisfiable.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1839402000005066, Incremental time limit = None
Running cumulative time = 2.241048399999272, Cumulative time limit = 1494.2231600000086
Used memory = (RSS = 1929.257812Mb, VMS = 1934.226562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     50 : Maximum =    300

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(35)]), ('plan_module', [Number(52), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(52), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157222s.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031536s with result Unsatisfiable.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18875819999993837, Incremental time limit = None
Running cumulative time = 2.4298065999992104, Cumulative time limit = 1494.2231600000086
Used memory = (RSS = 1931.070312Mb, VMS = 1934.605469Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     50 : Maximum =    300

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(35)]), ('plan_module', [Number(53), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(53), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159298s.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032286s with result Unsatisfiable.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1915843999995559, Incremental time limit = None
Running cumulative time = 2.6213909999987663, Cumulative time limit = 1494.2231600000086
Used memory = (RSS = 1932.539062Mb, VMS = 1934.976562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     50 : Maximum =    300

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(35)]), ('plan_module', [Number(54), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(54), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162614s.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039629s with result Unsatisfiable.

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20224249999955646, Incremental time limit = None
Running cumulative time = 2.823633499998323, Cumulative time limit = 1494.2231600000086
Used memory = (RSS = 1934.265625Mb, VMS = 1935.355469Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     50 : Maximum =    300

[28-02-2022_23-11-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(35)]), ('plan_module', [Number(55), Number(35), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(55), Number(35), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(35), Number(15), Number(29), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165860s.

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.092470s with result Satisfiable.

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2583302000002732, Incremental time limit = None
Running cumulative time = 3.081963699998596, Cumulative time limit = 1494.2231600000086
Used memory = (RSS = 1938.761719Mb, VMS = 1938.796875Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.197649s, Solving = 0.884315s, Total = 3.081964s, Memory = (RSS = 1938.761719Mb, VMS = 1938.796875Mb), Step range = [35-55]), Calls = 7
Final Model :: Total atoms = 24429, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.245851s, Solving = 0.625125s, Total = 1.870976s, Memory = (RSS = 1922.003906Mb, VMS = 1922.265625Mb), Step range = [35-49]
2 : Statistics :: Grounding = 0.153091s, Solving = 0.033041s, Total = 0.186132s, Memory = (RSS = 1927.621094Mb, VMS = 1933.851562Mb), Step range = [50-50]
3 : Statistics :: Grounding = 0.153712s, Solving = 0.030228s, Total = 0.183940s, Memory = (RSS = 1929.257812Mb, VMS = 1934.226562Mb), Step range = [51-51]
4 : Statistics :: Grounding = 0.157222s, Solving = 0.031536s, Total = 0.188758s, Memory = (RSS = 1931.070312Mb, VMS = 1934.605469Mb), Step range = [52-52]
5 : Statistics :: Grounding = 0.159298s, Solving = 0.032286s, Total = 0.191584s, Memory = (RSS = 1932.539062Mb, VMS = 1934.976562Mb), Step range = [53-53]
6 : Statistics :: Grounding = 0.162614s, Solving = 0.039629s, Total = 0.202242s, Memory = (RSS = 1934.265625Mb, VMS = 1935.355469Mb), Step range = [54-54]
7 : Statistics :: Grounding = 0.165860s, Solving = 0.092470s, Total = 0.258330s, Memory = (RSS = 1938.761719Mb, VMS = 1938.796875Mb), Step range = [55-55]

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.081964s due to: Stop condition reached.

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-52] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 29, Last requested goal index = 29, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.197649s, Solving = 0.884315s, Total = 3.081964s, Memory = (RSS = 1938.761719Mb, VMS = 1938.796875Mb), Step range = [35-55]), Calls = 7
Model :: Total atoms = 24429, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 15:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 26:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 27:
    Current Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 29:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 32:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 33:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 34:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))
Step 36:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 38:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 39:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 40:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 41:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 43:
    Current Sub-goals:
        [Index = 17] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,4))
Step 44:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,9))
Step 45:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,9),puzzle_room_table)
Step 46:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,9))
Step 47:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_1,(block,8),(block,9))
Step 48:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 49:
    Current Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 23] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,8))
Step 50:
    Current Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,7))
Step 51:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_arm_1,(block,7),(block,8))
Step 52:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 53:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 28] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 55:
    Current Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 29] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=35, total_plan_length=55, step_range=range(35, 56)

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  20, AC =  20, CF = 1.0, GT =   7.24s, ST =  11.23s, OT = 0.00s, TT =  18.48s, EF = (LE = 1.3, AC = 1.3), ED = (LE = 0.9, AC = 0.9), EB = (LE = 0.7, AC = 0.7)

[28-02-2022_23-11-53] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=4, plan_length=20, start_step=35, blend=Blend(left=0, right=0)

[28-02-2022_23-11-53] DEBUG :: core.Strategies >> Decided: number_small_problems=4, number_large_problems=0, small_group_size=5, large_group_size=6

[28-02-2022_23-11-53] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=40, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=45, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=50, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 20, Sub-goal Stage Range = [36-55]
Division points [total=3] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 45, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 20, Sub-goal Stage Range = [36-55]
Division points [total=3] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 45, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [36-40]

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=57, step_range=range(0, 58)

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [36-40], problem number = 5, increment number = 5

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 36)
	('last_sgoals', 40)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1636.3329423000068)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [36-40] : Concurrency disabled : Minimum search length bound enabled with value 61

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 36
last_sgoals = 40
start_step = 57
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 61

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-11-53] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-53] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 57 as problem start state.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,8))', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 57})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,8)', 'S': 57})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 57})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0)', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 57})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 57})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 57})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 57})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 57})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 57})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 57})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 57})

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 57).
holds(1, complete_tower(red,puzzle_room_table), false, 57).
holds(1, complete_tower(yellow,puzzle_room_table), false, 57).
holds(1, configuration(manipulator_end_1), aligned_with((block,8)), 57).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 57).
holds(1, configuration(manipulator_limb_1), extended, 57).
holds(1, configuration(manipulator_limb_2), extended, 57).
holds(1, configuration(puzzle_room_door), open, 57).
holds(1, configuration(starting_room_door), closed, 57).
holds(1, configuration(store_room_door), open, 57).
holds(1, grasping(manipulator_arm_1), (block,8), 57).
holds(1, grasping(manipulator_arm_2), (block,4), 57).
holds(1, grasping(manipulator_end_1), (block,8), 57).
holds(1, grasping(manipulator_end_2), (block,4), 57).
holds(1, in((block,1)), (puzzle_room,1), 57).
holds(1, in((block,2)), (puzzle_room,1), 57).
holds(1, in((block,3)), (puzzle_room,1), 57).
holds(1, in((block,4)), (store_room,0), 57).
holds(1, in((block,5)), (puzzle_room,1), 57).
holds(1, in((block,6)), (puzzle_room,1), 57).
holds(1, in((block,7)), (puzzle_room,1), 57).
holds(1, in((block,8)), (store_room,0), 57).
holds(1, in((block,9)), (puzzle_room,1), 57).
holds(1, in(manipulator_arm_1), (store_room,0), 57).
holds(1, in(manipulator_arm_2), (store_room,0), 57).
holds(1, in(manipulator_end_1), (store_room,0), 57).
holds(1, in(manipulator_end_2), (store_room,0), 57).
holds(1, in(manipulator_limb_1), (store_room,0), 57).
holds(1, in(manipulator_limb_2), (store_room,0), 57).
holds(1, in(puzzle_room_table), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 57).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 57).
holds(1, in(talos), (store_room,0), 57).
holds(1, in_tower((block,1),(block,1)), true, 57).
holds(1, in_tower((block,1),(block,2)), false, 57).
holds(1, in_tower((block,1),(block,3)), false, 57).
holds(1, in_tower((block,1),(block,4)), false, 57).
holds(1, in_tower((block,1),(block,5)), false, 57).
holds(1, in_tower((block,1),(block,6)), false, 57).
holds(1, in_tower((block,1),(block,7)), false, 57).
holds(1, in_tower((block,1),(block,8)), false, 57).
holds(1, in_tower((block,1),(block,9)), false, 57).
holds(1, in_tower((block,2),(block,1)), false, 57).
holds(1, in_tower((block,2),(block,2)), true, 57).
holds(1, in_tower((block,2),(block,3)), false, 57).
holds(1, in_tower((block,2),(block,4)), false, 57).
holds(1, in_tower((block,2),(block,5)), false, 57).
holds(1, in_tower((block,2),(block,6)), false, 57).
holds(1, in_tower((block,2),(block,7)), false, 57).
holds(1, in_tower((block,2),(block,8)), false, 57).
holds(1, in_tower((block,2),(block,9)), false, 57).
holds(1, in_tower((block,3),(block,1)), false, 57).
holds(1, in_tower((block,3),(block,2)), false, 57).
holds(1, in_tower((block,3),(block,3)), true, 57).
holds(1, in_tower((block,3),(block,4)), false, 57).
holds(1, in_tower((block,3),(block,5)), false, 57).
holds(1, in_tower((block,3),(block,6)), false, 57).
holds(1, in_tower((block,3),(block,7)), false, 57).
holds(1, in_tower((block,3),(block,8)), false, 57).
holds(1, in_tower((block,3),(block,9)), false, 57).
holds(1, in_tower((block,4),(block,1)), false, 57).
holds(1, in_tower((block,4),(block,2)), false, 57).
holds(1, in_tower((block,4),(block,3)), false, 57).
holds(1, in_tower((block,4),(block,4)), false, 57).
holds(1, in_tower((block,4),(block,5)), false, 57).
holds(1, in_tower((block,4),(block,6)), false, 57).
holds(1, in_tower((block,4),(block,7)), false, 57).
holds(1, in_tower((block,4),(block,8)), false, 57).
holds(1, in_tower((block,4),(block,9)), false, 57).
holds(1, in_tower((block,5),(block,1)), false, 57).
holds(1, in_tower((block,5),(block,2)), false, 57).
holds(1, in_tower((block,5),(block,3)), false, 57).
holds(1, in_tower((block,5),(block,4)), false, 57).
holds(1, in_tower((block,5),(block,5)), false, 57).
holds(1, in_tower((block,5),(block,6)), false, 57).
holds(1, in_tower((block,5),(block,7)), false, 57).
holds(1, in_tower((block,5),(block,8)), false, 57).
holds(1, in_tower((block,5),(block,9)), false, 57).
holds(1, in_tower((block,6),(block,1)), false, 57).
holds(1, in_tower((block,6),(block,2)), false, 57).
holds(1, in_tower((block,6),(block,3)), false, 57).
holds(1, in_tower((block,6),(block,4)), false, 57).
holds(1, in_tower((block,6),(block,5)), true, 57).
holds(1, in_tower((block,6),(block,6)), true, 57).
holds(1, in_tower((block,6),(block,7)), false, 57).
holds(1, in_tower((block,6),(block,8)), false, 57).
holds(1, in_tower((block,6),(block,9)), false, 57).
holds(1, in_tower((block,7),(block,1)), false, 57).
holds(1, in_tower((block,7),(block,2)), false, 57).
holds(1, in_tower((block,7),(block,3)), false, 57).
holds(1, in_tower((block,7),(block,4)), false, 57).
holds(1, in_tower((block,7),(block,5)), false, 57).
holds(1, in_tower((block,7),(block,6)), false, 57).
holds(1, in_tower((block,7),(block,7)), true, 57).
holds(1, in_tower((block,7),(block,8)), false, 57).
holds(1, in_tower((block,7),(block,9)), true, 57).
holds(1, in_tower((block,8),(block,1)), false, 57).
holds(1, in_tower((block,8),(block,2)), false, 57).
holds(1, in_tower((block,8),(block,3)), false, 57).
holds(1, in_tower((block,8),(block,4)), false, 57).
holds(1, in_tower((block,8),(block,5)), false, 57).
holds(1, in_tower((block,8),(block,6)), false, 57).
holds(1, in_tower((block,8),(block,7)), false, 57).
holds(1, in_tower((block,8),(block,8)), false, 57).
holds(1, in_tower((block,8),(block,9)), false, 57).
holds(1, in_tower((block,9),(block,1)), false, 57).
holds(1, in_tower((block,9),(block,2)), false, 57).
holds(1, in_tower((block,9),(block,3)), false, 57).
holds(1, in_tower((block,9),(block,4)), false, 57).
holds(1, in_tower((block,9),(block,5)), false, 57).
holds(1, in_tower((block,9),(block,6)), false, 57).
holds(1, in_tower((block,9),(block,7)), false, 57).
holds(1, in_tower((block,9),(block,8)), false, 57).
holds(1, in_tower((block,9),(block,9)), false, 57).
holds(1, on((block,1)), puzzle_room_table_left, 57).
holds(1, on((block,2)), puzzle_room_table_right, 57).
holds(1, on((block,3)), puzzle_room_table_left, 57).
holds(1, on((block,4)), nothing, 57).
holds(1, on((block,5)), (block,6), 57).
holds(1, on((block,6)), puzzle_room_table_right, 57).
holds(1, on((block,7)), puzzle_room_table_middle, 57).
holds(1, on((block,8)), nothing, 57).
holds(1, on((block,9)), (block,7), 57).
holds(1, tower_base((block,1),puzzle_room_table), true, 57).
holds(1, tower_base((block,2),puzzle_room_table), true, 57).
holds(1, tower_base((block,3),puzzle_room_table), true, 57).
holds(1, tower_base((block,4),puzzle_room_table), false, 57).
holds(1, tower_base((block,5),puzzle_room_table), false, 57).
holds(1, tower_base((block,6),puzzle_room_table), true, 57).
holds(1, tower_base((block,7),puzzle_room_table), true, 57).
holds(1, tower_base((block,8),puzzle_room_table), false, 57).
holds(1, tower_base((block,9),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 57).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 57).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 57).
holds(2, complete_tower(blue,puzzle_room_table), false, 57).
holds(2, complete_tower(red,puzzle_room_table), false, 57).
holds(2, complete_tower(yellow,puzzle_room_table), false, 57).
holds(2, configuration(manipulator_arm_1), extended, 57).
holds(2, configuration(manipulator_arm_2), extended, 57).
holds(2, configuration(puzzle_room_door), open, 57).
holds(2, configuration(starting_room_door), closed, 57).
holds(2, configuration(store_room_door), open, 57).
holds(2, grasping(manipulator_arm_1), (block,8), 57).
holds(2, grasping(manipulator_arm_2), (block,4), 57).
holds(2, in((block,1)), puzzle_room, 57).
holds(2, in((block,2)), puzzle_room, 57).
holds(2, in((block,3)), puzzle_room, 57).
holds(2, in((block,4)), store_room, 57).
holds(2, in((block,5)), puzzle_room, 57).
holds(2, in((block,6)), puzzle_room, 57).
holds(2, in((block,7)), puzzle_room, 57).
holds(2, in((block,8)), store_room, 57).
holds(2, in((block,9)), puzzle_room, 57).
holds(2, in(manipulator_arm_1), store_room, 57).
holds(2, in(manipulator_arm_2), store_room, 57).
holds(2, in(puzzle_room_table), puzzle_room, 57).
holds(2, in(talos), store_room, 57).
holds(2, in_tower((block,1),(block,1)), true, 57).
holds(2, in_tower((block,1),(block,2)), false, 57).
holds(2, in_tower((block,1),(block,3)), false, 57).
holds(2, in_tower((block,1),(block,4)), false, 57).
holds(2, in_tower((block,1),(block,5)), false, 57).
holds(2, in_tower((block,1),(block,6)), false, 57).
holds(2, in_tower((block,1),(block,7)), false, 57).
holds(2, in_tower((block,1),(block,8)), false, 57).
holds(2, in_tower((block,1),(block,9)), false, 57).
holds(2, in_tower((block,2),(block,1)), false, 57).
holds(2, in_tower((block,2),(block,2)), true, 57).
holds(2, in_tower((block,2),(block,3)), false, 57).
holds(2, in_tower((block,2),(block,4)), false, 57).
holds(2, in_tower((block,2),(block,5)), false, 57).
holds(2, in_tower((block,2),(block,6)), false, 57).
holds(2, in_tower((block,2),(block,7)), false, 57).
holds(2, in_tower((block,2),(block,8)), false, 57).
holds(2, in_tower((block,2),(block,9)), false, 57).
holds(2, in_tower((block,3),(block,1)), false, 57).
holds(2, in_tower((block,3),(block,2)), false, 57).
holds(2, in_tower((block,3),(block,3)), true, 57).
holds(2, in_tower((block,3),(block,4)), false, 57).
holds(2, in_tower((block,3),(block,5)), false, 57).
holds(2, in_tower((block,3),(block,6)), false, 57).
holds(2, in_tower((block,3),(block,7)), false, 57).
holds(2, in_tower((block,3),(block,8)), false, 57).
holds(2, in_tower((block,3),(block,9)), false, 57).
holds(2, in_tower((block,4),(block,1)), false, 57).
holds(2, in_tower((block,4),(block,2)), false, 57).
holds(2, in_tower((block,4),(block,3)), false, 57).
holds(2, in_tower((block,4),(block,4)), false, 57).
holds(2, in_tower((block,4),(block,5)), false, 57).
holds(2, in_tower((block,4),(block,6)), false, 57).
holds(2, in_tower((block,4),(block,7)), false, 57).
holds(2, in_tower((block,4),(block,8)), false, 57).
holds(2, in_tower((block,4),(block,9)), false, 57).
holds(2, in_tower((block,5),(block,1)), false, 57).
holds(2, in_tower((block,5),(block,2)), false, 57).
holds(2, in_tower((block,5),(block,3)), false, 57).
holds(2, in_tower((block,5),(block,4)), false, 57).
holds(2, in_tower((block,5),(block,5)), false, 57).
holds(2, in_tower((block,5),(block,6)), false, 57).
holds(2, in_tower((block,5),(block,7)), false, 57).
holds(2, in_tower((block,5),(block,8)), false, 57).
holds(2, in_tower((block,5),(block,9)), false, 57).
holds(2, in_tower((block,6),(block,1)), false, 57).
holds(2, in_tower((block,6),(block,2)), false, 57).
holds(2, in_tower((block,6),(block,3)), false, 57).
holds(2, in_tower((block,6),(block,4)), false, 57).
holds(2, in_tower((block,6),(block,5)), true, 57).
holds(2, in_tower((block,6),(block,6)), true, 57).
holds(2, in_tower((block,6),(block,7)), false, 57).
holds(2, in_tower((block,6),(block,8)), false, 57).
holds(2, in_tower((block,6),(block,9)), false, 57).
holds(2, in_tower((block,7),(block,1)), false, 57).
holds(2, in_tower((block,7),(block,2)), false, 57).
holds(2, in_tower((block,7),(block,3)), false, 57).
holds(2, in_tower((block,7),(block,4)), false, 57).
holds(2, in_tower((block,7),(block,5)), false, 57).
holds(2, in_tower((block,7),(block,6)), false, 57).
holds(2, in_tower((block,7),(block,7)), true, 57).
holds(2, in_tower((block,7),(block,8)), false, 57).
holds(2, in_tower((block,7),(block,9)), true, 57).
holds(2, in_tower((block,8),(block,1)), false, 57).
holds(2, in_tower((block,8),(block,2)), false, 57).
holds(2, in_tower((block,8),(block,3)), false, 57).
holds(2, in_tower((block,8),(block,4)), false, 57).
holds(2, in_tower((block,8),(block,5)), false, 57).
holds(2, in_tower((block,8),(block,6)), false, 57).
holds(2, in_tower((block,8),(block,7)), false, 57).
holds(2, in_tower((block,8),(block,8)), false, 57).
holds(2, in_tower((block,8),(block,9)), false, 57).
holds(2, in_tower((block,9),(block,1)), false, 57).
holds(2, in_tower((block,9),(block,2)), false, 57).
holds(2, in_tower((block,9),(block,3)), false, 57).
holds(2, in_tower((block,9),(block,4)), false, 57).
holds(2, in_tower((block,9),(block,5)), false, 57).
holds(2, in_tower((block,9),(block,6)), false, 57).
holds(2, in_tower((block,9),(block,7)), false, 57).
holds(2, in_tower((block,9),(block,8)), false, 57).
holds(2, in_tower((block,9),(block,9)), false, 57).
holds(2, on((block,1)), puzzle_room_table, 57).
holds(2, on((block,2)), puzzle_room_table, 57).
holds(2, on((block,3)), puzzle_room_table, 57).
holds(2, on((block,4)), nothing, 57).
holds(2, on((block,5)), (block,6), 57).
holds(2, on((block,6)), puzzle_room_table, 57).
holds(2, on((block,7)), puzzle_room_table, 57).
holds(2, on((block,8)), nothing, 57).
holds(2, on((block,9)), (block,7), 57).
holds(2, tower_base((block,1),puzzle_room_table), true, 57).
holds(2, tower_base((block,2),puzzle_room_table), true, 57).
holds(2, tower_base((block,3),puzzle_room_table), true, 57).
holds(2, tower_base((block,4),puzzle_room_table), false, 57).
holds(2, tower_base((block,5),puzzle_room_table), false, 57).
holds(2, tower_base((block,6),puzzle_room_table), true, 57).
holds(2, tower_base((block,7),puzzle_room_table), true, 57).
holds(2, tower_base((block,8),puzzle_room_table), false, 57).
holds(2, tower_base((block,9),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 57).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 57).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 57).

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=61']

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 36})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 40})

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 36).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 37).
sub_goal(2, talos, move(hallway), in(talos), hallway, 38).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 39).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 40).

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=57, step_range=range(0, 58)

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 57, Total actions = 57, Produced sub-goal stages = 0

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=61']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA2C743AF0>]
	incrementor = SolveIncrementor(step_start=57, step_increase=1, step_increase_initial=5, step_end_min=62, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1456.3923813000147, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 57), range_=None), IncPart(name='plan_module', args=('#inc', 57, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 57, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 57, 36, 40, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1255 rules

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0064170999994530575s

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039733s.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007546s with result Satisfiable.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7B4AB540>

[28-02-2022_23-11-53] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 57)
	('last_sgoals', 40)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 36)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7B4AB540>)

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 57). %* None *%
#program plan_module(#inc, 57, false, false). %* None *%
#program optimisation_module(#inc, 57, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 57, 36, 40, sequential, false). %* None *%

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     56 : Current =     61
Incrementor step ends | Minimum  =     62 : Maximum =    300

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(57), Number(57)]), ('plan_module', [Number(57), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(58), Number(57)]), ('plan_module', [Number(58), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(59), Number(57)]), ('plan_module', [Number(59), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(60), Number(57)]), ('plan_module', [Number(60), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(61), Number(57)]), ('plan_module', [Number(61), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.627333s.

[28-02-2022_23-11-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.219113s with result Satisfiable.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8464459000006173, Incremental time limit = None
Running cumulative time = 0.8464459000006173, Cumulative time limit = 1456.3923813000147
Used memory = (RSS = 1901.902344Mb, VMS = 1902.078125Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.627333s, Solving = 0.219113s, Total = 0.846446s, Memory = (RSS = 1901.902344Mb, VMS = 1902.078125Mb), Step range = [57-61]), Calls = 1
Final Model :: Total atoms = 9432, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     62 : Maximum =    300

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(57)]), ('plan_module', [Number(62), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.180330s.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021550s with result Unsatisfiable.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20188000000052853, Incremental time limit = None
Running cumulative time = 1.0483259000011458, Cumulative time limit = 1456.3923813000147
Used memory = (RSS = 1905.230469Mb, VMS = 1906.320312Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     62 : Maximum =    300

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(57)]), ('plan_module', [Number(63), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.181908s.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029175s with result Unsatisfiable.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21108319999802916, Incremental time limit = None
Running cumulative time = 1.259409099999175, Cumulative time limit = 1456.3923813000147
Used memory = (RSS = 1906.355469Mb, VMS = 1906.679688Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     62 : Maximum =    300

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(57)]), ('plan_module', [Number(64), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.192955s.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040686s with result Unsatisfiable.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23364159999982803, Incremental time limit = None
Running cumulative time = 1.493050699999003, Cumulative time limit = 1456.3923813000147
Used memory = (RSS = 1907.863281Mb, VMS = 1907.062500Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     62 : Maximum =    300

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(57)]), ('plan_module', [Number(65), Number(57), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(57), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(57), Number(36), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.194933s.

[28-02-2022_23-11-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054525s with result Satisfiable.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24945750000006228, Incremental time limit = None
Running cumulative time = 1.7425081999990653, Cumulative time limit = 1456.3923813000147
Used memory = (RSS = 1909.652344Mb, VMS = 1911.726562Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.377459s, Solving = 0.365049s, Total = 1.742508s, Memory = (RSS = 1909.652344Mb, VMS = 1911.726562Mb), Step range = [57-65]), Calls = 5
Final Model :: Total atoms = 12354, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.627333s, Solving = 0.219113s, Total = 0.846446s, Memory = (RSS = 1901.902344Mb, VMS = 1902.078125Mb), Step range = [57-61]
2 : Statistics :: Grounding = 0.180330s, Solving = 0.021550s, Total = 0.201880s, Memory = (RSS = 1905.230469Mb, VMS = 1906.320312Mb), Step range = [62-62]
3 : Statistics :: Grounding = 0.181908s, Solving = 0.029175s, Total = 0.211083s, Memory = (RSS = 1906.355469Mb, VMS = 1906.679688Mb), Step range = [63-63]
4 : Statistics :: Grounding = 0.192955s, Solving = 0.040686s, Total = 0.233642s, Memory = (RSS = 1907.863281Mb, VMS = 1907.062500Mb), Step range = [64-64]
5 : Statistics :: Grounding = 0.194933s, Solving = 0.054525s, Total = 0.249458s, Memory = (RSS = 1909.652344Mb, VMS = 1911.726562Mb), Step range = [65-65]

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.742508s due to: Stop condition reached.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35, 58: 36, 59: 37, 60: 38, 61: 38, 62: 39, 63: 39, 64: 39, 65: 40}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57, 36: 58, 37: 59, 38: 61, 39: 64, 40: 65}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 40, Last requested goal index = 40, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.377459s, Solving = 0.365049s, Total = 1.742508s, Memory = (RSS = 1909.652344Mb, VMS = 1911.726562Mb), Step range = [57-65]), Calls = 5
Model :: Total atoms = 12354, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 8 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 56:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 57:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 61:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 65:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 55 : Goals achieved = 40 : Goals unachieved = 15 : Complete = False

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 20, Sub-goal Stage Range = [36-55]
Division points [total=3] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 45, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [41-45]

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=65, step_range=range(0, 66)

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 65, Total actions = 65, Produced sub-goal stages = 0

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 65, Total actions = 65, Produced sub-goal stages = 0

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 65, Total actions = 65, Produced sub-goal stages = 0

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [41-45], problem number = 6, increment number = 6

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 41)
	('last_sgoals', 45)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1636.3329423000068)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [41-45] : Concurrency disabled : Minimum search length bound enabled with value 69

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 41
last_sgoals = 45
start_step = 65
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 69

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-11-55] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-55] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 65 as problem start state.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,8))', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 65})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 65})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 65})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 65})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,8)', 'S': 65})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 65})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 65})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 65})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 65})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 65})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 65})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 65})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 65})

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 65).
holds(1, complete_tower(red,puzzle_room_table), false, 65).
holds(1, complete_tower(yellow,puzzle_room_table), false, 65).
holds(1, configuration(manipulator_end_1), aligned_with((block,8)), 65).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 65).
holds(1, configuration(manipulator_limb_1), extended, 65).
holds(1, configuration(manipulator_limb_2), retracted, 65).
holds(1, configuration(puzzle_room_door), open, 65).
holds(1, configuration(starting_room_door), closed, 65).
holds(1, configuration(store_room_door), open, 65).
holds(1, grasping(manipulator_arm_1), (block,8), 65).
holds(1, grasping(manipulator_arm_2), (block,4), 65).
holds(1, grasping(manipulator_end_1), (block,8), 65).
holds(1, grasping(manipulator_end_2), (block,4), 65).
holds(1, in((block,1)), (puzzle_room,1), 65).
holds(1, in((block,2)), (puzzle_room,1), 65).
holds(1, in((block,3)), (puzzle_room,1), 65).
holds(1, in((block,4)), (puzzle_room,0), 65).
holds(1, in((block,5)), (puzzle_room,1), 65).
holds(1, in((block,6)), (puzzle_room,1), 65).
holds(1, in((block,7)), (puzzle_room,1), 65).
holds(1, in((block,8)), (puzzle_room,0), 65).
holds(1, in((block,9)), (puzzle_room,1), 65).
holds(1, in(manipulator_arm_1), (puzzle_room,0), 65).
holds(1, in(manipulator_arm_2), (puzzle_room,0), 65).
holds(1, in(manipulator_end_1), (puzzle_room,0), 65).
holds(1, in(manipulator_end_2), (puzzle_room,0), 65).
holds(1, in(manipulator_limb_1), (puzzle_room,0), 65).
holds(1, in(manipulator_limb_2), (puzzle_room,0), 65).
holds(1, in(puzzle_room_table), (puzzle_room,1), 65).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 65).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 65).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 65).
holds(1, in(talos), (puzzle_room,0), 65).
holds(1, in_tower((block,1),(block,1)), true, 65).
holds(1, in_tower((block,1),(block,2)), false, 65).
holds(1, in_tower((block,1),(block,3)), false, 65).
holds(1, in_tower((block,1),(block,4)), false, 65).
holds(1, in_tower((block,1),(block,5)), false, 65).
holds(1, in_tower((block,1),(block,6)), false, 65).
holds(1, in_tower((block,1),(block,7)), false, 65).
holds(1, in_tower((block,1),(block,8)), false, 65).
holds(1, in_tower((block,1),(block,9)), false, 65).
holds(1, in_tower((block,2),(block,1)), false, 65).
holds(1, in_tower((block,2),(block,2)), true, 65).
holds(1, in_tower((block,2),(block,3)), false, 65).
holds(1, in_tower((block,2),(block,4)), false, 65).
holds(1, in_tower((block,2),(block,5)), false, 65).
holds(1, in_tower((block,2),(block,6)), false, 65).
holds(1, in_tower((block,2),(block,7)), false, 65).
holds(1, in_tower((block,2),(block,8)), false, 65).
holds(1, in_tower((block,2),(block,9)), false, 65).
holds(1, in_tower((block,3),(block,1)), false, 65).
holds(1, in_tower((block,3),(block,2)), false, 65).
holds(1, in_tower((block,3),(block,3)), true, 65).
holds(1, in_tower((block,3),(block,4)), false, 65).
holds(1, in_tower((block,3),(block,5)), false, 65).
holds(1, in_tower((block,3),(block,6)), false, 65).
holds(1, in_tower((block,3),(block,7)), false, 65).
holds(1, in_tower((block,3),(block,8)), false, 65).
holds(1, in_tower((block,3),(block,9)), false, 65).
holds(1, in_tower((block,4),(block,1)), false, 65).
holds(1, in_tower((block,4),(block,2)), false, 65).
holds(1, in_tower((block,4),(block,3)), false, 65).
holds(1, in_tower((block,4),(block,4)), false, 65).
holds(1, in_tower((block,4),(block,5)), false, 65).
holds(1, in_tower((block,4),(block,6)), false, 65).
holds(1, in_tower((block,4),(block,7)), false, 65).
holds(1, in_tower((block,4),(block,8)), false, 65).
holds(1, in_tower((block,4),(block,9)), false, 65).
holds(1, in_tower((block,5),(block,1)), false, 65).
holds(1, in_tower((block,5),(block,2)), false, 65).
holds(1, in_tower((block,5),(block,3)), false, 65).
holds(1, in_tower((block,5),(block,4)), false, 65).
holds(1, in_tower((block,5),(block,5)), false, 65).
holds(1, in_tower((block,5),(block,6)), false, 65).
holds(1, in_tower((block,5),(block,7)), false, 65).
holds(1, in_tower((block,5),(block,8)), false, 65).
holds(1, in_tower((block,5),(block,9)), false, 65).
holds(1, in_tower((block,6),(block,1)), false, 65).
holds(1, in_tower((block,6),(block,2)), false, 65).
holds(1, in_tower((block,6),(block,3)), false, 65).
holds(1, in_tower((block,6),(block,4)), false, 65).
holds(1, in_tower((block,6),(block,5)), true, 65).
holds(1, in_tower((block,6),(block,6)), true, 65).
holds(1, in_tower((block,6),(block,7)), false, 65).
holds(1, in_tower((block,6),(block,8)), false, 65).
holds(1, in_tower((block,6),(block,9)), false, 65).
holds(1, in_tower((block,7),(block,1)), false, 65).
holds(1, in_tower((block,7),(block,2)), false, 65).
holds(1, in_tower((block,7),(block,3)), false, 65).
holds(1, in_tower((block,7),(block,4)), false, 65).
holds(1, in_tower((block,7),(block,5)), false, 65).
holds(1, in_tower((block,7),(block,6)), false, 65).
holds(1, in_tower((block,7),(block,7)), true, 65).
holds(1, in_tower((block,7),(block,8)), false, 65).
holds(1, in_tower((block,7),(block,9)), true, 65).
holds(1, in_tower((block,8),(block,1)), false, 65).
holds(1, in_tower((block,8),(block,2)), false, 65).
holds(1, in_tower((block,8),(block,3)), false, 65).
holds(1, in_tower((block,8),(block,4)), false, 65).
holds(1, in_tower((block,8),(block,5)), false, 65).
holds(1, in_tower((block,8),(block,6)), false, 65).
holds(1, in_tower((block,8),(block,7)), false, 65).
holds(1, in_tower((block,8),(block,8)), false, 65).
holds(1, in_tower((block,8),(block,9)), false, 65).
holds(1, in_tower((block,9),(block,1)), false, 65).
holds(1, in_tower((block,9),(block,2)), false, 65).
holds(1, in_tower((block,9),(block,3)), false, 65).
holds(1, in_tower((block,9),(block,4)), false, 65).
holds(1, in_tower((block,9),(block,5)), false, 65).
holds(1, in_tower((block,9),(block,6)), false, 65).
holds(1, in_tower((block,9),(block,7)), false, 65).
holds(1, in_tower((block,9),(block,8)), false, 65).
holds(1, in_tower((block,9),(block,9)), false, 65).
holds(1, on((block,1)), puzzle_room_table_left, 65).
holds(1, on((block,2)), puzzle_room_table_right, 65).
holds(1, on((block,3)), puzzle_room_table_left, 65).
holds(1, on((block,4)), nothing, 65).
holds(1, on((block,5)), (block,6), 65).
holds(1, on((block,6)), puzzle_room_table_right, 65).
holds(1, on((block,7)), puzzle_room_table_middle, 65).
holds(1, on((block,8)), nothing, 65).
holds(1, on((block,9)), (block,7), 65).
holds(1, tower_base((block,1),puzzle_room_table), true, 65).
holds(1, tower_base((block,2),puzzle_room_table), true, 65).
holds(1, tower_base((block,3),puzzle_room_table), true, 65).
holds(1, tower_base((block,4),puzzle_room_table), false, 65).
holds(1, tower_base((block,5),puzzle_room_table), false, 65).
holds(1, tower_base((block,6),puzzle_room_table), true, 65).
holds(1, tower_base((block,7),puzzle_room_table), true, 65).
holds(1, tower_base((block,8),puzzle_room_table), false, 65).
holds(1, tower_base((block,9),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,7),puzzle_room_table), true, 65).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 65).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 65).
holds(2, complete_tower(blue,puzzle_room_table), false, 65).
holds(2, complete_tower(red,puzzle_room_table), false, 65).
holds(2, complete_tower(yellow,puzzle_room_table), false, 65).
holds(2, configuration(manipulator_arm_1), extended, 65).
holds(2, configuration(manipulator_arm_2), retracted, 65).
holds(2, configuration(puzzle_room_door), open, 65).
holds(2, configuration(starting_room_door), closed, 65).
holds(2, configuration(store_room_door), open, 65).
holds(2, grasping(manipulator_arm_1), (block,8), 65).
holds(2, grasping(manipulator_arm_2), (block,4), 65).
holds(2, in((block,1)), puzzle_room, 65).
holds(2, in((block,2)), puzzle_room, 65).
holds(2, in((block,3)), puzzle_room, 65).
holds(2, in((block,4)), puzzle_room, 65).
holds(2, in((block,5)), puzzle_room, 65).
holds(2, in((block,6)), puzzle_room, 65).
holds(2, in((block,7)), puzzle_room, 65).
holds(2, in((block,8)), puzzle_room, 65).
holds(2, in((block,9)), puzzle_room, 65).
holds(2, in(manipulator_arm_1), puzzle_room, 65).
holds(2, in(manipulator_arm_2), puzzle_room, 65).
holds(2, in(puzzle_room_table), puzzle_room, 65).
holds(2, in(talos), puzzle_room, 65).
holds(2, in_tower((block,1),(block,1)), true, 65).
holds(2, in_tower((block,1),(block,2)), false, 65).
holds(2, in_tower((block,1),(block,3)), false, 65).
holds(2, in_tower((block,1),(block,4)), false, 65).
holds(2, in_tower((block,1),(block,5)), false, 65).
holds(2, in_tower((block,1),(block,6)), false, 65).
holds(2, in_tower((block,1),(block,7)), false, 65).
holds(2, in_tower((block,1),(block,8)), false, 65).
holds(2, in_tower((block,1),(block,9)), false, 65).
holds(2, in_tower((block,2),(block,1)), false, 65).
holds(2, in_tower((block,2),(block,2)), true, 65).
holds(2, in_tower((block,2),(block,3)), false, 65).
holds(2, in_tower((block,2),(block,4)), false, 65).
holds(2, in_tower((block,2),(block,5)), false, 65).
holds(2, in_tower((block,2),(block,6)), false, 65).
holds(2, in_tower((block,2),(block,7)), false, 65).
holds(2, in_tower((block,2),(block,8)), false, 65).
holds(2, in_tower((block,2),(block,9)), false, 65).
holds(2, in_tower((block,3),(block,1)), false, 65).
holds(2, in_tower((block,3),(block,2)), false, 65).
holds(2, in_tower((block,3),(block,3)), true, 65).
holds(2, in_tower((block,3),(block,4)), false, 65).
holds(2, in_tower((block,3),(block,5)), false, 65).
holds(2, in_tower((block,3),(block,6)), false, 65).
holds(2, in_tower((block,3),(block,7)), false, 65).
holds(2, in_tower((block,3),(block,8)), false, 65).
holds(2, in_tower((block,3),(block,9)), false, 65).
holds(2, in_tower((block,4),(block,1)), false, 65).
holds(2, in_tower((block,4),(block,2)), false, 65).
holds(2, in_tower((block,4),(block,3)), false, 65).
holds(2, in_tower((block,4),(block,4)), false, 65).
holds(2, in_tower((block,4),(block,5)), false, 65).
holds(2, in_tower((block,4),(block,6)), false, 65).
holds(2, in_tower((block,4),(block,7)), false, 65).
holds(2, in_tower((block,4),(block,8)), false, 65).
holds(2, in_tower((block,4),(block,9)), false, 65).
holds(2, in_tower((block,5),(block,1)), false, 65).
holds(2, in_tower((block,5),(block,2)), false, 65).
holds(2, in_tower((block,5),(block,3)), false, 65).
holds(2, in_tower((block,5),(block,4)), false, 65).
holds(2, in_tower((block,5),(block,5)), false, 65).
holds(2, in_tower((block,5),(block,6)), false, 65).
holds(2, in_tower((block,5),(block,7)), false, 65).
holds(2, in_tower((block,5),(block,8)), false, 65).
holds(2, in_tower((block,5),(block,9)), false, 65).
holds(2, in_tower((block,6),(block,1)), false, 65).
holds(2, in_tower((block,6),(block,2)), false, 65).
holds(2, in_tower((block,6),(block,3)), false, 65).
holds(2, in_tower((block,6),(block,4)), false, 65).
holds(2, in_tower((block,6),(block,5)), true, 65).
holds(2, in_tower((block,6),(block,6)), true, 65).
holds(2, in_tower((block,6),(block,7)), false, 65).
holds(2, in_tower((block,6),(block,8)), false, 65).
holds(2, in_tower((block,6),(block,9)), false, 65).
holds(2, in_tower((block,7),(block,1)), false, 65).
holds(2, in_tower((block,7),(block,2)), false, 65).
holds(2, in_tower((block,7),(block,3)), false, 65).
holds(2, in_tower((block,7),(block,4)), false, 65).
holds(2, in_tower((block,7),(block,5)), false, 65).
holds(2, in_tower((block,7),(block,6)), false, 65).
holds(2, in_tower((block,7),(block,7)), true, 65).
holds(2, in_tower((block,7),(block,8)), false, 65).
holds(2, in_tower((block,7),(block,9)), true, 65).
holds(2, in_tower((block,8),(block,1)), false, 65).
holds(2, in_tower((block,8),(block,2)), false, 65).
holds(2, in_tower((block,8),(block,3)), false, 65).
holds(2, in_tower((block,8),(block,4)), false, 65).
holds(2, in_tower((block,8),(block,5)), false, 65).
holds(2, in_tower((block,8),(block,6)), false, 65).
holds(2, in_tower((block,8),(block,7)), false, 65).
holds(2, in_tower((block,8),(block,8)), false, 65).
holds(2, in_tower((block,8),(block,9)), false, 65).
holds(2, in_tower((block,9),(block,1)), false, 65).
holds(2, in_tower((block,9),(block,2)), false, 65).
holds(2, in_tower((block,9),(block,3)), false, 65).
holds(2, in_tower((block,9),(block,4)), false, 65).
holds(2, in_tower((block,9),(block,5)), false, 65).
holds(2, in_tower((block,9),(block,6)), false, 65).
holds(2, in_tower((block,9),(block,7)), false, 65).
holds(2, in_tower((block,9),(block,8)), false, 65).
holds(2, in_tower((block,9),(block,9)), false, 65).
holds(2, on((block,1)), puzzle_room_table, 65).
holds(2, on((block,2)), puzzle_room_table, 65).
holds(2, on((block,3)), puzzle_room_table, 65).
holds(2, on((block,4)), nothing, 65).
holds(2, on((block,5)), (block,6), 65).
holds(2, on((block,6)), puzzle_room_table, 65).
holds(2, on((block,7)), puzzle_room_table, 65).
holds(2, on((block,8)), nothing, 65).
holds(2, on((block,9)), (block,7), 65).
holds(2, tower_base((block,1),puzzle_room_table), true, 65).
holds(2, tower_base((block,2),puzzle_room_table), true, 65).
holds(2, tower_base((block,3),puzzle_room_table), true, 65).
holds(2, tower_base((block,4),puzzle_room_table), false, 65).
holds(2, tower_base((block,5),puzzle_room_table), false, 65).
holds(2, tower_base((block,6),puzzle_room_table), true, 65).
holds(2, tower_base((block,7),puzzle_room_table), true, 65).
holds(2, tower_base((block,8),puzzle_room_table), false, 65).
holds(2, tower_base((block,9),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,7),puzzle_room_table), true, 65).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 65).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 65).

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=69']

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,9),puzzle_room_table)', 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'I': 45})

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 41).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 42).
sub_goal(2, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 43).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), (block,9), 44).
sub_goal(2, talos, put(manipulator_arm_2,(block,9),puzzle_room_table), on((block,9)), puzzle_room_table, 45).

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=65, step_range=range(0, 66)

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 65, Total actions = 65, Produced sub-goal stages = 0

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 65, Total actions = 65, Produced sub-goal stages = 0

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 65, Total actions = 65, Produced sub-goal stages = 0

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=69']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA2D80D430>]
	incrementor = SolveIncrementor(step_start=65, step_increase=1, step_increase_initial=5, step_end_min=70, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1454.6498731000156, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 65), range_=None), IncPart(name='plan_module', args=('#inc', 65, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 65, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 65, 41, 45, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1255 rules

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006403499999578344s

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039178s.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007298s with result Satisfiable.

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7B4A5B30>

[28-02-2022_23-11-55] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 65)
	('last_sgoals', 45)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 41)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7B4A5B30>)

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 65). %* None *%
#program plan_module(#inc, 65, false, false). %* None *%
#program optimisation_module(#inc, 65, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 65, 41, 45, sequential, false). %* None *%

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     64 : Current =     69
Incrementor step ends | Minimum  =     70 : Maximum =    300

[28-02-2022_23-11-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(65), Number(65)]), ('plan_module', [Number(65), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(66), Number(65)]), ('plan_module', [Number(66), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(67), Number(65)]), ('plan_module', [Number(67), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(68), Number(65)]), ('plan_module', [Number(68), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(65)]), ('plan_module', [Number(69), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.627825s.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.229725s with result Satisfiable.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8575500000006286, Incremental time limit = None
Running cumulative time = 0.8575500000006286, Cumulative time limit = 1454.6498731000156
Used memory = (RSS = 1902.050781Mb, VMS = 1902.093750Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.627825s, Solving = 0.229725s, Total = 0.857550s, Memory = (RSS = 1902.050781Mb, VMS = 1902.093750Mb), Step range = [65-69]), Calls = 1
Final Model :: Total atoms = 9432, Cost = (-1,), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     70 : Maximum =    300

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(65)]), ('plan_module', [Number(70), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.190441s.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039135s with result Unsatisfiable.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22957639999913226, Incremental time limit = None
Running cumulative time = 1.087126399999761, Cumulative time limit = 1454.6498731000156
Used memory = (RSS = 1906.179688Mb, VMS = 1906.613281Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     70 : Maximum =    300

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(65)]), ('plan_module', [Number(71), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.194836s.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036035s with result Unsatisfiable.

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2308712000012747, Incremental time limit = None
Running cumulative time = 1.3179976000010356, Cumulative time limit = 1454.6498731000156
Used memory = (RSS = 1908.128906Mb, VMS = 1907.132812Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     70 : Maximum =    300

[28-02-2022_23-11-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(65)]), ('plan_module', [Number(72), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200574s.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042625s with result Unsatisfiable.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24319890000151645, Incremental time limit = None
Running cumulative time = 1.561196500002552, Cumulative time limit = 1454.6498731000156
Used memory = (RSS = 1909.878906Mb, VMS = 1911.777344Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     70 : Maximum =    300

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(65)]), ('plan_module', [Number(73), Number(65), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(65), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(65), Number(41), Number(45), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.205129s.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068366s with result Satisfiable.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2734945999982301, Incremental time limit = None
Running cumulative time = 1.8346911000007822, Cumulative time limit = 1454.6498731000156
Used memory = (RSS = 1913.167969Mb, VMS = 1913.796875Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.418805s, Solving = 0.415886s, Total = 1.834691s, Memory = (RSS = 1913.167969Mb, VMS = 1913.796875Mb), Step range = [65-73]), Calls = 5
Final Model :: Total atoms = 12354, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.627825s, Solving = 0.229725s, Total = 0.857550s, Memory = (RSS = 1902.050781Mb, VMS = 1902.093750Mb), Step range = [65-69]
2 : Statistics :: Grounding = 0.190441s, Solving = 0.039135s, Total = 0.229576s, Memory = (RSS = 1906.179688Mb, VMS = 1906.613281Mb), Step range = [70-70]
3 : Statistics :: Grounding = 0.194836s, Solving = 0.036035s, Total = 0.230871s, Memory = (RSS = 1908.128906Mb, VMS = 1907.132812Mb), Step range = [71-71]
4 : Statistics :: Grounding = 0.200574s, Solving = 0.042625s, Total = 0.243199s, Memory = (RSS = 1909.878906Mb, VMS = 1911.777344Mb), Step range = [72-72]
5 : Statistics :: Grounding = 0.205129s, Solving = 0.068366s, Total = 0.273495s, Memory = (RSS = 1913.167969Mb, VMS = 1913.796875Mb), Step range = [73-73]

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.834691s due to: Stop condition reached.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35, 58: 36, 59: 37, 60: 38, 61: 38, 62: 39, 63: 39, 64: 39, 65: 40}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57, 36: 58, 37: 59, 38: 61, 39: 64, 40: 65}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35, 58: 36, 59: 37, 60: 38, 61: 38, 62: 39, 63: 39, 64: 39, 65: 40, 66: 41, 67: 41, 68: 41, 69: 42, 70: 43, 71: 44, 72: 44, 73: 45}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57, 36: 58, 37: 59, 38: 61, 39: 64, 40: 65, 41: 68, 42: 69, 43: 70, 44: 72, 45: 73}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 45, Last requested goal index = 45, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.418805s, Solving = 0.415886s, Total = 1.834691s, Memory = (RSS = 1913.167969Mb, VMS = 1913.796875Mb), Step range = [65-73]), Calls = 5
Model :: Total atoms = 12354, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 8 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 56:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 57:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 61:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 65:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 67:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 68:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 70:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 72:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 73:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 55 : Goals achieved = 45 : Goals unachieved = 10 : Complete = False

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-1].

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 20, Sub-goal Stage Range = [36-55]
Division points [total=3] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 45, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [46-50]

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=73, step_range=range(0, 74)

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [46-50], problem number = 7, increment number = 7

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 46)
	('last_sgoals', 50)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1636.3329423000068)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [46-50] : Concurrency disabled : Minimum search length bound enabled with value 77

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 46
last_sgoals = 50
start_step = 73
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 77

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[28-02-2022_23-11-57] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-11-57] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 73 as problem start state.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,8))', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,9))', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 73})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 73})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 73})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 73})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,8)', 'S': 73})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,9)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'S': 73})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 73})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 73})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'S': 73})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,9)', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'S': 73})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 73})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 73})

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 73).
holds(1, complete_tower(red,puzzle_room_table), false, 73).
holds(1, complete_tower(yellow,puzzle_room_table), false, 73).
holds(1, configuration(manipulator_end_1), aligned_with((block,8)), 73).
holds(1, configuration(manipulator_end_2), aligned_with((block,9)), 73).
holds(1, configuration(manipulator_limb_1), retracted, 73).
holds(1, configuration(manipulator_limb_2), extended, 73).
holds(1, configuration(puzzle_room_door), open, 73).
holds(1, configuration(starting_room_door), closed, 73).
holds(1, configuration(store_room_door), open, 73).
holds(1, grasping(manipulator_arm_1), (block,8), 73).
holds(1, grasping(manipulator_arm_2), (block,9), 73).
holds(1, grasping(manipulator_end_1), (block,8), 73).
holds(1, grasping(manipulator_end_2), (block,9), 73).
holds(1, in((block,1)), (puzzle_room,1), 73).
holds(1, in((block,2)), (puzzle_room,1), 73).
holds(1, in((block,3)), (puzzle_room,1), 73).
holds(1, in((block,4)), (puzzle_room,1), 73).
holds(1, in((block,5)), (puzzle_room,1), 73).
holds(1, in((block,6)), (puzzle_room,1), 73).
holds(1, in((block,7)), (puzzle_room,1), 73).
holds(1, in((block,8)), (puzzle_room,1), 73).
holds(1, in((block,9)), (puzzle_room,1), 73).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 73).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 73).
holds(1, in(manipulator_end_1), (puzzle_room,1), 73).
holds(1, in(manipulator_end_2), (puzzle_room,1), 73).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 73).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 73).
holds(1, in(puzzle_room_table), (puzzle_room,1), 73).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 73).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 73).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 73).
holds(1, in(talos), (puzzle_room,1), 73).
holds(1, in_tower((block,1),(block,1)), true, 73).
holds(1, in_tower((block,1),(block,2)), false, 73).
holds(1, in_tower((block,1),(block,3)), false, 73).
holds(1, in_tower((block,1),(block,4)), false, 73).
holds(1, in_tower((block,1),(block,5)), false, 73).
holds(1, in_tower((block,1),(block,6)), false, 73).
holds(1, in_tower((block,1),(block,7)), false, 73).
holds(1, in_tower((block,1),(block,8)), false, 73).
holds(1, in_tower((block,1),(block,9)), false, 73).
holds(1, in_tower((block,2),(block,1)), false, 73).
holds(1, in_tower((block,2),(block,2)), true, 73).
holds(1, in_tower((block,2),(block,3)), false, 73).
holds(1, in_tower((block,2),(block,4)), false, 73).
holds(1, in_tower((block,2),(block,5)), false, 73).
holds(1, in_tower((block,2),(block,6)), false, 73).
holds(1, in_tower((block,2),(block,7)), false, 73).
holds(1, in_tower((block,2),(block,8)), false, 73).
holds(1, in_tower((block,2),(block,9)), false, 73).
holds(1, in_tower((block,3),(block,1)), false, 73).
holds(1, in_tower((block,3),(block,2)), false, 73).
holds(1, in_tower((block,3),(block,3)), true, 73).
holds(1, in_tower((block,3),(block,4)), false, 73).
holds(1, in_tower((block,3),(block,5)), false, 73).
holds(1, in_tower((block,3),(block,6)), false, 73).
holds(1, in_tower((block,3),(block,7)), false, 73).
holds(1, in_tower((block,3),(block,8)), false, 73).
holds(1, in_tower((block,3),(block,9)), false, 73).
holds(1, in_tower((block,4),(block,1)), false, 73).
holds(1, in_tower((block,4),(block,2)), false, 73).
holds(1, in_tower((block,4),(block,3)), false, 73).
holds(1, in_tower((block,4),(block,4)), false, 73).
holds(1, in_tower((block,4),(block,5)), false, 73).
holds(1, in_tower((block,4),(block,6)), false, 73).
holds(1, in_tower((block,4),(block,7)), false, 73).
holds(1, in_tower((block,4),(block,8)), false, 73).
holds(1, in_tower((block,4),(block,9)), false, 73).
holds(1, in_tower((block,5),(block,1)), false, 73).
holds(1, in_tower((block,5),(block,2)), false, 73).
holds(1, in_tower((block,5),(block,3)), false, 73).
holds(1, in_tower((block,5),(block,4)), false, 73).
holds(1, in_tower((block,5),(block,5)), false, 73).
holds(1, in_tower((block,5),(block,6)), false, 73).
holds(1, in_tower((block,5),(block,7)), false, 73).
holds(1, in_tower((block,5),(block,8)), false, 73).
holds(1, in_tower((block,5),(block,9)), false, 73).
holds(1, in_tower((block,6),(block,1)), false, 73).
holds(1, in_tower((block,6),(block,2)), false, 73).
holds(1, in_tower((block,6),(block,3)), false, 73).
holds(1, in_tower((block,6),(block,4)), true, 73).
holds(1, in_tower((block,6),(block,5)), true, 73).
holds(1, in_tower((block,6),(block,6)), true, 73).
holds(1, in_tower((block,6),(block,7)), false, 73).
holds(1, in_tower((block,6),(block,8)), false, 73).
holds(1, in_tower((block,6),(block,9)), false, 73).
holds(1, in_tower((block,7),(block,1)), false, 73).
holds(1, in_tower((block,7),(block,2)), false, 73).
holds(1, in_tower((block,7),(block,3)), false, 73).
holds(1, in_tower((block,7),(block,4)), false, 73).
holds(1, in_tower((block,7),(block,5)), false, 73).
holds(1, in_tower((block,7),(block,6)), false, 73).
holds(1, in_tower((block,7),(block,7)), true, 73).
holds(1, in_tower((block,7),(block,8)), false, 73).
holds(1, in_tower((block,7),(block,9)), false, 73).
holds(1, in_tower((block,8),(block,1)), false, 73).
holds(1, in_tower((block,8),(block,2)), false, 73).
holds(1, in_tower((block,8),(block,3)), false, 73).
holds(1, in_tower((block,8),(block,4)), false, 73).
holds(1, in_tower((block,8),(block,5)), false, 73).
holds(1, in_tower((block,8),(block,6)), false, 73).
holds(1, in_tower((block,8),(block,7)), false, 73).
holds(1, in_tower((block,8),(block,8)), false, 73).
holds(1, in_tower((block,8),(block,9)), false, 73).
holds(1, in_tower((block,9),(block,1)), false, 73).
holds(1, in_tower((block,9),(block,2)), false, 73).
holds(1, in_tower((block,9),(block,3)), false, 73).
holds(1, in_tower((block,9),(block,4)), false, 73).
holds(1, in_tower((block,9),(block,5)), false, 73).
holds(1, in_tower((block,9),(block,6)), false, 73).
holds(1, in_tower((block,9),(block,7)), false, 73).
holds(1, in_tower((block,9),(block,8)), false, 73).
holds(1, in_tower((block,9),(block,9)), true, 73).
holds(1, on((block,1)), puzzle_room_table_left, 73).
holds(1, on((block,2)), puzzle_room_table_right, 73).
holds(1, on((block,3)), puzzle_room_table_left, 73).
holds(1, on((block,4)), (block,5), 73).
holds(1, on((block,5)), (block,6), 73).
holds(1, on((block,6)), puzzle_room_table_right, 73).
holds(1, on((block,7)), puzzle_room_table_middle, 73).
holds(1, on((block,8)), nothing, 73).
holds(1, on((block,9)), puzzle_room_table_middle, 73).
holds(1, tower_base((block,1),puzzle_room_table), true, 73).
holds(1, tower_base((block,2),puzzle_room_table), true, 73).
holds(1, tower_base((block,3),puzzle_room_table), true, 73).
holds(1, tower_base((block,4),puzzle_room_table), false, 73).
holds(1, tower_base((block,5),puzzle_room_table), false, 73).
holds(1, tower_base((block,6),puzzle_room_table), true, 73).
holds(1, tower_base((block,7),puzzle_room_table), true, 73).
holds(1, tower_base((block,8),puzzle_room_table), false, 73).
holds(1, tower_base((block,9),puzzle_room_table), true, 73).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 73).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 73).
holds(2, complete_tower(blue,puzzle_room_table), true, 73).
holds(2, complete_tower(red,puzzle_room_table), false, 73).
holds(2, complete_tower(yellow,puzzle_room_table), false, 73).
holds(2, configuration(manipulator_arm_1), retracted, 73).
holds(2, configuration(manipulator_arm_2), extended, 73).
holds(2, configuration(puzzle_room_door), open, 73).
holds(2, configuration(starting_room_door), closed, 73).
holds(2, configuration(store_room_door), open, 73).
holds(2, grasping(manipulator_arm_1), (block,8), 73).
holds(2, grasping(manipulator_arm_2), (block,9), 73).
holds(2, in((block,1)), puzzle_room, 73).
holds(2, in((block,2)), puzzle_room, 73).
holds(2, in((block,3)), puzzle_room, 73).
holds(2, in((block,4)), puzzle_room, 73).
holds(2, in((block,5)), puzzle_room, 73).
holds(2, in((block,6)), puzzle_room, 73).
holds(2, in((block,7)), puzzle_room, 73).
holds(2, in((block,8)), puzzle_room, 73).
holds(2, in((block,9)), puzzle_room, 73).
holds(2, in(manipulator_arm_1), puzzle_room, 73).
holds(2, in(manipulator_arm_2), puzzle_room, 73).
holds(2, in(puzzle_room_table), puzzle_room, 73).
holds(2, in(talos), puzzle_room, 73).
holds(2, in_tower((block,1),(block,1)), true, 73).
holds(2, in_tower((block,1),(block,2)), false, 73).
holds(2, in_tower((block,1),(block,3)), false, 73).
holds(2, in_tower((block,1),(block,4)), false, 73).
holds(2, in_tower((block,1),(block,5)), false, 73).
holds(2, in_tower((block,1),(block,6)), false, 73).
holds(2, in_tower((block,1),(block,7)), false, 73).
holds(2, in_tower((block,1),(block,8)), false, 73).
holds(2, in_tower((block,1),(block,9)), false, 73).
holds(2, in_tower((block,2),(block,1)), false, 73).
holds(2, in_tower((block,2),(block,2)), true, 73).
holds(2, in_tower((block,2),(block,3)), false, 73).
holds(2, in_tower((block,2),(block,4)), false, 73).
holds(2, in_tower((block,2),(block,5)), false, 73).
holds(2, in_tower((block,2),(block,6)), false, 73).
holds(2, in_tower((block,2),(block,7)), false, 73).
holds(2, in_tower((block,2),(block,8)), false, 73).
holds(2, in_tower((block,2),(block,9)), false, 73).
holds(2, in_tower((block,3),(block,1)), false, 73).
holds(2, in_tower((block,3),(block,2)), false, 73).
holds(2, in_tower((block,3),(block,3)), true, 73).
holds(2, in_tower((block,3),(block,4)), false, 73).
holds(2, in_tower((block,3),(block,5)), false, 73).
holds(2, in_tower((block,3),(block,6)), false, 73).
holds(2, in_tower((block,3),(block,7)), false, 73).
holds(2, in_tower((block,3),(block,8)), false, 73).
holds(2, in_tower((block,3),(block,9)), false, 73).
holds(2, in_tower((block,4),(block,1)), false, 73).
holds(2, in_tower((block,4),(block,2)), false, 73).
holds(2, in_tower((block,4),(block,3)), false, 73).
holds(2, in_tower((block,4),(block,4)), false, 73).
holds(2, in_tower((block,4),(block,5)), false, 73).
holds(2, in_tower((block,4),(block,6)), false, 73).
holds(2, in_tower((block,4),(block,7)), false, 73).
holds(2, in_tower((block,4),(block,8)), false, 73).
holds(2, in_tower((block,4),(block,9)), false, 73).
holds(2, in_tower((block,5),(block,1)), false, 73).
holds(2, in_tower((block,5),(block,2)), false, 73).
holds(2, in_tower((block,5),(block,3)), false, 73).
holds(2, in_tower((block,5),(block,4)), false, 73).
holds(2, in_tower((block,5),(block,5)), false, 73).
holds(2, in_tower((block,5),(block,6)), false, 73).
holds(2, in_tower((block,5),(block,7)), false, 73).
holds(2, in_tower((block,5),(block,8)), false, 73).
holds(2, in_tower((block,5),(block,9)), false, 73).
holds(2, in_tower((block,6),(block,1)), false, 73).
holds(2, in_tower((block,6),(block,2)), false, 73).
holds(2, in_tower((block,6),(block,3)), false, 73).
holds(2, in_tower((block,6),(block,4)), true, 73).
holds(2, in_tower((block,6),(block,5)), true, 73).
holds(2, in_tower((block,6),(block,6)), true, 73).
holds(2, in_tower((block,6),(block,7)), false, 73).
holds(2, in_tower((block,6),(block,8)), false, 73).
holds(2, in_tower((block,6),(block,9)), false, 73).
holds(2, in_tower((block,7),(block,1)), false, 73).
holds(2, in_tower((block,7),(block,2)), false, 73).
holds(2, in_tower((block,7),(block,3)), false, 73).
holds(2, in_tower((block,7),(block,4)), false, 73).
holds(2, in_tower((block,7),(block,5)), false, 73).
holds(2, in_tower((block,7),(block,6)), false, 73).
holds(2, in_tower((block,7),(block,7)), true, 73).
holds(2, in_tower((block,7),(block,8)), false, 73).
holds(2, in_tower((block,7),(block,9)), false, 73).
holds(2, in_tower((block,8),(block,1)), false, 73).
holds(2, in_tower((block,8),(block,2)), false, 73).
holds(2, in_tower((block,8),(block,3)), false, 73).
holds(2, in_tower((block,8),(block,4)), false, 73).
holds(2, in_tower((block,8),(block,5)), false, 73).
holds(2, in_tower((block,8),(block,6)), false, 73).
holds(2, in_tower((block,8),(block,7)), false, 73).
holds(2, in_tower((block,8),(block,8)), false, 73).
holds(2, in_tower((block,8),(block,9)), false, 73).
holds(2, in_tower((block,9),(block,1)), false, 73).
holds(2, in_tower((block,9),(block,2)), false, 73).
holds(2, in_tower((block,9),(block,3)), false, 73).
holds(2, in_tower((block,9),(block,4)), false, 73).
holds(2, in_tower((block,9),(block,5)), false, 73).
holds(2, in_tower((block,9),(block,6)), false, 73).
holds(2, in_tower((block,9),(block,7)), false, 73).
holds(2, in_tower((block,9),(block,8)), false, 73).
holds(2, in_tower((block,9),(block,9)), true, 73).
holds(2, on((block,1)), puzzle_room_table, 73).
holds(2, on((block,2)), puzzle_room_table, 73).
holds(2, on((block,3)), puzzle_room_table, 73).
holds(2, on((block,4)), (block,5), 73).
holds(2, on((block,5)), (block,6), 73).
holds(2, on((block,6)), puzzle_room_table, 73).
holds(2, on((block,7)), puzzle_room_table, 73).
holds(2, on((block,8)), nothing, 73).
holds(2, on((block,9)), puzzle_room_table, 73).
holds(2, tower_base((block,1),puzzle_room_table), true, 73).
holds(2, tower_base((block,2),puzzle_room_table), true, 73).
holds(2, tower_base((block,3),puzzle_room_table), true, 73).
holds(2, tower_base((block,4),puzzle_room_table), false, 73).
holds(2, tower_base((block,5),puzzle_room_table), false, 73).
holds(2, tower_base((block,6),puzzle_room_table), true, 73).
holds(2, tower_base((block,7),puzzle_room_table), true, 73).
holds(2, tower_base((block,8),puzzle_room_table), false, 73).
holds(2, tower_base((block,9),puzzle_room_table), true, 73).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 73).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 73).

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=77']

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,9))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 48})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 49})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'I': 50})

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,9)), grasping(manipulator_arm_2), nothing, 46).
sub_goal(2, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 47).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 48).
sub_goal(2, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 49).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 50).

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=73, step_range=range(0, 74)

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 73, Total actions = 73, Produced sub-goal stages = 0

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=77']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA2D80DCA0>]
	incrementor = SolveIncrementor(step_start=73, step_increase=1, step_increase_initial=5, step_end_min=78, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1452.8151820000148, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 73), range_=None), IncPart(name='plan_module', args=('#inc', 73, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 73, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 73, 46, 50, 'sequential', 'false'), range_=None)]

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1255 rules

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006608599998799036s

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039572s.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007719s with result Satisfiable.

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7B4D5590>

[28-02-2022_23-11-57] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 73)
	('last_sgoals', 50)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 46)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7B4D5590>)

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 73). %* None *%
#program plan_module(#inc, 73, false, false). %* None *%
#program optimisation_module(#inc, 73, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 73, 46, 50, sequential, false). %* None *%

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     72 : Current =     77
Incrementor step ends | Minimum  =     78 : Maximum =    300

[28-02-2022_23-11-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(77)]), ('state_module', [Number(73), Number(73)]), ('plan_module', [Number(73), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(74), Number(73)]), ('plan_module', [Number(74), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(75), Number(73)]), ('plan_module', [Number(75), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(76), Number(73)]), ('plan_module', [Number(76), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(76), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(77), Number(73)]), ('plan_module', [Number(77), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(77), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.630398s.

[28-02-2022_23-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.267683s with result Satisfiable.

[28-02-2022_23-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.898080499999196, Incremental time limit = None
Running cumulative time = 0.898080499999196, Cumulative time limit = 1452.8151820000148
Used memory = (RSS = 1904.285156Mb, VMS = 1904.335938Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.630398s, Solving = 0.267683s, Total = 0.898080s, Memory = (RSS = 1904.285156Mb, VMS = 1904.335938Mb), Step range = [73-77]), Calls = 1
Final Model :: Total atoms = 9430, Cost = (-4,), Optimality proven = False, Number = 4, Thread ID = 1, Model type = ModelType.StableModel

[28-02-2022_23-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     77 : Current =     78
Incrementor step ends | Minimum  =     78 : Maximum =    300

[28-02-2022_23-11-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(78)]), ('state_module', [Number(78), Number(73)]), ('plan_module', [Number(78), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(78), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.186645s.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036230s with result Unsatisfiable.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22287449999930686, Incremental time limit = None
Running cumulative time = 1.120954999998503, Cumulative time limit = 1452.8151820000148
Used memory = (RSS = 1908.347656Mb, VMS = 1908.800781Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     78 : Current =     79
Incrementor step ends | Minimum  =     78 : Maximum =    300

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(79)]), ('state_module', [Number(79), Number(73)]), ('plan_module', [Number(79), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(79), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.192338s.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036238s with result Unsatisfiable.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22857619999922463, Incremental time limit = None
Running cumulative time = 1.3495311999977275, Cumulative time limit = 1452.8151820000148
Used memory = (RSS = 1909.914062Mb, VMS = 1909.246094Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     79 : Current =     80
Incrementor step ends | Minimum  =     78 : Maximum =    300

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(80)]), ('state_module', [Number(80), Number(73)]), ('plan_module', [Number(80), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(80), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.197002s.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049489s with result Unsatisfiable.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24649089999911666, Incremental time limit = None
Running cumulative time = 1.5960220999968442, Cumulative time limit = 1452.8151820000148
Used memory = (RSS = 1911.511719Mb, VMS = 1914.070312Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     80 : Current =     81
Incrementor step ends | Minimum  =     78 : Maximum =    300

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(81)]), ('state_module', [Number(81), Number(73)]), ('plan_module', [Number(81), Number(73), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(73), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(73), Number(46), Number(50), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200722s.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056030s with result Satisfiable.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.256752500001312, Incremental time limit = None
Running cumulative time = 1.8527745999981562, Cumulative time limit = 1452.8151820000148
Used memory = (RSS = 1914.328125Mb, VMS = 1915.343750Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.407105s, Solving = 0.445670s, Total = 1.852775s, Memory = (RSS = 1914.328125Mb, VMS = 1915.343750Mb), Step range = [73-81]), Calls = 5
Final Model :: Total atoms = 12358, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.630398s, Solving = 0.267683s, Total = 0.898080s, Memory = (RSS = 1904.285156Mb, VMS = 1904.335938Mb), Step range = [73-77]
2 : Statistics :: Grounding = 0.186645s, Solving = 0.036230s, Total = 0.222874s, Memory = (RSS = 1908.347656Mb, VMS = 1908.800781Mb), Step range = [78-78]
3 : Statistics :: Grounding = 0.192338s, Solving = 0.036238s, Total = 0.228576s, Memory = (RSS = 1909.914062Mb, VMS = 1909.246094Mb), Step range = [79-79]
4 : Statistics :: Grounding = 0.197002s, Solving = 0.049489s, Total = 0.246491s, Memory = (RSS = 1911.511719Mb, VMS = 1914.070312Mb), Step range = [80-80]
5 : Statistics :: Grounding = 0.200722s, Solving = 0.056030s, Total = 0.256753s, Memory = (RSS = 1914.328125Mb, VMS = 1915.343750Mb), Step range = [81-81]

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.852775s due to: Stop condition reached.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-11-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35, 58: 36, 59: 37, 60: 38, 61: 38, 62: 39, 63: 39, 64: 39, 65: 40, 66: 41, 67: 41, 68: 41, 69: 42, 70: 43, 71: 44, 72: 44, 73: 45}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57, 36: 58, 37: 59, 38: 61, 39: 64, 40: 65, 41: 68, 42: 69, 43: 70, 44: 72, 45: 73}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35, 58: 36, 59: 37, 60: 38, 61: 38, 62: 39, 63: 39, 64: 39, 65: 40, 66: 41, 67: 41, 68: 41, 69: 42, 70: 43, 71: 44, 72: 44, 73: 45, 74: 46, 75: 47, 76: 47, 77: 47, 78: 48, 79: 48, 80: 49, 81: 50}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57, 36: 58, 37: 59, 38: 61, 39: 64, 40: 65, 41: 68, 42: 69, 43: 70, 44: 72, 45: 73, 46: 74, 47: 77, 48: 79, 49: 80, 50: 81}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 50, Last requested goal index = 50, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.407105s, Solving = 0.445670s, Total = 1.852775s, Memory = (RSS = 1914.328125Mb, VMS = 1915.343750Mb), Step range = [73-81]), Calls = 5
Model :: Total atoms = 12358, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 8 :: Actions = 8                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 56:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 57:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 61:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 65:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 67:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 68:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 70:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 72:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 73:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 74:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 75:
    Current Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 76:
    Current Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 77:
    Current Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_1,(block,8),(block,9))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,8))
Step 79:
    Current Sub-goals:
        [Index = 48] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 48] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 80:
    Current Sub-goals:
        [Index = 49] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 49] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,7)))
Step 81:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,7))

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 55 : Goals achieved = 50 : Goals unachieved = 5 : Complete = False

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 20, Sub-goal Stage Range = [36-55]
Division points [total=3] : [(Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 45, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [51-55]

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=81, step_range=range(0, 82)

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [51-55], problem number = 8, increment number = 8

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 51)
	('last_sgoals', 55)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1636.3329423000068)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [51-55] : Concurrency disabled : Minimum search length bound enabled with value 85

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 51
last_sgoals = 55
start_step = 81
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 85

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[28-02-2022_23-12-00] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[28-02-2022_23-12-00] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 81 as problem start state.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,7))', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,2))', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,7)', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,2)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'S': 81})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 81})

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 81).
holds(1, complete_tower(red,puzzle_room_table), false, 81).
holds(1, complete_tower(yellow,puzzle_room_table), false, 81).
holds(1, configuration(manipulator_end_1), aligned_with((block,7)), 81).
holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 81).
holds(1, configuration(manipulator_limb_1), extended, 81).
holds(1, configuration(manipulator_limb_2), extended, 81).
holds(1, configuration(puzzle_room_door), open, 81).
holds(1, configuration(starting_room_door), closed, 81).
holds(1, configuration(store_room_door), open, 81).
holds(1, grasping(manipulator_arm_1), (block,7), 81).
holds(1, grasping(manipulator_arm_2), (block,2), 81).
holds(1, grasping(manipulator_end_1), (block,7), 81).
holds(1, grasping(manipulator_end_2), (block,2), 81).
holds(1, in((block,1)), (puzzle_room,1), 81).
holds(1, in((block,2)), (puzzle_room,1), 81).
holds(1, in((block,3)), (puzzle_room,1), 81).
holds(1, in((block,4)), (puzzle_room,1), 81).
holds(1, in((block,5)), (puzzle_room,1), 81).
holds(1, in((block,6)), (puzzle_room,1), 81).
holds(1, in((block,7)), (puzzle_room,1), 81).
holds(1, in((block,8)), (puzzle_room,1), 81).
holds(1, in((block,9)), (puzzle_room,1), 81).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 81).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 81).
holds(1, in(manipulator_end_1), (puzzle_room,1), 81).
holds(1, in(manipulator_end_2), (puzzle_room,1), 81).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 81).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 81).
holds(1, in(puzzle_room_table), (puzzle_room,1), 81).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 81).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 81).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 81).
holds(1, in(talos), (puzzle_room,1), 81).
holds(1, in_tower((block,1),(block,1)), true, 81).
holds(1, in_tower((block,1),(block,2)), false, 81).
holds(1, in_tower((block,1),(block,3)), false, 81).
holds(1, in_tower((block,1),(block,4)), false, 81).
holds(1, in_tower((block,1),(block,5)), false, 81).
holds(1, in_tower((block,1),(block,6)), false, 81).
holds(1, in_tower((block,1),(block,7)), false, 81).
holds(1, in_tower((block,1),(block,8)), false, 81).
holds(1, in_tower((block,1),(block,9)), false, 81).
holds(1, in_tower((block,2),(block,1)), false, 81).
holds(1, in_tower((block,2),(block,2)), true, 81).
holds(1, in_tower((block,2),(block,3)), false, 81).
holds(1, in_tower((block,2),(block,4)), false, 81).
holds(1, in_tower((block,2),(block,5)), false, 81).
holds(1, in_tower((block,2),(block,6)), false, 81).
holds(1, in_tower((block,2),(block,7)), false, 81).
holds(1, in_tower((block,2),(block,8)), false, 81).
holds(1, in_tower((block,2),(block,9)), false, 81).
holds(1, in_tower((block,3),(block,1)), false, 81).
holds(1, in_tower((block,3),(block,2)), false, 81).
holds(1, in_tower((block,3),(block,3)), true, 81).
holds(1, in_tower((block,3),(block,4)), false, 81).
holds(1, in_tower((block,3),(block,5)), false, 81).
holds(1, in_tower((block,3),(block,6)), false, 81).
holds(1, in_tower((block,3),(block,7)), false, 81).
holds(1, in_tower((block,3),(block,8)), false, 81).
holds(1, in_tower((block,3),(block,9)), false, 81).
holds(1, in_tower((block,4),(block,1)), false, 81).
holds(1, in_tower((block,4),(block,2)), false, 81).
holds(1, in_tower((block,4),(block,3)), false, 81).
holds(1, in_tower((block,4),(block,4)), false, 81).
holds(1, in_tower((block,4),(block,5)), false, 81).
holds(1, in_tower((block,4),(block,6)), false, 81).
holds(1, in_tower((block,4),(block,7)), false, 81).
holds(1, in_tower((block,4),(block,8)), false, 81).
holds(1, in_tower((block,4),(block,9)), false, 81).
holds(1, in_tower((block,5),(block,1)), false, 81).
holds(1, in_tower((block,5),(block,2)), false, 81).
holds(1, in_tower((block,5),(block,3)), false, 81).
holds(1, in_tower((block,5),(block,4)), false, 81).
holds(1, in_tower((block,5),(block,5)), false, 81).
holds(1, in_tower((block,5),(block,6)), false, 81).
holds(1, in_tower((block,5),(block,7)), false, 81).
holds(1, in_tower((block,5),(block,8)), false, 81).
holds(1, in_tower((block,5),(block,9)), false, 81).
holds(1, in_tower((block,6),(block,1)), false, 81).
holds(1, in_tower((block,6),(block,2)), false, 81).
holds(1, in_tower((block,6),(block,3)), false, 81).
holds(1, in_tower((block,6),(block,4)), true, 81).
holds(1, in_tower((block,6),(block,5)), true, 81).
holds(1, in_tower((block,6),(block,6)), true, 81).
holds(1, in_tower((block,6),(block,7)), false, 81).
holds(1, in_tower((block,6),(block,8)), false, 81).
holds(1, in_tower((block,6),(block,9)), false, 81).
holds(1, in_tower((block,7),(block,1)), false, 81).
holds(1, in_tower((block,7),(block,2)), false, 81).
holds(1, in_tower((block,7),(block,3)), false, 81).
holds(1, in_tower((block,7),(block,4)), false, 81).
holds(1, in_tower((block,7),(block,5)), false, 81).
holds(1, in_tower((block,7),(block,6)), false, 81).
holds(1, in_tower((block,7),(block,7)), true, 81).
holds(1, in_tower((block,7),(block,8)), false, 81).
holds(1, in_tower((block,7),(block,9)), false, 81).
holds(1, in_tower((block,8),(block,1)), false, 81).
holds(1, in_tower((block,8),(block,2)), false, 81).
holds(1, in_tower((block,8),(block,3)), false, 81).
holds(1, in_tower((block,8),(block,4)), false, 81).
holds(1, in_tower((block,8),(block,5)), false, 81).
holds(1, in_tower((block,8),(block,6)), false, 81).
holds(1, in_tower((block,8),(block,7)), false, 81).
holds(1, in_tower((block,8),(block,8)), false, 81).
holds(1, in_tower((block,8),(block,9)), false, 81).
holds(1, in_tower((block,9),(block,1)), false, 81).
holds(1, in_tower((block,9),(block,2)), false, 81).
holds(1, in_tower((block,9),(block,3)), false, 81).
holds(1, in_tower((block,9),(block,4)), false, 81).
holds(1, in_tower((block,9),(block,5)), false, 81).
holds(1, in_tower((block,9),(block,6)), false, 81).
holds(1, in_tower((block,9),(block,7)), false, 81).
holds(1, in_tower((block,9),(block,8)), true, 81).
holds(1, in_tower((block,9),(block,9)), true, 81).
holds(1, on((block,1)), puzzle_room_table_left, 81).
holds(1, on((block,2)), puzzle_room_table_right, 81).
holds(1, on((block,3)), puzzle_room_table_left, 81).
holds(1, on((block,4)), (block,5), 81).
holds(1, on((block,5)), (block,6), 81).
holds(1, on((block,6)), puzzle_room_table_right, 81).
holds(1, on((block,7)), puzzle_room_table_middle, 81).
holds(1, on((block,8)), (block,9), 81).
holds(1, on((block,9)), puzzle_room_table_middle, 81).
holds(1, tower_base((block,1),puzzle_room_table), true, 81).
holds(1, tower_base((block,2),puzzle_room_table), true, 81).
holds(1, tower_base((block,3),puzzle_room_table), true, 81).
holds(1, tower_base((block,4),puzzle_room_table), false, 81).
holds(1, tower_base((block,5),puzzle_room_table), false, 81).
holds(1, tower_base((block,6),puzzle_room_table), true, 81).
holds(1, tower_base((block,7),puzzle_room_table), true, 81).
holds(1, tower_base((block,8),puzzle_room_table), false, 81).
holds(1, tower_base((block,9),puzzle_room_table), true, 81).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 81).
holds(2, complete_tower(blue,puzzle_room_table), true, 81).
holds(2, complete_tower(red,puzzle_room_table), false, 81).
holds(2, complete_tower(yellow,puzzle_room_table), false, 81).
holds(2, configuration(manipulator_arm_1), extended, 81).
holds(2, configuration(manipulator_arm_2), extended, 81).
holds(2, configuration(puzzle_room_door), open, 81).
holds(2, configuration(starting_room_door), closed, 81).
holds(2, configuration(store_room_door), open, 81).
holds(2, grasping(manipulator_arm_1), (block,7), 81).
holds(2, grasping(manipulator_arm_2), (block,2), 81).
holds(2, in((block,1)), puzzle_room, 81).
holds(2, in((block,2)), puzzle_room, 81).
holds(2, in((block,3)), puzzle_room, 81).
holds(2, in((block,4)), puzzle_room, 81).
holds(2, in((block,5)), puzzle_room, 81).
holds(2, in((block,6)), puzzle_room, 81).
holds(2, in((block,7)), puzzle_room, 81).
holds(2, in((block,8)), puzzle_room, 81).
holds(2, in((block,9)), puzzle_room, 81).
holds(2, in(manipulator_arm_1), puzzle_room, 81).
holds(2, in(manipulator_arm_2), puzzle_room, 81).
holds(2, in(puzzle_room_table), puzzle_room, 81).
holds(2, in(talos), puzzle_room, 81).
holds(2, in_tower((block,1),(block,1)), true, 81).
holds(2, in_tower((block,1),(block,2)), false, 81).
holds(2, in_tower((block,1),(block,3)), false, 81).
holds(2, in_tower((block,1),(block,4)), false, 81).
holds(2, in_tower((block,1),(block,5)), false, 81).
holds(2, in_tower((block,1),(block,6)), false, 81).
holds(2, in_tower((block,1),(block,7)), false, 81).
holds(2, in_tower((block,1),(block,8)), false, 81).
holds(2, in_tower((block,1),(block,9)), false, 81).
holds(2, in_tower((block,2),(block,1)), false, 81).
holds(2, in_tower((block,2),(block,2)), true, 81).
holds(2, in_tower((block,2),(block,3)), false, 81).
holds(2, in_tower((block,2),(block,4)), false, 81).
holds(2, in_tower((block,2),(block,5)), false, 81).
holds(2, in_tower((block,2),(block,6)), false, 81).
holds(2, in_tower((block,2),(block,7)), false, 81).
holds(2, in_tower((block,2),(block,8)), false, 81).
holds(2, in_tower((block,2),(block,9)), false, 81).
holds(2, in_tower((block,3),(block,1)), false, 81).
holds(2, in_tower((block,3),(block,2)), false, 81).
holds(2, in_tower((block,3),(block,3)), true, 81).
holds(2, in_tower((block,3),(block,4)), false, 81).
holds(2, in_tower((block,3),(block,5)), false, 81).
holds(2, in_tower((block,3),(block,6)), false, 81).
holds(2, in_tower((block,3),(block,7)), false, 81).
holds(2, in_tower((block,3),(block,8)), false, 81).
holds(2, in_tower((block,3),(block,9)), false, 81).
holds(2, in_tower((block,4),(block,1)), false, 81).
holds(2, in_tower((block,4),(block,2)), false, 81).
holds(2, in_tower((block,4),(block,3)), false, 81).
holds(2, in_tower((block,4),(block,4)), false, 81).
holds(2, in_tower((block,4),(block,5)), false, 81).
holds(2, in_tower((block,4),(block,6)), false, 81).
holds(2, in_tower((block,4),(block,7)), false, 81).
holds(2, in_tower((block,4),(block,8)), false, 81).
holds(2, in_tower((block,4),(block,9)), false, 81).
holds(2, in_tower((block,5),(block,1)), false, 81).
holds(2, in_tower((block,5),(block,2)), false, 81).
holds(2, in_tower((block,5),(block,3)), false, 81).
holds(2, in_tower((block,5),(block,4)), false, 81).
holds(2, in_tower((block,5),(block,5)), false, 81).
holds(2, in_tower((block,5),(block,6)), false, 81).
holds(2, in_tower((block,5),(block,7)), false, 81).
holds(2, in_tower((block,5),(block,8)), false, 81).
holds(2, in_tower((block,5),(block,9)), false, 81).
holds(2, in_tower((block,6),(block,1)), false, 81).
holds(2, in_tower((block,6),(block,2)), false, 81).
holds(2, in_tower((block,6),(block,3)), false, 81).
holds(2, in_tower((block,6),(block,4)), true, 81).
holds(2, in_tower((block,6),(block,5)), true, 81).
holds(2, in_tower((block,6),(block,6)), true, 81).
holds(2, in_tower((block,6),(block,7)), false, 81).
holds(2, in_tower((block,6),(block,8)), false, 81).
holds(2, in_tower((block,6),(block,9)), false, 81).
holds(2, in_tower((block,7),(block,1)), false, 81).
holds(2, in_tower((block,7),(block,2)), false, 81).
holds(2, in_tower((block,7),(block,3)), false, 81).
holds(2, in_tower((block,7),(block,4)), false, 81).
holds(2, in_tower((block,7),(block,5)), false, 81).
holds(2, in_tower((block,7),(block,6)), false, 81).
holds(2, in_tower((block,7),(block,7)), true, 81).
holds(2, in_tower((block,7),(block,8)), false, 81).
holds(2, in_tower((block,7),(block,9)), false, 81).
holds(2, in_tower((block,8),(block,1)), false, 81).
holds(2, in_tower((block,8),(block,2)), false, 81).
holds(2, in_tower((block,8),(block,3)), false, 81).
holds(2, in_tower((block,8),(block,4)), false, 81).
holds(2, in_tower((block,8),(block,5)), false, 81).
holds(2, in_tower((block,8),(block,6)), false, 81).
holds(2, in_tower((block,8),(block,7)), false, 81).
holds(2, in_tower((block,8),(block,8)), false, 81).
holds(2, in_tower((block,8),(block,9)), false, 81).
holds(2, in_tower((block,9),(block,1)), false, 81).
holds(2, in_tower((block,9),(block,2)), false, 81).
holds(2, in_tower((block,9),(block,3)), false, 81).
holds(2, in_tower((block,9),(block,4)), false, 81).
holds(2, in_tower((block,9),(block,5)), false, 81).
holds(2, in_tower((block,9),(block,6)), false, 81).
holds(2, in_tower((block,9),(block,7)), false, 81).
holds(2, in_tower((block,9),(block,8)), true, 81).
holds(2, in_tower((block,9),(block,9)), true, 81).
holds(2, on((block,1)), puzzle_room_table, 81).
holds(2, on((block,2)), puzzle_room_table, 81).
holds(2, on((block,3)), puzzle_room_table, 81).
holds(2, on((block,4)), (block,5), 81).
holds(2, on((block,5)), (block,6), 81).
holds(2, on((block,6)), puzzle_room_table, 81).
holds(2, on((block,7)), puzzle_room_table, 81).
holds(2, on((block,8)), (block,9), 81).
holds(2, on((block,9)), puzzle_room_table, 81).
holds(2, tower_base((block,1),puzzle_room_table), true, 81).
holds(2, tower_base((block,2),puzzle_room_table), true, 81).
holds(2, tower_base((block,3),puzzle_room_table), true, 81).
holds(2, tower_base((block,4),puzzle_room_table), false, 81).
holds(2, tower_base((block,5),puzzle_room_table), false, 81).
holds(2, tower_base((block,6),puzzle_room_table), true, 81).
holds(2, tower_base((block,7),puzzle_room_table), true, 81).
holds(2, tower_base((block,8),puzzle_room_table), false, 81).
holds(2, tower_base((block,9),puzzle_room_table), true, 81).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 81).

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=85']

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 51})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 52})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 53})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 55})

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 51).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 52).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 53).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 54).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 55).

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=81, step_range=range(0, 82)

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=85']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EA79A7F9D0>]
	incrementor = SolveIncrementor(step_start=81, step_increase=1, step_increase_initial=5, step_end_min=86, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1450.9624074000167, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 81), range_=None), IncPart(name='plan_module', args=('#inc', 81, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 81, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 81, 51, 55, 'sequential', 'false'), range_=None)]

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1255 rules

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0065716000008251285s

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039314s.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007130s with result Satisfiable.

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EA7CCF29A0>

[28-02-2022_23-12-00] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 81)
	('last_sgoals', 55)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001EA2D8854C0>)
	('first_sgoals', 51)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EA7CCF29A0>)

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 81). %* None *%
#program plan_module(#inc, 81, false, true). %* None *%
#program optimisation_module(#inc, 81, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 81, 51, 55, sequential, false). %* None *%

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     80 : Current =     85
Incrementor step ends | Minimum  =     86 : Maximum =    300

[28-02-2022_23-12-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(81), Number(81)]), ('plan_module', [Number(81), Number(81), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(81), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(81), Number(51), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(82), Number(81)]), ('plan_module', [Number(82), Number(81), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(82), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(81), Number(51), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(83), Number(81)]), ('plan_module', [Number(83), Number(81), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(83), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(81), Number(51), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(84), Number(81)]), ('plan_module', [Number(84), Number(81), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(84), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(81), Number(51), Number(55), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(85), Number(81)]), ('plan_module', [Number(85), Number(81), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(85), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(81), Number(51), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.626878s.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.188027s with result Satisfiable.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8149047999995673, Incremental time limit = None
Running cumulative time = 0.8149047999995673, Cumulative time limit = 1450.9624074000167
Used memory = (RSS = 1903.777344Mb, VMS = 1903.039062Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.626878s, Solving = 0.188027s, Total = 0.814905s, Memory = (RSS = 1903.777344Mb, VMS = 1903.039062Mb), Step range = [81-85]), Calls = 1
Final Model :: Total atoms = 10860, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     86 : Maximum =    300

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(81)]), ('plan_module', [Number(86), Number(81), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(86), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(81), Number(51), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.185524s.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033623s with result Unsatisfiable.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21914680000008957, Incremental time limit = None
Running cumulative time = 1.034051599999657, Cumulative time limit = 1450.9624074000167
Used memory = (RSS = 1908.796875Mb, VMS = 1909.082031Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     86 : Maximum =    300

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(81)]), ('plan_module', [Number(87), Number(81), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(87), Number(81), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(81), Number(51), Number(55), Function('sequential', [], True), Function('false', [], True)])]

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.188855s.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047339s with result Satisfiable.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23619440000038594, Incremental time limit = None
Running cumulative time = 1.2702460000000428, Cumulative time limit = 1450.9624074000167
Used memory = (RSS = 1910.191406Mb, VMS = 1909.464844Mb), Total system virtual memory = 16324.0078125Mb

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.001257s, Solving = 0.268989s, Total = 1.270246s, Memory = (RSS = 1910.191406Mb, VMS = 1909.464844Mb), Step range = [81-87]), Calls = 3
Final Model :: Total atoms = 12998, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.626878s, Solving = 0.188027s, Total = 0.814905s, Memory = (RSS = 1903.777344Mb, VMS = 1903.039062Mb), Step range = [81-85]
2 : Statistics :: Grounding = 0.185524s, Solving = 0.033623s, Total = 0.219147s, Memory = (RSS = 1908.796875Mb, VMS = 1909.082031Mb), Step range = [86-86]
3 : Statistics :: Grounding = 0.188855s, Solving = 0.047339s, Total = 0.236194s, Memory = (RSS = 1910.191406Mb, VMS = 1909.464844Mb), Step range = [87-87]

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.270246s due to: Stop condition reached.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[28-02-2022_23-12-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[28-02-2022_23-12-01] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35, 58: 36, 59: 37, 60: 38, 61: 38, 62: 39, 63: 39, 64: 39, 65: 40, 66: 41, 67: 41, 68: 41, 69: 42, 70: 43, 71: 44, 72: 44, 73: 45, 74: 46, 75: 47, 76: 47, 77: 47, 78: 48, 79: 48, 80: 49, 81: 50}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57, 36: 58, 37: 59, 38: 61, 39: 64, 40: 65, 41: 68, 42: 69, 43: 70, 44: 72, 45: 73, 46: 74, 47: 77, 48: 79, 49: 80, 50: 81}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 27, 45: 28, 46: 29, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 32, 53: 33, 54: 33, 55: 34, 56: 35, 57: 35, 58: 36, 59: 37, 60: 38, 61: 38, 62: 39, 63: 39, 64: 39, 65: 40, 66: 41, 67: 41, 68: 41, 69: 42, 70: 43, 71: 44, 72: 44, 73: 45, 74: 46, 75: 47, 76: 47, 77: 47, 78: 48, 79: 48, 80: 49, 81: 50, 82: 51, 83: 51, 84: 52, 85: 53, 86: 54, 87: 55}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 44, 28: 45, 29: 46, 30: 47, 31: 50, 32: 52, 33: 54, 34: 55, 35: 57, 36: 58, 37: 59, 38: 61, 39: 64, 40: 65, 41: 68, 42: 69, 43: 70, 44: 72, 45: 73, 46: 74, 47: 77, 48: 79, 49: 80, 50: 81, 51: 83, 52: 84, 53: 85, 54: 86, 55: 87}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 4, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 9, 26: 10, 27: 11, 28: 12, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 16, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 14, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 25, 10: 26, 11: 27, 12: 31, 13: 33, 14: 35, 15: 39, 16: 42, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 55, Last requested goal index = 55, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.001257s, Solving = 0.268989s, Total = 1.270246s, Memory = (RSS = 1910.191406Mb, VMS = 1909.464844Mb), Step range = [81-87]), Calls = 3
Model :: Total atoms = 12998, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 6 :: Actions = 6                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 25] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 42:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 44:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 45:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 52:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 55:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 56:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 57:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 58:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 59:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 60:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 61:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 62:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 63:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 65:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 66:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 67:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 68:
    Current Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 41] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 70:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 71:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,9)))
Step 72:
    Current Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Achieved Sub-goals:
        [Index = 44] talos : grasp(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,9))
Step 73:
    Current Sub-goals:
        [Index = 45] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 45] talos : put(manipulator_arm_2,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,9),puzzle_room_table_middle)
Step 74:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,9)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,9))
Step 75:
    Current Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 76:
    Current Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 77:
    Current Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_1,(block,8),(block,9))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,8))
Step 79:
    Current Sub-goals:
        [Index = 48] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 48] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 80:
    Current Sub-goals:
        [Index = 49] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 49] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,7)))
Step 81:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,7))
Step 82:
    Current Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 83:
    Current Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_1,(block,7),(block,8))
Step 84:
    Current Sub-goals:
        [Index = 52] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 52] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 85:
    Current Sub-goals:
        [Index = 53] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 53] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 86:
    Current Sub-goals:
        [Index = 54] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 54] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 87:
    Current Sub-goals:
        [Index = 55] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 55] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=87, step_range=range(0, 88)

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 87, Actions = 87

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 164.62887379999847, Average ground wait time = 23.375767049998785, Absolution time = 186.6407808999902)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  29, AC =  29, CF = 1.0, GT =   3.75s, ST = 141.44s, OT = 0.00s, TT = 145.19s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  55, AC =  55, CF = 1.0, GT =   7.24s, ST =  11.23s, OT = 0.00s, TT =  18.48s, EF = (LE = 1.9, AC = 1.9), ED = (LE = 1.8, AC = 1.8), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE =  87, AC =  87, CF = 1.0, GT =  15.65s, ST =   7.33s, OT = 0.00s, TT =  22.97s, EF = (LE = 1.6, AC = 1.6), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=87, step_range=range(0, 88)

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[28-02-2022_23-12-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[28-02-2022_23-12-02] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 196.298571s           
      ================================================      

[28-02-2022_23-12-02] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 9695.226534s, Proccess time 46845.265625s        
  ################################################################################################  

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=8.038255736869775, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.448275862068964, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=3.183687762421912, rmse_div_indices=4.030267429781249, rmse_div_steps=8.533837875709198
Mean Absolute Errors: mae_mchild=2.712396694214875, mae_div_indices=3.1666666666666665, mae_div_steps=7.055555555555555

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=6.69516303652214, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.137931034482758, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=3.4802393762071135, rmse_div_indices=1.1273124382057236, rmse_div_steps=4.557502971291772
Mean Absolute Errors: mae_mchild=3.0727272727272736, mae_div_indices=0.75, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=9.337571938289678, rmse_div_indices=0.28867513459481287, rmse_div_steps=6.639528095680697
Mean Absolute Errors: mae_mchild=8.517241379310343, mae_div_indices=0.16666666666666666, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=4.159028812253771, rmse_div_indices=6.237765803733114, rmse_div_steps=13.326821326432896
Mean Absolute Errors: mae_mchild=3.6644628099173557, mae_div_indices=4.944444444444445, mae_div_steps=10.722222222222221

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=7.689036622717664, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.137931034482758, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=3.242027729932749, rmse_div_indices=4.030267429781249, rmse_div_steps=8.533837875709198
Mean Absolute Errors: mae_mchild=2.7487603305785115, mae_div_indices=3.1666666666666665, mae_div_steps=7.055555555555555

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=9.219093045170188, rmse_div_indices=0.28867513459481287, rmse_div_steps=6.639528095680697
Mean Absolute Errors: mae_mchild=8.413793103448274, mae_div_indices=0.16666666666666666, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-02] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=4.319435224790046, rmse_div_indices=6.237765803733114, rmse_div_steps=13.326821326432896
Mean Absolute Errors: mae_mchild=3.8462809917355374, mae_div_indices=4.944444444444445, mae_div_steps=10.722222222222221

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=8.190943637300965, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.586206896551723, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=2.6712426303281864, rmse_div_indices=4.030267429781249, rmse_div_steps=7.841750796573145
Mean Absolute Errors: mae_mchild=2.258842975206612, mae_div_indices=3.1666666666666665, mae_div_steps=6.5

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=8.081113755193385, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.482758620689654, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=3.3898243451407764, rmse_div_indices=4.030267429781249, rmse_div_steps=8.593844696447956
Mean Absolute Errors: mae_mchild=2.87603305785124, mae_div_indices=3.1666666666666665, mae_div_steps=7.166666666666667

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=6.16663185172977, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=5.344827586206896, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=2.4332408752576877, rmse_div_indices=0.5713045500334204, rmse_div_steps=2.722080495176846
Mean Absolute Errors: mae_mchild=2.082644628099174, mae_div_indices=0.3611111111111111, mae_div_steps=1.9722222222222223

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=8.159089968140105, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.517241379310343, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=2.746116717256095, rmse_div_indices=4.030267429781249, rmse_div_steps=7.841750796573145
Mean Absolute Errors: mae_mchild=2.3074380165289265, mae_div_indices=3.1666666666666665, mae_div_steps=6.5

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=5.8124676363641985, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=4.455410225921522, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=3.388117300651677, rmse_div_indices=1.1273124382057236, rmse_div_steps=4.019915698397446
Mean Absolute Errors: mae_mchild=2.7937190082644645, mae_div_indices=0.75, mae_div_steps=3.2777777777777777

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=6.280123600501372, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=5.413793103448275, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-03] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=2.5812419331312935, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.178705187126775
Mean Absolute Errors: mae_mchild=2.190082644628099, mae_div_indices=0.75, mae_div_steps=2.611111111111111

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=6.866226430750396, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.2413793103448265, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=2.4836656460406092, rmse_div_indices=1.1273124382057236, rmse_div_steps=2.782634642844
Mean Absolute Errors: mae_mchild=2.1864462809917358, mae_div_indices=0.75, mae_div_steps=2.1666666666666665

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=8.118840846722604, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.482758620689654, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=3.1724537522109535, rmse_div_indices=4.030267429781249, rmse_div_steps=8.419141550327113
Mean Absolute Errors: mae_mchild=2.676033057851239, mae_div_indices=3.1666666666666665, mae_div_steps=6.944444444444445

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=6.768641410196993, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.206896551724137, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=3.146190139946124, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.4510465401414425
Mean Absolute Errors: mae_mchild=2.617190082644627, mae_div_indices=0.75, mae_div_steps=2.8333333333333335

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=9.433729048336698, rmse_div_indices=0.28867513459481287, rmse_div_steps=6.639528095680697
Mean Absolute Errors: mae_mchild=8.586206896551722, mae_div_indices=0.16666666666666666, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=4.946657607678473, rmse_div_indices=6.237765803733114, rmse_div_steps=13.326821326432896
Mean Absolute Errors: mae_mchild=4.300826446280992, mae_div_indices=4.944444444444445, mae_div_steps=10.722222222222221

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=9.105276723377202, rmse_div_indices=0.28867513459481287, rmse_div_steps=6.639528095680697
Mean Absolute Errors: mae_mchild=8.344827586206895, mae_div_indices=0.16666666666666666, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=3.9969823327849516, rmse_div_indices=6.237765803733114, rmse_div_steps=13.224293721951447
Mean Absolute Errors: mae_mchild=3.5190082644628102, mae_div_indices=4.944444444444445, mae_div_steps=10.61111111111111

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=7.1478358731465805, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.482758620689654, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-04] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=2.5196746477627854, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.616128992291189
Mean Absolute Errors: mae_mchild=2.2000000000000006, mae_div_indices=0.75, mae_div_steps=3.0555555555555554

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=6.536916115026032, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=5.689655172413792, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=3.128223956811108, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.886407938787006
Mean Absolute Errors: mae_mchild=2.690909090909092, mae_div_indices=0.75, mae_div_steps=3.1666666666666665

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=8.365321088185578, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.724137931034482, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=3.2659525840084904, rmse_div_indices=4.030267429781249, rmse_div_steps=8.593844696447956
Mean Absolute Errors: mae_mchild=2.803305785123966, mae_div_indices=3.1666666666666665, mae_div_steps=7.166666666666667

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=6.457949594163846, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=5.517241379310343, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=2.5545292784994165, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.0629959915815177
Mean Absolute Errors: mae_mchild=2.2082644628099173, mae_div_indices=0.75, mae_div_steps=2.5

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=5.643490878742891, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=4.724137931034482, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=2.9005556606443306, rmse_div_indices=0.5713045500334204, rmse_div_steps=3.1080093664952524
Mean Absolute Errors: mae_mchild=2.4561983471074376, mae_div_indices=0.3611111111111111, mae_div_steps=2.4444444444444446

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=9.606651480895225, rmse_div_indices=0.28867513459481287, rmse_div_steps=6.639528095680697
Mean Absolute Errors: mae_mchild=8.75862068965517, mae_div_indices=0.16666666666666666, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=3.4677260513111685, rmse_div_indices=6.237765803733114, rmse_div_steps=12.581677595261734
Mean Absolute Errors: mae_mchild=2.87603305785124, mae_div_indices=4.944444444444445, mae_div_steps=10.055555555555555

[28-02-2022_23-12-05] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=9.352395459578387, rmse_div_indices=0.28867513459481287, rmse_div_steps=6.639528095680697
Mean Absolute Errors: mae_mchild=8.551724137931034, mae_div_indices=0.16666666666666666, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=3.292616332652438, rmse_div_indices=6.237765803733114, rmse_div_steps=12.6312553260201
Mean Absolute Errors: mae_mchild=2.821487603305785, mae_div_indices=4.944444444444445, mae_div_steps=10.166666666666666

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=5.909242242143885, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=4.531510107015458, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=2.416951156428691, rmse_div_indices=1.1273124382057236, rmse_div_steps=2.5913853009110355
Mean Absolute Errors: mae_mchild=2.141818181818182, mae_div_indices=0.75, mae_div_steps=2.138888888888889

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=8.255650606954859, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.620689655172413, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=2.2263634507591146, rmse_div_indices=4.030267429781249, rmse_div_steps=7.7239706254116625
Mean Absolute Errors: mae_mchild=1.9074380165289264, mae_div_indices=3.1666666666666665, mae_div_steps=6.388888888888889

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=7.220660013771785, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.551724137931034, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=3.2735352537969162, rmse_div_indices=1.1273124382057236, rmse_div_steps=4.264680527307995
Mean Absolute Errors: mae_mchild=2.872727272727274, mae_div_indices=0.75, mae_div_steps=3.611111111111111

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=8.046091953201982, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.448275862068964, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=2.5374549623491682, rmse_div_indices=4.030267429781249, rmse_div_steps=7.7239706254116625
Mean Absolute Errors: mae_mchild=2.149752066115703, mae_div_indices=3.1666666666666665, mae_div_steps=6.388888888888889

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=6.964236823250703, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.379310344827585, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-06] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=3.0301515113634467, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.4510465401414425
Mean Absolute Errors: mae_mchild=2.5080991735537177, mae_div_indices=0.75, mae_div_steps=2.8333333333333335

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=9.164437807794702, rmse_div_indices=0.28867513459481287, rmse_div_steps=6.639528095680697
Mean Absolute Errors: mae_mchild=8.379310344827585, mae_div_indices=0.16666666666666666, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=4.622438982697374, rmse_div_indices=6.237765803733114, rmse_div_steps=13.48121120506446
Mean Absolute Errors: mae_mchild=4.100826446280992, mae_div_indices=4.944444444444445, mae_div_steps=10.833333333333334

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=5.8270760845899785, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=4.558858501783591, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=2.2752713034124596, rmse_div_indices=1.1273124382057236, rmse_div_steps=2.459392427228951
Mean Absolute Errors: mae_mchild=1.9504132231404965, mae_div_indices=0.75, mae_div_steps=2.0277777777777777

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=5.735344244494287, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=4.4898929845422115, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=2.7518889080018245, rmse_div_indices=0.5713045500334204, rmse_div_steps=2.952164930653059
Mean Absolute Errors: mae_mchild=2.310743801652892, mae_div_indices=0.3611111111111111, mae_div_steps=2.3333333333333335

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=8.138369362830012, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.517241379310343, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=3.3304009139942727, rmse_div_indices=4.030267429781249, rmse_div_steps=8.533837875709198
Mean Absolute Errors: mae_mchild=2.803305785123967, mae_div_indices=3.1666666666666665, mae_div_steps=7.055555555555555

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=9.536212975141298, rmse_div_indices=0.28867513459481287, rmse_div_steps=6.639528095680697
Mean Absolute Errors: mae_mchild=8.689655172413792, mae_div_indices=0.16666666666666666, mae_div_steps=3.8333333333333335

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=3.4197771905575745, rmse_div_indices=6.237765803733114, rmse_div_steps=12.6312553260201
Mean Absolute Errors: mae_mchild=3.003305785123967, mae_div_indices=4.944444444444445, mae_div_steps=10.166666666666666

[28-02-2022_23-12-07] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=5.6091482945072935, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=4.41141498216409, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=2.613379434011776, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.3695944365259547
Mean Absolute Errors: mae_mchild=2.1454545454545455, mae_div_indices=0.75, mae_div_steps=2.7222222222222223

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=6.556259773045359, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=5.724137931034482, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=2.5002479215912756, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.2392986209294685
Mean Absolute Errors: mae_mchild=2.171900826446281, mae_div_indices=0.75, mae_div_steps=2.611111111111111

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=5.662841729785434, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=4.586206896551723, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=2.533869741673513, rmse_div_indices=1.1273124382057236, rmse_div_steps=2.6391812703521857
Mean Absolute Errors: mae_mchild=2.2413223140495875, mae_div_indices=0.75, mae_div_steps=2.138888888888889

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=5.707287204047883, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=4.41141498216409, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=2.943939004039339, rmse_div_indices=0.5713045500334204, rmse_div_steps=2.952164930653059
Mean Absolute Errors: mae_mchild=2.583471074380165, mae_div_indices=0.3611111111111111, mae_div_steps=2.3333333333333335

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=5.728602330509399, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=4.586206896551723, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=2.780391791168413, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.147971127920684
Mean Absolute Errors: mae_mchild=2.4446280991735545, mae_div_indices=0.75, mae_div_steps=2.4444444444444446

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=6.788901203299173, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.2413793103448265, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-08] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=2.684205408996478, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.0265032995558125
Mean Absolute Errors: mae_mchild=2.277355371900827, mae_div_indices=0.75, mae_div_steps=2.388888888888889

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=8.81457823927307, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=8.103448275862068, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=2.479269420515676, rmse_div_indices=4.030267429781249, rmse_div_steps=7.786651683775539
Mean Absolute Errors: mae_mchild=2.0952066115702483, mae_div_indices=3.1666666666666665, mae_div_steps=6.5

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=8.036036552434108, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.448275862068964, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=2.6691379733279357, rmse_div_indices=4.030267429781249, rmse_div_steps=7.841750796573145
Mean Absolute Errors: mae_mchild=2.2224793388429758, mae_div_indices=3.1666666666666665, mae_div_steps=6.5

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=8.477360211023447, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.827586206896551, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=2.2656617445011222, rmse_div_indices=4.030267429781249, rmse_div_steps=7.7239706254116625
Mean Absolute Errors: mae_mchild=1.9133884297520667, mae_div_indices=3.1666666666666665, mae_div_steps=6.388888888888889

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=8.129890826534352, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.517241379310343, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=3.194623582632349, rmse_div_indices=4.030267429781249, rmse_div_steps=8.533837875709198
Mean Absolute Errors: mae_mchild=2.7669421487603296, mae_div_indices=3.1666666666666665, mae_div_steps=7.055555555555555

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=7.2499948747368, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.586206896551723, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=2.542985815828341, rmse_div_indices=1.1273124382057236, rmse_div_steps=2.782634642844
Mean Absolute Errors: mae_mchild=2.1500826446280996, mae_div_indices=0.75, mae_div_steps=2.1666666666666665

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=6.7788227277541555, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.206896551724137, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-09] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=2.5707830752194387, rmse_div_indices=1.1273124382057236, rmse_div_steps=2.9427405971682625
Mean Absolute Errors: mae_mchild=2.2228099173553724, mae_div_indices=0.75, mae_div_steps=2.2777777777777777

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=6.8094499630328995, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=6.206896551724137, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=3.057520196509929, rmse_div_indices=1.1273124382057236, rmse_div_steps=3.6199677714955785
Mean Absolute Errors: mae_mchild=2.617190082644627, mae_div_indices=0.75, mae_div_steps=2.9444444444444446

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=5.472012891905459, rmse_div_indices=0.28867513459481287, rmse_div_steps=0.8660254037844386
Mean Absolute Errors: mae_mchild=4.275862068965516, mae_div_indices=0.16666666666666666, mae_div_steps=0.5

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=2.8373541394046486, rmse_div_indices=0.5713045500334204, rmse_div_steps=2.952164930653059
Mean Absolute Errors: mae_mchild=2.4743801652892556, mae_div_indices=0.3611111111111111, mae_div_steps=2.3333333333333335

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=8.048751574157139, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.448275862068964, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=2.7252113421722237, rmse_div_indices=4.030267429781249, rmse_div_steps=7.903497819179669
Mean Absolute Errors: mae_mchild=2.3074380165289265, mae_div_indices=3.1666666666666665, mae_div_steps=6.611111111111111

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=5.9185915990252544, rmse_div_indices=0.28867513459481287, rmse_div_steps=1.4433756729740645
Mean Absolute Errors: mae_mchild=4.549346016646849, mae_div_indices=0.16666666666666666, mae_div_steps=0.8333333333333334

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=3.3042922248853865, rmse_div_indices=1.1273124382057236, rmse_div_steps=4.078228101080718
Mean Absolute Errors: mae_mchild=2.73917355371901, mae_div_indices=0.75, mae_div_steps=3.2777777777777777

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=7.833887787024451, rmse_div_indices=0.28867513459481287, rmse_div_steps=4.330127018922194
Mean Absolute Errors: mae_mchild=7.2413793103448265, mae_div_indices=0.16666666666666666, mae_div_steps=2.5

[28-02-2022_23-12-10] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=2.3850775755355036, rmse_div_indices=4.030267429781249, rmse_div_steps=7.786651683775539
Mean Absolute Errors: mae_mchild=2.0528925619834717, mae_div_indices=3.1666666666666665, mae_div_steps=6.5

[28-02-2022_23-12-11] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL  LE  AC  CF        GT         ST  OT         TT         LT         CT         WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  0   3  29  29 1.0  3.648940 158.625427 0.0 162.274366 162.274366 162.274366 162.274366  477.019531  478.070312  1.000000  0.324354  0.324354  0.324354   1.000000  0.324354  0.324354  0.324354   1.000000 0.324354
  0   2  55  55 1.0  7.271457   9.117602 0.0  16.389059 175.684069 178.663426  89.350091  541.000000  554.128906  1.000000  0.313504  0.311209  0.406746   1.000000  0.313504  0.311209  0.406746   1.000000 0.771168
  0   1  89  89 1.0 16.198256   5.847111 0.0  22.045367 179.662703 200.708792  25.133431  482.179688  482.078125  0.955056  0.310448  0.295351  0.592977   1.000000  0.296495  0.282077  0.566327   0.955056 0.735536
  1   3  29  29 1.0  3.640029 166.051134 0.0 169.691163 169.691163 169.691163 169.691163  498.210938  498.054688  1.000000  0.318245  0.318245  0.318245   1.000000  0.318245  0.318245  0.318245   1.000000 0.318245
  1   2  55  55 1.0  7.148064   3.918448 0.0  11.066512 176.475022 180.757675  90.397181  561.292969  578.074219  1.000000  0.312891  0.309619  0.405119   1.000000  0.312891  0.309619  0.405119   1.000000 0.770964
  1   1  87  87 1.0 15.468529   5.299996 0.0  20.768525 180.210433 201.526200  25.235432  509.398438  514.054688  0.977011  0.310033  0.294798  0.592335   1.000000  0.302906  0.288021  0.578718   0.977011 0.752309
  2   3  29  29 1.0  3.648982 123.734370 0.0 127.383352 127.383352 127.383352 127.383352  500.703125  501.218750  1.000000  0.357579  0.357579  0.357579   1.000000  0.357579  0.357579  0.357579   1.000000 0.357579
  2   2  55  55 1.0  7.491021  22.387525 0.0  29.878546 154.966147 157.261898  78.649468  616.558594  620.667969  1.000000  0.330661  0.328648  0.424618   1.000000  0.330661  0.328648  0.424618   1.000000 0.776887
  2   1  91  91 1.0 17.174828   6.747660 0.0  23.922488 159.305240 181.184386  22.692689  559.917969  558.136719  0.934066  0.326881  0.309297  0.609350   1.000000  0.305328  0.288904  0.569173   0.934066 0.724487
  3   3  29  29 1.0  3.649527 113.743138 0.0 117.392664 117.392664 117.392664 117.392664  557.121094  557.914062  1.000000  0.368844  0.368844  0.368844   1.000000  0.368844  0.368844  0.368844   1.000000 0.368844
  3   2  55  55 1.0  7.218587   8.641896 0.0  15.860483 130.040231 133.253147  66.645241  659.421875  671.683594  1.000000  0.354736  0.351378  0.448007   1.000000  0.354736  0.351378  0.448007   1.000000 0.784912
  3   1  89  89 1.0 15.945288   5.755187 0.0  21.700475 134.006002 154.953622  19.414469  588.523438  592.691406  0.955056  0.350603  0.330672  0.635076   1.000000  0.334846  0.315811  0.606533   0.955056 0.748319
  4   3  29  29 1.0  3.656728 151.998946 0.0 155.655674 155.655674 155.655674 155.655674  592.332031  593.753906  1.000000  0.330053  0.330053  0.330053   1.000000  0.330053  0.330053  0.330053   1.000000 0.330053
  4   2  55  55 1.0  7.455534  19.224314 0.0  26.679848 179.853340 182.335522  91.186224  704.074219  709.351562  1.000000  0.310303  0.308433  0.403906   1.000000  0.310303  0.308433  0.403906   1.000000 0.770101
  4   1  91  91 1.0 16.723004   6.599143 0.0  23.322147 184.388108 205.657669  25.778836  647.367188  647.242188  0.934066  0.306907  0.292036  0.588964   1.000000  0.286671  0.272781  0.550131   0.934066 0.718268
  5   3  29  29 1.0  3.648161 117.086410 0.0 120.734571 120.734571 120.734571 120.734571  620.476562  621.628906  1.000000  0.364969  0.364969  0.364969   1.000000  0.364969  0.364969  0.364969   1.000000 0.364969
  5   2  55  55 1.0  7.227405  11.197328 0.0  18.424733 136.119723 139.159304  69.598513  723.750000  737.082031  1.000000  0.348452  0.345417  0.441861   1.000000  0.348452  0.345417  0.441861   1.000000 0.782817
  5   1  87  87 1.0 15.503023   5.672640 0.0  21.175664 140.126784 160.334968  20.086886  671.585938  672.714844  0.977011  0.344465  0.325999  0.629379   1.000000  0.336547  0.318505  0.614911   0.977011 0.763523
  6   3  29  29 1.0  3.654872 110.955952 0.0 114.610823 114.610823 114.610823 114.610823  646.031250  646.156250  1.000000  0.372158  0.372158  0.372158   1.000000  0.372158  0.372158  0.372158   1.000000 0.372158
  6   2  55  55 1.0  7.244012  10.087182 0.0  17.331193 128.895138 131.942017  65.989452  746.265625  759.351562  1.000000  0.355954  0.352738  0.449411   1.000000  0.355954  0.352738  0.449411   1.000000 0.785318
  6   1  89  89 1.0 15.973950   6.001532 0.0  21.975482 132.880579 153.917499  19.284804  697.742188  700.515625  0.955056  0.351763  0.331591  0.636203   1.000000  0.335954  0.316688  0.607609   0.955056 0.748689
  7   3  29  29 1.0  3.653588 169.115638 0.0 172.769226 172.769226 172.769226 172.769226  688.101562  691.062500  1.000000  0.315789  0.315789  0.315789   1.000000  0.315789  0.315789  0.315789   1.000000 0.315789
  7   2  55  55 1.0  7.173752   4.568144 0.0  11.741896 178.760574 184.511122  92.274319  759.566406  780.558594  1.000000  0.311135  0.306816  0.402251   0.922469  0.311135  0.306816  0.402251   0.922469 0.744535
  7   1  85  85 1.0 14.896740   5.269149 0.0  20.165889 182.748104 204.677011  25.670592  719.437500  720.500000  1.000000  0.308125  0.292687  0.589629   1.000000  0.308125  0.292687  0.589629   1.000000 0.769375
  8   3  29  29 1.0  3.675179 182.700782 0.0 186.375961 186.375961 186.375961 186.375961  723.640625  725.050781  1.000000  0.305444  0.305444  0.305444   1.000000  0.305444  0.305444  0.305444   1.000000 0.305444
  8   2  55  55 1.0  7.270786   8.380307 0.0  15.651093 198.977051 202.027053 101.031902  824.191406  837.132812  1.000000  0.296531  0.294460  0.389632   1.000000  0.296531  0.294460  0.389632   1.000000 0.765510
  8   1  87  87 1.0 15.497506   5.943548 0.0  21.441054 203.230715 223.468108  28.024252  775.703125  776.968750  0.977011  0.293652  0.280745  0.575873   1.000000  0.286901  0.274291  0.562634   0.977011 0.746975
  9   3  29  29 1.0  3.651183 125.275743 0.0 128.926927 128.926927 128.926927 128.926927  749.390625  749.882812  1.000000  0.355920  0.355920  0.355920   1.000000  0.355920  0.355920  0.355920   1.000000 0.355920
  9   2  55  55 1.0  7.193683   4.392883 0.0  11.586566 135.440020 140.513493  70.275487  830.546875  851.167969  1.000000  0.349140  0.344087  0.440491   0.985962  0.349140  0.344087  0.440491   0.985962 0.778367
  9   1  87  87 1.0 15.197677   5.824652 0.0  21.022329 139.119963 161.535822  20.237087  779.148438  784.859375  0.977011  0.345456  0.324978  0.628139   1.000000  0.337514  0.317508  0.613699   0.977011 0.763846
 10   3  29  29 1.0  3.661276 155.217441 0.0 158.878716 158.878716 158.878716 158.878716  782.730469  784.562500  1.000000  0.327248  0.327248  0.327248   1.000000  0.327248  0.327248  0.327248   1.000000 0.327248
 10   2  55  55 1.0  7.162779   4.651325 0.0  11.814104 165.950633 170.692820  85.365208  821.300781  843.625000  1.000000  0.321291  0.317441  0.413125   1.000000  0.321291  0.317441  0.413125   1.000000 0.773764
 10   1  85  85 1.0 14.788387   5.388282 0.0  20.176669 169.626296 190.869489  23.904073  788.058594  790.632812  1.000000  0.318297  0.302197  0.600973   1.000000  0.318297  0.302197  0.600973   1.000000 0.772766
 11   3  29  29 1.0  3.650262 127.495098 0.0 131.145360 131.145360 131.145360 131.145360  808.605469  810.214844  1.000000  0.353572  0.353572  0.353572   1.000000  0.353572  0.353572  0.353572   1.000000 0.353572
 11   2  55  55 1.0  7.139061   3.667571 0.0  10.806631 137.613587 141.951992  70.994787  891.292969  912.406250  1.000000  0.346952  0.342689  0.439051   1.000000  0.346952  0.342689  0.439051   1.000000 0.782317
 11   1  89  89 1.0 15.701943   6.136467 0.0  21.838410 141.297873 163.790401  20.518969  856.308594  855.433594  0.955056  0.343323  0.323083  0.625843   1.000000  0.327892  0.308562  0.597715   0.955056 0.746002
 12   3  29  29 1.0  3.656721 193.550629 0.0 197.207350 197.207350 197.207350 197.207350  840.933594  842.054688  1.000000  0.297747  0.297747  0.297747   1.000000  0.297747  0.297747  0.297747   1.000000 0.297747
 12   2  55  55 1.0  7.269275   6.791821 0.0  14.061097 208.209266 211.268447 105.653074  943.027344  956.785156  1.000000  0.290359  0.288375  0.383425   1.000000  0.290359  0.288375  0.383425   1.000000 0.763453
 12   1  89  89 1.0 15.964318   6.317574 0.0  22.281892 212.185414 233.550339  29.239088  892.332031  894.320312  0.955056  0.287786  0.274753  0.569291   1.000000  0.274852  0.262404  0.543705   0.955056 0.728321
 13   3  29  29 1.0  3.657843 114.079565 0.0 117.737408 117.737408 117.737408 117.737408  866.886719  867.226562  1.000000  0.368439  0.368439  0.368439   1.000000  0.368439  0.368439  0.368439   1.000000 0.368439
 13   2  55  55 1.0  7.161568   3.485309 0.0  10.646877 124.067792 128.384285  64.211600  953.785156  974.476562  1.000000  0.361213  0.356501  0.453293   1.000000  0.361213  0.356501  0.453293   1.000000 0.787071
 13   1  91  91 1.0 16.165315   5.930665 0.0  22.095980 127.736518 150.480265  18.855523  912.125000  912.906250  0.934066  0.357197  0.334686  0.640003   1.000000  0.333646  0.312619  0.597805   0.934066 0.733926
 14   3  29  29 1.0  3.656937 140.869299 0.0 144.526236 144.526236 144.526236 144.526236  894.226562  894.812500  1.000000  0.340222  0.340222  0.340222   1.000000  0.340222  0.340222  0.340222   1.000000 0.340222
 14   2  55  55 1.0  7.486811  22.213953 0.0  29.700764 171.370966 174.227000  87.132640 1007.347656 1012.757812  1.000000  0.316899  0.314642  0.410258   1.000000  0.316899  0.314642  0.410258   1.000000 0.772300
 14   1  91  91 1.0 16.767186   6.499246 0.0  23.266433 175.693946 197.493432  24.732116  957.937500  957.664062  0.934066  0.313497  0.297550  0.595535   1.000000  0.292827  0.277931  0.556269   0.934066 0.720320
 15   3  29  29 1.0  3.658667 151.679007 0.0 155.337674 155.337674 155.337674 155.337674  928.417969  930.730469  1.000000  0.330333  0.330333  0.330333   1.000000  0.330333  0.330333  0.330333   1.000000 0.330333
 15   2  55  55 1.0  7.474412  29.244772 0.0  36.719184 189.783422 192.056858  96.047168 1040.687500 1046.160156  1.000000  0.302975  0.301352  0.396668   1.000000  0.302975  0.301352  0.396668   1.000000 0.767658
 15   1  91  91 1.0 16.787240   7.650356 0.0  24.437596 194.793006 216.494454  27.107413  968.226562  972.750000  0.934066  0.299425  0.285053  0.581064   1.000000  0.279683  0.266258  0.542752   0.934066 0.715938
 16   3  29  29 1.0  3.652833 146.315394 0.0 149.968227 149.968227 149.968227 149.968227  957.488281  958.828125  1.000000  0.335153  0.335153  0.335153   1.000000  0.335153  0.335153  0.335153   1.000000 0.335153
 16   2  55  55 1.0  7.163299   4.127237 0.0  11.290535 156.900815 161.258762  80.648081 1037.359375 1058.644531  1.000000  0.328963  0.325213  0.421093   1.000000  0.328963  0.325213  0.421093   1.000000 0.776321
 16   1  85  85 1.0 14.776508   4.892467 0.0  19.668975 160.578800 180.927737  22.742917  983.398438  991.285156  1.000000  0.325791  0.309491  0.608992   1.000000  0.325791  0.309491  0.608992   1.000000 0.775264
 17   3  29  29 1.0  3.656958 141.739468 0.0 145.396426 145.396426 145.396426 145.396426  983.886719  985.453125  1.000000  0.339398  0.339398  0.339398   1.000000  0.339398  0.339398  0.339398   1.000000 0.339398
 17   2  55  55 1.0  7.206838   5.232184 0.0  12.439022 152.988970 157.835448  78.936274 1025.402344 1053.972656  1.000000  0.332420  0.328150  0.424106   1.000000  0.332420  0.328150  0.424106   1.000000 0.777473
 17   1  87  87 1.0 15.265342   5.811160 0.0  21.076502 156.677223 178.911950  22.409325  992.871094 1000.812500  0.977011  0.329158  0.311019  0.611388   1.000000  0.321591  0.303870  0.597333   0.977011 0.758538
 18   3  29  29 1.0  3.654362 187.723185 0.0 191.377546 191.377546 191.377546 191.377546 1032.187500 1035.570312  1.000000  0.301835  0.301835  0.301835   1.000000  0.301835  0.301835  0.301835   1.000000 0.301835
 18   2  55  55 1.0  7.273807  11.416050 0.0  18.689857 207.009119 210.067403 105.052352 1132.636719 1146.910156  1.000000  0.291145  0.289150  0.384215   1.000000  0.291145  0.289150  0.384215   1.000000 0.763715
 18   1  89  89 1.0 15.982657   6.124713 0.0  22.107371 210.980307 232.174774  29.066916 1079.695312 1082.835938  0.955056  0.288561  0.275554  0.570205   1.000000  0.275592  0.263170  0.544577   0.955056 0.728568
 19   3  29  29 1.0  3.684917 130.083521 0.0 133.768438 133.768438 133.768438 133.768438 1056.769531 1057.925781  1.000000  0.350847  0.350847  0.350847   1.000000  0.350847  0.350847  0.350847   1.000000 0.350847
 19   2  55  55 1.0  7.178263   4.139902 0.0  11.318165 140.279645 145.086603  72.561996 1137.750000 1159.492188  1.000000  0.344316  0.339691  0.435966   1.000000  0.344316  0.339691  0.435966   1.000000 0.781439
 19   1  85  85 1.0 14.833799   5.613182 0.0  20.446981 144.704263 165.533584  20.737034 1085.582031 1093.390625  1.000000  0.340053  0.321635  0.624093   1.000000  0.340053  0.321635  0.624093   1.000000 0.780018
 20   3  29  29 1.0  3.660898 127.367565 0.0 131.028463 131.028463 131.028463 131.028463 1084.011719 1086.578125  1.000000  0.353694  0.353694  0.353694   1.000000  0.353694  0.353694  0.353694   1.000000 0.353694
 20   2  55  55 1.0  7.186930   4.816405 0.0  12.003335 137.323422 143.031798  71.534757 1160.394531 1182.238281  1.000000  0.347242  0.341648  0.437980   0.925638  0.347242  0.341648  0.437980   0.925638 0.757627
 20   1  89  89 1.0 15.673935   5.956534 0.0  21.630469 140.984159 164.662266  20.627956 1124.796875 1122.707031  0.955056  0.343628  0.322357  0.624966   1.000000  0.328184  0.307869  0.596877   0.955056 0.746099
 21   3  29  29 1.0  3.655623 138.745110 0.0 142.400733 142.400733 142.400733 142.400733 1110.167969 1111.605469  1.000000  0.342255  0.342255  0.342255   1.000000  0.342255  0.342255  0.342255   1.000000 0.342255
 21   2  55  55 1.0  7.499989  24.242214 0.0  31.742203 171.872818 174.142935  87.090182 1219.593750 1225.714844  1.000000  0.316500  0.314707  0.410326   1.000000  0.316500  0.314707  0.410326   1.000000 0.772167
 21   1  89  89 1.0 16.266318   6.496066 0.0  22.762384 176.159815 196.905319  24.658369 1174.425781 1174.734375  0.955056  0.313135  0.297956  0.596010   1.000000  0.299062  0.284565  0.569223   0.955056 0.736391
 22   3  29  29 1.0  3.654606 167.357659 0.0 171.012265 171.012265 171.012265 171.012265 1142.691406 1144.562500  1.000000  0.317185  0.317185  0.317185   1.000000  0.317185  0.317185  0.317185   1.000000 0.317185
 22   2  55  55 1.0  7.443920  20.640011 0.0  28.083931 196.830341 199.096195  99.566570 1246.535156 1252.640625  1.000000  0.298008  0.296449  0.391662   1.000000  0.298008  0.296449  0.391662   1.000000 0.766003
 22   1  89  89 1.0 16.280921   7.208028 0.0  23.488949 201.132726 222.585145  27.868289 1165.117188 1171.613281  0.955056  0.295064  0.281283  0.576742   1.000000  0.281803  0.268641  0.550821   0.955056 0.730638
 23   3  29  29 1.0  3.658599 141.135128 0.0 144.793727 144.793727 144.793727 144.793727 1166.023438 1169.152344  1.000000  0.339968  0.339968  0.339968   1.000000  0.339968  0.339968  0.339968   1.000000 0.339968
 23   2  55  55 1.0  7.193752   5.805486 0.0  12.999238 151.857703 157.792965  78.915029 1246.343750 1269.121094  1.000000  0.333437  0.328186  0.424144   0.909382  0.333437  0.328186  0.424144   0.909382 0.747606
 23   1  89  89 1.0 15.747741   6.174420 0.0  21.922162 155.523732 179.715126  22.509483 1208.867188 1211.648438  0.955056  0.330170  0.310408  0.610664   1.000000  0.315330  0.296457  0.583219   0.955056 0.741814
 24   3  29  29 1.0  3.675259 125.230648 0.0 128.905907 128.905907 128.905907 128.905907 1192.925781 1194.917969  1.000000  0.355942  0.355942  0.355942   1.000000  0.355942  0.355942  0.355942   1.000000 0.355942
 24   2  55  55 1.0  7.280460   7.070779 0.0  14.351238 140.257922 143.257146  71.647265 1248.386719 1264.523438  1.000000  0.344337  0.341432  0.437758   1.000000  0.344337  0.341432  0.437758   1.000000 0.781446
 24   1  87  87 1.0 15.569758   5.268167 0.0  20.837925 144.255976 164.095071  20.557128 1210.828125 1217.210938  0.977011  0.340479  0.322828  0.625535   1.000000  0.332652  0.315407  0.611155   0.977011 0.762225
 25   3  29  29 1.0  3.662447 151.575428 0.0 155.237876 155.237876 155.237876 155.237876 1217.652344 1220.312500  1.000000  0.330421  0.330421  0.330421   1.000000  0.330421  0.330421  0.330421   1.000000 0.330421
 25   2  55  55 1.0  7.167569   5.004912 0.0  12.172481 163.029825 167.410357  83.724009 1299.074219 1321.191406  1.000000  0.323719  0.320094  0.415843   1.000000  0.323719  0.320094  0.415843   1.000000 0.774573
 25   1  87  87 1.0 15.241558   5.121394 0.0  20.362952 166.712601 187.773309  23.517131 1248.160156 1256.195312  0.977011  0.320665  0.304426  0.603592   1.000000  0.313293  0.297428  0.589716   0.977011 0.755772
 26   3  29  29 1.0  3.654475 144.046023 0.0 147.700498 147.700498 147.700498 147.700498 1248.187500 1250.410156  1.000000  0.337242  0.337242  0.337242   1.000000  0.337242  0.337242  0.337242   1.000000 0.337242
 26   2  55  55 1.0  7.247652  11.169591 0.0  18.417243 163.134602 166.117740  83.077554 1345.234375 1359.816406  1.000000  0.323631  0.321153  0.416930   1.000000  0.323631  0.321153  0.416930   1.000000 0.774544
 26   1  87  87 1.0 15.482622   4.967387 0.0  20.450009 167.116612 186.567749  23.366167 1297.210938 1300.035156  0.977011  0.320334  0.305304  0.604628   1.000000  0.312970  0.298286  0.590728   0.977011 0.755664
 27   3  29  29 1.0  3.659901 150.886914 0.0 154.546815 154.546815 154.546815 154.546815 1275.585938 1277.660156  1.000000  0.331032  0.331032  0.331032   1.000000  0.331032  0.331032  0.331032   1.000000 0.331032
 27   2  55  55 1.0  7.181963   4.058052 0.0  11.240015 161.452869 165.786829  82.912052 1361.523438 1383.195312  1.000000  0.325049  0.321426  0.417209   1.000000  0.325049  0.321426  0.417209   1.000000 0.775016
 27   1  91  91 1.0 16.154391   6.614308 0.0  22.768699 166.223268 188.555528  23.614569 1306.628906 1314.261719  0.934066  0.321067  0.303859  0.602928   1.000000  0.299897  0.283825  0.563174   0.934066 0.722676
 28   3  29  29 1.0  3.663371 131.775586 0.0 135.438957 135.438957 135.438957 135.438957 1298.519531 1302.421875  1.000000  0.349141  0.349141  0.349141   1.000000  0.349141  0.349141  0.349141   1.000000 0.349141
 28   2  55  55 1.0  7.464494  12.873503 0.0  20.337997 153.513972 155.776954  77.907129 1407.250000 1414.234375  1.000000  0.331951  0.329947  0.425951   1.000000  0.331951  0.329947  0.425951   1.000000 0.777317
 28   1  91  91 1.0 16.794392   7.693522 0.0  24.487914 158.972162 180.264868  22.578442 1366.535156 1367.894531  0.934066  0.327167  0.309991  0.610168   1.000000  0.305596  0.289552  0.569937   0.934066 0.724576
 29   3  29  29 1.0  3.655365 124.471182 0.0 128.126546 128.126546 128.126546 128.126546 1330.308594 1332.355469  1.000000  0.356777  0.356777  0.356777   1.000000  0.356777  0.356777  0.356777   1.000000 0.356777
 29   2  55  55 1.0  7.216934   6.083116 0.0  13.300050 135.710228 141.426596  70.731937 1410.527344 1433.449219  1.000000  0.348866  0.343198  0.439576   0.925063  0.348866  0.343198  0.439576   0.925063 0.757976
 29   1  89  89 1.0 15.747344   6.425871 0.0  22.173215 139.395413 163.599811  20.495413 1358.066406 1367.187500  0.955056  0.345184  0.323242  0.626033   1.000000  0.329670  0.308714  0.597897   0.955056 0.746594
 30   3  29  29 1.0  3.666541 142.131857 0.0 145.798398 145.798398 145.798398 145.798398 1358.761719 1361.710938  1.000000  0.339020  0.339020  0.339020   1.000000  0.339020  0.339020  0.339020   1.000000 0.339020
 30   2  55  55 1.0  7.169649   4.916794 0.0  12.086443 151.896315 157.884842  78.961001 1436.718750 1460.292969  1.000000  0.333402  0.328107  0.424062   0.905823  0.333402  0.328107  0.424062   0.905823 0.746408
 30   1  89  89 1.0 15.694692   6.536050 0.0  22.230742 155.565201 180.115583  22.559890 1404.773438 1403.921875  0.955056  0.330133  0.310105  0.610301   1.000000  0.315296  0.296167  0.582872   0.955056 0.741803
 31   3  29  29 1.0  3.658267 138.365380 0.0 142.023647 142.023647 142.023647 142.023647 1389.269531 1391.593750  1.000000  0.342619  0.342619  0.342619   1.000000  0.342619  0.342619  0.342619   1.000000 0.342619
 31   2  55  55 1.0  7.245996   7.259451 0.0  14.505447 153.459159 156.529094  78.283445 1445.011719 1464.632812  1.000000  0.332000  0.329287  0.425273   1.000000  0.332000  0.329287  0.425273   1.000000 0.777333
 31   1  89  89 1.0 15.941183   6.663620 0.0  22.604803 157.373610 179.133897  22.437142 1405.496094 1414.503906  0.955056  0.328551  0.310850  0.611187   1.000000  0.313784  0.296879  0.583718   0.955056 0.741299
 32   3  29  29 1.0  3.663811 142.167656 0.0 145.831467 145.831467 145.831467 145.831467 1416.886719 1419.984375  1.000000  0.338988  0.338988  0.338988   1.000000  0.338988  0.338988  0.338988   1.000000 0.338988
 32   2  55  55 1.0  7.437746  13.415161 0.0  20.852907 163.145922 166.684374  83.361331 1524.445312 1531.531250  1.000000  0.323622  0.320688  0.416452   1.000000  0.323622  0.320688  0.416452   1.000000 0.774541
 32   1  89  89 1.0 16.262602   6.404562 0.0  22.667164 167.423335 189.351538  23.714530 1478.699219 1479.984375  0.955056  0.320083  0.303285  0.602249   1.000000  0.305698  0.289655  0.575182   0.955056 0.738603
 33   3  29  29 1.0  3.665468 149.985332 0.0 153.650800 153.650800 153.650800 153.650800 1445.656250 1448.593750  1.000000  0.331829  0.331829  0.331829   1.000000  0.331829  0.331829  0.331829   1.000000 0.331829
 33   2  55  55 1.0  7.173197   5.614124 0.0  12.787321 160.564853 166.438121  83.237872 1526.781250 1549.507812  1.000000  0.325803  0.320890  0.416659   0.913606  0.325803  0.320890  0.416659   0.913606 0.746470
 33   1  85  85 1.0 14.778266   4.818440 0.0  19.596705 164.250384 186.034826  23.299538 1472.238281 1481.644531  1.000000  0.322699  0.305694  0.605088   1.000000  0.322699  0.305694  0.605088   1.000000 0.774233
 34   3  29  29 1.0  3.662466 157.147706 0.0 160.810171 160.810171 160.810171 160.810171 1469.906250 1472.910156  1.000000  0.325594  0.325594  0.325594   1.000000  0.325594  0.325594  0.325594   1.000000 0.325594
 34   2  55  55 1.0  7.188217   4.092762 0.0  11.280979 167.469001 172.091150  86.064367 1555.261719 1577.312500  1.000000  0.320046  0.316326  0.411983   1.000000  0.320046  0.316326  0.411983   1.000000 0.773349
 34   1  85  85 1.0 14.865500   5.040347 0.0  19.905848 171.232375 191.996998  24.044826 1501.781250 1509.585938  1.000000  0.317009  0.301395  0.600033   1.000000  0.317009  0.301395  0.600033   1.000000 0.772336
 35   3  29  29 1.0  3.664783 140.504236 0.0 144.169019 144.169019 144.169019 144.169019 1493.136719 1497.996094  1.000000  0.340561  0.340561  0.340561   1.000000  0.340561  0.340561  0.340561   1.000000 0.340561
 35   2  55  55 1.0  7.224599   5.604847 0.0  12.829445 151.162495 156.998465  78.517761 1579.886719 1603.136719  1.000000  0.334066  0.328877  0.424853   0.916276  0.334066  0.328877  0.424853   0.916276 0.750114
 35   1  89  89 1.0 15.706139   6.556737 0.0  22.262876 154.868621 179.261341  22.452802 1542.351562 1545.992188  0.955056  0.330748  0.310753  0.611073   1.000000  0.315883  0.296787  0.583609   0.955056 0.741998
 36   3  29  29 1.0  3.656275 106.537814 0.0 110.194090 110.194090 110.194090 110.194090 1526.570312 1529.187500  1.000000  0.377594  0.377594  0.377594   1.000000  0.377594  0.377594  0.377594   1.000000 0.377594
 36   2  55  55 1.0  7.187211   5.914738 0.0  13.101950 116.178925 123.296039  61.666661 1597.332031 1620.511719  1.000000  0.370280  0.362073  0.459055   0.846736  0.370280  0.362073  0.459055   0.846736 0.739005
 36   1  89  89 1.0 15.711825   6.657628 0.0  22.369452 119.843424 145.665492  18.253475 1565.917969 1565.082031  0.955056  0.365991  0.339145  0.645523   1.000000  0.349542  0.323902  0.616510   0.955056 0.753218
 37   3  29  29 1.0  3.668270 121.598700 0.0 125.266970 125.266970 125.266970 125.266970 1550.839844 1553.468750  1.000000  0.359887  0.359887  0.359887   1.000000  0.359887  0.359887  0.359887   1.000000 0.359887
 37   2  55  55 1.0  7.186043   5.463076 0.0  12.649119 132.086174 137.916089  68.976684 1628.082031 1649.175781  1.000000  0.352588  0.346650  0.443132   0.916692  0.352588  0.346650  0.443132   0.916692 0.756427
 37   1  91  91 1.0 16.164502   5.501653 0.0  21.666156 135.783236 159.582245  19.993189 1595.996094 1599.050781  0.934066  0.348792  0.326643  0.630158   1.000000  0.325795  0.305106  0.588610   0.934066 0.731309
 38   3  29  29 1.0  3.658463 141.515251 0.0 145.173713 145.173713 145.173713 145.173713 1579.949219 1582.886719  1.000000  0.339609  0.339609  0.339609   1.000000  0.339609  0.339609  0.339609   1.000000 0.339609
 38   2  55  55 1.0  7.166711   3.810812 0.0  10.977523 151.725326 156.151236  78.094347 1656.429688 1678.441406  1.000000  0.333557  0.329618  0.425613   1.000000  0.333557  0.329618  0.425613   1.000000 0.777852
 38   1  89  89 1.0 15.686399   5.419245 0.0  21.105644 155.449542 177.256880  22.202348 1621.343750 1624.246094  0.955056  0.330235  0.312288  0.612896   1.000000  0.315393  0.298252  0.585351   0.955056 0.741835
 39   3  29  29 1.0  3.647801 136.101189 0.0 139.748990 139.748990 139.748990 139.748990 1606.656250 1609.394531  1.000000  0.344836  0.344836  0.344836   1.000000  0.344836  0.344836  0.344836   1.000000 0.344836
 39   2  55  55 1.0  7.266387  11.564014 0.0  18.830402 155.579064 158.579392  79.308565 1704.246094 1719.039062  1.000000  0.330121  0.327506  0.423445   1.000000  0.330121  0.327506  0.423445   1.000000 0.776707
 39   1  87  87 1.0 15.540795   6.668038 0.0  22.208833 159.560601 180.788225  22.644142 1661.976562 1665.785156  0.977011  0.326662  0.309596  0.609697   1.000000  0.319152  0.302479  0.595681   0.977011 0.757725
 40   3  29  29 1.0  3.684183 168.057909 0.0 171.742092 171.742092 171.742092 171.742092 1636.859375 1639.785156  1.000000  0.316603  0.316603  0.316603   1.000000  0.316603  0.316603  0.316603   1.000000 0.316603
 40   2  55  55 1.0  7.224031  11.257686 0.0  18.481717 187.255087 190.223809  95.130496 1737.863281 1752.453125  1.000000  0.304803  0.302659  0.398003   1.000000  0.304803  0.302659  0.398003   1.000000 0.768268
 40   1  87  87 1.0 15.507264   6.659329 0.0  22.166593 191.226900 212.390402  26.594248 1635.363281 1642.589844  0.977011  0.301942  0.287655  0.584060   1.000000  0.295001  0.281042  0.570633   0.977011 0.749675
 41   3  29  29 1.0  3.660424 149.131199 0.0 152.791622 152.791622 152.791622 152.791622 1661.335938 1665.406250  1.000000  0.332597  0.332597  0.332597   1.000000  0.332597  0.332597  0.332597   1.000000 0.332597
 41   2  55  55 1.0  7.258573   7.737923 0.0  14.996496 164.808140 167.788118  83.912711 1761.375000 1777.343750  1.000000  0.322236  0.319786  0.415528   1.000000  0.322236  0.319786  0.415528   1.000000 0.774079
 41   1  87  87 1.0 15.522070   5.214224 0.0  20.736294 168.758434 188.524412  23.610911 1713.578125 1718.121094  0.977011  0.318998  0.303882  0.602953   1.000000  0.311665  0.296896  0.589092   0.977011 0.755229
 42   3  29  29 1.0  3.663043 149.350804 0.0 153.013847 153.013847 153.013847 153.013847 1690.941406 1694.183594  1.000000  0.332398  0.332398  0.332398   1.000000  0.332398  0.332398  0.332398   1.000000 0.332398
 42   2  55  55 1.0  7.253765   8.052657 0.0  15.306422 165.245413 168.320269  84.178676 1785.074219 1799.800781  1.000000  0.321873  0.319353  0.415085   1.000000  0.321873  0.319353  0.415085   1.000000 0.773958
 42   1  89  89 1.0 15.958442   7.043336 0.0  23.001778 169.224152 191.322047  23.960407 1742.570312 1746.210938  0.955056  0.318621  0.301874  0.600596   1.000000  0.304301  0.288307  0.573603   0.955056 0.738138
 43   3  29  29 1.0  3.666886 103.376106 0.0 107.042992 107.042992 107.042992 107.042992 1717.320312 1719.773438  1.000000  0.381613  0.381613  0.381613   1.000000  0.381613  0.381613  0.381613   1.000000 0.381613
 43   2  55  55 1.0  7.181125   3.769548 0.0  10.950673 113.585071 117.993665  59.015794 1801.445312 1824.261719  1.000000  0.373401  0.368139  0.465333   1.000000  0.373401  0.368139  0.465333   1.000000 0.791134
 43   1  89  89 1.0 15.732141   5.411107 0.0  21.143248 117.265024 139.136912  17.437563 1748.437500 1758.042969  0.955056  0.368994  0.345439  0.653387   1.000000  0.352410  0.329914  0.624021   0.955056 0.754174
 44   3  29  29 1.0  3.667982 152.342545 0.0 156.010527 156.010527 156.010527 156.010527 1743.757812 1748.125000  1.000000  0.329742  0.329742  0.329742   1.000000  0.329742  0.329742  0.329742   1.000000 0.329742
 44   2  55  55 1.0  7.169160   5.577510 0.0  12.746670 164.275599 168.757197  84.397595 1825.148438 1848.917969  1.000000  0.322678  0.318999  0.414721   1.000000  0.322678  0.318999  0.414721   1.000000 0.774226
 44   1  89  89 1.0 15.759368   5.436706 0.0  21.196074 167.951291 189.953272  23.789536 1791.976562 1795.742188  0.955056  0.319653  0.302853  0.601743   1.000000  0.305287  0.289242  0.574698   0.955056 0.738466
 45   3  29  29 1.0  3.683547 169.517240 0.0 173.200788 173.200788 173.200788 173.200788 1775.511719 1778.957031  1.000000  0.315448  0.315448  0.315448   1.000000  0.315448  0.315448  0.315448   1.000000 0.315448
 45   2  55  55 1.0  7.186773   4.167902 0.0  11.354675 180.123236 184.555463  92.296529 1855.261719 1878.144531  1.000000  0.310099  0.306783  0.402218   1.000000  0.310099  0.306783  0.402218   1.000000 0.770033
 45   1  91  91 1.0 16.197217   5.583834 0.0  21.781050 183.870422 206.336513  26.060879 1779.671875 1786.750000  0.934066  0.307290  0.291588  0.587247   1.000000  0.287029  0.272362  0.548528   0.934066 0.718387
 46   3  29  29 1.0  3.664710 127.717438 0.0 131.382148 131.382148 131.382148 131.382148 1800.296875 1804.941406  1.000000  0.353323  0.353323  0.353323   1.000000  0.353323  0.353323  0.353323   1.000000 0.353323
 46   2  55  55 1.0  7.171318   5.778490 0.0  12.949807 137.331241 144.331956  72.184794 1874.148438 1898.886719  1.000000  0.347234  0.340407  0.436702   0.851737  0.347234  0.340407  0.436702   0.851737 0.732990
 46   1  89  89 1.0 15.727487   5.407893 0.0  21.135380 141.069592 165.467336  20.728628 1844.035156 1844.515625  0.955056  0.343545  0.321690  0.624160   1.000000  0.328104  0.307232  0.596108   0.955056 0.746072
 47   3  29  29 1.0  3.658302 137.415877 0.0 141.074180 141.074180 141.074180 141.074180 1831.289062 1835.074219  1.000000  0.343540  0.343540  0.343540   1.000000  0.343540  0.343540  0.343540   1.000000 0.343540
 47   2  55  55 1.0  7.261378  13.360944 0.0  20.622322 158.715310 161.696502  80.866984 1885.914062 1902.988281  1.000000  0.327389  0.324842  0.420712   1.000000  0.327389  0.324842  0.420712   1.000000 0.775796
 47   1  87  87 1.0 15.552121   7.028606 0.0  22.580728 162.705245 184.277229  23.080166 1850.406250 1858.496094  0.977011  0.323992  0.306989  0.606613   1.000000  0.316544  0.299931  0.592668   0.977011 0.756856
 48   3  29  29 1.0  3.657961 138.294057 0.0 141.952018 141.952018 141.952018 141.952018 1858.984375 1863.269531  1.000000  0.342688  0.342688  0.342688   1.000000  0.342688  0.342688  0.342688   1.000000 0.342688
 48   2  55  55 1.0  7.202091   5.942277 0.0  13.144368 148.750638 155.096386  77.567075 1936.683594 1959.921875  1.000000  0.336270  0.330546  0.426566   0.884121  0.336270  0.330546  0.426566   0.884121 0.740131
 48   1  87  87 1.0 15.555475   5.176115 0.0  20.731590 152.436926 175.827975  22.025112 1891.726562 1899.445312  0.977011  0.332915  0.313393  0.614202   1.000000  0.325262  0.306188  0.600082   0.977011 0.759762
 49   3  29  29 1.0  3.753552 141.438194 0.0 145.191746 145.191746 145.191746 145.191746 1887.863281 1891.792969  1.000000  0.339592  0.339592  0.339592   1.000000  0.339592  0.339592  0.339592   1.000000 0.339592
 49   2  55  55 1.0  7.243462  11.231850 0.0  18.475312 160.585094 163.667058  81.852364 1986.867188 2002.726562  1.000000  0.325786  0.323186  0.419013   1.000000  0.325786  0.323186  0.419013   1.000000 0.775262
 49   1  87  87 1.0 15.646888   7.326835 0.0  22.973723 164.628874 186.640781  23.375767 1941.570312 1946.058594  0.977011  0.322384  0.305251  0.604562   1.000000  0.314973  0.298234  0.590664   0.977011 0.756332

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL    LE    AC  CF        GT         ST  OT         TT         LT         CT         WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 29.00 29.00 1.0  3.661825 142.466558 0.0 146.128382 146.128382 146.128382 146.128382 1194.260547 1196.583672  1.000000  0.339998  0.339998  0.339998    1.00000  0.339998  0.339998  0.339998   1.000000 0.339998
  2 55.00 55.00 1.0  7.249830   8.863648 0.0  16.113478 158.166226 162.241860  81.139652 1280.121953 1297.391641  1.000000  0.329197  0.325579  0.421501    0.97807  0.329197  0.325579  0.421501   0.978070 0.769089
  1 88.32 88.32 1.0 15.761617   6.036095 0.0  21.797712 162.138319 184.039572  23.058598 1231.961719 1235.821016  0.962819  0.325751  0.308104  0.608086    1.00000  0.313616  0.296636  0.585462   0.962819 0.746418

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       LE       AC  CF       GT        ST  OT        TT        LT        CT        WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 0.000000 0.000000 0.0 0.016096 20.016893 0.0 20.017979 20.017979 20.017979 20.017979 419.954388 420.973159  0.000000  0.018739  0.018739  0.018739   0.000000  0.018739  0.018739  0.018739   0.000000 0.018739
  2 0.000000 0.000000 0.0 0.104050  6.084321 0.0  6.180116 21.982632 21.392760 10.696328 418.163104 420.376277  0.000000  0.019111  0.018103  0.018579   0.043024  0.019111  0.018103  0.018579   0.043024 0.013464
  1 1.834366 1.834366 0.0 0.547619  0.733279 0.0  1.161299 22.109783 21.604472  2.708235 420.285626 421.522908  0.020112  0.018734  0.016007  0.019021   0.000000  0.018674  0.016293  0.021487   0.020112 0.016323

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT         ST  OT         TT         YT         WT       ET         RSS         VMS  LE  AC  CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  PP_EF_L  PP_EF_A  SP_ED_L  SP_ED_A  SP_EB_L  SP_EB_A  SP_EBS_L  SP_EBS_A  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 3.648940 158.625427 0.0 162.274366 162.274366 162.274366 0.000000  477.019531  478.070312  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   2   1   1 5.047698   8.362005 0.0  13.409703 175.684069 175.684069 3.016114  541.000000  554.128906  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.345208 2.345208 0.938083 0.938083  0.542439  0.542439            0            3
  0   2   2   2 2.255463   0.760651 0.0   3.016114 178.700183   3.016114 0.000000  478.988281  474.363281  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.779580  0.779580            0            0
  0   1   1   1 2.987062   0.991572 0.0   3.978634 179.662703 179.662703 6.857936  475.203125  470.835938  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
  0   1   2   2 2.779548   1.062274 0.0   3.841822 186.520639   6.857936 3.291593  480.218750  480.027344  15  15 1.0    0       17     31     9         9        9      17 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
  0   1   3   3 2.346025   0.945568 0.0   3.291593 189.812232   3.291593 4.061639  475.269531  478.746094  13  13 1.0    0       32     44     9         9       18      26 1.444444 1.444444 0.881917 0.881917 0.610558 0.610558  0.712232  0.712232            0            3
  0   1   4   4 2.843902   1.217737 0.0   4.061639 193.873870   4.061639 1.826262  482.179688  482.078125  15  15 1.0    0       45     59     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
  0   1   5   5 1.452772   0.373490 0.0   1.826262 195.700133   1.826262 2.242030  443.339844  440.253906   8   8 1.0    0       60     67     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  0   1   6   6 1.690273   0.551757 0.0   2.242030 197.942163   2.242030 1.413105  447.941406  441.992188   9   9 1.0    0       68     76     5         5       41      45 1.800000 1.800000 1.303840 1.303840 0.724356 0.724356  0.481448  0.481448            0            2
  0   1   7   7 1.078584   0.334521 0.0   1.413105 199.355268   1.413105 1.712179  444.355469  438.578125   6   6 1.0    0       77     82     5         5       46      50 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  0   1   8   8 1.290727   0.421452 0.0   1.712179 201.067447   1.712179 0.000000  446.167969  442.398438   7   7 1.0    0       83     89     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
  1   3   1   1 3.640029 166.051134 0.0 169.691163 169.691163 169.691163 0.000000  498.210938  498.054688  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   2   1   1 4.016658   2.767201 0.0   6.783859 176.475022 176.475022 4.319339  561.292969  578.074219  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.413333 2.413333 1.126222 1.126222  0.534800  0.534800            0            4
  1   2   2   2 3.163104   1.156234 0.0   4.319339 180.794361   4.319339 0.000000  529.449219  531.906250  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.046536 1.046536 0.627922 0.627922  0.735548  0.735548            0            0
  1   1   1   1 2.809769   0.925641 0.0   3.735410 180.210433 180.210433 7.122188  509.398438  514.054688  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
  1   1   2   2 2.165383   0.637466 0.0   2.802850 187.332621   7.122188 3.052970  496.941406  491.675781  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.951190 0.951190 0.554861 0.554861  0.656490  0.656490            0            0
  1   1   3   3 2.294588   0.758381 0.0   3.052970 190.385590   3.052970 2.227086  505.578125  506.093750  13  13 1.0    0       28     40     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
  1   1   4   4 1.501007   0.726080 0.0   2.227086 192.612677   2.227086 2.704757  492.253906  487.125000   9   9 1.0    0       41     49     8         8       23      30 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            3
  1   1   5   5 2.080704   0.624052 0.0   2.704757 195.317434   2.704757 2.469061  434.843750  434.917969  11  11 1.0    0       50     60     6         6       31      36 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
  1   1   6   6 1.831496   0.637566 0.0   2.469061 197.786495   2.469061 1.915376  439.515625  443.019531  10  10 1.0    0       61     70     6         6       37      42 1.666667 1.666667 1.032796 1.032796 0.619677 0.619677  0.604070  0.604070            0            0
  1   1   7   7 1.440887   0.474490 0.0   1.915376 199.701871   1.915376 2.181584  441.703125  447.011719   8   8 1.0    0       71     78     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
  1   1   8   8 1.615144   0.566440 0.0   2.181584 201.883454   2.181584 0.000000  444.644531  450.726562   9   9 1.0    0       79     87     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
  2   3   1   1 3.648982 123.734370 0.0 127.383352 127.383352 127.383352 0.000000  500.703125  501.218750  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   2   1   1 5.914460  21.668335 0.0  27.582795 154.966147 154.966147 2.332789  616.558594  620.667969  39  39 1.0   39        1     39    14        14        1      14 2.785714 2.785714 2.326389 2.326389 0.835114 0.835114  0.544577  0.544577            0            3
  2   2   2   2 1.607983   0.724807 0.0   2.332789 157.298936   2.332789 0.000000  539.781250  541.183594  16  16 1.0   16       40     55    15        15       15      29 1.066667 1.066667 0.258199 0.258199 0.242061 0.242061  0.915186  0.915186            0            0
  2   1   1   1 3.221284   1.117809 0.0   4.339093 159.305240 159.305240 7.302772  547.886719  544.597656  17  17 1.0    0        1     17     9         9        1       9 1.888889 1.888889 1.615893 1.615893 0.855473 0.855473  0.562354  0.562354            0            0
  2   1   2   2 3.451738   1.518244 0.0   4.969982 166.608012   7.302772 4.591962  556.722656  556.496094  18  18 1.0    0       18     35    10        10       10      19 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            0
  2   1   3   3 2.973217   1.618746 0.0   4.591962 171.199974   4.591962 5.385372  551.851562  554.355469  16  16 1.0    0       36     51    10        10       20      29 1.600000 1.600000 0.843274 0.843274 0.527046 0.527046  0.734410  0.734410            0            2
  2   1   4   4 3.734867   1.650505 0.0   5.385372 176.585346   5.385372 1.132817  559.917969  558.136719  19  19 1.0    0       52     70    10        10       30      39 1.900000 1.900000 1.911951 1.911951 1.006290 1.006290  0.535816  0.535816            0            1
  2   1   5   5 0.911115   0.221702 0.0   1.132817 177.718163   1.132817 1.388980  506.996094  503.070312   5   5 1.0    0       71     75     4         4       40      43 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
  2   1   6   6 1.126112   0.262869 0.0   1.388980 179.107143   1.388980 1.142009  513.570312  510.480469   6   6 1.0    0       76     81     4         4       44      47 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  2   1   7   7 0.921524   0.220485 0.0   1.142009 180.249152   1.142009 1.292359  513.027344  508.199219   5   5 1.0    0       82     86     4         4       48      51 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
  2   1   8   8 1.105049   0.187310 0.0   1.292359 181.541511   1.292359 0.000000  519.644531  514.617188   5   5 1.0    0       87     91     4         4       52      55 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  3   3   1   1 3.649527 113.743138 0.0 117.392664 117.392664 117.392664 0.000000  557.121094  557.914062  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   2   1   1 5.024564   7.623003 0.0  12.647567 130.040231 130.040231 3.250251  659.421875  671.683594  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.312175 2.312175 0.924870 0.924870  0.546200  0.546200            0            3
  3   2   2   2 2.225758   1.024492 0.0   3.250251 133.290482   3.250251 0.000000  590.074219  588.886719  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.779580  0.779580            0            0
  3   1   1   1 2.998539   0.967231 0.0   3.965770 134.006002 134.006002 7.165354  544.355469  546.058594  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
  3   1   2   2 2.788136   1.126967 0.0   3.915104 141.171356   7.165354 3.151864  573.507812  578.625000  15  15 1.0    0       17     31     9         9        9      17 1.666667 1.666667 1.118034 1.118034 0.670820 0.670820  0.658438  0.658438            0            0
  3   1   3   3 2.317024   0.834841 0.0   3.151864 144.323220   3.151864 4.033190  576.515625  585.843750  13  13 1.0    0       32     44     9         9       18      26 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            3
  3   1   4   4 2.793683   1.239507 0.0   4.033190 148.356410   4.033190 1.739526  588.523438  592.691406  15  15 1.0    0       45     59     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
  3   1   5   5 1.395771   0.343755 0.0   1.739526 150.095937   1.739526 2.099602  559.480469  556.968750   8   8 1.0    0       60     67     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  3   1   6   6 1.652315   0.447288 0.0   2.099602 152.195539   2.099602 1.557135  567.187500  564.285156   9   9 1.0    0       68     76     5         5       41      45 1.800000 1.800000 1.303840 1.303840 0.724356 0.724356  0.481448  0.481448            0            2
  3   1   7   7 1.042758   0.514377 0.0   1.557135 153.752674   1.557135 1.563078  562.242188  559.468750   6   6 1.0    0       77     82     5         5       46      50 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  3   1   8   8 1.230337   0.332741 0.0   1.563078 155.315752   1.563078 0.000000  563.910156  563.027344   7   7 1.0    0       83     89     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
  4   3   1   1 3.656728 151.998946 0.0 155.655674 155.655674 155.655674 0.000000  592.332031  593.753906  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   2   1   1 5.896654  18.301013 0.0  24.197666 179.853340 179.853340 2.519107  704.074219  709.351562  39  39 1.0   39        1     39    14        14        1      14 2.785714 2.785714 2.326389 2.326389 0.835114 0.835114  0.544577  0.544577            0            3
  4   2   2   2 1.590669   0.928438 0.0   2.519107 182.372448   2.519107 0.000000  628.406250  629.984375  16  16 1.0   16       40     55    15        15       15      29 1.066667 1.066667 0.258199 0.258199 0.242061 0.242061  0.915186  0.915186            0            0
  4   1   1   1 3.233854   1.300913 0.0   4.534767 184.388108 184.388108 7.417806  637.433594  634.476562  17  17 1.0    0        1     17     9         9        1       9 1.888889 1.888889 1.615893 1.615893 0.855473 0.855473  0.562354  0.562354            0            0
  4   1   2   2 3.432808   1.465891 0.0   4.898699 191.805914   7.417806 4.417730  647.367188  647.242188  18  18 1.0    0       18     35    10        10       10      19 1.800000 1.800000 1.316561 1.316561 0.731423 0.731423  0.635156  0.635156            0            0
  4   1   3   3 2.949380   1.468351 0.0   4.417730 196.223644   4.417730 5.153023  640.558594  643.492188  16  16 1.0    0       36     51    10        10       20      29 1.600000 1.600000 1.074968 1.074968 0.671855 0.671855  0.682989  0.682989            0            2
  4   1   4   4 3.643532   1.509491 0.0   5.153023 201.376667   5.153023 1.103167  647.359375  645.941406  19  19 1.0    0       52     70    10        10       30      39 1.900000 1.900000 1.100505 1.100505 0.579213 0.579213  0.677676  0.677676            0            1
  4   1   5   5 0.885057   0.218110 0.0   1.103167 202.479834   1.103167 1.356520  593.917969  589.281250   5   5 1.0    0       71     75     4         4       40      43 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
  4   1   6   6 1.084664   0.271856 0.0   1.356520 203.836354   1.356520 1.325791  603.179688  600.429688   6   6 1.0    0       76     81     4         4       44      47 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            1
  4   1   7   7 0.886425   0.439367 0.0   1.325791 205.162145   1.325791 1.068542  595.984375  591.339844   5   5 1.0    0       82     86     4         4       48      51 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
  4   1   8   8 0.880011   0.188531 0.0   1.068542 206.230687   1.068542 0.000000  596.167969  591.597656   5   5 1.0    0       87     91     4         4       52      55 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  5   3   1   1 3.648161 117.086410 0.0 120.734571 120.734571 120.734571 0.000000  620.476562  621.628906  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   2   1   1 5.032621  10.352531 0.0  15.385152 136.119723 136.119723 3.077304  723.750000  737.082031  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.345208 2.345208 0.938083 0.938083  0.542439  0.542439            0            3
  5   2   2   2 2.227095   0.850209 0.0   3.077304 139.197027   3.077304 0.000000  669.859375  666.949219  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.779580  0.779580            0            0
  5   1   1   1 3.011848   0.995213 0.0   4.007062 140.126784 140.126784 6.468948  652.984375  662.640625  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
  5   1   2   2 2.318704   1.072940 0.0   3.391644 146.595732   6.468948 3.207953  656.109375  661.406250  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 1.013794 1.013794 0.701857 0.701857  0.681407  0.681407            0            0
  5   1   3   3 2.319095   0.888858 0.0   3.207953 149.803686   3.207953 4.069336  663.078125  668.585938  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            3
  5   1   4   4 2.776755   1.292581 0.0   4.069336 153.873022   4.069336 1.782776  671.585938  672.714844  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 1.118034 1.118034 0.670820 0.670820  0.658438  0.658438            0            0
  5   1   5   5 1.412725   0.370050 0.0   1.782776 155.655797   1.782776 2.113175  638.191406  637.253906   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  5   1   6   6 1.658755   0.454420 0.0   2.113175 157.768973   2.113175 1.384074  644.050781  639.984375   9   9 1.0    0       66     74     5         5       41      45 1.800000 1.800000 1.788854 1.788854 0.993808 0.993808  0.362740  0.362740            0            2
  5   1   7   7 1.045506   0.338568 0.0   1.384074 159.153047   1.384074 1.542041  639.000000  635.390625   6   6 1.0    0       75     80     5         5       46      50 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  5   1   8   8 1.232510   0.309532 0.0   1.542041 160.695088   1.542041 0.000000  640.183594  638.257812   7   7 1.0    0       81     87     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
  6   3   1   1 3.654872 110.955952 0.0 114.610823 114.610823 114.610823 0.000000  646.031250  646.156250  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   2   1   1 5.043402   9.240912 0.0  14.284314 128.895138 128.895138 3.083766  746.265625  759.351562  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.312175 2.312175 0.924870 0.924870  0.546200  0.546200            0            3
  6   2   2   2 2.232489   0.851278 0.0   3.083766 131.978904   3.083766 0.000000  646.316406  647.792969  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.779580  0.779580            0            0
  6   1   1   1 2.998941   0.986500 0.0   3.985441 132.880579 132.880579 7.127873  679.046875  675.062500  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
  6   1   2   2 2.776486   1.267620 0.0   4.044106 140.008451   7.127873 3.164754  688.906250  690.082031  15  15 1.0    0       17     31     9         9        9      17 1.666667 1.666667 1.414214 1.414214 0.848528 0.848528  0.598870  0.598870            0            0
  6   1   3   3 2.328973   0.835781 0.0   3.164754 143.173205   3.164754 4.286577  687.308594  692.199219  13  13 1.0    0       32     44     9         9       18      26 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            2
  6   1   4   4 2.802222   1.484355 0.0   4.286577 147.459782   4.286577 1.799779  697.742188  700.515625  15  15 1.0    0       45     59     9         9       27      35 1.666667 1.666667 1.118034 1.118034 0.670820 0.670820  0.658438  0.658438            0            1
  6   1   5   5 1.412491   0.387289 0.0   1.799779 149.259561   1.799779 2.122248  625.625000  628.273438   8   8 1.0    0       60     67     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  6   1   6   6 1.655078   0.467170 0.0   2.122248 151.381809   2.122248 1.584581  633.910156  632.730469   9   9 1.0    0       68     76     5         5       41      45 1.800000 1.800000 1.788854 1.788854 0.993808 0.993808  0.362740  0.362740            0            2
  6   1   7   7 1.232272   0.352310 0.0   1.584581 152.966390   1.584581 1.312043  638.406250  640.343750   7   7 1.0    0       77     83     5         5       46      50 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
  6   1   8   8 1.040858   0.271185 0.0   1.312043 154.278434   1.312043 0.000000  636.351562  636.027344   6   6 1.0    0       84     89     5         5       51      55 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            0
  7   3   1   1 3.653588 169.115638 0.0 172.769226 172.769226 172.769226 0.000000  688.101562  691.062500  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   2   1   1 3.851189   2.140159 0.0   5.991348 178.760574 178.760574 5.788064  759.566406  780.558594  29  29 1.0   29        1     29    14        14        1      14 2.071429 2.071429 2.525692 2.525692 1.219300 1.219300  0.522528  0.522528            0            4
  7   2   2   2 3.354474   2.433590 0.0   5.788064 184.548638   5.788064 0.000000  745.261719  748.562500  26  26 1.0   26       30     55    15        15       15      29 1.733333 1.733333 1.162919 1.162919 0.670915 0.670915  0.715124  0.715124            0            0
  7   1   1   1 2.819059   1.168471 0.0   3.987530 182.748104 182.748104 7.778918  711.710938  719.027344  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
  7   1   2   2 1.518928   0.471926 0.0   1.990854 190.527023   7.778918 2.830707  693.304688  690.183594   9   9 1.0    0       16     24     7         7        8      14 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
  7   1   3   3 2.164081   0.666626 0.0   2.830707 193.357730   2.830707 2.717014  707.757812  708.406250  12  12 1.0    0       25     36     7         7       15      21 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
  7   1   4   4 1.922758   0.794256 0.0   2.717014 196.074744   2.717014 1.405518  713.445312  717.457031  11  11 1.0    0       37     47     8         8       22      29 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            3
  7   1   5   5 0.999990   0.405528 0.0   1.405518 197.480262   1.405518 2.691159  701.898438  699.601562   6   6 1.0    0       48     53     6         6       30      35 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1   6   6 2.038771   0.652388 0.0   2.691159 200.171422   2.691159 2.846643  712.882812  709.152344  11  11 1.0    0       54     64     6         6       36      41 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
  7   1   7   7 2.149461   0.697181 0.0   2.846643 203.018064   2.846643 2.346675  719.437500  720.500000  12  12 1.0    0       65     76     7         7       42      48 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
  7   1   8   8 1.556559   0.790116 0.0   2.346675 205.364739   2.346675 0.000000  709.312500  705.058594   9   9 1.0    0       77     85     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
  8   3   1   1 3.675179 182.700782 0.0 186.375961 186.375961 186.375961 0.000000  723.640625  725.050781  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   2   1   1 5.069098   7.531993 0.0  12.601091 198.977051 198.977051 3.086753  824.191406  837.132812  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.472930 2.472930 0.989172 0.989172  0.528241  0.528241            0            3
  8   2   2   2 2.233371   0.853382 0.0   3.086753 202.063805   3.086753 0.000000  772.824219  769.882812  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
  8   1   1   1 2.960909   1.292754 0.0   4.253663 203.230715 203.230715 6.271884  754.664062  751.816406  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
  8   1   2   2 2.328602   0.856528 0.0   3.185131 209.502599   6.271884 3.188972  759.871094  764.863281  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 1.333333 1.333333 0.923077 0.923077  0.614378  0.614378            0            0
  8   1   3   3 2.341823   0.847149 0.0   3.188972 212.691571   3.188972 4.266133  764.062500  768.953125  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.881917 0.881917 0.610558 0.610558  0.712232  0.712232            0            3
  8   1   4   4 2.780018   1.486115 0.0   4.266133 216.957704   4.266133 1.807515  775.703125  776.968750  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
  8   1   5   5 1.415458   0.392057 0.0   1.807515 218.765218   1.807515 2.143882  743.003906  741.804688   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
  8   1   6   6 1.662936   0.480946 0.0   2.143882 220.909100   2.143882 1.368524  748.617188  744.675781   9   9 1.0    0       66     74     5         5       41      45 1.800000 1.800000 1.788854 1.788854 0.993808 0.993808  0.362740  0.362740            0            2
  8   1   7   7 1.044067   0.324457 0.0   1.368524 222.277624   1.368524 1.916388  743.968750  740.011719   6   6 1.0    0       75     80     5         5       46      50 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  8   1   8   8 1.237157   0.679231 0.0   1.916388 224.194013   1.916388 0.000000  744.949219  742.800781   7   7 1.0    0       81     87     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
  9   3   1   1 3.651183 125.275743 0.0 128.926927 128.926927 128.926927 0.000000  749.390625  749.882812  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   2   1   1 4.040596   2.472498 0.0   6.513094 135.440020 135.440020 5.110954  830.546875  851.167969  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.444999 2.444999 1.141000 1.141000  0.531301  0.531301            0            4
  9   2   2   2 3.185041   1.925913 0.0   5.110954 140.550974   5.110954 0.000000  805.421875  809.332031  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 0.899735 0.899735 0.539841 0.539841  0.763034  0.763034            0            0
  9   1   1   1 2.817492   0.862451 0.0   3.679943 139.119963 139.119963 8.294214  777.671875  784.859375  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
  9   1   2   2 2.157335   1.025925 0.0   3.183261 147.414177   8.294214 2.783235  767.785156  765.414062  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.951190 0.951190 0.554861 0.554861  0.656490  0.656490            0            0
  9   1   3   3 2.080773   0.702463 0.0   2.783235 150.197413   2.783235 2.759116  773.457031  777.992188  12  12 1.0    0       28     39     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
  9   1   4   4 1.912175   0.846941 0.0   2.759116 152.956529   2.759116 2.036541  779.148438  783.074219  11  11 1.0    0       40     50     8         8       23      30 1.375000 1.375000 1.060660 1.060660 0.771389 0.771389  0.652298  0.652298            0            3
  9   1   5   5 1.191670   0.844871 0.0   2.036541 154.993069   2.036541 2.668187  770.089844  767.085938   7   7 1.0    0       51     57     6         6       31      36 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            2
  9   1   6   6 2.016594   0.651592 0.0   2.668187 157.661256   2.668187 2.222522  777.355469  774.429688  11  11 1.0    0       58     68     6         6       37      42 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
  9   1   7   7 1.755919   0.466602 0.0   2.222522 159.883777   2.222522 2.012916  773.656250  769.882812  10  10 1.0    0       69     78     6         6       43      48 1.666667 1.666667 1.032796 1.032796 0.619677 0.619677  0.604070  0.604070            0            0
  9   1   8   8 1.538448   0.474468 0.0   2.012916 161.896694   2.012916 0.000000  774.316406  770.628906   9   9 1.0    0       79     87     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 10   3   1   1 3.661276 155.217441 0.0 158.878716 158.878716 158.878716 0.000000  782.730469  784.562500  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   2   1   1 4.028979   3.042938 0.0   7.071917 165.950633 165.950633 4.779783  816.621094  843.625000  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.476261 2.476261 1.155588 1.155588  0.527878  0.527878            0            4
 10   2   2   2 3.165606   1.614178 0.0   4.779783 170.730417   4.779783 0.000000  821.300781  831.859375  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.046536 1.046536 0.627922 0.627922  0.735548  0.735548            0            0
 10   1   1   1 2.810367   0.865296 0.0   3.675663 169.626296 169.626296 7.023525  773.519531  787.429688  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 10   1   2   2 1.718644   0.525097 0.0   2.243741 176.649820   7.023525 2.776732  761.898438  770.515625  10  10 1.0    0       16     25     7         7        8      14 1.428571 1.428571 1.133893 1.133893 0.793725 0.793725  0.610492  0.610492            0            0
 10   1   3   3 2.082826   0.693906 0.0   2.776732 179.426552   2.776732 2.901719  775.937500  786.546875  12  12 1.0    0       26     37     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 10   1   4   4 1.697493   1.204226 0.0   2.901719 182.328271   2.901719 1.912162  776.828125  778.843750  10  10 1.0    0       38     47     8         8       23      30 1.250000 1.250000 0.462910 0.462910 0.370328 0.370328  0.817053  0.817053            0            3
 10   1   5   5 1.399986   0.512177 0.0   1.912162 184.240434   1.912162 2.672558  782.414062  788.667969   8   8 1.0    0       48     55     6         6       31      36 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            1
 10   1   6   6 2.032718   0.639840 0.0   2.672558 186.912992   2.672558 2.308531  788.058594  787.855469  11  11 1.0    0       56     66     6         6       37      42 1.833333 1.833333 1.329160 1.329160 0.724996 0.724996  0.528113  0.528113            0            0
 10   1   7   7 1.773058   0.535473 0.0   2.308531 189.221523   2.308531 2.011059  784.917969  787.167969  10  10 1.0    0       67     76     6         6       43      48 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            1
 10   1   8   8 1.546727   0.464332 0.0   2.011059 191.232582   2.011059 0.000000  786.375000  790.632812   9   9 1.0    0       77     85     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 11   3   1   1 3.650262 127.495098 0.0 131.145360 131.145360 131.145360 0.000000  808.605469  810.214844  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   2   1   1 4.029747   2.438480 0.0   6.468227 137.613587 137.613587 4.375988  891.292969  912.406250  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.413333 2.413333 1.126222 1.126222  0.534800  0.534800            0            4
 11   2   2   2 3.141357   1.234631 0.0   4.375988 141.989575   4.375988 0.000000  871.179688  877.308594  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.112697 1.112697 0.667618 0.667618  0.723799  0.723799            0            0
 11   1   1   1 2.822337   0.861949 0.0   3.684287 141.297873 141.297873 6.368781  837.609375  845.281250  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 11   1   2   2 1.516703   0.476090 0.0   1.992793 147.666654   6.368781 3.039955  817.578125  814.910156   9   9 1.0    0       16     24     7         7        8      14 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 11   1   3   3 2.293605   0.746350 0.0   3.039955 150.706609   3.039955 2.920460  834.683594  838.207031  13  13 1.0    0       25     37     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 11   1   4   4 1.695123   1.225336 0.0   2.920460 153.627069   2.920460 2.094115  831.648438  828.390625  10  10 1.0    0       38     47     8         8       23      30 1.250000 1.250000 0.707107 0.707107 0.565685 0.565685  0.742816  0.742816            0            3
 11   1   5   5 1.605713   0.488401 0.0   2.094115 155.721183   2.094115 4.087322  833.683594  833.453125   9   9 1.0    0       48     56     6         6       31      36 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 11   1   6   6 3.095626   0.991696 0.0   4.087322 159.808506   4.087322 1.844052  856.308594  855.433594  16  16 1.0    0       57     72     6         6       37      42 2.666667 2.666667 2.338090 2.338090 0.876784 0.876784  0.327254  0.327254            0            0
 11   1   7   7 1.390741   0.453311 0.0   1.844052 161.652558   1.844052 2.499198  836.566406  837.503906   8   8 1.0    0       73     80     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 11   1   8   8 1.554870   0.944327 0.0   2.499198 164.151756   2.499198 0.000000  837.597656  833.855469   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 12   3   1   1 3.656721 193.550629 0.0 197.207350 197.207350 197.207350 0.000000  840.933594  842.054688  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   2   1   1 5.071238   5.930678 0.0  11.001916 208.209266 208.209266 3.096882  943.027344  956.785156  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.441626 2.441626 0.976650 0.976650  0.531672  0.531672            0            3
 12   2   2   2 2.230450   0.866432 0.0   3.096882 211.306148   3.096882 0.000000  888.609375  886.089844  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 12   1   1   1 2.997287   0.978862 0.0   3.976149 212.185414 212.185414 6.871667  871.000000  867.554688  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 12   1   2   2 2.783803   0.990983 0.0   3.774785 219.057082   6.871667 3.701863  881.542969  883.089844  15  15 1.0    0       17     31     9         9        9      17 1.666667 1.666667 1.118034 1.118034 0.670820 0.670820  0.658438  0.658438            0            0
 12   1   3   3 2.348970   1.352893 0.0   3.701863 222.758944   3.701863 3.803839  879.847656  885.031250  13  13 1.0    0       32     44     9         9       18      26 1.444444 1.444444 0.881917 0.881917 0.610558 0.610558  0.712232  0.712232            0            3
 12   1   4   4 2.772114   1.031725 0.0   3.803839 226.562784   3.803839 1.781244  892.332031  894.320312  15  15 1.0    0       45     59     9         9       27      35 1.666667 1.666667 0.707107 0.707107 0.424264 0.424264  0.756602  0.756602            0            0
 12   1   5   5 1.413759   0.367485 0.0   1.781244 228.344028   1.781244 1.854270  859.785156  859.015625   8   8 1.0    0       60     67     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 12   1   6   6 1.442638   0.411632 0.0   1.854270 230.198297   1.854270 1.639286  863.222656  861.078125   8   8 1.0    0       68     75     5         5       41      45 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            2
 12   1   7   7 1.241933   0.397353 0.0   1.639286 231.837583   1.639286 2.075124  861.804688  861.343750   7   7 1.0    0       76     82     5         5       46      50 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 12   1   8   8 1.237072   0.838052 0.0   2.075124 233.912707   2.075124 0.000000  861.519531  859.917969   7   7 1.0    0       83     89     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
 13   3   1   1 3.657843 114.079565 0.0 117.737408 117.737408 117.737408 0.000000  866.886719  867.226562  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   2   1   1 4.038529   2.291856 0.0   6.330385 124.067792 124.067792 4.355408  953.785156  974.476562  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.413333 2.413333 1.126222 1.126222  0.534800  0.534800            0            4
 13   2   2   2 3.155793   1.199615 0.0   4.355408 128.423201   4.355408 0.000000  930.835938  936.652344  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.112697 1.112697 0.667618 0.667618  0.723799  0.723799            0            0
 13   1   1   1 2.811747   0.856979 0.0   3.668726 127.736518 127.736518 7.169816  895.726562  903.398438  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 13   1   2   2 2.168403   0.646004 0.0   2.814407 134.906333   7.169816 2.769432  886.945312  884.890625  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.951190 0.951190 0.554861 0.554861  0.656490  0.656490            0            0
 13   1   3   3 2.081415   0.688017 0.0   2.769432 137.675766   2.769432 2.975479  893.066406  897.871094  12  12 1.0    0       28     39     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 13   1   4   4 1.704409   1.271070 0.0   2.975479 140.651245   2.975479 2.135750  891.398438  888.160156  10  10 1.0    0       40     49     8         8       23      30 1.250000 1.250000 0.462910 0.462910 0.370328 0.370328  0.817053  0.817053            0            3
 13   1   5   5 1.617921   0.517830 0.0   2.135750 142.786995   2.135750 4.113230  890.347656  890.035156   9   9 1.0    0       50     58     6         6       31      36 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 13   1   6   6 3.100089   1.013140 0.0   4.113230 146.900225   4.113230 1.873639  912.125000  912.906250  16  16 1.0    0       59     74     6         6       37      42 2.666667 2.666667 3.614784 3.614784 1.355544 1.355544  0.146501  0.146501            0            0
 13   1   7   7 1.404677   0.468962 0.0   1.873639 148.773864   1.873639 2.070321  893.085938  893.980469   8   8 1.0    0       75     82     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 13   1   8   8 1.549607   0.520714 0.0   2.070321 150.844185   2.070321 0.000000  893.078125  889.179688   9   9 1.0    0       83     91     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 14   3   1   1 3.656937 140.869299 0.0 144.526236 144.526236 144.526236 0.000000  894.226562  894.812500  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   2   1   1 5.921617  20.923113 0.0  26.844730 171.370966 171.370966 2.894315 1007.347656 1012.757812  39  39 1.0   39        1     39    14        14        1      14 2.785714 2.785714 2.391606 2.391606 0.858525 0.858525  0.537220  0.537220            0            3
 14   2   2   2 1.597077   1.297237 0.0   2.894315 174.265281   2.894315 0.000000  938.058594  940.507812  16  16 1.0   16       40     55    15        15       15      29 1.066667 1.066667 0.258199 0.258199 0.242061 0.242061  0.915186  0.915186            0            0
 14   1   1   1 3.218259   1.104721 0.0   4.322980 175.693946 175.693946 7.957853  944.765625  942.867188  17  17 1.0    0        1     17     9         9        1       9 1.888889 1.888889 1.615893 1.615893 0.855473 0.855473  0.562354  0.562354            0            0
 14   1   2   2 3.466230   1.597308 0.0   5.063539 183.651799   7.957853 4.346603  955.367188  957.097656  18  18 1.0    0       18     35    10        10       10      19 1.800000 1.800000 1.316561 1.316561 0.731423 0.731423  0.635156  0.635156            0            0
 14   1   3   3 2.964326   1.382277 0.0   4.346603 187.998403   4.346603 5.199357  949.703125  953.445312  16  16 1.0    0       36     51    10        10       20      29 1.600000 1.600000 1.897367 1.897367 1.185854 1.185854  0.537997  0.537997            0            2
 14   1   4   4 3.644533   1.554824 0.0   5.199357 193.197759   5.199357 1.109003  957.937500  957.664062  19  19 1.0    0       52     70    10        10       30      39 1.900000 1.900000 1.449138 1.449138 0.762704 0.762704  0.610987  0.610987            0            1
 14   1   5   5 0.887586   0.221418 0.0   1.109003 194.306763   1.109003 1.368927  904.332031  900.765625   5   5 1.0    0       71     75     4         4       40      43 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 14   1   6   6 1.089429   0.279499 0.0   1.368927 195.675690   1.368927 1.092025  911.992188  910.558594   6   6 1.0    0       76     81     4         4       44      47 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 14   1   7   7 0.885208   0.206817 0.0   1.092025 196.767715   1.092025 1.089216  905.234375  901.605469   5   5 1.0    0       82     86     4         4       48      51 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 14   1   8   8 0.886106   0.203111 0.0   1.089216 197.856932   1.089216 0.000000  905.906250  902.332031   5   5 1.0    0       87     91     4         4       52      55 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 15   3   1   1 3.658667 151.679007 0.0 155.337674 155.337674 155.337674 0.000000  928.417969  930.730469  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   2   1   1 5.912516  28.533232 0.0  34.445748 189.783422 189.783422 2.310914 1040.687500 1046.160156  39  39 1.0   39        1     39    14        14        1      14 2.785714 2.785714 2.423557 2.423557 0.869995 0.869995  0.533667  0.533667            0            3
 15   2   2   2 1.593708   0.717206 0.0   2.310914 192.094336   2.310914 0.000000  952.023438  958.820312  16  16 1.0   16       40     55    15        15       15      29 1.066667 1.066667 0.258199 0.258199 0.242061 0.242061  0.915186  0.915186            0            0
 15   1   1   1 3.251554   1.758031 0.0   5.009585 194.793006 194.793006 7.461126  927.828125  929.894531  17  17 1.0    0        1     17     9         9        1       9 1.888889 1.888889 1.615893 1.615893 0.855473 0.855473  0.562354  0.562354            0            0
 15   1   2   2 3.463873   1.686339 0.0   5.150212 202.254133   7.461126 4.234051  958.074219  964.039062  18  18 1.0    0       18     35    10        10       10      19 1.800000 1.800000 0.788811 0.788811 0.438228 0.438228  0.747436  0.747436            0            0
 15   1   3   3 2.944350   1.289701 0.0   4.234051 206.488183   4.234051 5.030032  954.578125  963.382812  16  16 1.0    0       36     51    10        10       20      29 1.600000 1.600000 1.074968 1.074968 0.671855 0.671855  0.682989  0.682989            0            2
 15   1   4   4 3.644606   1.385426 0.0   5.030032 211.518216   5.030032 1.126215  968.226562  972.750000  19  19 1.0    0       52     70    10        10       30      39 1.900000 1.900000 1.595131 1.595131 0.839543 0.839543  0.585841  0.585841            0            1
 15   1   5   5 0.889854   0.236361 0.0   1.126215 212.644431   1.126215 1.744909  918.757812  919.285156   5   5 1.0    0       71     75     4         4       40      43 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 15   1   6   6 0.888472   0.856437 0.0   1.744909 214.389340   1.744909 1.393850  926.160156  926.562500   5   5 1.0    0       76     80     4         4       44      47 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 15   1   7   7 1.095444   0.298406 0.0   1.393850 215.783189   1.393850 1.076117  930.238281  931.976562   6   6 1.0    0       81     86     4         4       48      51 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 15   1   8   8 0.884478   0.191639 0.0   1.076117 216.859307   1.076117 0.000000  923.214844  923.097656   5   5 1.0    0       87     91     4         4       52      55 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 16   3   1   1 3.652833 146.315394 0.0 149.968227 149.968227 149.968227 0.000000  957.488281  958.828125  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   2   1   1 4.052840   2.879749 0.0   6.932589 156.900815 156.900815 4.395347 1037.359375 1058.644531  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.537629 2.537629 1.184227 1.184227  0.521247  0.521247            0            4
 16   2   2   2 3.142366   1.252981 0.0   4.395347 161.296162   4.395347 0.000000 1013.988281 1019.324219  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.112697 1.112697 0.667618 0.667618  0.723799  0.723799            0            0
 16   1   1   1 2.816900   0.861085 0.0   3.677985 160.578800 160.578800 6.385942  983.089844  991.285156  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 16   1   2   2 1.515001   0.475593 0.0   1.990595 166.964742   6.385942 3.063379  964.679688  962.457031   9   9 1.0    0       16     24     7         7        8      14 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 16   1   3   3 2.297388   0.765992 0.0   3.063379 170.028122   3.063379 3.085840  983.156250  987.250000  13  13 1.0    0       25     37     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 16   1   4   4 1.692339   1.393501 0.0   3.085840 173.113962   3.085840 2.685244  977.835938  974.925781  10  10 1.0    0       38     47     8         8       23      30 1.250000 1.250000 0.462910 0.462910 0.370328 0.370328  0.817053  0.817053            0            3
 16   1   5   5 2.037289   0.647955 0.0   2.685244 175.799206   2.685244 2.255980  983.398438  980.312500  11  11 1.0    0       48     58     6         6       31      36 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 16   1   6   6 1.751051   0.504929 0.0   2.255980 178.055185   2.255980 1.864859  978.273438  975.171875  10  10 1.0    0       59     68     6         6       37      42 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 16   1   7   7 1.387937   0.476923 0.0   1.864859 179.920045   1.864859 2.023293  979.761719  976.585938   8   8 1.0    0       69     76     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 16   1   8   8 1.552117   0.471177 0.0   2.023293 181.943338   2.023293 0.000000  981.359375  978.035156   9   9 1.0    0       77     85     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 17   3   1   1 3.656958 141.739468 0.0 145.396426 145.396426 145.396426 0.000000  983.886719  985.453125  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   2   1   1 4.080884   3.511660 0.0   7.592544 152.988970 152.988970 4.883578 1025.402344 1053.972656  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.537629 2.537629 1.184227 1.184227  0.521247  0.521247            0            4
 17   2   2   2 3.157864   1.725714 0.0   4.883578 157.872548   4.883578 0.000000 1021.144531 1031.062500  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.112697 1.112697 0.667618 0.667618  0.723799  0.723799            0            0
 17   1   1   1 2.815890   0.872363 0.0   3.688253 156.677223 156.677223 7.448592  980.652344  996.222656  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 17   1   2   2 1.966864   0.598150 0.0   2.565013 164.125814   7.448592 3.041665  971.265625  976.816406  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 17   1   3   3 2.292420   0.749245 0.0   3.041665 167.167480   3.041665 2.725111  984.195312  994.414062  13  13 1.0    0       27     39     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 17   1   4   4 1.909079   0.816032 0.0   2.725111 169.892591   2.725111 2.370939  990.046875 1000.812500  11  11 1.0    0       40     50     8         8       23      30 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            3
 17   1   5   5 1.192619   1.178320 0.0   2.370939 172.263530   2.370939 2.675476  984.863281  987.011719   7   7 1.0    0       51     57     6         6       31      36 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 17   1   6   6 2.038373   0.637103 0.0   2.675476 174.939006   2.675476 2.316941  992.871094  994.593750  11  11 1.0    0       58     68     6         6       37      42 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 17   1   7   7 1.771551   0.545390 0.0   2.316941 177.255947   2.316941 2.018657  988.875000  993.226562  10  10 1.0    0       69     78     6         6       43      48 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            1
 17   1   8   8 1.550832   0.467825 0.0   2.018657 179.274604   2.018657 0.000000  990.492188  990.839844   9   9 1.0    0       79     87     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 18   3   1   1 3.654362 187.723185 0.0 191.377546 191.377546 191.377546 0.000000 1032.187500 1035.570312  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   2   1   1 5.073741  10.557832 0.0  15.631572 207.009119 207.009119 3.095584 1132.636719 1146.910156  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.503843 2.503843 1.001537 1.001537  0.524883  0.524883            0            3
 18   2   2   2 2.231908   0.863676 0.0   3.095584 210.104703   3.095584 0.000000 1078.019531 1075.937500  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 18   1   1   1 2.998085   0.973104 0.0   3.971189 210.980307 210.980307 6.936808 1062.070312 1059.609375  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 18   1   2   2 2.788670   1.052554 0.0   3.841224 217.917115   6.936808 3.145263 1070.550781 1072.832031  15  15 1.0    0       17     31     9         9        9      17 1.666667 1.666667 1.414214 1.414214 0.848528 0.848528  0.598870  0.598870            0            0
 18   1   3   3 2.326294   0.818968 0.0   3.145263 221.062378   3.145263 4.606402 1070.011719 1075.906250  13  13 1.0    0       32     44     9         9       18      26 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            2
 18   1   4   4 2.782643   1.823759 0.0   4.606402 225.668780   4.606402 1.787701 1079.695312 1082.835938  15  15 1.0    0       45     59     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            1
 18   1   5   5 1.415022   0.372678 0.0   1.787701 227.456480   1.787701 2.119947 1048.554688 1048.726562   8   8 1.0    0       60     67     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 18   1   6   6 1.655052   0.464895 0.0   2.119947 229.576428   2.119947 1.643643 1054.566406 1051.703125   9   9 1.0    0       68     76     5         5       41      45 1.800000 1.800000 0.836660 0.836660 0.464811 0.464811  0.622260  0.622260            0            2
 18   1   7   7 1.246596   0.397047 0.0   1.643643 231.220070   1.643643 1.315256 1051.226562 1051.453125   7   7 1.0    0       77     83     5         5       46      50 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 18   1   8   8 1.043377   0.271879 0.0   1.315256 232.535326   1.315256 0.000000 1048.937500 1046.046875   6   6 1.0    0       84     89     5         5       51      55 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            0
 19   3   1   1 3.684917 130.083521 0.0 133.768438 133.768438 133.768438 0.000000 1056.769531 1057.925781  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   2   1   1 4.049299   2.461909 0.0   6.511207 140.279645 140.279645 4.844346 1137.750000 1159.492188  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.537629 2.537629 1.184227 1.184227  0.521247  0.521247            0            4
 19   2   2   2 3.160918   1.683429 0.0   4.844346 145.123991   4.844346 0.000000 1117.285156 1124.164062  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.112697 1.112697 0.667618 0.667618  0.723799  0.723799            0            0
 19   1   1   1 2.814986   1.609632 0.0   4.424618 144.704263 144.704263 6.842149 1085.402344 1093.390625  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 19   1   2   2 1.517315   0.480487 0.0   1.997802 151.546412   6.842149 3.076662 1066.308594 1063.804688   9   9 1.0    0       16     24     7         7        8      14 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 19   1   3   3 2.303190   0.773472 0.0   3.076662 154.623074   3.076662 2.443649 1084.574219 1088.343750  13  13 1.0    0       25     37     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 19   1   4   4 1.699320   0.744329 0.0   2.443649 157.066723   2.443649 1.885871 1079.511719 1076.531250  10  10 1.0    0       38     47     8         8       23      30 1.250000 1.250000 0.707107 0.707107 0.565685 0.565685  0.742816  0.742816            0            3
 19   1   5   5 1.403568   0.482303 0.0   1.885871 158.952595   1.885871 2.627403 1079.570312 1081.101562   8   8 1.0    0       48     55     6         6       31      36 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            1
 19   1   6   6 2.033562   0.593841 0.0   2.627403 161.579997   2.627403 2.289619 1085.582031 1082.859375  11  11 1.0    0       56     66     6         6       37      42 1.833333 1.833333 0.983192 0.983192 0.536287 0.536287  0.617857  0.617857            0            0
 19   1   7   7 1.786606   0.503013 0.0   2.289619 163.869616   2.289619 2.026654 1081.414062 1081.410156  10  10 1.0    0       67     76     6         6       43      48 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            1
 19   1   8   8 1.548882   0.477772 0.0   2.026654 165.896271   2.026654 0.000000 1081.679688 1078.625000   9   9 1.0    0       77     85     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 20   3   1   1 3.660898 127.367565 0.0 131.028463 131.028463 131.028463 0.000000 1084.011719 1086.578125  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   2   1   1 3.871668   2.423291 0.0   6.294959 137.323422 137.323422 5.746092 1160.394531 1182.238281  29  29 1.0   29        1     29    14        14        1      14 2.071429 2.071429 2.432608 2.432608 1.174363 1.174363  0.532666  0.532666            0            4
 20   2   2   2 3.347141   2.398951 0.0   5.746092 143.069514   5.746092 0.000000 1143.996094 1147.820312  26  26 1.0   26       30     55    15        15       15      29 1.733333 1.733333 1.437591 1.437591 0.829379 0.829379  0.670977  0.670977            0            0
 20   1   1   1 2.810887   0.849849 0.0   3.660737 140.984159 140.984159 8.559690 1110.011719 1118.410156  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 20   1   2   2 2.171665   0.641933 0.0   2.813598 149.543849   8.559690 2.541668 1100.742188 1099.214844  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.951190 0.951190 0.554861 0.554861  0.656490  0.656490            0            0
 20   1   3   3 1.942015   0.599653 0.0   2.541668 152.085516   2.541668 2.682391 1101.761719 1106.230469  11  11 1.0    0       28     38     7         7       15      21 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            1
 20   1   4   4 1.910729   0.771662 0.0   2.682391 154.767907   2.682391 1.626313 1111.246094 1116.769531  11  11 1.0    0       39     49     8         8       22      29 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            3
 20   1   5   5 1.195325   0.430987 0.0   1.626313 156.394220   1.626313 2.959503 1101.828125 1099.285156   7   7 1.0    0       50     56     6         6       30      35 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 20   1   6   6 1.588309   1.371194 0.0   2.959503 159.353724   2.959503 3.656427 1107.996094 1108.058594   9   9 1.0    0       57     65     6         6       36      41 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            1
 20   1   7   7 2.793715   0.862712 0.0   3.656427 163.010151   3.656427 2.013497 1124.796875 1122.707031  15  15 1.0    0       66     80     7         7       42      48 2.142857 2.142857 1.864454 1.864454 0.870079 0.870079  0.459185  0.459185            0            0
 20   1   8   8 1.534673   0.478824 0.0   2.013497 165.023648   2.013497 0.000000 1107.265625 1104.968750   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 21   3   1   1 3.655623 138.745110 0.0 142.400733 142.400733 142.400733 0.000000 1110.167969 1111.605469  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   2   1   1 5.932468  23.539617 0.0  29.472085 171.872818 171.872818 2.307546 1219.593750 1225.714844  39  39 1.0   39        1     39    14        14        1      14 2.785714 2.785714 2.486226 2.486226 0.892491 0.892491  0.526793  0.526793            0            3
 21   2   2   2 1.599447   0.708099 0.0   2.307546 174.180364   2.307546 0.000000 1156.453125 1159.578125  16  16 1.0   16       40     55    15        15       15      29 1.066667 1.066667 0.258199 0.258199 0.242061 0.242061  0.915186  0.915186            0            0
 21   1   1   1 3.205180   1.081816 0.0   4.286997 176.159815 176.159815 6.639022 1158.769531 1157.675781  17  17 1.0    0        1     17     9         9        1       9 1.888889 1.888889 1.615893 1.615893 0.855473 0.855473  0.562354  0.562354            0            0
 21   1   2   2 2.974654   1.356822 0.0   4.331476 182.798837   6.639022 4.453541 1161.335938 1165.984375  16  16 1.0    0       18     33    10        10       10      19 1.600000 1.600000 0.699206 0.699206 0.437004 0.437004  0.769754  0.769754            0            0
 21   1   3   3 2.960784   1.492757 0.0   4.453541 187.252377   4.453541 5.326721 1164.792969 1169.250000  16  16 1.0    0       34     49    10        10       20      29 1.600000 1.600000 1.074968 1.074968 0.671855 0.671855  0.682989  0.682989            0            2
 21   1   4   4 3.650897   1.675824 0.0   5.326721 192.579099   5.326721 1.120362 1174.425781 1174.734375  19  19 1.0    0       50     68    10        10       30      39 1.900000 1.900000 1.449138 1.449138 0.762704 0.762704  0.610987  0.610987            0            1
 21   1   5   5 0.888500   0.231862 0.0   1.120362 193.699460   1.120362 1.356410 1123.925781 1121.277344   5   5 1.0    0       69     73     4         4       40      43 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 21   1   6   6 1.087273   0.269137 0.0   1.356410 195.055870   1.356410 0.887633 1130.632812 1129.562500   6   6 1.0    0       74     79     4         4       44      47 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 21   1   7   7 0.696725   0.190908 0.0   0.887633 195.943504   0.887633 1.323448 1124.359375 1121.656250   4   4 1.0    0       80     83     4         4       48      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 21   1   8   8 1.075443   0.248005 0.0   1.323448 197.266952   1.323448 0.000000 1131.402344 1130.367188   6   6 1.0    0       84     89     4         4       52      55 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 22   3   1   1 3.654606 167.357659 0.0 171.012265 171.012265 171.012265 0.000000 1142.691406 1144.562500  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   2   1   1 5.881725  19.936352 0.0  25.818076 196.830341 196.830341 2.302798 1246.535156 1252.640625  39  39 1.0   39        1     39    14        14        1      14 2.785714 2.785714 2.486226 2.486226 0.892491 0.892491  0.526793  0.526793            0            3
 22   2   2   2 1.593837   0.708961 0.0   2.302798 199.133139   2.302798 0.000000 1149.812500 1159.101562  16  16 1.0   16       40     55    15        15       15      29 1.066667 1.066667 0.258199 0.258199 0.242061 0.242061  0.915186  0.915186            0            0
 22   1   1   1 3.220073   1.082311 0.0   4.302384 201.132726 201.132726 6.634865 1131.132812 1139.207031  17  17 1.0    0        1     17     9         9        1       9 1.888889 1.888889 1.615893 1.615893 0.855473 0.855473  0.562354  0.562354            0            0
 22   1   2   2 2.969772   1.362296 0.0   4.332067 207.767591   6.634865 5.323592 1142.566406 1153.921875  16  16 1.0    0       18     33    10        10       10      19 1.600000 1.600000 0.699206 0.699206 0.437004 0.437004  0.769754  0.769754            0            0
 22   1   3   3 2.972500   2.351092 0.0   5.323592 213.091183   5.323592 5.136485 1153.511719 1165.046875  16  16 1.0    0       34     49    10        10       20      29 1.600000 1.600000 0.966092 0.966092 0.603807 0.603807  0.706396  0.706396            0            2
 22   1   4   4 3.644190   1.492295 0.0   5.136485 218.227668   5.136485 1.111201 1165.117188 1171.613281  19  19 1.0    0       50     68    10        10       30      39 1.900000 1.900000 1.370320 1.370320 0.721221 0.721221  0.625193  0.625193            0            1
 22   1   5   5 0.889862   0.221339 0.0   1.111201 219.338869   1.111201 1.384500 1117.257812 1120.183594   5   5 1.0    0       69     73     4         4       40      43 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 22   1   6   6 1.085467   0.299033 0.0   1.384500 220.723369   1.384500 1.146406 1129.179688 1133.648438   6   6 1.0    0       74     79     4         4       44      47 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 22   1   7   7 0.888869   0.257537 0.0   1.146406 221.869775   1.146406 1.076536 1128.699219 1131.070312   5   5 1.0    0       80     84     4         4       48      51 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 22   1   8   8 0.883254   0.193282 0.0   1.076536 222.946311   1.076536 0.000000 1124.714844 1126.285156   5   5 1.0    0       85     89     4         4       52      55 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 23   3   1   1 3.658599 141.135128 0.0 144.793727 144.793727 144.793727 0.000000 1166.023438 1169.152344  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   2   1   1 4.063850   3.000126 0.0   7.063976 151.857703 151.857703 5.972355 1246.343750 1269.121094  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.444999 2.444999 1.141000 1.141000  0.531301  0.531301            0            4
 23   2   2   2 3.161913   2.810443 0.0   5.972355 157.830058   5.972355 0.000000 1222.945312 1230.164062  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.112697 1.112697 0.667618 0.667618  0.723799  0.723799            0            0
 23   1   1   1 2.821433   0.844597 0.0   3.666029 155.523732 155.523732 9.137256 1192.449219 1201.937500  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 23   1   2   2 1.726774   1.438127 0.0   3.164901 164.660988   9.137256 2.767671 1175.433594 1178.710938  10  10 1.0    0       16     25     7         7        8      14 1.428571 1.428571 1.133893 1.133893 0.793725 0.793725  0.610492  0.610492            0            0
 23   1   3   3 2.078318   0.689353 0.0   2.767671 167.428659   2.767671 2.846958 1187.136719 1193.777344  12  12 1.0    0       26     37     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 23   1   4   4 1.992785   0.854173 0.0   2.846958 170.275617   2.846958 1.640520 1195.523438 1201.875000  11  11 1.0    0       38     48     8         8       23      30 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            3
 23   1   5   5 1.188713   0.451807 0.0   1.640520 171.916136   1.640520 2.122482 1184.285156 1183.742188   7   7 1.0    0       49     55     6         6       31      36 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            2
 23   1   6   6 1.606641   0.515841 0.0   2.122482 174.038618   2.122482 4.028551 1189.175781 1189.996094   9   9 1.0    0       56     64     6         6       37      42 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 23   1   7   7 3.070818   0.957733 0.0   4.028551 178.067170   4.028551 2.008692 1208.867188 1211.648438  16  16 1.0    0       65     80     6         6       43      48 2.666667 2.666667 2.422120 2.422120 0.908295 0.908295  0.313379  0.313379            0            0
 23   1   8   8 1.534586   0.474106 0.0   2.008692 180.075861   2.008692 0.000000 1190.089844 1188.117188   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 24   3   1   1 3.675259 125.230648 0.0 128.905907 128.905907 128.905907 0.000000 1192.925781 1194.917969  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   2   1   1 5.076442   6.275573 0.0  11.352015 140.257922 140.257922 3.036608 1248.386719 1264.523438  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.409915 2.409915 0.963966 0.963966  0.535180  0.535180            0            3
 24   2   2   2 2.235945   0.800664 0.0   3.036608 143.294530   3.036608 0.000000 1211.414062 1212.816406  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 24   1   1   1 3.022871   0.975183 0.0   3.998054 144.255976 144.255976 6.244446 1185.968750 1187.710938  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 24   1   2   2 2.341993   0.865845 0.0   3.207838 150.500422   6.244446 3.167874 1193.875000 1203.710938  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 0.527046 0.527046 0.364878 0.364878  0.807332  0.807332            0            0
 24   1   3   3 2.331354   0.836520 0.0   3.167874 153.668295   3.167874 3.959777 1200.003906 1209.996094  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.881917 0.881917 0.610558 0.610558  0.712232  0.712232            0            3
 24   1   4   4 2.796330   1.163447 0.0   3.959777 157.628073   3.959777 1.788831 1210.828125 1217.210938  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
 24   1   5   5 1.413736   0.375095 0.0   1.788831 159.416904   1.788831 1.848446 1184.917969 1188.039062   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 24   1   6   6 1.448789   0.399657 0.0   1.848446 161.265350   1.848446 1.609577 1187.710938 1189.242188   8   8 1.0    0       66     73     5         5       41      45 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            2
 24   1   7   7 1.246644   0.362933 0.0   1.609577 162.874927   1.609577 1.582095 1188.781250 1191.535156   7   7 1.0    0       74     80     5         5       46      50 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 24   1   8   8 1.241080   0.341015 0.0   1.582095 164.457022   1.582095 0.000000 1189.843750 1191.578125   7   7 1.0    0       81     87     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
 25   3   1   1 3.662447 151.575428 0.0 155.237876 155.237876 155.237876 0.000000 1217.652344 1220.312500  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   2   1   1 4.060027   3.731922 0.0   7.791949 163.029825 163.029825 4.418193 1299.074219 1321.191406  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.537629 2.537629 1.184227 1.184227  0.521247  0.521247            0            4
 25   2   2   2 3.139916   1.278277 0.0   4.418193 167.448017   4.418193 0.000000 1280.007812 1286.214844  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.046536 1.046536 0.627922 0.627922  0.735548  0.735548            0            0
 25   1   1   1 2.821311   0.861465 0.0   3.682776 166.712601 166.712601 6.965877 1247.031250 1256.195312  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 25   1   2   2 1.950297   0.597388 0.0   2.547684 173.678478   6.965877 3.052852 1233.621094 1234.242188  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 25   1   3   3 2.304340   0.748513 0.0   3.052852 176.731331   3.052852 2.464167 1245.714844 1250.632812  13  13 1.0    0       27     39     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 25   1   4   4 1.702367   0.761800 0.0   2.464167 179.195497   2.464167 2.668241 1243.800781 1241.835938  10  10 1.0    0       40     49     8         8       23      30 1.250000 1.250000 0.462910 0.462910 0.370328 0.370328  0.817053  0.817053            0            3
 25   1   5   5 2.030566   0.637675 0.0   2.668241 181.863738   2.668241 2.310228 1248.160156 1246.343750  11  11 1.0    0       50     60     6         6       31      36 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 25   1   6   6 1.771243   0.538985 0.0   2.310228 184.173966   2.310228 1.877917 1243.707031 1245.539062  10  10 1.0    0       61     70     6         6       37      42 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 25   1   7   7 1.395299   0.482618 0.0   1.877917 186.051884   1.877917 2.085167 1244.566406 1242.609375   8   8 1.0    0       71     78     6         6       43      48 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            2
 25   1   8   8 1.540513   0.544654 0.0   2.085167 188.137051   2.085167 0.000000 1245.472656 1247.855469   9   9 1.0    0       79     87     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 26   3   1   1 3.654475 144.046023 0.0 147.700498 147.700498 147.700498 0.000000 1248.187500 1250.410156  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   2   1   1 5.044043  10.390061 0.0  15.434105 163.134602 163.134602 3.020505 1345.234375 1359.816406  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.345208 2.345208 0.938083 0.938083  0.542439  0.542439            0            3
 26   2   2   2 2.235436   0.785069 0.0   3.020505 166.155107   3.020505 0.000000 1296.507812 1294.988281  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 26   1   1   1 2.987351   0.994659 0.0   3.982010 167.116612 167.116612 6.189337 1283.449219 1281.324219  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 26   1   2   2 2.322444   0.846389 0.0   3.168832 173.305950   6.189337 3.153740 1284.859375 1291.613281  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 1.333333 1.333333 0.923077 0.923077  0.614378  0.614378            0            0
 26   1   3   3 2.330669   0.823071 0.0   3.153740 176.459690   3.153740 3.736215 1288.906250 1295.367188  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            3
 26   1   4   4 2.788399   0.947816 0.0   3.736215 180.195905   3.736215 1.748625 1297.210938 1300.035156  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
 26   1   5   5 1.400996   0.347629 0.0   1.748625 181.944530   1.748625 1.856858 1266.519531 1264.132812   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 26   1   6   6 1.446305   0.410553 0.0   1.856858 183.801388   1.856858 1.577412 1270.433594 1269.671875   8   8 1.0    0       66     73     5         5       41      45 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            2
 26   1   7   7 1.244712   0.332700 0.0   1.577412 185.378800   1.577412 1.550533 1269.917969 1270.179688   7   7 1.0    0       74     80     5         5       46      50 1.400000 1.400000 0.894427 0.894427 0.638877 0.638877  0.603019  0.603019            0            2
 26   1   8   8 1.234630   0.315902 0.0   1.550533 186.929333   1.550533 0.000000 1269.203125 1269.085938   7   7 1.0    0       81     87     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
 27   3   1   1 3.659901 150.886914 0.0 154.546815 154.546815 154.546815 0.000000 1275.585938 1277.660156  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   2   1   1 4.077486   2.828568 0.0   6.906054 161.452869 161.452869 4.371235 1361.523438 1383.195312  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.413333 2.413333 1.126222 1.126222  0.534800  0.534800            0            4
 27   2   2   2 3.136599   1.234636 0.0   4.371235 165.824104   4.371235 0.000000 1337.828125 1344.324219  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.234427 1.234427 0.740656 0.740656  0.703113  0.703113            0            0
 27   1   1   1 2.840243   1.930156 0.0   4.770399 166.223268 166.223268 7.195341 1306.628906 1314.261719  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 27   1   2   2 2.177175   0.646931 0.0   2.824106 173.418609   7.195341 2.787288 1292.867188 1291.800781  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.951190 0.951190 0.554861 0.554861  0.656490  0.656490            0            0
 27   1   3   3 2.082667   0.704621 0.0   2.787288 176.205897   2.787288 2.462975 1300.089844 1306.035156  12  12 1.0    0       28     39     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 27   1   4   4 1.707056   0.755918 0.0   2.462975 178.668872   2.462975 2.166248 1299.140625 1297.062500  10  10 1.0    0       40     49     8         8       23      30 1.250000 1.250000 0.462910 0.462910 0.370328 0.370328  0.817053  0.817053            0            3
 27   1   5   5 1.611835   0.554414 0.0   2.166248 180.835120   2.166248 4.119591 1229.625000 1236.089844   9   9 1.0    0       50     58     6         6       31      36 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 27   1   6   6 3.074937   1.044654 0.0   4.119591 184.954711   4.119591 1.866515 1260.867188 1266.609375  16  16 1.0    0       59     74     6         6       37      42 2.666667 2.666667 2.250926 2.250926 0.844097 0.844097  0.342021  0.342021            0            0
 27   1   7   7 1.386990   0.479525 0.0   1.866515 186.821226   1.866515 2.095328 1243.496094 1245.144531   8   8 1.0    0       75     82     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 27   1   8   8 1.546332   0.548996 0.0   2.095328 188.916554   2.095328 0.000000 1246.746094 1252.414062   9   9 1.0    0       83     91     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 28   3   1   1 3.663371 131.775586 0.0 135.438957 135.438957 135.438957 0.000000 1298.519531 1302.421875  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   2   1   1 5.903552  12.171463 0.0  18.075015 153.513972 153.513972 2.300286 1407.250000 1414.234375  39  39 1.0   39        1     39    14        14        1      14 2.785714 2.785714 2.293086 2.293086 0.823159 0.823159  0.548390  0.548390            0            3
 28   2   2   2 1.592807   0.707479 0.0   2.300286 155.814258   2.300286 0.000000 1344.367188 1348.554688  16  16 1.0   16       40     55    15        15       15      29 1.066667 1.066667 0.258199 0.258199 0.242061 0.242061  0.915186  0.915186            0            0
 28   1   1   1 3.243856   2.214333 0.0   5.458190 158.972162 158.972162 7.502376 1346.101562 1345.562500  17  17 1.0    0        1     17     9         9        1       9 1.888889 1.888889 1.615893 1.615893 0.855473 0.855473  0.562354  0.562354            0            0
 28   1   2   2 3.473485   1.728606 0.0   5.202091 166.474538   7.502376 4.284281 1363.773438 1367.859375  18  18 1.0    0       18     35    10        10       10      19 1.800000 1.800000 1.032796 1.032796 0.573775 0.573775  0.691906  0.691906            0            0
 28   1   3   3 2.959296   1.324985 0.0   4.284281 170.758819   4.284281 5.196541 1356.742188 1362.597656  16  16 1.0    0       36     51    10        10       20      29 1.600000 1.600000 1.074968 1.074968 0.671855 0.671855  0.682989  0.682989            0            2
 28   1   4   4 3.656250   1.540291 0.0   5.196541 175.955360   5.196541 1.363065 1366.535156 1367.894531  19  19 1.0    0       52     70    10        10       30      39 1.900000 1.900000 1.911951 1.911951 1.006290 1.006290  0.535816  0.535816            0            1
 28   1   5   5 1.081033   0.282033 0.0   1.363065 177.318425   1.363065 1.127168 1317.593750 1317.394531   6   6 1.0    0       71     76     4         4       40      43 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 28   1   6   6 0.888701   0.238466 0.0   1.127168 178.445593   1.127168 1.107693 1311.000000 1309.074219   5   5 1.0    0       77     81     4         4       44      47 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 28   1   7   7 0.883568   0.224125 0.0   1.107693 179.553286   1.107693 1.074250 1312.593750 1310.644531   5   5 1.0    0       82     86     4         4       48      51 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 28   1   8   8 0.882599   0.191651 0.0   1.074250 180.627535   1.074250 0.000000 1312.269531 1310.398438   5   5 1.0    0       87     91     4         4       52      55 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 29   3   1   1 3.655365 124.471182 0.0 128.126546 128.126546 128.126546 0.000000 1330.308594 1332.355469  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   2   1   1 4.091548   3.492134 0.0   7.583682 135.710228 135.710228 5.753645 1410.527344 1433.449219  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.444999 2.444999 1.141000 1.141000  0.531301  0.531301            0            4
 29   2   2   2 3.157394   2.596251 0.0   5.753645 141.463873   5.753645 0.000000 1355.171875 1366.601562  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.112697 1.112697 0.667618 0.667618  0.723799  0.723799            0            0
 29   1   1   1 2.826463   0.858723 0.0   3.685185 139.395413 139.395413 9.147062 1358.066406 1367.187500  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 29   1   2   2 1.732234   1.661183 0.0   3.393417 148.542475   9.147062 2.782516 1273.183594 1281.707031  10  10 1.0    0       16     25     7         7        8      14 1.428571 1.428571 0.786796 0.786796 0.550757 0.550757  0.701721  0.701721            0            0
 29   1   3   3 2.089474   0.693043 0.0   2.782516 151.324992   2.782516 2.486880 1297.437500 1308.953125  12  12 1.0    0       26     37     8         8       15      22 1.500000 1.500000 0.755929 0.755929 0.503953 0.503953  0.729255  0.729255            0            1
 29   1   4   4 1.702789   0.784091 0.0   2.486880 153.811871   2.486880 1.860028 1302.593750 1305.289062  10  10 1.0    0       38     47     8         8       23      30 1.250000 1.250000 0.462910 0.462910 0.370328 0.370328  0.817053  0.817053            0            3
 29   1   5   5 1.403280   0.456748 0.0   1.860028 155.671899   1.860028 2.100830 1315.222656 1316.695312   8   8 1.0    0       48     55     6         6       31      36 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            2
 29   1   6   6 1.595613   0.505217 0.0   2.100830 157.772729   2.100830 4.174514 1322.058594 1326.453125   9   9 1.0    0       56     64     6         6       37      42 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 29   1   7   7 3.128527   1.045987 0.0   4.174514 161.947243   4.174514 2.016064 1344.058594 1350.027344  16  16 1.0    0       65     80     6         6       43      48 2.666667 2.666667 2.338090 2.338090 0.876784 0.876784  0.327254  0.327254            0            0
 29   1   8   8 1.542956   0.473108 0.0   2.016064 163.963307   2.016064 0.000000 1325.554688 1327.531250   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 30   3   1   1 3.666541 142.131857 0.0 145.798398 145.798398 145.798398 0.000000 1358.761719 1361.710938  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   2   1   1 3.854555   2.243361 0.0   6.097917 151.896315 151.896315 6.025687 1436.718750 1460.292969  29  29 1.0   29        1     29    14        14        1      14 2.071429 2.071429 2.525692 2.525692 1.219300 1.219300  0.522528  0.522528            0            4
 30   2   2   2 3.347007   2.678680 0.0   6.025687 157.922001   6.025687 0.000000 1425.156250 1431.015625  26  26 1.0   26       30     55    15        15       15      29 1.733333 1.733333 1.279881 1.279881 0.738393 0.738393  0.695677  0.695677            0            0
 30   1   1   1 2.822502   0.846384 0.0   3.668886 155.565201 155.565201 8.569957 1389.300781 1399.375000  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 30   1   2   2 1.949849   0.594422 0.0   2.544270 164.135158   8.569957 4.011243 1375.964844 1377.156250  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.975900 0.975900 0.621027 0.621027  0.650023  0.650023            0            0
 30   1   3   3 2.146126   1.865118 0.0   4.011243 168.146401   4.011243 2.715106 1385.386719 1388.511719  12  12 1.0    0       27     38     7         7       15      21 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 30   1   4   4 1.914404   0.800701 0.0   2.715106 170.861507   2.715106 1.646657 1392.015625 1398.562500  11  11 1.0    0       39     49     8         8       22      29 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            3
 30   1   5   5 1.195935   0.450721 0.0   1.646657 172.508163   1.646657 2.181001 1381.933594 1381.250000   7   7 1.0    0       50     56     6         6       30      35 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            2
 30   1   6   6 1.613271   0.567730 0.0   2.181001 174.689165   2.181001 3.737054 1388.550781 1389.414062   9   9 1.0    0       57     65     6         6       36      41 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 30   1   7   7 2.793097   0.943957 0.0   3.737054 178.426219   3.737054 2.052899 1404.773438 1403.921875  15  15 1.0    0       66     80     7         7       42      48 2.142857 2.142857 1.463850 1.463850 0.683130 0.683130  0.536605  0.536605            0            0
 30   1   8   8 1.534572   0.518327 0.0   2.052899 180.479117   2.052899 0.000000 1387.578125 1385.972656   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 31   3   1   1 3.658267 138.365380 0.0 142.023647 142.023647 142.023647 0.000000 1389.269531 1391.593750  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   2   1   1 5.035064   6.400448 0.0  11.435512 153.459159 153.459159 3.107730 1445.011719 1464.632812  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.345208 2.345208 0.938083 0.938083  0.542439  0.542439            0            3
 31   2   2   2 2.242987   0.864743 0.0   3.107730 156.566889   3.107730 0.000000 1407.023438 1411.269531  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 31   1   1   1 2.968258   0.946193 0.0   3.914451 157.373610 157.373610 6.821706 1383.042969 1388.351562  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 31   1   2   2 2.767356   0.946620 0.0   3.713976 164.195316   6.821706 3.187395 1396.726562 1405.250000  15  15 1.0    0       17     31     9         9        9      17 1.666667 1.666667 1.118034 1.118034 0.670820 0.670820  0.658438  0.658438            0            0
 31   1   3   3 2.324963   0.862432 0.0   3.187395 167.382711   3.187395 5.271865 1399.292969 1411.355469  13  13 1.0    0       32     44     9         9       18      26 1.444444 1.444444 0.881917 0.881917 0.610558 0.610558  0.712232  0.712232            0            2
 31   1   4   4 2.811401   2.460465 0.0   5.271865 172.654576   5.271865 1.811562 1405.496094 1414.503906  15  15 1.0    0       45     59     9         9       27      35 1.666667 1.666667 1.118034 1.118034 0.670820 0.670820  0.658438  0.658438            0            1
 31   1   5   5 1.415509   0.396053 0.0   1.811562 174.466138   1.811562 2.111095 1381.171875 1386.843750   8   8 1.0    0       60     67     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 31   1   6   6 1.645577   0.465519 0.0   2.111095 176.577233   2.111095 1.363627 1385.382812 1388.363281   9   9 1.0    0       68     76     5         5       41      45 1.800000 1.800000 1.788854 1.788854 0.993808 0.993808  0.362740  0.362740            0            2
 31   1   7   7 1.040076   0.323551 0.0   1.363627 177.940860   1.363627 1.556274 1384.117188 1386.417969   6   6 1.0    0       77     82     5         5       46      50 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 31   1   8   8 1.242065   0.314209 0.0   1.556274 179.497134   1.556274 0.000000 1386.734375 1390.949219   7   7 1.0    0       83     89     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
 32   3   1   1 3.663811 142.167656 0.0 145.831467 145.831467 145.831467 0.000000 1416.886719 1419.984375  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   2   1   1 5.878436  11.436019 0.0  17.314455 163.145922 163.145922 3.576740 1524.445312 1531.531250  39  39 1.0   39        1     39    14        14        1      14 2.785714 2.785714 2.547354 2.547354 0.914435 0.914435  0.520207  0.520207            0            3
 32   2   2   2 1.591929   1.984811 0.0   3.576740 166.722662   3.576740 0.000000 1459.472656 1463.765625  16  16 1.0   16       40     55    15        15       15      29 1.066667 1.066667 0.258199 0.258199 0.242061 0.242061  0.915186  0.915186            0            0
 32   1   1   1 3.209631   1.067781 0.0   4.277413 167.423335 167.423335 7.941983 1460.757812 1461.523438  17  17 1.0    0        1     17     9         9        1       9 1.888889 1.888889 1.615893 1.615893 0.855473 0.855473  0.562354  0.562354            0            0
 32   1   2   2 2.972735   1.392509 0.0   4.365243 175.365319   7.941983 4.350273 1464.445312 1469.992188  16  16 1.0    0       18     33    10        10       10      19 1.600000 1.600000 0.966092 0.966092 0.603807 0.603807  0.706396  0.706396            0            0
 32   1   3   3 2.964711   1.385561 0.0   4.350273 179.715591   4.350273 5.315862 1471.222656 1476.765625  16  16 1.0    0       34     49    10        10       20      29 1.600000 1.600000 1.074968 1.074968 0.671855 0.671855  0.682989  0.682989            0            2
 32   1   4   4 3.645920   1.669942 0.0   5.315862 185.031454   5.315862 1.124062 1478.699219 1479.984375  19  19 1.0    0       50     68    10        10       30      39 1.900000 1.900000 1.595131 1.595131 0.839543 0.839543  0.585841  0.585841            0            1
 32   1   5   5 0.890605   0.233458 0.0   1.124062 186.155516   1.124062 1.365903 1425.953125 1424.507812   5   5 1.0    0       69     73     4         4       40      43 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 32   1   6   6 1.090210   0.275694 0.0   1.365903 187.521419   1.365903 1.123511 1433.644531 1433.593750   6   6 1.0    0       74     79     4         4       44      47 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            1
 32   1   7   7 0.884724   0.238787 0.0   1.123511 188.644930   1.123511 1.071310 1426.824219 1425.003906   5   5 1.0    0       80     84     4         4       48      51 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 32   1   8   8 0.878975   0.192335 0.0   1.071310 189.716240   1.071310 0.000000 1427.503906 1425.757812   5   5 1.0    0       85     89     4         4       52      55 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 33   3   1   1 3.665468 149.985332 0.0 153.650800 153.650800 153.650800 0.000000 1445.656250 1448.593750  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   2   1   1 4.048758   2.865296 0.0   6.914054 160.564853 160.564853 5.910890 1526.781250 1549.507812  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.444999 2.444999 1.141000 1.141000  0.531301  0.531301            0            4
 33   2   2   2 3.156415   2.754475 0.0   5.910890 166.475743   5.910890 0.000000 1504.296875 1511.558594  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.779580  0.779580            0            0
 33   1   1   1 2.816945   0.868586 0.0   3.685531 164.250384 164.250384 8.162079 1472.238281 1481.644531  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 33   1   2   2 1.723116   0.528074 0.0   2.251189 172.412464   8.162079 3.064844 1453.925781 1458.312500  10  10 1.0    0       16     25     7         7        8      14 1.428571 1.428571 1.133893 1.133893 0.793725 0.793725  0.610492  0.610492            0            0
 33   1   3   3 2.302814   0.762031 0.0   3.064844 175.477308   3.064844 2.173841 1469.917969 1474.972656  13  13 1.0    0       26     38     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 33   1   4   4 1.492969   0.680873 0.0   2.173841 177.651149   2.173841 1.837906 1461.781250 1461.457031   9   9 1.0    0       39     47     8         8       23      30 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            3
 33   1   5   5 1.398568   0.439338 0.0   1.837906 179.489055   1.837906 2.626298 1463.539062 1466.199219   8   8 1.0    0       48     55     6         6       31      36 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.666858  0.666858            0            2
 33   1   6   6 2.021449   0.604849 0.0   2.626298 182.115353   2.626298 2.275630 1470.015625 1468.015625  11  11 1.0    0       56     66     6         6       37      42 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 33   1   7   7 1.763497   0.512133 0.0   2.275630 184.390983   2.275630 2.005321 1466.769531 1468.433594  10  10 1.0    0       67     76     6         6       43      48 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 33   1   8   8 1.532410   0.472911 0.0   2.005321 186.396304   2.005321 0.000000 1467.269531 1465.355469   9   9 1.0    0       77     85     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 34   3   1   1 3.662466 157.147706 0.0 160.810171 160.810171 160.810171 0.000000 1469.906250 1472.910156  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   2   1   1 4.059387   2.599442 0.0   6.658829 167.469001 167.469001 4.659733 1555.261719 1577.312500  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.537629 2.537629 1.184227 1.184227  0.521247  0.521247            0            4
 34   2   2   2 3.160874   1.498859 0.0   4.659733 172.128733   4.659733 0.000000 1529.011719 1534.792969  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.046536 1.046536 0.627922 0.627922  0.735548  0.735548            0            0
 34   1   1   1 2.857233   0.906141 0.0   3.763375 171.232375 171.232375 6.672553 1501.292969 1509.585938  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 34   1   2   2 1.526081   0.486740 0.0   2.012821 177.904929   6.672553 3.058895 1481.238281 1480.167969   9   9 1.0    0       16     24     7         7        8      14 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 34   1   3   3 2.297262   0.761634 0.0   3.058895 180.963824   3.058895 2.722085 1498.378906 1503.707031  13  13 1.0    0       25     37     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 34   1   4   4 1.900400   0.821685 0.0   2.722085 183.685908   2.722085 1.650595 1501.781250 1507.957031  11  11 1.0    0       38     48     8         8       23      30 1.375000 1.375000 0.744024 0.744024 0.541108 0.541108  0.732527  0.732527            0            3
 34   1   5   5 1.196374   0.454222 0.0   1.650595 185.336504   1.650595 2.674300 1417.320312 1422.890625   7   7 1.0    0       49     55     6         6       31      36 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 34   1   6   6 2.031646   0.642654 0.0   2.674300 188.010803   2.674300 2.323631 1439.531250 1444.472656  11  11 1.0    0       56     66     6         6       37      42 1.833333 1.833333 0.983192 0.983192 0.536287 0.536287  0.617857  0.617857            0            0
 34   1   7   7 1.777237   0.546394 0.0   2.323631 190.334434   2.323631 2.024173 1437.472656 1444.933594  10  10 1.0    0       67     76     6         6       43      48 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            1
 34   1   8   8 1.552246   0.471927 0.0   2.024173 192.358608   2.024173 0.000000 1441.128906 1444.828125   9   9 1.0    0       77     85     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 35   3   1   1 3.664783 140.504236 0.0 144.169019 144.169019 144.169019 0.000000 1493.136719 1497.996094  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   2   1   1 4.092336   2.901140 0.0   6.993476 151.162495 151.162495 5.873026 1579.886719 1603.136719  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.444999 2.444999 1.141000 1.141000  0.531301  0.531301            0            4
 35   2   2   2 3.164169   2.708857 0.0   5.873026 157.035521   5.873026 0.000000 1556.632812 1564.253906  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.112697 1.112697 0.667618 0.667618  0.723799  0.723799            0            0
 35   1   1   1 2.833064   0.873062 0.0   3.706126 154.868621 154.868621 9.503602 1526.734375 1535.800781  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 35   1   2   2 1.722828   1.907748 0.0   3.630576 164.372224   9.503602 3.070344 1508.636719 1512.769531  10  10 1.0    0       16     25     7         7        8      14 1.428571 1.428571 1.133893 1.133893 0.793725 0.793725  0.610492  0.610492            0            0
 35   1   3   3 2.308591   0.761753 0.0   3.070344 167.442567   3.070344 2.174867 1525.011719 1531.019531  13  13 1.0    0       26     38     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 35   1   4   4 1.491683   0.683183 0.0   2.174867 169.617434   2.174867 1.855960 1517.718750 1518.265625   9   9 1.0    0       39     47     8         8       23      30 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            3
 35   1   5   5 1.399088   0.456873 0.0   1.855960 171.473394   1.855960 2.115826 1520.203125 1523.621094   8   8 1.0    0       48     55     6         6       31      36 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 35   1   6   6 1.603253   0.512574 0.0   2.115826 173.589221   2.115826 4.010380 1523.117188 1524.839844   9   9 1.0    0       56     64     6         6       37      42 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 35   1   7   7 3.077280   0.933100 0.0   4.010380 177.599601   4.010380 2.022817 1542.351562 1545.992188  16  16 1.0    0       65     80     6         6       43      48 2.666667 2.666667 3.614784 3.614784 1.355544 1.355544  0.146501  0.146501            0            0
 35   1   8   8 1.544498   0.478318 0.0   2.022817 179.622417   2.022817 0.000000 1523.765625 1522.769531   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 36   3   1   1 3.656275 106.537814 0.0 110.194090 110.194090 110.194090 0.000000 1526.570312 1529.187500  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   2   1   1 3.858706   2.126129 0.0   5.984835 116.178925 116.178925 7.154398 1597.332031 1620.511719  29  29 1.0   29        1     29    14        14        1      14 2.071429 2.071429 2.525692 2.525692 1.219300 1.219300  0.522528  0.522528            0            4
 36   2   2   2 3.360418   3.793979 0.0   7.154398 123.333322   7.154398 0.000000 1589.355469 1594.777344  26  26 1.0   26       30     55    15        15       15      29 1.733333 1.733333 0.883715 0.883715 0.509836 0.509836  0.766162  0.766162            0            0
 36   1   1   1 2.818460   0.846039 0.0   3.664499 119.843424 119.843424 9.701599 1552.062500 1561.906250  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 36   1   2   2 1.957657   0.589544 0.0   2.547201 129.545023   9.701599 2.798919 1539.382812 1540.203125  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 36   1   3   3 2.147578   0.651341 0.0   2.798919 132.343941   2.798919 2.720784 1547.675781 1550.558594  12  12 1.0    0       27     38     7         7       15      21 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 36   1   4   4 1.917401   0.803383 0.0   2.720784 135.064725   2.720784 3.091176 1554.226562 1560.605469  11  11 1.0    0       39     49     8         8       22      29 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            3
 36   1   5   5 1.197899   1.893277 0.0   3.091176 138.155901   3.091176 2.100215 1544.605469 1543.390625   7   7 1.0    0       50     56     6         6       30      35 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            2
 36   1   6   6 1.600850   0.499365 0.0   2.100215 140.256116   2.100215 3.761623 1547.855469 1549.164062   9   9 1.0    0       57     65     6         6       36      41 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 36   1   7   7 2.805124   0.956499 0.0   3.761623 144.017740   3.761623 2.010064 1565.917969 1565.082031  15  15 1.0    0       66     80     7         7       42      48 2.142857 2.142857 2.193063 2.193063 1.023429 1.023429  0.403374  0.403374            0            0
 36   1   8   8 1.539485   0.470579 0.0   2.010064 146.027804   2.010064 0.000000 1548.656250 1546.984375   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 37   3   1   1 3.668270 121.598700 0.0 125.266970 125.266970 125.266970 0.000000 1550.839844 1553.468750  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   2   1   1 4.050046   2.769159 0.0   6.819204 132.086174 132.086174 5.867193 1628.082031 1649.175781  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.381245 2.381245 1.111248 1.111248  0.538379  0.538379            0            4
 37   2   2   2 3.168036   2.699157 0.0   5.867193 137.953368   5.867193 0.000000 1611.851562 1619.039062  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.046536 1.046536 0.627922 0.627922  0.735548  0.735548            0            0
 37   1   1   1 2.825698   0.871363 0.0   3.697061 135.783236 135.783236 8.413955 1579.164062 1588.789062  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 37   1   2   2 1.951282   0.595480 0.0   2.546762 144.197191   8.413955 3.361459 1566.527344 1567.515625  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.975900 0.975900 0.621027 0.621027  0.650023  0.650023            0            0
 37   1   3   3 2.531647   0.829812 0.0   3.361459 147.558650   3.361459 2.490355 1582.402344 1585.949219  14  14 1.0    0       27     40     8         8       15      22 1.750000 1.750000 0.707107 0.707107 0.404061 0.404061  0.742816  0.742816            0            1
 37   1   4   4 1.702712   0.787643 0.0   2.490355 150.049005   2.490355 1.675768 1575.457031 1574.277344  10  10 1.0    0       41     50     8         8       23      30 1.250000 1.250000 0.707107 0.707107 0.565685 0.565685  0.742816  0.742816            0            3
 37   1   5   5 1.201421   0.474347 0.0   1.675768 151.724773   1.675768 2.103452 1573.531250 1572.078125   7   7 1.0    0       51     57     6         6       31      36 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            2
 37   1   6   6 1.602001   0.501451 0.0   2.103452 153.828225   2.103452 4.101992 1576.500000 1577.199219   9   9 1.0    0       58     66     6         6       37      42 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 37   1   7   7 3.079780   1.022212 0.0   4.101992 157.930217   4.101992 2.015297 1595.996094 1599.050781  16  16 1.0    0       67     82     6         6       43      48 2.666667 2.666667 3.614784 3.614784 1.355544 1.355544  0.146501  0.146501            0            0
 37   1   8   8 1.544289   0.471009 0.0   2.015297 159.945514   2.015297 0.000000 1577.304688 1575.582031   9   9 1.0    0       83     91     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 38   3   1   1 3.658463 141.515251 0.0 145.173713 145.173713 145.173713 0.000000 1579.949219 1582.886719  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   2   1   1 4.050638   2.500975 0.0   6.551612 151.725326 151.725326 4.463369 1656.429688 1678.441406  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.413333 2.413333 1.126222 1.126222  0.534800  0.534800            0            4
 38   2   2   2 3.148011   1.315358 0.0   4.463369 156.188695   4.463369 0.000000 1636.027344 1642.441406  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.046536 1.046536 0.627922 0.627922  0.735548  0.735548            0            0
 38   1   1   1 2.847606   0.876610 0.0   3.724216 155.449542 155.449542 6.717051 1607.941406 1616.371094  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 38   1   2   2 1.722062   0.531619 0.0   2.253682 162.166592   6.717051 3.073264 1590.023438 1594.253906  10  10 1.0    0       16     25     7         7        8      14 1.428571 1.428571 0.786796 0.786796 0.550757 0.550757  0.701721  0.701721            0            0
 38   1   3   3 2.300628   0.772637 0.0   3.073264 165.239857   3.073264 2.182778 1606.007812 1611.175781  13  13 1.0    0       26     38     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 38   1   4   4 1.488239   0.694539 0.0   2.182778 167.422634   2.182778 2.141136 1598.636719 1598.453125   9   9 1.0    0       39     47     8         8       23      30 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            3
 38   1   5   5 1.598435   0.542701 0.0   2.141136 169.563770   2.141136 4.101634 1601.710938 1602.585938   9   9 1.0    0       48     56     6         6       31      36 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 38   1   6   6 3.082355   1.019278 0.0   4.101634 173.665404   4.101634 1.860169 1621.343750 1624.246094  16  16 1.0    0       57     72     6         6       37      42 2.666667 2.666667 3.141125 3.141125 1.177922 1.177922  0.206943  0.206943            0            0
 38   1   7   7 1.378125   0.482044 0.0   1.860169 175.525573   1.860169 2.093210 1603.273438 1601.554688   8   8 1.0    0       73     80     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 38   1   8   8 1.542520   0.550690 0.0   2.093210 177.618783   2.093210 0.000000 1604.226562 1606.664062   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 39   3   1   1 3.647801 136.101189 0.0 139.748990 139.748990 139.748990 0.000000 1606.656250 1609.394531  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   2   1   1 5.073988  10.756086 0.0  15.830075 155.579064 155.579064 3.038065 1704.246094 1719.039062  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.534379 2.534379 1.013752 1.013752  0.521595  0.521595            0            3
 39   2   2   2 2.224892   0.813173 0.0   3.038065 158.617130   3.038065 0.000000 1659.238281 1658.855469  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 39   1   1   1 3.014932   0.966605 0.0   3.981537 159.560601 159.560601 6.200480 1641.761719 1641.031250  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 39   1   2   2 2.334282   0.828133 0.0   3.162414 165.761081   6.200480 3.210065 1646.074219 1653.988281  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 1.013794 1.013794 0.701857 0.701857  0.681407  0.681407            0            0
 39   1   3   3 2.333557   0.876508 0.0   3.210065 168.971146   3.210065 5.392050 1651.781250 1659.921875  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.881917 0.881917 0.610558 0.610558  0.712232  0.712232            0            2
 39   1   4   4 2.786536   2.605514 0.0   5.392050 174.363196   5.392050 1.763213 1661.976562 1665.785156  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 1.118034 1.118034 0.670820 0.670820  0.658438  0.658438            0            1
 39   1   5   5 1.411975   0.351237 0.0   1.763213 176.126409   1.763213 1.856893 1627.972656 1626.261719   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 39   1   6   6 1.444775   0.412118 0.0   1.856893 177.983302   1.856893 1.846895 1631.675781 1631.789062   8   8 1.0    0       66     73     5         5       41      45 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            2
 39   1   7   7 1.440980   0.405914 0.0   1.846895 179.830197   1.846895 1.322943 1634.863281 1634.574219   8   8 1.0    0       74     81     5         5       46      50 1.600000 1.600000 0.547723 0.547723 0.342327 0.342327  0.728611  0.728611            0            1
 39   1   8   8 1.048637   0.274306 0.0   1.322943 181.153140   1.322943 0.000000 1629.660156 1628.386719   6   6 1.0    0       82     87     5         5       51      55 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            0
 40   3   1   1 3.684183 168.057909 0.0 171.742092 171.742092 171.742092 0.000000 1636.859375 1639.785156  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   2   1   1 5.035522  10.477473 0.0  15.512995 187.255087 187.255087 3.005905 1737.863281 1752.453125  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.278664 2.278664 0.911465 0.911465  0.550053  0.550053            0            3
 40   2   2   2 2.220378   0.785527 0.0   3.005905 190.260992   3.005905 0.000000 1637.500000 1640.300781  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.816497 0.816497 0.612372 0.612372  0.779580  0.779580            0            0
 40   1   1   1 2.994844   0.976969 0.0   3.971813 191.226900 191.226900 6.225420 1600.750000 1601.539062  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 40   1   2   2 2.314486   0.905029 0.0   3.219515 197.452320   6.225420 3.190184 1615.718750 1625.570312  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 1.333333 1.333333 0.923077 0.923077  0.614378  0.614378            0            0
 40   1   3   3 2.333926   0.856258 0.0   3.190184 200.642504   3.190184 3.768041 1624.078125 1634.613281  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            3
 40   1   4   4 2.797065   0.970976 0.0   3.768041 204.410545   3.768041 1.756425 1635.363281 1642.589844  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
 40   1   5   5 1.403231   0.353193 0.0   1.756425 206.166970   1.756425 2.107524 1609.921875 1611.660156   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 40   1   6   6 1.657248   0.450276 0.0   2.107524 208.274493   2.107524 2.920133 1618.023438 1619.750000   9   9 1.0    0       66     74     5         5       41      45 1.800000 1.800000 1.788854 1.788854 0.993808 0.993808  0.362740  0.362740            0            2
 40   1   7   7 1.041633   1.878500 0.0   2.920133 211.194626   2.920133 1.559355 1615.878906 1617.175781   6   6 1.0    0       75     80     5         5       46      50 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 40   1   8   8 1.238643   0.320712 0.0   1.559355 212.753981   1.559355 0.000000 1619.460938 1622.289062   7   7 1.0    0       81     87     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
 41   3   1   1 3.660424 149.131199 0.0 152.791622 152.791622 152.791622 0.000000 1661.335938 1665.406250  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   2   1   1 5.055908   6.960610 0.0  12.016518 164.808140 164.808140 3.017282 1761.375000 1777.343750  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.534379 2.534379 1.013752 1.013752  0.521595  0.521595            0            3
 41   2   2   2 2.234822   0.782461 0.0   3.017282 167.825423   3.017282 0.000000 1711.859375 1711.753906  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 41   1   1   1 2.987551   0.962742 0.0   3.950294 168.758434 168.758434 6.204091 1694.457031 1693.757812  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 41   1   2   2 2.329119   0.857689 0.0   3.186809 174.962525   6.204091 3.162000 1699.019531 1706.968750  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            0
 41   1   3   3 2.324477   0.837523 0.0   3.162000 178.124525   3.162000 3.943334 1703.792969 1711.714844  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            2
 41   1   4   4 2.805232   1.138102 0.0   3.943334 182.067859   3.943334 1.800092 1713.578125 1718.121094  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 0.707107 0.707107 0.424264 0.424264  0.756602  0.756602            0            1
 41   1   5   5 1.421805   0.378287 0.0   1.800092 183.867951   1.800092 1.857557 1683.273438 1684.917969   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 41   1   6   6 1.445711   0.411845 0.0   1.857557 185.725508   1.857557 1.605845 1685.429688 1685.929688   8   8 1.0    0       66     73     5         5       41      45 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            2
 41   1   7   7 1.244278   0.361566 0.0   1.605845 187.331353   1.605845 1.555937 1685.984375 1688.046875   7   7 1.0    0       74     80     5         5       46      50 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            2
 41   1   8   8 1.237535   0.318402 0.0   1.555937 188.887289   1.555937 0.000000 1685.179688 1686.160156   7   7 1.0    0       81     87     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
 42   3   1   1 3.663043 149.350804 0.0 153.013847 153.013847 153.013847 0.000000 1690.941406 1694.183594  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   2   1   1 5.045686   7.185879 0.0  12.231566 165.245413 165.245413 3.111940 1785.074219 1799.800781  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.312175 2.312175 0.924870 0.924870  0.546200  0.546200            0            3
 42   2   2   2 2.240066   0.871874 0.0   3.111940 168.357352   3.111940 0.000000 1740.214844 1739.593750  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 42   1   1   1 2.984721   0.994018 0.0   3.978739 169.224152 169.224152 6.919716 1725.890625 1724.570312  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 42   1   2   2 2.771806   1.035970 0.0   3.807776 176.143867   6.919716 4.848102 1734.953125 1738.457031  15  15 1.0    0       17     31     9         9        9      17 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
 42   1   3   3 2.330183   2.517919 0.0   4.848102 180.991969   4.848102 3.870812 1732.546875 1739.871094  13  13 1.0    0       32     44     9         9       18      26 1.444444 1.444444 0.881917 0.881917 0.610558 0.610558  0.712232  0.712232            0            3
 42   1   4   4 2.793820   1.076992 0.0   3.870812 184.862781   3.870812 1.763282 1742.570312 1746.210938  15  15 1.0    0       45     59     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
 42   1   5   5 1.411689   0.351593 0.0   1.763282 186.626064   1.763282 2.113352 1708.984375 1707.445312   8   8 1.0    0       60     67     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 42   1   6   6 1.663339   0.450013 0.0   2.113352 188.739416   2.113352 1.367640 1715.027344 1713.621094   9   9 1.0    0       68     76     5         5       41      45 1.800000 1.800000 1.788854 1.788854 0.993808 0.993808  0.362740  0.362740            0            2
 42   1   7   7 1.040337   0.327303 0.0   1.367640 190.107055   1.367640 1.576200 1710.003906 1708.707031   6   6 1.0    0       77     82     5         5       46      50 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 42   1   8   8 1.237000   0.339200 0.0   1.576200 191.683255   1.576200 0.000000 1712.117188 1712.648438   7   7 1.0    0       83     89     5         5       51      55 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            0
 43   3   1   1 3.666886 103.376106 0.0 107.042992 107.042992 107.042992 0.000000 1717.320312 1719.773438  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   2   1   1 4.059086   2.482994 0.0   6.542079 113.585071 113.585071 4.446518 1801.445312 1824.261719  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.537629 2.537629 1.184227 1.184227  0.521247  0.521247            0            4
 43   2   2   2 3.154394   1.292123 0.0   4.446518 118.031589   4.446518 0.000000 1723.718750 1736.289062  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.046536 1.046536 0.627922 0.627922  0.735548  0.735548            0            0
 43   1   1   1 2.814704   0.865249 0.0   3.679953 117.265024 117.265024 6.452538 1748.437500 1758.042969  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 43   1   2   2 1.524971   0.481049 0.0   2.006020 123.717562   6.452538 3.054557 1729.710938 1728.957031   9   9 1.0    0       16     24     7         7        8      14 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 43   1   3   3 2.300922   0.753635 0.0   3.054557 126.772119   3.054557 2.484574 1746.792969 1752.253906  13  13 1.0    0       25     37     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 43   1   4   4 1.703783   0.780792 0.0   2.484574 129.256694   2.484574 2.137682 1667.703125 1670.437500  10  10 1.0    0       38     47     8         8       23      30 1.250000 1.250000 0.707107 0.707107 0.565685 0.565685  0.742816  0.742816            0            3
 43   1   5   5 1.610701   0.526981 0.0   2.137682 131.394376   2.137682 4.209876 1689.777344 1696.246094   9   9 1.0    0       48     56     6         6       31      36 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 43   1   6   6 3.104919   1.104957 0.0   4.209876 135.604252   4.209876 1.875111 1715.214844 1721.511719  16  16 1.0    0       57     72     6         6       37      42 2.666667 2.666667 3.141125 3.141125 1.177922 1.177922  0.206943  0.206943            0            0
 43   1   7   7 1.400790   0.474321 0.0   1.875111 137.479364   1.875111 2.021143 1696.699219 1703.210938   8   8 1.0    0       73     80     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 43   1   8   8 1.545866   0.475277 0.0   2.021143 139.500506   2.021143 0.000000 1697.410156 1699.179688   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 44   3   1   1 3.667982 152.342545 0.0 156.010527 156.010527 156.010527 0.000000 1743.757812 1748.125000  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   2   1   1 4.054596   4.210476 0.0   8.265072 164.275599 164.275599 4.519590 1825.148438 1848.917969  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.381245 2.381245 1.111248 1.111248  0.538379  0.538379            0            4
 44   2   2   2 3.146488   1.373103 0.0   4.519590 168.795189   4.519590 0.000000 1808.550781 1817.726562  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.234427 1.234427 0.740656 0.740656  0.703113  0.703113            0            0
 44   1   1   1 2.821326   0.854366 0.0   3.675692 167.951291 167.951291 6.536288 1773.656250 1784.433594  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 44   1   2   2 1.528245   0.488453 0.0   2.016698 174.487579   6.536288 3.362158 1754.414062 1754.593750   9   9 1.0    0       16     24     7         7        8      14 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 44   1   3   3 2.520287   0.841871 0.0   3.362158 177.849737   3.362158 2.154535 1775.480469 1779.914062  14  14 1.0    0       25     38     8         8       15      22 1.750000 1.750000 0.707107 0.707107 0.404061 0.404061  0.742816  0.742816            0            1
 44   1   4   4 1.495867   0.658668 0.0   2.154535 180.004271   2.154535 2.154639 1762.878906 1763.757812   9   9 1.0    0       39     47     8         8       23      30 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            3
 44   1   5   5 1.602589   0.552050 0.0   2.154639 182.158911   2.154639 4.212977 1769.386719 1772.992188   9   9 1.0    0       48     56     6         6       31      36 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 44   1   6   6 3.099957   1.113020 0.0   4.212977 186.371887   4.212977 1.908834 1791.976562 1795.742188  16  16 1.0    0       57     72     6         6       37      42 2.666667 2.666667 2.732520 2.732520 1.024695 1.024695  0.264922  0.264922            0            0
 44   1   7   7 1.404620   0.504214 0.0   1.908834 188.280722   1.908834 2.035569 1771.984375 1775.832031   8   8 1.0    0       73     80     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 44   1   8   8 1.560314   0.475255 0.0   2.035569 190.316291   2.035569 0.000000 1773.000000 1771.992188   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 45   3   1   1 3.683547 169.517240 0.0 173.200788 173.200788 173.200788 0.000000 1775.511719 1778.957031  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   2   1   1 4.064305   2.858144 0.0   6.922449 180.123236 180.123236 4.469821 1855.261719 1878.144531  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.444999 2.444999 1.141000 1.141000  0.531301  0.531301            0            4
 45   2   2   2 3.154413   1.315408 0.0   4.469821 184.593058   4.469821 0.000000 1789.546875 1801.535156  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 1.175139 1.175139 0.705084 0.705084  0.713043  0.713043            0            0
 45   1   1   1 2.841979   0.905207 0.0   3.747186 183.870422 183.870422 7.298716 1736.957031 1750.449219  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 45   1   2   2 2.169690   0.659205 0.0   2.828895 191.169138   7.298716 3.066603 1734.859375 1740.292969  12  12 1.0    0       16     27     7         7        8      14 1.714286 1.714286 0.951190 0.951190 0.554861 0.554861  0.656490  0.656490            0            0
 45   1   3   3 2.301177   0.765427 0.0   3.066603 194.235741   3.066603 2.147494 1749.300781 1759.425781  13  13 1.0    0       28     40     8         8       15      22 1.625000 1.625000 0.744024 0.744024 0.457861 0.457861  0.732527  0.732527            0            1
 45   1   4   4 1.494768   0.652726 0.0   2.147494 196.383236   2.147494 2.182850 1740.078125 1745.035156   9   9 1.0    0       41     49     8         8       23      30 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            3
 45   1   5   5 1.618014   0.564835 0.0   2.182850 198.566085   2.182850 4.206142 1756.937500 1763.105469   9   9 1.0    0       50     58     6         6       31      36 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            0
 45   1   6   6 3.097780   1.108362 0.0   4.206142 202.772227   4.206142 3.695929 1779.671875 1786.750000  16  16 1.0    0       59     74     6         6       37      42 2.666667 2.666667 3.204164 3.204164 1.201561 1.201561  0.198511  0.198511            0            0
 45   1   7   7 1.397164   2.298765 0.0   3.695929 206.468156   3.695929 2.018872 1760.531250 1767.792969   8   8 1.0    0       75     82     6         6       43      48 1.333333 1.333333 0.516398 0.516398 0.387298 0.387298  0.767638  0.767638            0            2
 45   1   8   8 1.549953   0.468918 0.0   2.018872 208.487028   2.018872 0.000000 1761.582031 1769.183594   9   9 1.0    0       83     91     7         7       49      55 1.285714 1.285714 0.487950 0.487950 0.379517 0.379517  0.795777  0.795777            0            0
 46   3   1   1 3.664710 127.717438 0.0 131.382148 131.382148 131.382148 0.000000 1800.296875 1804.941406  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   2   1   1 3.854185   2.094908 0.0   5.949093 137.331241 137.331241 7.038347 1874.148438 1898.886719  29  29 1.0   29        1     29    14        14        1      14 2.071429 2.071429 2.400778 2.400778 1.158996 1.158996  0.536196  0.536196            0            4
 46   2   2   2 3.349041   3.689307 0.0   7.038347 144.369589   7.038347 0.000000 1863.585938 1870.828125  26  26 1.0   26       30     55    15        15       15      29 1.733333 1.733333 0.798809 0.798809 0.460851 0.460851  0.783193  0.783193            0            0
 46   1   1   1 2.834461   0.903890 0.0   3.738351 141.069592 141.069592 9.577002 1829.031250 1839.136719  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 46   1   2   2 1.945218   0.593436 0.0   2.538654 150.646594   9.577002 2.835285 1814.425781 1816.851562  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 46   1   3   3 2.156313   0.678972 0.0   2.835285 153.481879   2.835285 2.712651 1824.054688 1828.445312  12  12 1.0    0       27     38     7         7       15      21 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 46   1   4   4 1.913110   0.799540 0.0   2.712651 156.194529   2.712651 1.682536 1830.042969 1838.000000  11  11 1.0    0       39     49     8         8       22      29 1.375000 1.375000 0.517549 0.517549 0.376399 0.376399  0.799419  0.799419            0            3
 46   1   5   5 1.200375   0.482162 0.0   1.682536 157.877066   1.682536 2.139488 1824.265625 1824.671875   7   7 1.0    0       50     56     6         6       30      35 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            1
 46   1   6   6 1.599456   0.540031 0.0   2.139488 160.016553   2.139488 3.749046 1827.089844 1830.093750   9   9 1.0    0       57     65     6         6       36      41 1.500000 1.500000 0.836660 0.836660 0.557773 0.557773  0.660697  0.660697            0            1
 46   1   7   7 2.805757   0.943289 0.0   3.749046 163.765600   3.749046 2.063422 1844.035156 1844.515625  15  15 1.0    0       66     80     7         7       42      48 2.142857 2.142857 1.864454 1.864454 0.870079 0.870079  0.459185  0.459185            0            0
 46   1   8   8 1.545752   0.517670 0.0   2.063422 165.829021   2.063422 0.000000 1827.429688 1827.335938   9   9 1.0    0       81     89     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 47   3   1   1 3.658302 137.415877 0.0 141.074180 141.074180 141.074180 0.000000 1831.289062 1835.074219  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   2   1   1 5.061631  12.579499 0.0  17.641130 158.715310 158.715310 3.018658 1885.914062 1902.988281  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.312175 2.312175 0.924870 0.924870  0.546200  0.546200            0            3
 47   2   2   2 2.231745   0.786913 0.0   3.018658 161.733968   3.018658 0.000000 1849.378906 1852.980469  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 47   1   1   1 3.003037   0.986898 0.0   3.989935 162.705245 162.705245 6.202095 1827.542969 1831.273438  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 47   1   2   2 2.325172   0.858265 0.0   3.183437 168.907340   6.202095 3.208376 1833.890625 1845.789062  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 1.013794 1.013794 0.701857 0.701857  0.681407  0.681407            0            0
 47   1   3   3 2.341504   0.866872 0.0   3.208376 172.115716   3.208376 5.681327 1841.156250 1853.164062  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.881917 0.881917 0.610558 0.610558  0.712232  0.712232            0            3
 47   1   4   4 2.802928   2.878399 0.0   5.681327 177.797042   5.681327 1.786676 1850.406250 1858.496094  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 0.866025 0.866025 0.519615 0.519615  0.716092  0.716092            0            0
 47   1   5   5 1.407578   0.379098 0.0   1.786676 179.583719   1.786676 2.119803 1821.683594 1826.753906   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 47   1   6   6 1.664271   0.455533 0.0   2.119803 181.703522   2.119803 1.625929 1826.671875 1828.757812   9   9 1.0    0       66     74     5         5       41      45 1.800000 1.800000 1.788854 1.788854 0.993808 0.993808  0.362740  0.362740            0            2
 47   1   7   7 1.244965   0.380964 0.0   1.625929 183.329451   1.625929 1.311877 1825.070312 1829.445312   7   7 1.0    0       75     81     5         5       46      50 1.400000 1.400000 0.894427 0.894427 0.638877 0.638877  0.603019  0.603019            0            1
 47   1   8   8 1.037509   0.274367 0.0   1.311877 184.641328   1.311877 0.000000 1824.566406 1826.312500   6   6 1.0    0       82     87     5         5       51      55 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            0
 48   3   1   1 3.657961 138.294057 0.0 141.952018 141.952018 141.952018 0.000000 1858.984375 1863.269531  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   2   1   1 4.073226   2.725394 0.0   6.798620 148.750638 148.750638 6.383512 1936.683594 1959.921875  30  30 1.0   30        1     30    14        14        1      14 2.142857 2.142857 2.507133 2.507133 1.169995 1.169995  0.524528  0.524528            0            4
 48   2   2   2 3.160836   3.222677 0.0   6.383512 155.134150   6.383512 0.000000 1917.199219 1923.921875  25  25 1.0   25       31     55    15        15       15      29 1.666667 1.666667 0.899735 0.899735 0.539841 0.539841  0.763034  0.763034            0            0
 48   1   1   1 2.823992   0.862296 0.0   3.686288 152.436926 152.436926 8.934963 1888.554688 1899.445312  15  15 1.0    0        1     15     7         7        1       7 2.142857 2.142857 1.772811 1.772811 0.827312 0.827312  0.475895  0.475895            0            0
 48   1   2   2 1.955280   0.596171 0.0   2.551451 161.371889   8.934963 3.375559 1875.933594 1877.750000  11  11 1.0    0       16     26     7         7        8      14 1.571429 1.571429 0.786796 0.786796 0.500688 0.500688  0.701721  0.701721            0            0
 48   1   3   3 2.531903   0.843656 0.0   3.375559 164.747448   3.375559 2.482714 1891.726562 1896.417969  14  14 1.0    0       27     40     8         8       15      22 1.750000 1.750000 0.707107 0.707107 0.404061 0.404061  0.742816  0.742816            0            1
 48   1   4   4 1.702799   0.779915 0.0   2.482714 167.230161   2.482714 1.663330 1883.042969 1882.742188  10  10 1.0    0       41     50     8         8       23      30 1.250000 1.250000 0.707107 0.707107 0.565685 0.565685  0.742816  0.742816            0            3
 48   1   5   5 1.209867   0.453463 0.0   1.663330 168.893491   1.663330 2.770905 1880.656250 1880.351562   7   7 1.0    0       51     57     6         6       31      36 1.166667 1.166667 0.408248 0.408248 0.349927 0.349927  0.808933  0.808933            0            2
 48   1   6   6 2.116539   0.654366 0.0   2.770905 171.664396   2.770905 2.387867 1889.488281 1888.460938  11  11 1.0    0       58     68     6         6       37      42 1.833333 1.833333 0.752773 0.752773 0.410603 0.410603  0.686789  0.686789            0            0
 48   1   7   7 1.847145   0.540722 0.0   2.387867 174.052262   2.387867 2.148630 1886.003906 1889.136719  10  10 1.0    0       69     78     6         6       43      48 1.666667 1.666667 0.816497 0.816497 0.489898 0.489898  0.666858  0.666858            0            0
 48   1   8   8 1.651324   0.497306 0.0   2.148630 176.200893   2.148630 0.000000 1885.871094 1885.050781   9   9 1.0    0       79     87     7         7       49      55 1.285714 1.285714 0.755929 0.755929 0.587945 0.587945  0.710676  0.710676            0            0
 49   3   1   1 3.753552 141.438194 0.0 145.191746 145.191746 145.191746 0.000000 1887.863281 1891.792969  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   2   1   1 5.045813  10.347535 0.0  15.393348 160.585094 160.585094 3.119633 1986.867188 2002.726562  35  35 1.0   35        1     35    14        14        1      14 2.500000 2.500000 2.377782 2.377782 0.951113 0.951113  0.538767  0.538767            0            3
 49   2   2   2 2.229743   0.889890 0.0   3.119633 163.704727   3.119633 0.000000 1938.761719 1938.796875  20  20 1.0   20       36     55    15        15       15      29 1.333333 1.333333 0.899735 0.899735 0.674802 0.674802  0.763034  0.763034            0            0
 49   1   1   1 3.049881   0.993899 0.0   4.043780 164.628874 164.628874 8.413207 1922.371094 1921.855469  16  16 1.0    0        1     16     8         8        1       8 2.000000 2.000000 1.690309 1.690309 0.845154 0.845154  0.524076  0.524076            0            0
 49   1   2   2 2.366255   2.927318 0.0   5.293574 173.042080   8.413207 3.205956 1926.671875 1934.824219  13  13 1.0    0       17     29     9         9        9      17 1.444444 1.444444 1.013794 1.013794 0.701857 0.701857  0.681407  0.681407            0            0
 49   1   3   3 2.350699   0.855257 0.0   3.205956 176.248037   3.205956 3.870389 1932.113281 1940.500000  13  13 1.0    0       30     42     9         9       18      26 1.444444 1.444444 0.726483 0.726483 0.502950 0.502950  0.751465  0.751465            0            3
 49   1   4   4 2.793215   1.077174 0.0   3.870389 180.118426   3.870389 1.789788 1941.570312 1946.058594  15  15 1.0    0       43     57     9         9       27      35 1.666667 1.666667 0.707107 0.707107 0.424264 0.424264  0.756602  0.756602            0            0
 49   1   5   5 1.417193   0.372595 0.0   1.789788 181.908213   1.789788 1.881167 1909.652344 1911.726562   8   8 1.0    0       58     65     5         5       36      40 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            0
 49   1   6   6 1.457983   0.423185 0.0   1.881167 183.789381   1.881167 1.900066 1913.167969 1913.796875   8   8 1.0    0       66     73     5         5       41      45 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            2
 49   1   7   7 1.446677   0.453389 0.0   1.900066 185.689447   1.900066 1.316690 1914.328125 1915.343750   8   8 1.0    0       74     81     5         5       46      50 1.600000 1.600000 0.894427 0.894427 0.559017 0.559017  0.603019  0.603019            0            1
 49   1   8   8 1.040571   0.276119 0.0   1.316690 187.006136   1.316690 0.000000 1910.191406 1909.464844   6   6 1.0    0       82     87     5         5       51      55 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            0

[28-02-2022_23-12-11] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-02-28_20-24-54_PL1_hcr_online_2_4_min_bound_preach_opt.xlsx

[28-02-2022_23-12-16] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-02-28_20-24-54_PL1_hcr_online_2_4_min_bound_preach_opt.dat

[28-02-2022_23-12-16] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-02-28_20-24-54_PL1_hcr_online_2_4_min_bound_preach_opt.png

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[28-02-2022_23-12-16] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[28-02-2022_23-12-19] INFO :: __main__ >> Overall time: Real = 10045.9415126, Process = 48421.03125

[28-02-2022_23-12-19] INFO :: __main__ >> Exiting with code 0

