[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 49})

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 49).

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=78, step_range=range(0, 79)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 78, Total actions = 78, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001ED9D3C6EE0>]
	incrementor = SolveIncrementor(step_start=78, step_increase=1, step_increase_initial=2, step_end_min=79, step_end_max=300, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1449.3817354000203, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 78), range_=None), IncPart(name='plan_module', args=('#inc', 78, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 78, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 78, 49, 49, 'sequential', 'true'), range_=None)]

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1251 rules

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006808099999034312s

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039310s.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007164s with result Satisfiable.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EE0AABEF40>

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 78)
	('last_sgoals', 49)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('first_sgoals', 49)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EE0AABEF40>)

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(49, 79)', truth=True, inc_range=None)

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 78). %* None *%
#program plan_module(#inc, 78, false, false). %* None *%
#program optimisation_module(#inc, 78, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 78, 49, 49, sequential, true). %* None *%

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     77 : Current =     79
Incrementor step ends | Minimum  =     79 : Maximum =    300

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(79)]), ('state_module', [Number(78), Number(78)]), ('plan_module', [Number(78), Number(78), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(78), Number(78), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(78), Number(49), Number(49), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(79), Number(78)]), ('plan_module', [Number(79), Number(78), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(79), Number(78), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(78), Number(49), Number(49), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.237529s.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 78: original = External(symbol='current_last_sgoals(49, 79)', truth=True, inc_range=None), conversion = current_last_sgoals(49,79).

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 79: original = External(symbol='current_last_sgoals(49, 79)', truth=True, inc_range=None), conversion = current_last_sgoals(49,79).

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032660s with result Satisfiable.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2701890000007552, Incremental time limit = None
Running cumulative time = 0.2701890000007552, Cumulative time limit = 1449.3817354000203
Used memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.237529s, Solving = 0.032660s, Total = 0.270189s, Memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Step range = [78-79]), Calls = 1
Final Model :: Total atoms = 7227, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=77, end_step=79, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.23752880000029108, solving_time=0.0326602000004641, total_time=0.2701890000007552, memory=Memory(rss=2110.6640625, vms=2105.78125), step_range=range(78, 80), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23752880000029108, solving_time=0.0326602000004641, total_time=0.2701890000007552, memory=Memory(rss=2110.6640625, vms=2105.78125), step_range=range(78, 80), clingo_stats={'problem': {'lp': {'atoms': 20999.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 73465.0, 'bodies_tr': 73465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1123.0, 'rules': 145392.0, 'rules_normal': 144543.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 145392.0, 'rules_tr_normal': 144543.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43531.0, 'eqs_atom': 11998.0, 'eqs_body': 3050.0, 'eqs_other': 28483.0}, 'lpStep': {'atoms': 11210.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 69379.0, 'bodies_tr': 69379.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1123.0, 'rules': 134208.0, 'rules_normal': 133359.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 134208.0, 'rules_tr_normal': 133359.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23401.0, 'eqs_atom': 4482.0, 'eqs_body': 719.0, 'eqs_other': 18200.0}, 'generator': {'vars': 4932.0, 'vars_eliminated': 0.0, 'vars_frozen': 2875.0, 'constraints': 24.0, 'constraints_binary': 2638.0, 'constraints_ternary': 417.0, 'acyc_edges': 0.0, 'complexity': 3105.0}}, 'solving': {'solvers': {'choices': 36.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 19.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0], 'lower': [0.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.2690563201904297, 'cpu': 0.265625, 'solve': 0.006999969482421875, 'unsat': 0.006000518798828125, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.32306861877441406, 'cpu': 0.328125, 'solve': 0.0110015869140625, 'unsat': 0.006000518798828125, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 36.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 20.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{49: 79}

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 50 achieved :: Progression >> total requested sgoals = 1, current total achieved sgoals = 2 (200.00% solved)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 49 was achieved successfully.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.237529s, Solving = 0.032660s, Total = 0.270189s, Memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Step range = [78-79]

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.270189s due to: External generator exit.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 49, Last requested goal index = 49, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.237529s, Solving = 0.032660s, Total = 0.270189s, Memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Step range = [78-79]), Calls = 1
Model :: Total atoms = 7227, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 25:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 45:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 56:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 59:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 60:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 61:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 65:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 69:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 70:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 72:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 74:
    Current Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 75:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 76:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 77:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 79:
    Current Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Monolevel problem 20 at level 1 solved.

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Online planning increment 20 finished.

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 20 : Total constraining sub-goal stages = 55 : Goals achieved = 49 : Goals unachieved = 6 : Complete = False

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 21 by method ground-first is [1-1].

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 21 at level 1:
Total Templated Partial Problems = 6, Problem Range = [19-24], Size = 8, Sub-goal Stage Range = [48-55]
Division points [total=5] : [(Index = 48, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 49, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 51, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 53, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [50-50]

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=79, step_range=range(0, 80)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 79, Total actions = 79, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 79, Total actions = 79, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 79, Total actions = 79, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [50-50], problem number = 21, increment number = 21

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 50)
	('last_sgoals', 50)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1634.3050371000063)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [50-50] : Concurrency disabled : Minimum search length bound disabled with value 79

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 50
last_sgoals = 50
start_step = 79
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 79

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[02-03-2022_00-42-04] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[02-03-2022_00-42-04] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 79 as problem start state.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 79})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 79})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 79})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 79})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 79})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 79})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 79})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 79})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 79})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 79})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 79})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 79})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 79})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 79})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 79})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 79})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 79})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 79})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 79})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 79})

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 79).
holds(1, complete_tower(red,puzzle_room_table), false, 79).
holds(1, complete_tower(yellow,puzzle_room_table), false, 79).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 79).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 79).
holds(1, configuration(manipulator_limb_1), extended, 79).
holds(1, configuration(manipulator_limb_2), extended, 79).
holds(1, configuration(puzzle_room_door), open, 79).
holds(1, configuration(starting_room_door), closed, 79).
holds(1, configuration(store_room_door), open, 79).
holds(1, grasping(manipulator_arm_1), (block,2), 79).
holds(1, grasping(manipulator_arm_2), nothing, 79).
holds(1, grasping(manipulator_end_1), (block,2), 79).
holds(1, grasping(manipulator_end_2), nothing, 79).
holds(1, in((block,1)), (puzzle_room,1), 79).
holds(1, in((block,2)), (puzzle_room,1), 79).
holds(1, in((block,3)), (puzzle_room,1), 79).
holds(1, in((block,4)), (puzzle_room,1), 79).
holds(1, in((block,5)), (puzzle_room,1), 79).
holds(1, in((block,6)), (puzzle_room,1), 79).
holds(1, in((block,7)), (puzzle_room,1), 79).
holds(1, in((block,8)), (puzzle_room,1), 79).
holds(1, in((block,9)), (puzzle_room,1), 79).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 79).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 79).
holds(1, in(manipulator_end_1), (puzzle_room,1), 79).
holds(1, in(manipulator_end_2), (puzzle_room,1), 79).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 79).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 79).
holds(1, in(puzzle_room_table), (puzzle_room,1), 79).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 79).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 79).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 79).
holds(1, in(talos), (puzzle_room,1), 79).
holds(1, in_tower((block,1),(block,1)), true, 79).
holds(1, in_tower((block,1),(block,2)), false, 79).
holds(1, in_tower((block,1),(block,3)), false, 79).
holds(1, in_tower((block,1),(block,4)), false, 79).
holds(1, in_tower((block,1),(block,5)), false, 79).
holds(1, in_tower((block,1),(block,6)), false, 79).
holds(1, in_tower((block,1),(block,7)), false, 79).
holds(1, in_tower((block,1),(block,8)), false, 79).
holds(1, in_tower((block,1),(block,9)), false, 79).
holds(1, in_tower((block,2),(block,1)), false, 79).
holds(1, in_tower((block,2),(block,2)), true, 79).
holds(1, in_tower((block,2),(block,3)), false, 79).
holds(1, in_tower((block,2),(block,4)), false, 79).
holds(1, in_tower((block,2),(block,5)), false, 79).
holds(1, in_tower((block,2),(block,6)), false, 79).
holds(1, in_tower((block,2),(block,7)), false, 79).
holds(1, in_tower((block,2),(block,8)), false, 79).
holds(1, in_tower((block,2),(block,9)), false, 79).
holds(1, in_tower((block,3),(block,1)), false, 79).
holds(1, in_tower((block,3),(block,2)), false, 79).
holds(1, in_tower((block,3),(block,3)), true, 79).
holds(1, in_tower((block,3),(block,4)), false, 79).
holds(1, in_tower((block,3),(block,5)), false, 79).
holds(1, in_tower((block,3),(block,6)), false, 79).
holds(1, in_tower((block,3),(block,7)), false, 79).
holds(1, in_tower((block,3),(block,8)), false, 79).
holds(1, in_tower((block,3),(block,9)), false, 79).
holds(1, in_tower((block,4),(block,1)), false, 79).
holds(1, in_tower((block,4),(block,2)), false, 79).
holds(1, in_tower((block,4),(block,3)), false, 79).
holds(1, in_tower((block,4),(block,4)), false, 79).
holds(1, in_tower((block,4),(block,5)), false, 79).
holds(1, in_tower((block,4),(block,6)), false, 79).
holds(1, in_tower((block,4),(block,7)), false, 79).
holds(1, in_tower((block,4),(block,8)), false, 79).
holds(1, in_tower((block,4),(block,9)), false, 79).
holds(1, in_tower((block,5),(block,1)), false, 79).
holds(1, in_tower((block,5),(block,2)), false, 79).
holds(1, in_tower((block,5),(block,3)), false, 79).
holds(1, in_tower((block,5),(block,4)), false, 79).
holds(1, in_tower((block,5),(block,5)), false, 79).
holds(1, in_tower((block,5),(block,6)), false, 79).
holds(1, in_tower((block,5),(block,7)), false, 79).
holds(1, in_tower((block,5),(block,8)), false, 79).
holds(1, in_tower((block,5),(block,9)), false, 79).
holds(1, in_tower((block,6),(block,1)), false, 79).
holds(1, in_tower((block,6),(block,2)), false, 79).
holds(1, in_tower((block,6),(block,3)), false, 79).
holds(1, in_tower((block,6),(block,4)), true, 79).
holds(1, in_tower((block,6),(block,5)), true, 79).
holds(1, in_tower((block,6),(block,6)), true, 79).
holds(1, in_tower((block,6),(block,7)), false, 79).
holds(1, in_tower((block,6),(block,8)), false, 79).
holds(1, in_tower((block,6),(block,9)), false, 79).
holds(1, in_tower((block,7),(block,1)), false, 79).
holds(1, in_tower((block,7),(block,2)), false, 79).
holds(1, in_tower((block,7),(block,3)), false, 79).
holds(1, in_tower((block,7),(block,4)), false, 79).
holds(1, in_tower((block,7),(block,5)), false, 79).
holds(1, in_tower((block,7),(block,6)), false, 79).
holds(1, in_tower((block,7),(block,7)), true, 79).
holds(1, in_tower((block,7),(block,8)), false, 79).
holds(1, in_tower((block,7),(block,9)), false, 79).
holds(1, in_tower((block,8),(block,1)), false, 79).
holds(1, in_tower((block,8),(block,2)), false, 79).
holds(1, in_tower((block,8),(block,3)), false, 79).
holds(1, in_tower((block,8),(block,4)), false, 79).
holds(1, in_tower((block,8),(block,5)), false, 79).
holds(1, in_tower((block,8),(block,6)), false, 79).
holds(1, in_tower((block,8),(block,7)), false, 79).
holds(1, in_tower((block,8),(block,8)), false, 79).
holds(1, in_tower((block,8),(block,9)), false, 79).
holds(1, in_tower((block,9),(block,1)), false, 79).
holds(1, in_tower((block,9),(block,2)), false, 79).
holds(1, in_tower((block,9),(block,3)), false, 79).
holds(1, in_tower((block,9),(block,4)), false, 79).
holds(1, in_tower((block,9),(block,5)), false, 79).
holds(1, in_tower((block,9),(block,6)), false, 79).
holds(1, in_tower((block,9),(block,7)), false, 79).
holds(1, in_tower((block,9),(block,8)), true, 79).
holds(1, in_tower((block,9),(block,9)), true, 79).
holds(1, on((block,1)), puzzle_room_table_left, 79).
holds(1, on((block,2)), puzzle_room_table_right, 79).
holds(1, on((block,3)), puzzle_room_table_left, 79).
holds(1, on((block,4)), (block,5), 79).
holds(1, on((block,5)), (block,6), 79).
holds(1, on((block,6)), puzzle_room_table_right, 79).
holds(1, on((block,7)), puzzle_room_table_middle, 79).
holds(1, on((block,8)), (block,9), 79).
holds(1, on((block,9)), puzzle_room_table_middle, 79).
holds(1, tower_base((block,1),puzzle_room_table), true, 79).
holds(1, tower_base((block,2),puzzle_room_table), true, 79).
holds(1, tower_base((block,3),puzzle_room_table), true, 79).
holds(1, tower_base((block,4),puzzle_room_table), false, 79).
holds(1, tower_base((block,5),puzzle_room_table), false, 79).
holds(1, tower_base((block,6),puzzle_room_table), true, 79).
holds(1, tower_base((block,7),puzzle_room_table), true, 79).
holds(1, tower_base((block,8),puzzle_room_table), false, 79).
holds(1, tower_base((block,9),puzzle_room_table), true, 79).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 79).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 79).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 79).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 79).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 79).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 79).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 79).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 79).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 79).
holds(2, complete_tower(blue,puzzle_room_table), true, 79).
holds(2, complete_tower(red,puzzle_room_table), false, 79).
holds(2, complete_tower(yellow,puzzle_room_table), false, 79).
holds(2, configuration(manipulator_arm_1), extended, 79).
holds(2, configuration(manipulator_arm_2), extended, 79).
holds(2, configuration(puzzle_room_door), open, 79).
holds(2, configuration(starting_room_door), closed, 79).
holds(2, configuration(store_room_door), open, 79).
holds(2, grasping(manipulator_arm_1), (block,2), 79).
holds(2, grasping(manipulator_arm_2), nothing, 79).
holds(2, in((block,1)), puzzle_room, 79).
holds(2, in((block,2)), puzzle_room, 79).
holds(2, in((block,3)), puzzle_room, 79).
holds(2, in((block,4)), puzzle_room, 79).
holds(2, in((block,5)), puzzle_room, 79).
holds(2, in((block,6)), puzzle_room, 79).
holds(2, in((block,7)), puzzle_room, 79).
holds(2, in((block,8)), puzzle_room, 79).
holds(2, in((block,9)), puzzle_room, 79).
holds(2, in(manipulator_arm_1), puzzle_room, 79).
holds(2, in(manipulator_arm_2), puzzle_room, 79).
holds(2, in(puzzle_room_table), puzzle_room, 79).
holds(2, in(talos), puzzle_room, 79).
holds(2, in_tower((block,1),(block,1)), true, 79).
holds(2, in_tower((block,1),(block,2)), false, 79).
holds(2, in_tower((block,1),(block,3)), false, 79).
holds(2, in_tower((block,1),(block,4)), false, 79).
holds(2, in_tower((block,1),(block,5)), false, 79).
holds(2, in_tower((block,1),(block,6)), false, 79).
holds(2, in_tower((block,1),(block,7)), false, 79).
holds(2, in_tower((block,1),(block,8)), false, 79).
holds(2, in_tower((block,1),(block,9)), false, 79).
holds(2, in_tower((block,2),(block,1)), false, 79).
holds(2, in_tower((block,2),(block,2)), true, 79).
holds(2, in_tower((block,2),(block,3)), false, 79).
holds(2, in_tower((block,2),(block,4)), false, 79).
holds(2, in_tower((block,2),(block,5)), false, 79).
holds(2, in_tower((block,2),(block,6)), false, 79).
holds(2, in_tower((block,2),(block,7)), false, 79).
holds(2, in_tower((block,2),(block,8)), false, 79).
holds(2, in_tower((block,2),(block,9)), false, 79).
holds(2, in_tower((block,3),(block,1)), false, 79).
holds(2, in_tower((block,3),(block,2)), false, 79).
holds(2, in_tower((block,3),(block,3)), true, 79).
holds(2, in_tower((block,3),(block,4)), false, 79).
holds(2, in_tower((block,3),(block,5)), false, 79).
holds(2, in_tower((block,3),(block,6)), false, 79).
holds(2, in_tower((block,3),(block,7)), false, 79).
holds(2, in_tower((block,3),(block,8)), false, 79).
holds(2, in_tower((block,3),(block,9)), false, 79).
holds(2, in_tower((block,4),(block,1)), false, 79).
holds(2, in_tower((block,4),(block,2)), false, 79).
holds(2, in_tower((block,4),(block,3)), false, 79).
holds(2, in_tower((block,4),(block,4)), false, 79).
holds(2, in_tower((block,4),(block,5)), false, 79).
holds(2, in_tower((block,4),(block,6)), false, 79).
holds(2, in_tower((block,4),(block,7)), false, 79).
holds(2, in_tower((block,4),(block,8)), false, 79).
holds(2, in_tower((block,4),(block,9)), false, 79).
holds(2, in_tower((block,5),(block,1)), false, 79).
holds(2, in_tower((block,5),(block,2)), false, 79).
holds(2, in_tower((block,5),(block,3)), false, 79).
holds(2, in_tower((block,5),(block,4)), false, 79).
holds(2, in_tower((block,5),(block,5)), false, 79).
holds(2, in_tower((block,5),(block,6)), false, 79).
holds(2, in_tower((block,5),(block,7)), false, 79).
holds(2, in_tower((block,5),(block,8)), false, 79).
holds(2, in_tower((block,5),(block,9)), false, 79).
holds(2, in_tower((block,6),(block,1)), false, 79).
holds(2, in_tower((block,6),(block,2)), false, 79).
holds(2, in_tower((block,6),(block,3)), false, 79).
holds(2, in_tower((block,6),(block,4)), true, 79).
holds(2, in_tower((block,6),(block,5)), true, 79).
holds(2, in_tower((block,6),(block,6)), true, 79).
holds(2, in_tower((block,6),(block,7)), false, 79).
holds(2, in_tower((block,6),(block,8)), false, 79).
holds(2, in_tower((block,6),(block,9)), false, 79).
holds(2, in_tower((block,7),(block,1)), false, 79).
holds(2, in_tower((block,7),(block,2)), false, 79).
holds(2, in_tower((block,7),(block,3)), false, 79).
holds(2, in_tower((block,7),(block,4)), false, 79).
holds(2, in_tower((block,7),(block,5)), false, 79).
holds(2, in_tower((block,7),(block,6)), false, 79).
holds(2, in_tower((block,7),(block,7)), true, 79).
holds(2, in_tower((block,7),(block,8)), false, 79).
holds(2, in_tower((block,7),(block,9)), false, 79).
holds(2, in_tower((block,8),(block,1)), false, 79).
holds(2, in_tower((block,8),(block,2)), false, 79).
holds(2, in_tower((block,8),(block,3)), false, 79).
holds(2, in_tower((block,8),(block,4)), false, 79).
holds(2, in_tower((block,8),(block,5)), false, 79).
holds(2, in_tower((block,8),(block,6)), false, 79).
holds(2, in_tower((block,8),(block,7)), false, 79).
holds(2, in_tower((block,8),(block,8)), false, 79).
holds(2, in_tower((block,8),(block,9)), false, 79).
holds(2, in_tower((block,9),(block,1)), false, 79).
holds(2, in_tower((block,9),(block,2)), false, 79).
holds(2, in_tower((block,9),(block,3)), false, 79).
holds(2, in_tower((block,9),(block,4)), false, 79).
holds(2, in_tower((block,9),(block,5)), false, 79).
holds(2, in_tower((block,9),(block,6)), false, 79).
holds(2, in_tower((block,9),(block,7)), false, 79).
holds(2, in_tower((block,9),(block,8)), true, 79).
holds(2, in_tower((block,9),(block,9)), true, 79).
holds(2, on((block,1)), puzzle_room_table, 79).
holds(2, on((block,2)), puzzle_room_table, 79).
holds(2, on((block,3)), puzzle_room_table, 79).
holds(2, on((block,4)), (block,5), 79).
holds(2, on((block,5)), (block,6), 79).
holds(2, on((block,6)), puzzle_room_table, 79).
holds(2, on((block,7)), puzzle_room_table, 79).
holds(2, on((block,8)), (block,9), 79).
holds(2, on((block,9)), puzzle_room_table, 79).
holds(2, tower_base((block,1),puzzle_room_table), true, 79).
holds(2, tower_base((block,2),puzzle_room_table), true, 79).
holds(2, tower_base((block,3),puzzle_room_table), true, 79).
holds(2, tower_base((block,4),puzzle_room_table), false, 79).
holds(2, tower_base((block,5),puzzle_room_table), false, 79).
holds(2, tower_base((block,6),puzzle_room_table), true, 79).
holds(2, tower_base((block,7),puzzle_room_table), true, 79).
holds(2, tower_base((block,8),puzzle_room_table), false, 79).
holds(2, tower_base((block,9),puzzle_room_table), true, 79).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 79).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 79).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 79).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 79).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 79).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 79).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 79).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 79).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 79).

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 50})

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 50).

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=79, step_range=range(0, 80)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 79, Total actions = 79, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 79, Total actions = 79, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 79, Total actions = 79, Produced sub-goal stages = 0

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EE09CB2AF0>]
	incrementor = SolveIncrementor(step_start=79, step_increase=1, step_increase_initial=2, step_end_min=80, step_end_max=300, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1449.1115464000195, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 79), range_=None), IncPart(name='plan_module', args=('#inc', 79, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 79, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 79, 50, 50, 'sequential', 'true'), range_=None)]

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1251 rules

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006858099999590195s

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.040688s.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007856s with result Satisfiable.

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EE0A4F4CC0>

[02-03-2022_00-42-04] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 79)
	('last_sgoals', 50)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('first_sgoals', 50)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EE0A4F4CC0>)

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(50, 80)', truth=True, inc_range=None)

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 79). %* None *%
#program plan_module(#inc, 79, false, false). %* None *%
#program optimisation_module(#inc, 79, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 79, 50, 50, sequential, true). %* None *%

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     78 : Current =     80
Incrementor step ends | Minimum  =     80 : Maximum =    300

[02-03-2022_00-42-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(80)]), ('state_module', [Number(79), Number(79)]), ('plan_module', [Number(79), Number(79), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(79), Number(79), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(79), Number(50), Number(50), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(80), Number(79)]), ('plan_module', [Number(80), Number(79), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(80), Number(79), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(79), Number(50), Number(50), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.240468s.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 79: original = External(symbol='current_last_sgoals(50, 80)', truth=True, inc_range=None), conversion = current_last_sgoals(50,80).

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 80: original = External(symbol='current_last_sgoals(50, 80)', truth=True, inc_range=None), conversion = current_last_sgoals(50,80).

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025994s with result Unsatisfiable.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2664626000005228, Incremental time limit = None
Running cumulative time = 0.2664626000005228, Cumulative time limit = 1449.1115464000195
Used memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=78, end_step=80, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.24046810000072583, solving_time=0.02599449999979697, total_time=0.2664626000005228, memory=Memory(rss=2110.6640625, vms=2105.78125), step_range=range(79, 81), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24046810000072583, solving_time=0.02599449999979697, total_time=0.2664626000005228, memory=Memory(rss=2110.6640625, vms=2105.78125), step_range=range(79, 81), clingo_stats={'problem': {'lp': {'atoms': 20999.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 73925.0, 'bodies_tr': 73925.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 54.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1195.0, 'rules': 145795.0, 'rules_normal': 144946.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 145795.0, 'rules_tr_normal': 144946.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 38412.0, 'eqs_atom': 11955.0, 'eqs_body': 2995.0, 'eqs_other': 23462.0}, 'lpStep': {'atoms': 11210.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 69839.0, 'bodies_tr': 69839.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 54.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1195.0, 'rules': 134611.0, 'rules_normal': 133762.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 134611.0, 'rules_tr_normal': 133762.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 18282.0, 'eqs_atom': 4439.0, 'eqs_body': 664.0, 'eqs_other': 13179.0}, 'generator': {'vars': 5550.0, 'vars_eliminated': 0.0, 'vars_frozen': 3053.0, 'constraints': 16.0, 'constraints_binary': 2413.0, 'constraints_ternary': 408.0, 'acyc_edges': 0.0, 'complexity': 2853.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf], 'lower': [-1.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.2660484313964844, 'cpu': 0.3125, 'solve': 0.0009918212890625, 'unsat': 0.0009918212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3220500946044922, 'cpu': 0.359375, 'solve': 0.005985260009765625, 'unsat': 0.0009918212890625, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     80 : Current =     81
Incrementor step ends | Minimum  =     80 : Maximum =    300

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(81)]), ('state_module', [Number(81), Number(79)]), ('plan_module', [Number(81), Number(79), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(79), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(79), Number(50), Number(50), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162197s.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018986s with result Satisfiable.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.18118309999954363, Incremental time limit = None
Running cumulative time = 0.4476457000000664, Cumulative time limit = 1449.1115464000195
Used memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.402665s, Solving = 0.044980s, Total = 0.447646s, Memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Step range = [79-81]), Calls = 2
Final Model :: Total atoms = 7954, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=80, end_step=81, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4026653000000806, solving_time=0.04498039999998582, total_time=0.4476457000000664, memory=Memory(rss=2110.6640625, vms=2105.78125), step_range=range(79, 82), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16219719999935478, solving_time=0.01898590000018885, total_time=0.18118309999954363, memory=Memory(rss=2110.6640625, vms=2105.78125), step_range=range(81, 82), clingo_stats={'problem': {'lp': {'atoms': 24037.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 135198.0, 'bodies_tr': 135198.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 735.0, 'count_bodies_tr': 735.0, 'sccs': 56.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1232.0, 'rules': 263343.0, 'rules_normal': 262160.0, 'rules_choice': 1181.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 263343.0, 'rules_tr_normal': 262160.0, 'rules_tr_choice': 1181.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43652.0, 'eqs_atom': 13048.0, 'eqs_body': 3854.0, 'eqs_other': 26750.0}, 'lpStep': {'atoms': 3038.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61273.0, 'bodies_tr': 61273.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 117548.0, 'rules_normal': 117214.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 117548.0, 'rules_tr_normal': 117214.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5240.0, 'eqs_atom': 1093.0, 'eqs_body': 859.0, 'eqs_other': 3288.0}, 'generator': {'vars': 5880.0, 'vars_eliminated': 0.0, 'vars_frozen': 3287.0, 'constraints': 53.0, 'constraints_binary': 4967.0, 'constraints_ternary': 578.0, 'acyc_edges': 0.0, 'complexity': 5630.0}}, 'solving': {'solvers': {'choices': 72.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 28.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 60.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0], 'lower': [0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.18202781677246094, 'cpu': 0.171875, 'solve': 0.007991790771484375, 'unsat': 0.006992340087890625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5040779113769531, 'cpu': 0.53125, 'solve': 0.01397705078125, 'unsat': 0.007984161376953125, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 72.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 29.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 108.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{50: 81}

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 51 achieved :: Progression >> total requested sgoals = 1, current total achieved sgoals = 2 (200.00% solved)

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 50 was achieved successfully.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.240468s, Solving = 0.025994s, Total = 0.266463s, Memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Step range = [79-80]
2 : Statistics :: Grounding = 0.162197s, Solving = 0.018986s, Total = 0.181183s, Memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Step range = [81-81]

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.447646s due to: External generator exit.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49, 80: 50, 81: 50}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79, 50: 81}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 50, Last requested goal index = 50, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.402665s, Solving = 0.044980s, Total = 0.447646s, Memory = (RSS = 2110.664062Mb, VMS = 2105.781250Mb), Step range = [79-81]), Calls = 2
Model :: Total atoms = 7954, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 25:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 45:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 56:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 59:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 60:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 61:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 65:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 69:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 70:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 72:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 74:
    Current Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 75:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 76:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 77:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 79:
    Current Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 80:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 81:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Monolevel problem 21 at level 1 solved.

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Online planning increment 21 finished.

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 21 : Total constraining sub-goal stages = 55 : Goals achieved = 50 : Goals unachieved = 5 : Complete = False

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 22 by method ground-first is [1-1].

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 22 at level 1:
Total Templated Partial Problems = 6, Problem Range = [19-24], Size = 8, Sub-goal Stage Range = [48-55]
Division points [total=5] : [(Index = 48, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 49, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 51, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 53, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [51-51]

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=81, step_range=range(0, 82)

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [51-51], problem number = 22, increment number = 22

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 51)
	('last_sgoals', 51)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1634.3050371000063)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [51-51] : Concurrency disabled : Minimum search length bound disabled with value 81

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 51
last_sgoals = 51
start_step = 81
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 81

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[02-03-2022_00-42-05] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[02-03-2022_00-42-05] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 81 as problem start state.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 81})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 81})

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 81).
holds(1, complete_tower(red,puzzle_room_table), false, 81).
holds(1, complete_tower(yellow,puzzle_room_table), false, 81).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 81).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 81).
holds(1, configuration(manipulator_limb_1), extended, 81).
holds(1, configuration(manipulator_limb_2), extended, 81).
holds(1, configuration(puzzle_room_door), open, 81).
holds(1, configuration(starting_room_door), closed, 81).
holds(1, configuration(store_room_door), open, 81).
holds(1, grasping(manipulator_arm_1), (block,2), 81).
holds(1, grasping(manipulator_arm_2), (block,1), 81).
holds(1, grasping(manipulator_end_1), (block,2), 81).
holds(1, grasping(manipulator_end_2), (block,1), 81).
holds(1, in((block,1)), (puzzle_room,1), 81).
holds(1, in((block,2)), (puzzle_room,1), 81).
holds(1, in((block,3)), (puzzle_room,1), 81).
holds(1, in((block,4)), (puzzle_room,1), 81).
holds(1, in((block,5)), (puzzle_room,1), 81).
holds(1, in((block,6)), (puzzle_room,1), 81).
holds(1, in((block,7)), (puzzle_room,1), 81).
holds(1, in((block,8)), (puzzle_room,1), 81).
holds(1, in((block,9)), (puzzle_room,1), 81).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 81).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 81).
holds(1, in(manipulator_end_1), (puzzle_room,1), 81).
holds(1, in(manipulator_end_2), (puzzle_room,1), 81).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 81).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 81).
holds(1, in(puzzle_room_table), (puzzle_room,1), 81).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 81).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 81).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 81).
holds(1, in(talos), (puzzle_room,1), 81).
holds(1, in_tower((block,1),(block,1)), true, 81).
holds(1, in_tower((block,1),(block,2)), false, 81).
holds(1, in_tower((block,1),(block,3)), false, 81).
holds(1, in_tower((block,1),(block,4)), false, 81).
holds(1, in_tower((block,1),(block,5)), false, 81).
holds(1, in_tower((block,1),(block,6)), false, 81).
holds(1, in_tower((block,1),(block,7)), false, 81).
holds(1, in_tower((block,1),(block,8)), false, 81).
holds(1, in_tower((block,1),(block,9)), false, 81).
holds(1, in_tower((block,2),(block,1)), false, 81).
holds(1, in_tower((block,2),(block,2)), true, 81).
holds(1, in_tower((block,2),(block,3)), false, 81).
holds(1, in_tower((block,2),(block,4)), false, 81).
holds(1, in_tower((block,2),(block,5)), false, 81).
holds(1, in_tower((block,2),(block,6)), false, 81).
holds(1, in_tower((block,2),(block,7)), false, 81).
holds(1, in_tower((block,2),(block,8)), false, 81).
holds(1, in_tower((block,2),(block,9)), false, 81).
holds(1, in_tower((block,3),(block,1)), false, 81).
holds(1, in_tower((block,3),(block,2)), false, 81).
holds(1, in_tower((block,3),(block,3)), true, 81).
holds(1, in_tower((block,3),(block,4)), false, 81).
holds(1, in_tower((block,3),(block,5)), false, 81).
holds(1, in_tower((block,3),(block,6)), false, 81).
holds(1, in_tower((block,3),(block,7)), false, 81).
holds(1, in_tower((block,3),(block,8)), false, 81).
holds(1, in_tower((block,3),(block,9)), false, 81).
holds(1, in_tower((block,4),(block,1)), false, 81).
holds(1, in_tower((block,4),(block,2)), false, 81).
holds(1, in_tower((block,4),(block,3)), false, 81).
holds(1, in_tower((block,4),(block,4)), false, 81).
holds(1, in_tower((block,4),(block,5)), false, 81).
holds(1, in_tower((block,4),(block,6)), false, 81).
holds(1, in_tower((block,4),(block,7)), false, 81).
holds(1, in_tower((block,4),(block,8)), false, 81).
holds(1, in_tower((block,4),(block,9)), false, 81).
holds(1, in_tower((block,5),(block,1)), false, 81).
holds(1, in_tower((block,5),(block,2)), false, 81).
holds(1, in_tower((block,5),(block,3)), false, 81).
holds(1, in_tower((block,5),(block,4)), false, 81).
holds(1, in_tower((block,5),(block,5)), false, 81).
holds(1, in_tower((block,5),(block,6)), false, 81).
holds(1, in_tower((block,5),(block,7)), false, 81).
holds(1, in_tower((block,5),(block,8)), false, 81).
holds(1, in_tower((block,5),(block,9)), false, 81).
holds(1, in_tower((block,6),(block,1)), false, 81).
holds(1, in_tower((block,6),(block,2)), false, 81).
holds(1, in_tower((block,6),(block,3)), false, 81).
holds(1, in_tower((block,6),(block,4)), true, 81).
holds(1, in_tower((block,6),(block,5)), true, 81).
holds(1, in_tower((block,6),(block,6)), true, 81).
holds(1, in_tower((block,6),(block,7)), false, 81).
holds(1, in_tower((block,6),(block,8)), false, 81).
holds(1, in_tower((block,6),(block,9)), false, 81).
holds(1, in_tower((block,7),(block,1)), false, 81).
holds(1, in_tower((block,7),(block,2)), false, 81).
holds(1, in_tower((block,7),(block,3)), false, 81).
holds(1, in_tower((block,7),(block,4)), false, 81).
holds(1, in_tower((block,7),(block,5)), false, 81).
holds(1, in_tower((block,7),(block,6)), false, 81).
holds(1, in_tower((block,7),(block,7)), true, 81).
holds(1, in_tower((block,7),(block,8)), false, 81).
holds(1, in_tower((block,7),(block,9)), false, 81).
holds(1, in_tower((block,8),(block,1)), false, 81).
holds(1, in_tower((block,8),(block,2)), false, 81).
holds(1, in_tower((block,8),(block,3)), false, 81).
holds(1, in_tower((block,8),(block,4)), false, 81).
holds(1, in_tower((block,8),(block,5)), false, 81).
holds(1, in_tower((block,8),(block,6)), false, 81).
holds(1, in_tower((block,8),(block,7)), false, 81).
holds(1, in_tower((block,8),(block,8)), false, 81).
holds(1, in_tower((block,8),(block,9)), false, 81).
holds(1, in_tower((block,9),(block,1)), false, 81).
holds(1, in_tower((block,9),(block,2)), false, 81).
holds(1, in_tower((block,9),(block,3)), false, 81).
holds(1, in_tower((block,9),(block,4)), false, 81).
holds(1, in_tower((block,9),(block,5)), false, 81).
holds(1, in_tower((block,9),(block,6)), false, 81).
holds(1, in_tower((block,9),(block,7)), false, 81).
holds(1, in_tower((block,9),(block,8)), true, 81).
holds(1, in_tower((block,9),(block,9)), true, 81).
holds(1, on((block,1)), puzzle_room_table_left, 81).
holds(1, on((block,2)), puzzle_room_table_right, 81).
holds(1, on((block,3)), puzzle_room_table_left, 81).
holds(1, on((block,4)), (block,5), 81).
holds(1, on((block,5)), (block,6), 81).
holds(1, on((block,6)), puzzle_room_table_right, 81).
holds(1, on((block,7)), puzzle_room_table_middle, 81).
holds(1, on((block,8)), (block,9), 81).
holds(1, on((block,9)), puzzle_room_table_middle, 81).
holds(1, tower_base((block,1),puzzle_room_table), true, 81).
holds(1, tower_base((block,2),puzzle_room_table), true, 81).
holds(1, tower_base((block,3),puzzle_room_table), true, 81).
holds(1, tower_base((block,4),puzzle_room_table), false, 81).
holds(1, tower_base((block,5),puzzle_room_table), false, 81).
holds(1, tower_base((block,6),puzzle_room_table), true, 81).
holds(1, tower_base((block,7),puzzle_room_table), true, 81).
holds(1, tower_base((block,8),puzzle_room_table), false, 81).
holds(1, tower_base((block,9),puzzle_room_table), true, 81).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 81).
holds(2, complete_tower(blue,puzzle_room_table), true, 81).
holds(2, complete_tower(red,puzzle_room_table), false, 81).
holds(2, complete_tower(yellow,puzzle_room_table), false, 81).
holds(2, configuration(manipulator_arm_1), extended, 81).
holds(2, configuration(manipulator_arm_2), extended, 81).
holds(2, configuration(puzzle_room_door), open, 81).
holds(2, configuration(starting_room_door), closed, 81).
holds(2, configuration(store_room_door), open, 81).
holds(2, grasping(manipulator_arm_1), (block,2), 81).
holds(2, grasping(manipulator_arm_2), (block,1), 81).
holds(2, in((block,1)), puzzle_room, 81).
holds(2, in((block,2)), puzzle_room, 81).
holds(2, in((block,3)), puzzle_room, 81).
holds(2, in((block,4)), puzzle_room, 81).
holds(2, in((block,5)), puzzle_room, 81).
holds(2, in((block,6)), puzzle_room, 81).
holds(2, in((block,7)), puzzle_room, 81).
holds(2, in((block,8)), puzzle_room, 81).
holds(2, in((block,9)), puzzle_room, 81).
holds(2, in(manipulator_arm_1), puzzle_room, 81).
holds(2, in(manipulator_arm_2), puzzle_room, 81).
holds(2, in(puzzle_room_table), puzzle_room, 81).
holds(2, in(talos), puzzle_room, 81).
holds(2, in_tower((block,1),(block,1)), true, 81).
holds(2, in_tower((block,1),(block,2)), false, 81).
holds(2, in_tower((block,1),(block,3)), false, 81).
holds(2, in_tower((block,1),(block,4)), false, 81).
holds(2, in_tower((block,1),(block,5)), false, 81).
holds(2, in_tower((block,1),(block,6)), false, 81).
holds(2, in_tower((block,1),(block,7)), false, 81).
holds(2, in_tower((block,1),(block,8)), false, 81).
holds(2, in_tower((block,1),(block,9)), false, 81).
holds(2, in_tower((block,2),(block,1)), false, 81).
holds(2, in_tower((block,2),(block,2)), true, 81).
holds(2, in_tower((block,2),(block,3)), false, 81).
holds(2, in_tower((block,2),(block,4)), false, 81).
holds(2, in_tower((block,2),(block,5)), false, 81).
holds(2, in_tower((block,2),(block,6)), false, 81).
holds(2, in_tower((block,2),(block,7)), false, 81).
holds(2, in_tower((block,2),(block,8)), false, 81).
holds(2, in_tower((block,2),(block,9)), false, 81).
holds(2, in_tower((block,3),(block,1)), false, 81).
holds(2, in_tower((block,3),(block,2)), false, 81).
holds(2, in_tower((block,3),(block,3)), true, 81).
holds(2, in_tower((block,3),(block,4)), false, 81).
holds(2, in_tower((block,3),(block,5)), false, 81).
holds(2, in_tower((block,3),(block,6)), false, 81).
holds(2, in_tower((block,3),(block,7)), false, 81).
holds(2, in_tower((block,3),(block,8)), false, 81).
holds(2, in_tower((block,3),(block,9)), false, 81).
holds(2, in_tower((block,4),(block,1)), false, 81).
holds(2, in_tower((block,4),(block,2)), false, 81).
holds(2, in_tower((block,4),(block,3)), false, 81).
holds(2, in_tower((block,4),(block,4)), false, 81).
holds(2, in_tower((block,4),(block,5)), false, 81).
holds(2, in_tower((block,4),(block,6)), false, 81).
holds(2, in_tower((block,4),(block,7)), false, 81).
holds(2, in_tower((block,4),(block,8)), false, 81).
holds(2, in_tower((block,4),(block,9)), false, 81).
holds(2, in_tower((block,5),(block,1)), false, 81).
holds(2, in_tower((block,5),(block,2)), false, 81).
holds(2, in_tower((block,5),(block,3)), false, 81).
holds(2, in_tower((block,5),(block,4)), false, 81).
holds(2, in_tower((block,5),(block,5)), false, 81).
holds(2, in_tower((block,5),(block,6)), false, 81).
holds(2, in_tower((block,5),(block,7)), false, 81).
holds(2, in_tower((block,5),(block,8)), false, 81).
holds(2, in_tower((block,5),(block,9)), false, 81).
holds(2, in_tower((block,6),(block,1)), false, 81).
holds(2, in_tower((block,6),(block,2)), false, 81).
holds(2, in_tower((block,6),(block,3)), false, 81).
holds(2, in_tower((block,6),(block,4)), true, 81).
holds(2, in_tower((block,6),(block,5)), true, 81).
holds(2, in_tower((block,6),(block,6)), true, 81).
holds(2, in_tower((block,6),(block,7)), false, 81).
holds(2, in_tower((block,6),(block,8)), false, 81).
holds(2, in_tower((block,6),(block,9)), false, 81).
holds(2, in_tower((block,7),(block,1)), false, 81).
holds(2, in_tower((block,7),(block,2)), false, 81).
holds(2, in_tower((block,7),(block,3)), false, 81).
holds(2, in_tower((block,7),(block,4)), false, 81).
holds(2, in_tower((block,7),(block,5)), false, 81).
holds(2, in_tower((block,7),(block,6)), false, 81).
holds(2, in_tower((block,7),(block,7)), true, 81).
holds(2, in_tower((block,7),(block,8)), false, 81).
holds(2, in_tower((block,7),(block,9)), false, 81).
holds(2, in_tower((block,8),(block,1)), false, 81).
holds(2, in_tower((block,8),(block,2)), false, 81).
holds(2, in_tower((block,8),(block,3)), false, 81).
holds(2, in_tower((block,8),(block,4)), false, 81).
holds(2, in_tower((block,8),(block,5)), false, 81).
holds(2, in_tower((block,8),(block,6)), false, 81).
holds(2, in_tower((block,8),(block,7)), false, 81).
holds(2, in_tower((block,8),(block,8)), false, 81).
holds(2, in_tower((block,8),(block,9)), false, 81).
holds(2, in_tower((block,9),(block,1)), false, 81).
holds(2, in_tower((block,9),(block,2)), false, 81).
holds(2, in_tower((block,9),(block,3)), false, 81).
holds(2, in_tower((block,9),(block,4)), false, 81).
holds(2, in_tower((block,9),(block,5)), false, 81).
holds(2, in_tower((block,9),(block,6)), false, 81).
holds(2, in_tower((block,9),(block,7)), false, 81).
holds(2, in_tower((block,9),(block,8)), true, 81).
holds(2, in_tower((block,9),(block,9)), true, 81).
holds(2, on((block,1)), puzzle_room_table, 81).
holds(2, on((block,2)), puzzle_room_table, 81).
holds(2, on((block,3)), puzzle_room_table, 81).
holds(2, on((block,4)), (block,5), 81).
holds(2, on((block,5)), (block,6), 81).
holds(2, on((block,6)), puzzle_room_table, 81).
holds(2, on((block,7)), puzzle_room_table, 81).
holds(2, on((block,8)), (block,9), 81).
holds(2, on((block,9)), puzzle_room_table, 81).
holds(2, tower_base((block,1),puzzle_room_table), true, 81).
holds(2, tower_base((block,2),puzzle_room_table), true, 81).
holds(2, tower_base((block,3),puzzle_room_table), true, 81).
holds(2, tower_base((block,4),puzzle_room_table), false, 81).
holds(2, tower_base((block,5),puzzle_room_table), false, 81).
holds(2, tower_base((block,6),puzzle_room_table), true, 81).
holds(2, tower_base((block,7),puzzle_room_table), true, 81).
holds(2, tower_base((block,8),puzzle_room_table), false, 81).
holds(2, tower_base((block,9),puzzle_room_table), true, 81).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 81).

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 51})

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 51).

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=81, step_range=range(0, 82)

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EE0A4F31F0>]
	incrementor = SolveIncrementor(step_start=81, step_increase=1, step_increase_initial=2, step_end_min=82, step_end_max=300, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1448.6639007000194, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 81), range_=None), IncPart(name='plan_module', args=('#inc', 81, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 81, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 81, 51, 51, 'sequential', 'true'), range_=None)]

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1251 rules

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006690899999739486s

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039860s.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007495s with result Satisfiable.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EE0A83FEF0>

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 81)
	('last_sgoals', 51)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('first_sgoals', 51)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EE0A83FEF0>)

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(51, 82)', truth=True, inc_range=None)

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 81). %* None *%
#program plan_module(#inc, 81, false, false). %* None *%
#program optimisation_module(#inc, 81, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 81, 51, 51, sequential, true). %* None *%

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     80 : Current =     82
Incrementor step ends | Minimum  =     82 : Maximum =    300

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('state_module', [Number(81), Number(81)]), ('plan_module', [Number(81), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(81), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(81), Number(51), Number(51), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(82), Number(81)]), ('plan_module', [Number(82), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(82), Number(81), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(81), Number(51), Number(51), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242135s.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 81: original = External(symbol='current_last_sgoals(51, 82)', truth=True, inc_range=None), conversion = current_last_sgoals(51,82).

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 82: original = External(symbol='current_last_sgoals(51, 82)', truth=True, inc_range=None), conversion = current_last_sgoals(51,82).

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032564s with result Satisfiable.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2746981999989657, Incremental time limit = None
Running cumulative time = 0.2746981999989657, Cumulative time limit = 1448.6639007000194
Used memory = (RSS = 2110.671875Mb, VMS = 2105.781250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.242135s, Solving = 0.032564s, Total = 0.274698s, Memory = (RSS = 2110.671875Mb, VMS = 2105.781250Mb), Step range = [81-82]), Calls = 1
Final Model :: Total atoms = 7227, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=80, end_step=82, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.24213459999918996, solving_time=0.03256359999977576, total_time=0.2746981999989657, memory=Memory(rss=2110.671875, vms=2105.78125), step_range=range(81, 83), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24213459999918996, solving_time=0.03256359999977576, total_time=0.2746981999989657, memory=Memory(rss=2110.671875, vms=2105.78125), step_range=range(81, 83), clingo_stats={'problem': {'lp': {'atoms': 20999.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 73465.0, 'bodies_tr': 73465.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1123.0, 'rules': 145393.0, 'rules_normal': 144544.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 145393.0, 'rules_tr_normal': 144544.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43538.0, 'eqs_atom': 12001.0, 'eqs_body': 3049.0, 'eqs_other': 28488.0}, 'lpStep': {'atoms': 11210.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 69379.0, 'bodies_tr': 69379.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1123.0, 'rules': 134209.0, 'rules_normal': 133360.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 134209.0, 'rules_tr_normal': 133360.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 23408.0, 'eqs_atom': 4485.0, 'eqs_body': 718.0, 'eqs_other': 18205.0}, 'generator': {'vars': 4908.0, 'vars_eliminated': 0.0, 'vars_frozen': 2875.0, 'constraints': 24.0, 'constraints_binary': 2636.0, 'constraints_ternary': 412.0, 'acyc_edges': 0.0, 'complexity': 3098.0}}, 'solving': {'solvers': {'choices': 48.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 19.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 42.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [-1.0], 'lower': [-1.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.27405738830566406, 'cpu': 0.265625, 'solve': 0.0070018768310546875, 'unsat': 0.0060100555419921875, 'sat': 0.0009918212890625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.3290596008300781, 'cpu': 0.3125, 'solve': 0.01099395751953125, 'unsat': 0.0060100555419921875, 'sat': 0.0009918212890625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 48.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 20.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 48.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{51: 82}

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 52 achieved :: Progression >> total requested sgoals = 1, current total achieved sgoals = 2 (200.00% solved)

[02-03-2022_00-42-05] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 51 was achieved successfully.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.242135s, Solving = 0.032564s, Total = 0.274698s, Memory = (RSS = 2110.671875Mb, VMS = 2105.781250Mb), Step range = [81-82]

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.274698s due to: External generator exit.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49, 80: 50, 81: 50}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79, 50: 81}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49, 80: 50, 81: 50, 82: 51}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79, 50: 81, 51: 82}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 51, Last requested goal index = 51, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.242135s, Solving = 0.032564s, Total = 0.274698s, Memory = (RSS = 2110.671875Mb, VMS = 2105.781250Mb), Step range = [81-82]), Calls = 1
Model :: Total atoms = 7227, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 25:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 45:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 56:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 59:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 60:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 61:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 65:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 69:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 70:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 72:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 74:
    Current Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 75:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 76:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 77:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 79:
    Current Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 80:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 81:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 82:
    Current Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Monolevel problem 22 at level 1 solved.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Online planning increment 22 finished.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 22 : Total constraining sub-goal stages = 55 : Goals achieved = 51 : Goals unachieved = 4 : Complete = False

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 23 by method ground-first is [1-1].

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 23 at level 1:
Total Templated Partial Problems = 6, Problem Range = [19-24], Size = 8, Sub-goal Stage Range = [48-55]
Division points [total=5] : [(Index = 48, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 49, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 51, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 53, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [52-53]

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=82, step_range=range(0, 83)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [52-53], problem number = 23, increment number = 23

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 52)
	('last_sgoals', 53)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1634.3050371000063)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [52-53] : Concurrency disabled : Minimum search length bound disabled with value 83

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 52
last_sgoals = 53
start_step = 82
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 83

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[02-03-2022_00-42-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[02-03-2022_00-42-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 82 as problem start state.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 82})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 82})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 82})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 82})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 82})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 82})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 82})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 82})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 82})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 82})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 82})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 82})

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 82).
holds(1, complete_tower(red,puzzle_room_table), false, 82).
holds(1, complete_tower(yellow,puzzle_room_table), false, 82).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 82).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 82).
holds(1, configuration(manipulator_limb_1), extended, 82).
holds(1, configuration(manipulator_limb_2), extended, 82).
holds(1, configuration(puzzle_room_door), open, 82).
holds(1, configuration(starting_room_door), closed, 82).
holds(1, configuration(store_room_door), open, 82).
holds(1, grasping(manipulator_arm_1), (block,2), 82).
holds(1, grasping(manipulator_arm_2), (block,1), 82).
holds(1, grasping(manipulator_end_1), (block,2), 82).
holds(1, grasping(manipulator_end_2), (block,1), 82).
holds(1, in((block,1)), (puzzle_room,1), 82).
holds(1, in((block,2)), (puzzle_room,1), 82).
holds(1, in((block,3)), (puzzle_room,1), 82).
holds(1, in((block,4)), (puzzle_room,1), 82).
holds(1, in((block,5)), (puzzle_room,1), 82).
holds(1, in((block,6)), (puzzle_room,1), 82).
holds(1, in((block,7)), (puzzle_room,1), 82).
holds(1, in((block,8)), (puzzle_room,1), 82).
holds(1, in((block,9)), (puzzle_room,1), 82).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 82).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 82).
holds(1, in(manipulator_end_1), (puzzle_room,1), 82).
holds(1, in(manipulator_end_2), (puzzle_room,1), 82).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 82).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 82).
holds(1, in(puzzle_room_table), (puzzle_room,1), 82).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 82).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 82).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 82).
holds(1, in(talos), (puzzle_room,1), 82).
holds(1, in_tower((block,1),(block,1)), true, 82).
holds(1, in_tower((block,1),(block,2)), false, 82).
holds(1, in_tower((block,1),(block,3)), false, 82).
holds(1, in_tower((block,1),(block,4)), false, 82).
holds(1, in_tower((block,1),(block,5)), false, 82).
holds(1, in_tower((block,1),(block,6)), false, 82).
holds(1, in_tower((block,1),(block,7)), false, 82).
holds(1, in_tower((block,1),(block,8)), false, 82).
holds(1, in_tower((block,1),(block,9)), false, 82).
holds(1, in_tower((block,2),(block,1)), false, 82).
holds(1, in_tower((block,2),(block,2)), false, 82).
holds(1, in_tower((block,2),(block,3)), false, 82).
holds(1, in_tower((block,2),(block,4)), false, 82).
holds(1, in_tower((block,2),(block,5)), false, 82).
holds(1, in_tower((block,2),(block,6)), false, 82).
holds(1, in_tower((block,2),(block,7)), false, 82).
holds(1, in_tower((block,2),(block,8)), false, 82).
holds(1, in_tower((block,2),(block,9)), false, 82).
holds(1, in_tower((block,3),(block,1)), false, 82).
holds(1, in_tower((block,3),(block,2)), true, 82).
holds(1, in_tower((block,3),(block,3)), true, 82).
holds(1, in_tower((block,3),(block,4)), false, 82).
holds(1, in_tower((block,3),(block,5)), false, 82).
holds(1, in_tower((block,3),(block,6)), false, 82).
holds(1, in_tower((block,3),(block,7)), false, 82).
holds(1, in_tower((block,3),(block,8)), false, 82).
holds(1, in_tower((block,3),(block,9)), false, 82).
holds(1, in_tower((block,4),(block,1)), false, 82).
holds(1, in_tower((block,4),(block,2)), false, 82).
holds(1, in_tower((block,4),(block,3)), false, 82).
holds(1, in_tower((block,4),(block,4)), false, 82).
holds(1, in_tower((block,4),(block,5)), false, 82).
holds(1, in_tower((block,4),(block,6)), false, 82).
holds(1, in_tower((block,4),(block,7)), false, 82).
holds(1, in_tower((block,4),(block,8)), false, 82).
holds(1, in_tower((block,4),(block,9)), false, 82).
holds(1, in_tower((block,5),(block,1)), false, 82).
holds(1, in_tower((block,5),(block,2)), false, 82).
holds(1, in_tower((block,5),(block,3)), false, 82).
holds(1, in_tower((block,5),(block,4)), false, 82).
holds(1, in_tower((block,5),(block,5)), false, 82).
holds(1, in_tower((block,5),(block,6)), false, 82).
holds(1, in_tower((block,5),(block,7)), false, 82).
holds(1, in_tower((block,5),(block,8)), false, 82).
holds(1, in_tower((block,5),(block,9)), false, 82).
holds(1, in_tower((block,6),(block,1)), false, 82).
holds(1, in_tower((block,6),(block,2)), false, 82).
holds(1, in_tower((block,6),(block,3)), false, 82).
holds(1, in_tower((block,6),(block,4)), true, 82).
holds(1, in_tower((block,6),(block,5)), true, 82).
holds(1, in_tower((block,6),(block,6)), true, 82).
holds(1, in_tower((block,6),(block,7)), false, 82).
holds(1, in_tower((block,6),(block,8)), false, 82).
holds(1, in_tower((block,6),(block,9)), false, 82).
holds(1, in_tower((block,7),(block,1)), false, 82).
holds(1, in_tower((block,7),(block,2)), false, 82).
holds(1, in_tower((block,7),(block,3)), false, 82).
holds(1, in_tower((block,7),(block,4)), false, 82).
holds(1, in_tower((block,7),(block,5)), false, 82).
holds(1, in_tower((block,7),(block,6)), false, 82).
holds(1, in_tower((block,7),(block,7)), true, 82).
holds(1, in_tower((block,7),(block,8)), false, 82).
holds(1, in_tower((block,7),(block,9)), false, 82).
holds(1, in_tower((block,8),(block,1)), false, 82).
holds(1, in_tower((block,8),(block,2)), false, 82).
holds(1, in_tower((block,8),(block,3)), false, 82).
holds(1, in_tower((block,8),(block,4)), false, 82).
holds(1, in_tower((block,8),(block,5)), false, 82).
holds(1, in_tower((block,8),(block,6)), false, 82).
holds(1, in_tower((block,8),(block,7)), false, 82).
holds(1, in_tower((block,8),(block,8)), false, 82).
holds(1, in_tower((block,8),(block,9)), false, 82).
holds(1, in_tower((block,9),(block,1)), false, 82).
holds(1, in_tower((block,9),(block,2)), false, 82).
holds(1, in_tower((block,9),(block,3)), false, 82).
holds(1, in_tower((block,9),(block,4)), false, 82).
holds(1, in_tower((block,9),(block,5)), false, 82).
holds(1, in_tower((block,9),(block,6)), false, 82).
holds(1, in_tower((block,9),(block,7)), false, 82).
holds(1, in_tower((block,9),(block,8)), true, 82).
holds(1, in_tower((block,9),(block,9)), true, 82).
holds(1, on((block,1)), puzzle_room_table_left, 82).
holds(1, on((block,2)), (block,3), 82).
holds(1, on((block,3)), puzzle_room_table_left, 82).
holds(1, on((block,4)), (block,5), 82).
holds(1, on((block,5)), (block,6), 82).
holds(1, on((block,6)), puzzle_room_table_right, 82).
holds(1, on((block,7)), puzzle_room_table_middle, 82).
holds(1, on((block,8)), (block,9), 82).
holds(1, on((block,9)), puzzle_room_table_middle, 82).
holds(1, tower_base((block,1),puzzle_room_table), true, 82).
holds(1, tower_base((block,2),puzzle_room_table), false, 82).
holds(1, tower_base((block,3),puzzle_room_table), true, 82).
holds(1, tower_base((block,4),puzzle_room_table), false, 82).
holds(1, tower_base((block,5),puzzle_room_table), false, 82).
holds(1, tower_base((block,6),puzzle_room_table), true, 82).
holds(1, tower_base((block,7),puzzle_room_table), true, 82).
holds(1, tower_base((block,8),puzzle_room_table), false, 82).
holds(1, tower_base((block,9),puzzle_room_table), true, 82).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 82).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 82).
holds(2, complete_tower(blue,puzzle_room_table), true, 82).
holds(2, complete_tower(red,puzzle_room_table), false, 82).
holds(2, complete_tower(yellow,puzzle_room_table), false, 82).
holds(2, configuration(manipulator_arm_1), extended, 82).
holds(2, configuration(manipulator_arm_2), extended, 82).
holds(2, configuration(puzzle_room_door), open, 82).
holds(2, configuration(starting_room_door), closed, 82).
holds(2, configuration(store_room_door), open, 82).
holds(2, grasping(manipulator_arm_1), (block,2), 82).
holds(2, grasping(manipulator_arm_2), (block,1), 82).
holds(2, in((block,1)), puzzle_room, 82).
holds(2, in((block,2)), puzzle_room, 82).
holds(2, in((block,3)), puzzle_room, 82).
holds(2, in((block,4)), puzzle_room, 82).
holds(2, in((block,5)), puzzle_room, 82).
holds(2, in((block,6)), puzzle_room, 82).
holds(2, in((block,7)), puzzle_room, 82).
holds(2, in((block,8)), puzzle_room, 82).
holds(2, in((block,9)), puzzle_room, 82).
holds(2, in(manipulator_arm_1), puzzle_room, 82).
holds(2, in(manipulator_arm_2), puzzle_room, 82).
holds(2, in(puzzle_room_table), puzzle_room, 82).
holds(2, in(talos), puzzle_room, 82).
holds(2, in_tower((block,1),(block,1)), true, 82).
holds(2, in_tower((block,1),(block,2)), false, 82).
holds(2, in_tower((block,1),(block,3)), false, 82).
holds(2, in_tower((block,1),(block,4)), false, 82).
holds(2, in_tower((block,1),(block,5)), false, 82).
holds(2, in_tower((block,1),(block,6)), false, 82).
holds(2, in_tower((block,1),(block,7)), false, 82).
holds(2, in_tower((block,1),(block,8)), false, 82).
holds(2, in_tower((block,1),(block,9)), false, 82).
holds(2, in_tower((block,2),(block,1)), false, 82).
holds(2, in_tower((block,2),(block,2)), false, 82).
holds(2, in_tower((block,2),(block,3)), false, 82).
holds(2, in_tower((block,2),(block,4)), false, 82).
holds(2, in_tower((block,2),(block,5)), false, 82).
holds(2, in_tower((block,2),(block,6)), false, 82).
holds(2, in_tower((block,2),(block,7)), false, 82).
holds(2, in_tower((block,2),(block,8)), false, 82).
holds(2, in_tower((block,2),(block,9)), false, 82).
holds(2, in_tower((block,3),(block,1)), false, 82).
holds(2, in_tower((block,3),(block,2)), true, 82).
holds(2, in_tower((block,3),(block,3)), true, 82).
holds(2, in_tower((block,3),(block,4)), false, 82).
holds(2, in_tower((block,3),(block,5)), false, 82).
holds(2, in_tower((block,3),(block,6)), false, 82).
holds(2, in_tower((block,3),(block,7)), false, 82).
holds(2, in_tower((block,3),(block,8)), false, 82).
holds(2, in_tower((block,3),(block,9)), false, 82).
holds(2, in_tower((block,4),(block,1)), false, 82).
holds(2, in_tower((block,4),(block,2)), false, 82).
holds(2, in_tower((block,4),(block,3)), false, 82).
holds(2, in_tower((block,4),(block,4)), false, 82).
holds(2, in_tower((block,4),(block,5)), false, 82).
holds(2, in_tower((block,4),(block,6)), false, 82).
holds(2, in_tower((block,4),(block,7)), false, 82).
holds(2, in_tower((block,4),(block,8)), false, 82).
holds(2, in_tower((block,4),(block,9)), false, 82).
holds(2, in_tower((block,5),(block,1)), false, 82).
holds(2, in_tower((block,5),(block,2)), false, 82).
holds(2, in_tower((block,5),(block,3)), false, 82).
holds(2, in_tower((block,5),(block,4)), false, 82).
holds(2, in_tower((block,5),(block,5)), false, 82).
holds(2, in_tower((block,5),(block,6)), false, 82).
holds(2, in_tower((block,5),(block,7)), false, 82).
holds(2, in_tower((block,5),(block,8)), false, 82).
holds(2, in_tower((block,5),(block,9)), false, 82).
holds(2, in_tower((block,6),(block,1)), false, 82).
holds(2, in_tower((block,6),(block,2)), false, 82).
holds(2, in_tower((block,6),(block,3)), false, 82).
holds(2, in_tower((block,6),(block,4)), true, 82).
holds(2, in_tower((block,6),(block,5)), true, 82).
holds(2, in_tower((block,6),(block,6)), true, 82).
holds(2, in_tower((block,6),(block,7)), false, 82).
holds(2, in_tower((block,6),(block,8)), false, 82).
holds(2, in_tower((block,6),(block,9)), false, 82).
holds(2, in_tower((block,7),(block,1)), false, 82).
holds(2, in_tower((block,7),(block,2)), false, 82).
holds(2, in_tower((block,7),(block,3)), false, 82).
holds(2, in_tower((block,7),(block,4)), false, 82).
holds(2, in_tower((block,7),(block,5)), false, 82).
holds(2, in_tower((block,7),(block,6)), false, 82).
holds(2, in_tower((block,7),(block,7)), true, 82).
holds(2, in_tower((block,7),(block,8)), false, 82).
holds(2, in_tower((block,7),(block,9)), false, 82).
holds(2, in_tower((block,8),(block,1)), false, 82).
holds(2, in_tower((block,8),(block,2)), false, 82).
holds(2, in_tower((block,8),(block,3)), false, 82).
holds(2, in_tower((block,8),(block,4)), false, 82).
holds(2, in_tower((block,8),(block,5)), false, 82).
holds(2, in_tower((block,8),(block,6)), false, 82).
holds(2, in_tower((block,8),(block,7)), false, 82).
holds(2, in_tower((block,8),(block,8)), false, 82).
holds(2, in_tower((block,8),(block,9)), false, 82).
holds(2, in_tower((block,9),(block,1)), false, 82).
holds(2, in_tower((block,9),(block,2)), false, 82).
holds(2, in_tower((block,9),(block,3)), false, 82).
holds(2, in_tower((block,9),(block,4)), false, 82).
holds(2, in_tower((block,9),(block,5)), false, 82).
holds(2, in_tower((block,9),(block,6)), false, 82).
holds(2, in_tower((block,9),(block,7)), false, 82).
holds(2, in_tower((block,9),(block,8)), true, 82).
holds(2, in_tower((block,9),(block,9)), true, 82).
holds(2, on((block,1)), puzzle_room_table, 82).
holds(2, on((block,2)), (block,3), 82).
holds(2, on((block,3)), puzzle_room_table, 82).
holds(2, on((block,4)), (block,5), 82).
holds(2, on((block,5)), (block,6), 82).
holds(2, on((block,6)), puzzle_room_table, 82).
holds(2, on((block,7)), puzzle_room_table, 82).
holds(2, on((block,8)), (block,9), 82).
holds(2, on((block,9)), puzzle_room_table, 82).
holds(2, tower_base((block,1),puzzle_room_table), true, 82).
holds(2, tower_base((block,2),puzzle_room_table), false, 82).
holds(2, tower_base((block,3),puzzle_room_table), true, 82).
holds(2, tower_base((block,4),puzzle_room_table), false, 82).
holds(2, tower_base((block,5),puzzle_room_table), false, 82).
holds(2, tower_base((block,6),puzzle_room_table), true, 82).
holds(2, tower_base((block,7),puzzle_room_table), true, 82).
holds(2, tower_base((block,8),puzzle_room_table), false, 82).
holds(2, tower_base((block,9),puzzle_room_table), true, 82).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 82).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 82).

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 52})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 53})

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 52).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 53).

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=82, step_range=range(0, 83)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 82, Total actions = 82, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EE0A4F35E0>]
	incrementor = SolveIncrementor(step_start=82, step_increase=1, step_increase_initial=2, step_end_min=84, step_end_max=300, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1448.3892025000205, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 82), range_=None), IncPart(name='plan_module', args=('#inc', 82, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 82, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 82, 52, 53, 'sequential', 'true'), range_=None)]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1252 rules

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0063877000011416385s

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039508s.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006877s with result Satisfiable.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EE0A5D6AE0>

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 82)
	('last_sgoals', 53)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('first_sgoals', 52)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EE0A5D6AE0>)

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(52, 83)', truth=True, inc_range=None)

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 82). %* None *%
#program plan_module(#inc, 82, false, false). %* None *%
#program optimisation_module(#inc, 82, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 82, 52, 53, sequential, true). %* None *%

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     81 : Current =     83
Incrementor step ends | Minimum  =     84 : Maximum =    300

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('state_module', [Number(82), Number(82)]), ('plan_module', [Number(82), Number(82), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(82), Number(82), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(82), Number(52), Number(53), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(83), Number(82)]), ('plan_module', [Number(83), Number(82), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(83), Number(82), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(82), Number(52), Number(53), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.241262s.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 82: original = External(symbol='current_last_sgoals(52, 83)', truth=True, inc_range=None), conversion = current_last_sgoals(52,83).

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 83: original = External(symbol='current_last_sgoals(52, 83)', truth=True, inc_range=None), conversion = current_last_sgoals(52,83).

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029800s with result Satisfiable.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2710622000013245, Incremental time limit = None
Running cumulative time = 0.2710622000013245, Cumulative time limit = 1448.3892025000205
Used memory = (RSS = 2110.675781Mb, VMS = 2105.781250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.241262s, Solving = 0.029800s, Total = 0.271062s, Memory = (RSS = 2110.675781Mb, VMS = 2105.781250Mb), Step range = [82-83]), Calls = 1
Final Model :: Total atoms = 7229, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=81, end_step=83, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2412623000000167, solving_time=0.029799900001307833, total_time=0.2710622000013245, memory=Memory(rss=2110.67578125, vms=2105.78125), step_range=range(82, 84), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2412623000000167, solving_time=0.029799900001307833, total_time=0.2710622000013245, memory=Memory(rss=2110.67578125, vms=2105.78125), step_range=range(82, 84), clingo_stats={'problem': {'lp': {'atoms': 21017.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 72698.0, 'bodies_tr': 72698.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 979.0, 'rules': 144609.0, 'rules_normal': 143760.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 144609.0, 'rules_tr_normal': 143760.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 37923.0, 'eqs_atom': 12053.0, 'eqs_body': 3094.0, 'eqs_other': 22776.0}, 'lpStep': {'atoms': 11227.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68612.0, 'bodies_tr': 68612.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 979.0, 'rules': 133424.0, 'rules_normal': 132575.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 133424.0, 'rules_tr_normal': 132575.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 17793.0, 'eqs_atom': 4537.0, 'eqs_body': 763.0, 'eqs_other': 12493.0}, 'generator': {'vars': 4180.0, 'vars_eliminated': 0.0, 'vars_frozen': 2661.0, 'constraints': 26.0, 'constraints_binary': 2462.0, 'constraints_ternary': 379.0, 'acyc_edges': 0.0, 'complexity': 2893.0}}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 21.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 54.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0], 'lower': [0.0], 'concurrency': 6.0, 'winner': 3.0, 'times': {'total': 0.27105712890625, 'cpu': 0.265625, 'solve': 0.009000778198242188, 'unsat': 0.0070095062255859375, 'sat': 0.00199127197265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.32405853271484375, 'cpu': 0.328125, 'solve': 0.011993408203125, 'unsat': 0.0070095062255859375, 'sat': 0.00199127197265625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 25.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 22.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 60.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{52: 83}

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 53 achieved :: Progression >> total requested sgoals = 2, current total achieved sgoals = 2 (100.00% solved)

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(53, 83)', truth=True, inc_range=None)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 53, step = 83]:
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 53)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Reaction at search length 83:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     83 : Current =     84
Incrementor step ends | Minimum  =     84 : Maximum =    300

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(84), Number(82)]), ('plan_module', [Number(84), Number(82), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(84), Number(82), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(82), Number(52), Number(53), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162774s.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 84: original = External(symbol='current_last_sgoals(53, 83)', truth=True, inc_range=None), conversion = current_last_sgoals(53,83).

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018970s with result Satisfiable.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.181743600001937, Incremental time limit = None
Running cumulative time = 0.45280580000326154, Cumulative time limit = 1448.3892025000205
Used memory = (RSS = 2110.683594Mb, VMS = 2106.031250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.404036s, Solving = 0.048770s, Total = 0.452806s, Memory = (RSS = 2110.683594Mb, VMS = 2106.031250Mb), Step range = [82-84]), Calls = 2
Final Model :: Total atoms = 7959, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=83, end_step=84, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.40403620000142837, solving_time=0.04876960000183317, total_time=0.45280580000326154, memory=Memory(rss=2110.68359375, vms=2106.03125), step_range=range(82, 85), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16277390000141168, solving_time=0.018969700000525336, total_time=0.181743600001937, memory=Memory(rss=2110.68359375, vms=2106.03125), step_range=range(84, 85), clingo_stats={'problem': {'lp': {'atoms': 24065.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 134049.0, 'bodies_tr': 134049.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 735.0, 'count_bodies_tr': 735.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1063.0, 'rules': 262237.0, 'rules_normal': 261054.0, 'rules_choice': 1181.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 262237.0, 'rules_tr_normal': 261054.0, 'rules_tr_choice': 1181.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43154.0, 'eqs_atom': 13044.0, 'eqs_body': 3797.0, 'eqs_other': 26313.0}, 'lpStep': {'atoms': 3048.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61351.0, 'bodies_tr': 61351.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 84.0, 'rules': 117628.0, 'rules_normal': 117294.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 117628.0, 'rules_tr_normal': 117294.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5231.0, 'eqs_atom': 991.0, 'eqs_body': 703.0, 'eqs_other': 3537.0}, 'generator': {'vars': 4691.0, 'vars_eliminated': 0.0, 'vars_frozen': 3027.0, 'constraints': 79.0, 'constraints_binary': 5743.0, 'constraints_ternary': 695.0, 'acyc_edges': 0.0, 'complexity': 6557.0}}, 'solving': {'solvers': {'choices': 108.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 31.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 78.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [-1.0], 'lower': [-1.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.18303871154785156, 'cpu': 0.171875, 'solve': 0.008001327514648438, 'unsat': 0.0070018768310546875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5070972442626953, 'cpu': 0.5, 'solve': 0.019994735717773438, 'unsat': 0.014011383056640625, 'sat': 0.00299072265625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 133.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 53.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 138.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{52: 83, 53: 84}

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 54 achieved :: Progression >> total requested sgoals = 2, current total achieved sgoals = 3 (150.00% solved)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 53 was achieved successfully.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.241262s, Solving = 0.029800s, Total = 0.271062s, Memory = (RSS = 2110.675781Mb, VMS = 2105.781250Mb), Step range = [82-83]
2 : Statistics :: Grounding = 0.162774s, Solving = 0.018970s, Total = 0.181744s, Memory = (RSS = 2110.683594Mb, VMS = 2106.031250Mb), Step range = [84-84]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.452806s due to: External generator exit.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49, 80: 50, 81: 50, 82: 51}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79, 50: 81, 51: 82}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49, 80: 50, 81: 50, 82: 51, 83: 52, 84: 53}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79, 50: 81, 51: 82, 52: 83, 53: 84}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 53, Last requested goal index = 53, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.404036s, Solving = 0.048770s, Total = 0.452806s, Memory = (RSS = 2110.683594Mb, VMS = 2106.031250Mb), Step range = [82-84]), Calls = 2
Model :: Total atoms = 7959, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 25:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 45:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 56:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 59:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 60:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 61:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 65:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 69:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 70:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 72:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 74:
    Current Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 75:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 76:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 77:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 79:
    Current Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 80:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 81:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 82:
    Current Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 83:
    Current Sub-goals:
        [Index = 52] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 52] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 84:
    Current Sub-goals:
        [Index = 53] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 53] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Monolevel problem 23 at level 1 solved.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Online planning increment 23 finished.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 4 : Total constraining sub-goal stages = 29 : Goals achieved = 29 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 23 : Total constraining sub-goal stages = 55 : Goals achieved = 53 : Goals unachieved = 2 : Complete = False

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 24 by method ground-first is [1-1].

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 24 at level 1:
Total Templated Partial Problems = 6, Problem Range = [19-24], Size = 8, Sub-goal Stage Range = [48-55]
Division points [total=5] : [(Index = 48, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 49, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 50, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 51, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 53, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [54-55]

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=84, step_range=range(0, 85)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [54-55], problem number = 24, increment number = 24

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 54)
	('last_sgoals', 55)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1634.3050371000063)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [54-55] : Concurrency disabled : Minimum search length bound disabled with value 85

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 54
last_sgoals = 55
start_step = 84
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 85

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[02-03-2022_00-42-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[02-03-2022_00-42-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 84 as problem start state.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,1))', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 84})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 84})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 84})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 84})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 84})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 84})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 84})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 84})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 84})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 84})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'S': 84})
Fluent({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'S': 84})

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 84).
holds(1, complete_tower(red,puzzle_room_table), true, 84).
holds(1, complete_tower(yellow,puzzle_room_table), false, 84).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 84).
holds(1, configuration(manipulator_end_2), aligned_with((block,1)), 84).
holds(1, configuration(manipulator_limb_1), extended, 84).
holds(1, configuration(manipulator_limb_2), extended, 84).
holds(1, configuration(puzzle_room_door), open, 84).
holds(1, configuration(starting_room_door), closed, 84).
holds(1, configuration(store_room_door), open, 84).
holds(1, grasping(manipulator_arm_1), nothing, 84).
holds(1, grasping(manipulator_arm_2), (block,1), 84).
holds(1, grasping(manipulator_end_1), nothing, 84).
holds(1, grasping(manipulator_end_2), (block,1), 84).
holds(1, in((block,1)), (puzzle_room,1), 84).
holds(1, in((block,2)), (puzzle_room,1), 84).
holds(1, in((block,3)), (puzzle_room,1), 84).
holds(1, in((block,4)), (puzzle_room,1), 84).
holds(1, in((block,5)), (puzzle_room,1), 84).
holds(1, in((block,6)), (puzzle_room,1), 84).
holds(1, in((block,7)), (puzzle_room,1), 84).
holds(1, in((block,8)), (puzzle_room,1), 84).
holds(1, in((block,9)), (puzzle_room,1), 84).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 84).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 84).
holds(1, in(manipulator_end_1), (puzzle_room,1), 84).
holds(1, in(manipulator_end_2), (puzzle_room,1), 84).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 84).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 84).
holds(1, in(puzzle_room_table), (puzzle_room,1), 84).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 84).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 84).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 84).
holds(1, in(talos), (puzzle_room,1), 84).
holds(1, in_tower((block,1),(block,1)), false, 84).
holds(1, in_tower((block,1),(block,2)), false, 84).
holds(1, in_tower((block,1),(block,3)), false, 84).
holds(1, in_tower((block,1),(block,4)), false, 84).
holds(1, in_tower((block,1),(block,5)), false, 84).
holds(1, in_tower((block,1),(block,6)), false, 84).
holds(1, in_tower((block,1),(block,7)), false, 84).
holds(1, in_tower((block,1),(block,8)), false, 84).
holds(1, in_tower((block,1),(block,9)), false, 84).
holds(1, in_tower((block,2),(block,1)), false, 84).
holds(1, in_tower((block,2),(block,2)), false, 84).
holds(1, in_tower((block,2),(block,3)), false, 84).
holds(1, in_tower((block,2),(block,4)), false, 84).
holds(1, in_tower((block,2),(block,5)), false, 84).
holds(1, in_tower((block,2),(block,6)), false, 84).
holds(1, in_tower((block,2),(block,7)), false, 84).
holds(1, in_tower((block,2),(block,8)), false, 84).
holds(1, in_tower((block,2),(block,9)), false, 84).
holds(1, in_tower((block,3),(block,1)), true, 84).
holds(1, in_tower((block,3),(block,2)), true, 84).
holds(1, in_tower((block,3),(block,3)), true, 84).
holds(1, in_tower((block,3),(block,4)), false, 84).
holds(1, in_tower((block,3),(block,5)), false, 84).
holds(1, in_tower((block,3),(block,6)), false, 84).
holds(1, in_tower((block,3),(block,7)), false, 84).
holds(1, in_tower((block,3),(block,8)), false, 84).
holds(1, in_tower((block,3),(block,9)), false, 84).
holds(1, in_tower((block,4),(block,1)), false, 84).
holds(1, in_tower((block,4),(block,2)), false, 84).
holds(1, in_tower((block,4),(block,3)), false, 84).
holds(1, in_tower((block,4),(block,4)), false, 84).
holds(1, in_tower((block,4),(block,5)), false, 84).
holds(1, in_tower((block,4),(block,6)), false, 84).
holds(1, in_tower((block,4),(block,7)), false, 84).
holds(1, in_tower((block,4),(block,8)), false, 84).
holds(1, in_tower((block,4),(block,9)), false, 84).
holds(1, in_tower((block,5),(block,1)), false, 84).
holds(1, in_tower((block,5),(block,2)), false, 84).
holds(1, in_tower((block,5),(block,3)), false, 84).
holds(1, in_tower((block,5),(block,4)), false, 84).
holds(1, in_tower((block,5),(block,5)), false, 84).
holds(1, in_tower((block,5),(block,6)), false, 84).
holds(1, in_tower((block,5),(block,7)), false, 84).
holds(1, in_tower((block,5),(block,8)), false, 84).
holds(1, in_tower((block,5),(block,9)), false, 84).
holds(1, in_tower((block,6),(block,1)), false, 84).
holds(1, in_tower((block,6),(block,2)), false, 84).
holds(1, in_tower((block,6),(block,3)), false, 84).
holds(1, in_tower((block,6),(block,4)), true, 84).
holds(1, in_tower((block,6),(block,5)), true, 84).
holds(1, in_tower((block,6),(block,6)), true, 84).
holds(1, in_tower((block,6),(block,7)), false, 84).
holds(1, in_tower((block,6),(block,8)), false, 84).
holds(1, in_tower((block,6),(block,9)), false, 84).
holds(1, in_tower((block,7),(block,1)), false, 84).
holds(1, in_tower((block,7),(block,2)), false, 84).
holds(1, in_tower((block,7),(block,3)), false, 84).
holds(1, in_tower((block,7),(block,4)), false, 84).
holds(1, in_tower((block,7),(block,5)), false, 84).
holds(1, in_tower((block,7),(block,6)), false, 84).
holds(1, in_tower((block,7),(block,7)), true, 84).
holds(1, in_tower((block,7),(block,8)), false, 84).
holds(1, in_tower((block,7),(block,9)), false, 84).
holds(1, in_tower((block,8),(block,1)), false, 84).
holds(1, in_tower((block,8),(block,2)), false, 84).
holds(1, in_tower((block,8),(block,3)), false, 84).
holds(1, in_tower((block,8),(block,4)), false, 84).
holds(1, in_tower((block,8),(block,5)), false, 84).
holds(1, in_tower((block,8),(block,6)), false, 84).
holds(1, in_tower((block,8),(block,7)), false, 84).
holds(1, in_tower((block,8),(block,8)), false, 84).
holds(1, in_tower((block,8),(block,9)), false, 84).
holds(1, in_tower((block,9),(block,1)), false, 84).
holds(1, in_tower((block,9),(block,2)), false, 84).
holds(1, in_tower((block,9),(block,3)), false, 84).
holds(1, in_tower((block,9),(block,4)), false, 84).
holds(1, in_tower((block,9),(block,5)), false, 84).
holds(1, in_tower((block,9),(block,6)), false, 84).
holds(1, in_tower((block,9),(block,7)), false, 84).
holds(1, in_tower((block,9),(block,8)), true, 84).
holds(1, in_tower((block,9),(block,9)), true, 84).
holds(1, on((block,1)), (block,2), 84).
holds(1, on((block,2)), (block,3), 84).
holds(1, on((block,3)), puzzle_room_table_left, 84).
holds(1, on((block,4)), (block,5), 84).
holds(1, on((block,5)), (block,6), 84).
holds(1, on((block,6)), puzzle_room_table_right, 84).
holds(1, on((block,7)), puzzle_room_table_middle, 84).
holds(1, on((block,8)), (block,9), 84).
holds(1, on((block,9)), puzzle_room_table_middle, 84).
holds(1, tower_base((block,1),puzzle_room_table), false, 84).
holds(1, tower_base((block,2),puzzle_room_table), false, 84).
holds(1, tower_base((block,3),puzzle_room_table), true, 84).
holds(1, tower_base((block,4),puzzle_room_table), false, 84).
holds(1, tower_base((block,5),puzzle_room_table), false, 84).
holds(1, tower_base((block,6),puzzle_room_table), true, 84).
holds(1, tower_base((block,7),puzzle_room_table), true, 84).
holds(1, tower_base((block,8),puzzle_room_table), false, 84).
holds(1, tower_base((block,9),puzzle_room_table), true, 84).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,7),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,8),puzzle_room_table), false, 84).
holds(1, unordered_tower((block,9),puzzle_room_table), false, 84).
holds(2, complete_tower(blue,puzzle_room_table), true, 84).
holds(2, complete_tower(red,puzzle_room_table), true, 84).
holds(2, complete_tower(yellow,puzzle_room_table), false, 84).
holds(2, configuration(manipulator_arm_1), extended, 84).
holds(2, configuration(manipulator_arm_2), extended, 84).
holds(2, configuration(puzzle_room_door), open, 84).
holds(2, configuration(starting_room_door), closed, 84).
holds(2, configuration(store_room_door), open, 84).
holds(2, grasping(manipulator_arm_1), nothing, 84).
holds(2, grasping(manipulator_arm_2), (block,1), 84).
holds(2, in((block,1)), puzzle_room, 84).
holds(2, in((block,2)), puzzle_room, 84).
holds(2, in((block,3)), puzzle_room, 84).
holds(2, in((block,4)), puzzle_room, 84).
holds(2, in((block,5)), puzzle_room, 84).
holds(2, in((block,6)), puzzle_room, 84).
holds(2, in((block,7)), puzzle_room, 84).
holds(2, in((block,8)), puzzle_room, 84).
holds(2, in((block,9)), puzzle_room, 84).
holds(2, in(manipulator_arm_1), puzzle_room, 84).
holds(2, in(manipulator_arm_2), puzzle_room, 84).
holds(2, in(puzzle_room_table), puzzle_room, 84).
holds(2, in(talos), puzzle_room, 84).
holds(2, in_tower((block,1),(block,1)), false, 84).
holds(2, in_tower((block,1),(block,2)), false, 84).
holds(2, in_tower((block,1),(block,3)), false, 84).
holds(2, in_tower((block,1),(block,4)), false, 84).
holds(2, in_tower((block,1),(block,5)), false, 84).
holds(2, in_tower((block,1),(block,6)), false, 84).
holds(2, in_tower((block,1),(block,7)), false, 84).
holds(2, in_tower((block,1),(block,8)), false, 84).
holds(2, in_tower((block,1),(block,9)), false, 84).
holds(2, in_tower((block,2),(block,1)), false, 84).
holds(2, in_tower((block,2),(block,2)), false, 84).
holds(2, in_tower((block,2),(block,3)), false, 84).
holds(2, in_tower((block,2),(block,4)), false, 84).
holds(2, in_tower((block,2),(block,5)), false, 84).
holds(2, in_tower((block,2),(block,6)), false, 84).
holds(2, in_tower((block,2),(block,7)), false, 84).
holds(2, in_tower((block,2),(block,8)), false, 84).
holds(2, in_tower((block,2),(block,9)), false, 84).
holds(2, in_tower((block,3),(block,1)), true, 84).
holds(2, in_tower((block,3),(block,2)), true, 84).
holds(2, in_tower((block,3),(block,3)), true, 84).
holds(2, in_tower((block,3),(block,4)), false, 84).
holds(2, in_tower((block,3),(block,5)), false, 84).
holds(2, in_tower((block,3),(block,6)), false, 84).
holds(2, in_tower((block,3),(block,7)), false, 84).
holds(2, in_tower((block,3),(block,8)), false, 84).
holds(2, in_tower((block,3),(block,9)), false, 84).
holds(2, in_tower((block,4),(block,1)), false, 84).
holds(2, in_tower((block,4),(block,2)), false, 84).
holds(2, in_tower((block,4),(block,3)), false, 84).
holds(2, in_tower((block,4),(block,4)), false, 84).
holds(2, in_tower((block,4),(block,5)), false, 84).
holds(2, in_tower((block,4),(block,6)), false, 84).
holds(2, in_tower((block,4),(block,7)), false, 84).
holds(2, in_tower((block,4),(block,8)), false, 84).
holds(2, in_tower((block,4),(block,9)), false, 84).
holds(2, in_tower((block,5),(block,1)), false, 84).
holds(2, in_tower((block,5),(block,2)), false, 84).
holds(2, in_tower((block,5),(block,3)), false, 84).
holds(2, in_tower((block,5),(block,4)), false, 84).
holds(2, in_tower((block,5),(block,5)), false, 84).
holds(2, in_tower((block,5),(block,6)), false, 84).
holds(2, in_tower((block,5),(block,7)), false, 84).
holds(2, in_tower((block,5),(block,8)), false, 84).
holds(2, in_tower((block,5),(block,9)), false, 84).
holds(2, in_tower((block,6),(block,1)), false, 84).
holds(2, in_tower((block,6),(block,2)), false, 84).
holds(2, in_tower((block,6),(block,3)), false, 84).
holds(2, in_tower((block,6),(block,4)), true, 84).
holds(2, in_tower((block,6),(block,5)), true, 84).
holds(2, in_tower((block,6),(block,6)), true, 84).
holds(2, in_tower((block,6),(block,7)), false, 84).
holds(2, in_tower((block,6),(block,8)), false, 84).
holds(2, in_tower((block,6),(block,9)), false, 84).
holds(2, in_tower((block,7),(block,1)), false, 84).
holds(2, in_tower((block,7),(block,2)), false, 84).
holds(2, in_tower((block,7),(block,3)), false, 84).
holds(2, in_tower((block,7),(block,4)), false, 84).
holds(2, in_tower((block,7),(block,5)), false, 84).
holds(2, in_tower((block,7),(block,6)), false, 84).
holds(2, in_tower((block,7),(block,7)), true, 84).
holds(2, in_tower((block,7),(block,8)), false, 84).
holds(2, in_tower((block,7),(block,9)), false, 84).
holds(2, in_tower((block,8),(block,1)), false, 84).
holds(2, in_tower((block,8),(block,2)), false, 84).
holds(2, in_tower((block,8),(block,3)), false, 84).
holds(2, in_tower((block,8),(block,4)), false, 84).
holds(2, in_tower((block,8),(block,5)), false, 84).
holds(2, in_tower((block,8),(block,6)), false, 84).
holds(2, in_tower((block,8),(block,7)), false, 84).
holds(2, in_tower((block,8),(block,8)), false, 84).
holds(2, in_tower((block,8),(block,9)), false, 84).
holds(2, in_tower((block,9),(block,1)), false, 84).
holds(2, in_tower((block,9),(block,2)), false, 84).
holds(2, in_tower((block,9),(block,3)), false, 84).
holds(2, in_tower((block,9),(block,4)), false, 84).
holds(2, in_tower((block,9),(block,5)), false, 84).
holds(2, in_tower((block,9),(block,6)), false, 84).
holds(2, in_tower((block,9),(block,7)), false, 84).
holds(2, in_tower((block,9),(block,8)), true, 84).
holds(2, in_tower((block,9),(block,9)), true, 84).
holds(2, on((block,1)), (block,2), 84).
holds(2, on((block,2)), (block,3), 84).
holds(2, on((block,3)), puzzle_room_table, 84).
holds(2, on((block,4)), (block,5), 84).
holds(2, on((block,5)), (block,6), 84).
holds(2, on((block,6)), puzzle_room_table, 84).
holds(2, on((block,7)), puzzle_room_table, 84).
holds(2, on((block,8)), (block,9), 84).
holds(2, on((block,9)), puzzle_room_table, 84).
holds(2, tower_base((block,1),puzzle_room_table), false, 84).
holds(2, tower_base((block,2),puzzle_room_table), false, 84).
holds(2, tower_base((block,3),puzzle_room_table), true, 84).
holds(2, tower_base((block,4),puzzle_room_table), false, 84).
holds(2, tower_base((block,5),puzzle_room_table), false, 84).
holds(2, tower_base((block,6),puzzle_room_table), true, 84).
holds(2, tower_base((block,7),puzzle_room_table), true, 84).
holds(2, tower_base((block,8),puzzle_room_table), false, 84).
holds(2, tower_base((block,9),puzzle_room_table), true, 84).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,7),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,8),puzzle_room_table), false, 84).
holds(2, unordered_tower((block,9),puzzle_room_table), false, 84).

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(yellow,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, tower_base((block,7),puzzle_room_table), false, true).
final_goal(1, tower_base((block,7),puzzle_room_table), true, false).
final_goal(1, tower_base((block,8),puzzle_room_table), false, true).
final_goal(1, tower_base((block,8),puzzle_room_table), true, false).
final_goal(1, tower_base((block,9),puzzle_room_table), false, false).
final_goal(1, tower_base((block,9),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, complete_tower(yellow,puzzle_room_table), false, false).
final_goal(2, complete_tower(yellow,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, tower_base((block,7),puzzle_room_table), false, true).
final_goal(2, tower_base((block,7),puzzle_room_table), true, false).
final_goal(2, tower_base((block,8),puzzle_room_table), false, true).
final_goal(2, tower_base((block,8),puzzle_room_table), true, false).
final_goal(2, tower_base((block,9),puzzle_room_table), false, false).
final_goal(2, tower_base((block,9),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,7),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,7),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,8),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,8),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,9),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,9),puzzle_room_table), true, false).

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'I': 54})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 55})

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 54).
sub_goal(2, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 55).

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=84, step_range=range(0, 85)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 84, Total actions = 84, Produced sub-goal stages = 0

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001EE0A4F3CA0>]
	incrementor = SolveIncrementor(step_start=84, step_increase=1, step_increase_initial=2, step_end_min=86, step_end_max=300, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1447.935551500017, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 84), range_=None), IncPart(name='plan_module', args=('#inc', 84, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 84, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 84, 54, 55, 'sequential', 'true'), range_=None)]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1252 rules

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006787700000131736s

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.039651s.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007019s with result Satisfiable.

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001EE0A7E2AE0>

[02-03-2022_00-42-06] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_1.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 84)
	('last_sgoals', 55)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001ED9D4544C0>)
	('first_sgoals', 54)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001EE0A7E2AE0>)

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(54, 85)', truth=True, inc_range=None)

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 84). %* None *%
#program plan_module(#inc, 84, false, false). %* None *%
#program optimisation_module(#inc, 84, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 84, 54, 55, sequential, true). %* None *%

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     83 : Current =     85
Incrementor step ends | Minimum  =     86 : Maximum =    300

[02-03-2022_00-42-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(84), Number(84)]), ('plan_module', [Number(84), Number(84), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(84), Number(84), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(84), Number(54), Number(55), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(85), Number(84)]), ('plan_module', [Number(85), Number(84), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(85), Number(84), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(84), Number(54), Number(55), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.240399s.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 84: original = External(symbol='current_last_sgoals(54, 85)', truth=True, inc_range=None), conversion = current_last_sgoals(54,85).

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 85: original = External(symbol='current_last_sgoals(54, 85)', truth=True, inc_range=None), conversion = current_last_sgoals(54,85).

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021193s with result Unsatisfiable.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.26159150000057707, Incremental time limit = None
Running cumulative time = 0.26159150000057707, Cumulative time limit = 1447.935551500017
Used memory = (RSS = 2111.175781Mb, VMS = 2106.281250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=83, end_step=85, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.240398500000083, solving_time=0.021193000000494067, total_time=0.26159150000057707, memory=Memory(rss=2111.17578125, vms=2106.28125), step_range=range(84, 86), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.240398500000083, solving_time=0.021193000000494067, total_time=0.26159150000057707, memory=Memory(rss=2111.17578125, vms=2106.28125), step_range=range(84, 86), clingo_stats={'problem': {'lp': {'atoms': 21012.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 72355.0, 'bodies_tr': 72355.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 929.0, 'rules': 144180.0, 'rules_normal': 143331.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 144180.0, 'rules_tr_normal': 143331.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 37791.0, 'eqs_atom': 12067.0, 'eqs_body': 3105.0, 'eqs_other': 22619.0}, 'lpStep': {'atoms': 11222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68269.0, 'bodies_tr': 68269.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 929.0, 'rules': 132995.0, 'rules_normal': 132146.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 132995.0, 'rules_tr_normal': 132146.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 17661.0, 'eqs_atom': 4551.0, 'eqs_body': 774.0, 'eqs_other': 12336.0}, 'generator': {'vars': 4050.0, 'vars_eliminated': 0.0, 'vars_frozen': 2635.0, 'constraints': 18.0, 'constraints_binary': 2182.0, 'constraints_ternary': 365.0, 'acyc_edges': 0.0, 'complexity': 2581.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 54.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.26104736328125, 'cpu': 0.25, 'solve': 0.0009918212890625, 'unsat': 0.0009918212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.31505775451660156, 'cpu': 0.296875, 'solve': 0.0049915313720703125, 'unsat': 0.0009918212890625, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 60.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     86 : Maximum =    300

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(84)]), ('plan_module', [Number(86), Number(84), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(86), Number(84), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(84), Number(54), Number(55), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161501s.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018060s with result Satisfiable.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17956090000006952, Incremental time limit = None
Running cumulative time = 0.4411524000006466, Cumulative time limit = 1447.935551500017
Used memory = (RSS = 2111.175781Mb, VMS = 2106.281250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.401900s, Solving = 0.039253s, Total = 0.441152s, Memory = (RSS = 2111.175781Mb, VMS = 2106.281250Mb), Step range = [84-86]), Calls = 2
Final Model :: Total atoms = 7956, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=85, end_step=86, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4018997000002855, solving_time=0.039252700000361074, total_time=0.4411524000006466, memory=Memory(rss=2111.17578125, vms=2106.28125), step_range=range(84, 87), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16150120000020252, solving_time=0.018059699999867007, total_time=0.17956090000006952, memory=Memory(rss=2111.17578125, vms=2106.28125), step_range=range(86, 87), clingo_stats={'problem': {'lp': {'atoms': 24056.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 133599.0, 'bodies_tr': 133599.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 735.0, 'count_bodies_tr': 735.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 966.0, 'rules': 261703.0, 'rules_normal': 260520.0, 'rules_choice': 1181.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 261703.0, 'rules_tr_normal': 260520.0, 'rules_tr_choice': 1181.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43043.0, 'eqs_atom': 13175.0, 'eqs_body': 3962.0, 'eqs_other': 25906.0}, 'lpStep': {'atoms': 3044.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61244.0, 'bodies_tr': 61244.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 117523.0, 'rules_normal': 117189.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 117523.0, 'rules_tr_normal': 117189.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5252.0, 'eqs_atom': 1108.0, 'eqs_body': 857.0, 'eqs_other': 3287.0}, 'generator': {'vars': 4367.0, 'vars_eliminated': 0.0, 'vars_frozen': 2861.0, 'constraints': 56.0, 'constraints_binary': 4591.0, 'constraints_ternary': 526.0, 'acyc_edges': 0.0, 'complexity': 5205.0}}, 'solving': {'solvers': {'choices': 108.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 31.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 78.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.18103981018066406, 'cpu': 0.171875, 'solve': 0.008001327514648438, 'unsat': 0.0, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.4960975646972656, 'cpu': 0.46875, 'solve': 0.01299285888671875, 'unsat': 0.0009918212890625, 'sat': 0.0019989013671875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 108.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 138.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{54: 86}

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 55 achieved :: Progression >> total requested sgoals = 2, current total achieved sgoals = 2 (100.00% solved)

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(55, 86)', truth=True, inc_range=None)

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 55, step = 86]:
sub_goal(2, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 55)

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(86)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete_tower(blue,puzzle_room_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_table), true, true)
final_goal(1, complete_tower(yellow,puzzle_room_table), false, false)
final_goal(1, complete_tower(yellow,puzzle_room_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,1),(block,7)), false, true)
final_goal(1, in_tower((block,1),(block,7)), true, false)
final_goal(1, in_tower((block,1),(block,8)), false, true)
final_goal(1, in_tower((block,1),(block,8)), true, false)
final_goal(1, in_tower((block,1),(block,9)), false, true)
final_goal(1, in_tower((block,1),(block,9)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,7)), false, true)
final_goal(1, in_tower((block,2),(block,7)), true, false)
final_goal(1, in_tower((block,2),(block,8)), false, true)
final_goal(1, in_tower((block,2),(block,8)), true, false)
final_goal(1, in_tower((block,2),(block,9)), false, true)
final_goal(1, in_tower((block,2),(block,9)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,7)), false, true)
final_goal(1, in_tower((block,3),(block,7)), true, false)
final_goal(1, in_tower((block,3),(block,8)), false, true)
final_goal(1, in_tower((block,3),(block,8)), true, false)
final_goal(1, in_tower((block,3),(block,9)), false, true)
final_goal(1, in_tower((block,3),(block,9)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,7)), false, true)
final_goal(1, in_tower((block,4),(block,7)), true, false)
final_goal(1, in_tower((block,4),(block,8)), false, true)
final_goal(1, in_tower((block,4),(block,8)), true, false)
final_goal(1, in_tower((block,4),(block,9)), false, true)
final_goal(1, in_tower((block,4),(block,9)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,7)), false, true)
final_goal(1, in_tower((block,5),(block,7)), true, false)
final_goal(1, in_tower((block,5),(block,8)), false, true)
final_goal(1, in_tower((block,5),(block,8)), true, false)
final_goal(1, in_tower((block,5),(block,9)), false, true)
final_goal(1, in_tower((block,5),(block,9)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, in_tower((block,6),(block,7)), false, true)
final_goal(1, in_tower((block,6),(block,7)), true, false)
final_goal(1, in_tower((block,6),(block,8)), false, true)
final_goal(1, in_tower((block,6),(block,8)), true, false)
final_goal(1, in_tower((block,6),(block,9)), false, true)
final_goal(1, in_tower((block,6),(block,9)), true, false)
final_goal(1, in_tower((block,7),(block,1)), false, true)
final_goal(1, in_tower((block,7),(block,1)), true, false)
final_goal(1, in_tower((block,7),(block,2)), false, true)
final_goal(1, in_tower((block,7),(block,2)), true, false)
final_goal(1, in_tower((block,7),(block,3)), false, true)
final_goal(1, in_tower((block,7),(block,3)), true, false)
final_goal(1, in_tower((block,7),(block,4)), false, true)
final_goal(1, in_tower((block,7),(block,4)), true, false)
final_goal(1, in_tower((block,7),(block,5)), false, true)
final_goal(1, in_tower((block,7),(block,5)), true, false)
final_goal(1, in_tower((block,7),(block,6)), false, true)
final_goal(1, in_tower((block,7),(block,6)), true, false)
final_goal(1, in_tower((block,7),(block,7)), false, true)
final_goal(1, in_tower((block,7),(block,7)), true, false)
final_goal(1, in_tower((block,7),(block,8)), false, true)
final_goal(1, in_tower((block,7),(block,8)), true, false)
final_goal(1, in_tower((block,7),(block,9)), false, true)
final_goal(1, in_tower((block,7),(block,9)), true, false)
final_goal(1, in_tower((block,8),(block,1)), false, true)
final_goal(1, in_tower((block,8),(block,1)), true, false)
final_goal(1, in_tower((block,8),(block,2)), false, true)
final_goal(1, in_tower((block,8),(block,2)), true, false)
final_goal(1, in_tower((block,8),(block,3)), false, true)
final_goal(1, in_tower((block,8),(block,3)), true, false)
final_goal(1, in_tower((block,8),(block,4)), false, true)
final_goal(1, in_tower((block,8),(block,4)), true, false)
final_goal(1, in_tower((block,8),(block,5)), false, true)
final_goal(1, in_tower((block,8),(block,5)), true, false)
final_goal(1, in_tower((block,8),(block,6)), false, true)
final_goal(1, in_tower((block,8),(block,6)), true, false)
final_goal(1, in_tower((block,8),(block,7)), false, true)
final_goal(1, in_tower((block,8),(block,7)), true, false)
final_goal(1, in_tower((block,8),(block,8)), false, true)
final_goal(1, in_tower((block,8),(block,8)), true, false)
final_goal(1, in_tower((block,8),(block,9)), false, true)
final_goal(1, in_tower((block,8),(block,9)), true, false)
final_goal(1, in_tower((block,9),(block,1)), false, true)
final_goal(1, in_tower((block,9),(block,1)), true, false)
final_goal(1, in_tower((block,9),(block,2)), false, true)
final_goal(1, in_tower((block,9),(block,2)), true, false)
final_goal(1, in_tower((block,9),(block,3)), false, true)
final_goal(1, in_tower((block,9),(block,3)), true, false)
final_goal(1, in_tower((block,9),(block,4)), false, true)
final_goal(1, in_tower((block,9),(block,4)), true, false)
final_goal(1, in_tower((block,9),(block,5)), false, true)
final_goal(1, in_tower((block,9),(block,5)), true, false)
final_goal(1, in_tower((block,9),(block,6)), false, true)
final_goal(1, in_tower((block,9),(block,6)), true, false)
final_goal(1, in_tower((block,9),(block,7)), false, false)
final_goal(1, in_tower((block,9),(block,7)), true, true)
final_goal(1, in_tower((block,9),(block,8)), false, false)
final_goal(1, in_tower((block,9),(block,8)), true, true)
final_goal(1, in_tower((block,9),(block,9)), false, false)
final_goal(1, in_tower((block,9),(block,9)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), (block,7), false)
final_goal(1, on((block,1)), (block,8), false)
final_goal(1, on((block,1)), (block,9), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), (block,7), false)
final_goal(1, on((block,2)), (block,8), false)
final_goal(1, on((block,2)), (block,9), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), (block,7), false)
final_goal(1, on((block,3)), (block,8), false)
final_goal(1, on((block,3)), (block,9), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), (block,7), false)
final_goal(1, on((block,4)), (block,8), false)
final_goal(1, on((block,4)), (block,9), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), (block,7), false)
final_goal(1, on((block,5)), (block,8), false)
final_goal(1, on((block,5)), (block,9), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), (block,7), false)
final_goal(1, on((block,6)), (block,8), false)
final_goal(1, on((block,6)), (block,9), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_middle, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, on((block,7)), (block,1), false)
final_goal(1, on((block,7)), (block,2), false)
final_goal(1, on((block,7)), (block,3), false)
final_goal(1, on((block,7)), (block,4), false)
final_goal(1, on((block,7)), (block,5), false)
final_goal(1, on((block,7)), (block,6), false)
final_goal(1, on((block,7)), (block,8), true)
final_goal(1, on((block,7)), (block,9), false)
final_goal(1, on((block,7)), nothing, false)
final_goal(1, on((block,7)), puzzle_room_table_left, false)
final_goal(1, on((block,7)), puzzle_room_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_table_right, false)
final_goal(1, on((block,8)), (block,1), false)
final_goal(1, on((block,8)), (block,2), false)
final_goal(1, on((block,8)), (block,3), false)
final_goal(1, on((block,8)), (block,4), false)
final_goal(1, on((block,8)), (block,5), false)
final_goal(1, on((block,8)), (block,6), false)
final_goal(1, on((block,8)), (block,7), false)
final_goal(1, on((block,8)), (block,9), true)
final_goal(1, on((block,8)), nothing, false)
final_goal(1, on((block,8)), puzzle_room_table_left, false)
final_goal(1, on((block,8)), puzzle_room_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_table_right, false)
final_goal(1, on((block,9)), (block,1), false)
final_goal(1, on((block,9)), (block,2), false)
final_goal(1, on((block,9)), (block,3), false)
final_goal(1, on((block,9)), (block,4), false)
final_goal(1, on((block,9)), (block,5), false)
final_goal(1, on((block,9)), (block,6), false)
final_goal(1, on((block,9)), (block,7), false)
final_goal(1, on((block,9)), (block,8), false)
final_goal(1, on((block,9)), nothing, false)
final_goal(1, on((block,9)), puzzle_room_table_left, false)
final_goal(1, on((block,9)), puzzle_room_table_middle, true)
final_goal(1, on((block,9)), puzzle_room_table_right, false)
final_goal(1, tower_base((block,1),puzzle_room_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_table), true, true)
final_goal(1, tower_base((block,4),puzzle_room_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_table), true, true)
final_goal(1, tower_base((block,7),puzzle_room_table), false, true)
final_goal(1, tower_base((block,7),puzzle_room_table), true, false)
final_goal(1, tower_base((block,8),puzzle_room_table), false, true)
final_goal(1, tower_base((block,8),puzzle_room_table), true, false)
final_goal(1, tower_base((block,9),puzzle_room_table), false, false)
final_goal(1, tower_base((block,9),puzzle_room_table), true, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,7),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,7),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,8),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,8),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,9),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,9),puzzle_room_table), true, false)

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     86 : Maximum =    300

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(84)]), ('plan_module', [Number(87), Number(84), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(87), Number(84), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(84), Number(54), Number(55), Function('sequential', [], True), Function('true', [], True)])]

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170077s.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 87: original = External(symbol='current_last_sgoals(55, 86)', truth=True, inc_range=None), conversion = current_last_sgoals(55,86).

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 87: original = External(symbol='seq_achieve_fgoals(86)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(86).

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024017s with result Satisfiable.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19409389999964333, Incremental time limit = None
Running cumulative time = 0.6352463000002899, Cumulative time limit = 1447.935551500017
Used memory = (RSS = 2111.425781Mb, VMS = 2106.531250Mb), Total system virtual memory = 16324.0078125Mb

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.571976s, Solving = 0.063270s, Total = 0.635246s, Memory = (RSS = 2111.425781Mb, VMS = 2106.531250Mb), Step range = [84-87]), Calls = 3
Final Model :: Total atoms = 9302, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=86, end_step=87, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5719764999994368, solving_time=0.06326980000085314, total_time=0.6352463000002899, memory=Memory(rss=2111.42578125, vms=2106.53125), step_range=range(84, 88), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17007679999915126, solving_time=0.024017100000492064, total_time=0.19409389999964333, memory=Memory(rss=2111.42578125, vms=2106.53125), step_range=range(87, 88), clingo_stats={'problem': {'lp': {'atoms': 27377.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 195246.0, 'bodies_tr': 195246.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 81.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1498.0, 'rules': 379859.0, 'rules_normal': 378342.0, 'rules_choice': 1514.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 379859.0, 'rules_tr_normal': 378342.0, 'rules_tr_choice': 1514.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 50120.0, 'eqs_atom': 14433.0, 'eqs_body': 4598.0, 'eqs_other': 31089.0}, 'lpStep': {'atoms': 3321.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61647.0, 'bodies_tr': 61647.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 29.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 532.0, 'rules': 118156.0, 'rules_normal': 117822.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 118156.0, 'rules_tr_normal': 117822.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7077.0, 'eqs_atom': 1258.0, 'eqs_body': 636.0, 'eqs_other': 5183.0}, 'generator': {'vars': 6113.0, 'vars_eliminated': 0.0, 'vars_frozen': 3957.0, 'constraints': 520.0, 'constraints_binary': 16416.0, 'constraints_ternary': 2069.0, 'acyc_edges': 0.0, 'complexity': 19115.0}}, 'solving': {'solvers': {'choices': 144.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 41.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 102.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.19504165649414062, 'cpu': 0.1875, 'solve': 0.01000213623046875, 'unsat': 0.0, 'sat': 0.00199127197265625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6911392211914062, 'cpu': 0.65625, 'solve': 0.0229949951171875, 'unsat': 0.0009918212890625, 'sat': 0.00399017333984375}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 252.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 73.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 8.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 240.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 8.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{54: 86, 55: 87}

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 56 achieved :: Progression >> total requested sgoals = 2, current total achieved sgoals = 3 (150.00% solved)

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 55 was achieved successfully.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.240399s, Solving = 0.021193s, Total = 0.261592s, Memory = (RSS = 2111.175781Mb, VMS = 2106.281250Mb), Step range = [84-85]
2 : Statistics :: Grounding = 0.161501s, Solving = 0.018060s, Total = 0.179561s, Memory = (RSS = 2111.175781Mb, VMS = 2106.281250Mb), Step range = [86-86]
3 : Statistics :: Grounding = 0.170077s, Solving = 0.024017s, Total = 0.194094s, Memory = (RSS = 2111.425781Mb, VMS = 2106.531250Mb), Step range = [87-87]

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.635246s due to: External generator exit.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[02-03-2022_00-42-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49, 80: 50, 81: 50, 82: 51, 83: 52, 84: 53}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79, 50: 81, 51: 82, 52: 83, 53: 84}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 13, 23: 13, 24: 14, 25: 15, 26: 15, 27: 16, 28: 17, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 27, 44: 28, 45: 29, 46: 30, 47: 30, 48: 31, 49: 31, 50: 31, 51: 32, 52: 33, 53: 33, 54: 33, 55: 33, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 39, 66: 39, 67: 40, 68: 40, 69: 41, 70: 42, 71: 43, 72: 44, 73: 44, 74: 45, 75: 46, 76: 47, 77: 47, 78: 48, 79: 49, 80: 50, 81: 50, 82: 51, 83: 52, 84: 53, 85: 54, 86: 54, 87: 55}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 21, 13: 23, 14: 24, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 42, 27: 43, 28: 44, 29: 45, 30: 47, 31: 50, 32: 51, 33: 57, 34: 58, 35: 59, 36: 60, 37: 61, 38: 63, 39: 66, 40: 68, 41: 69, 42: 70, 43: 71, 44: 73, 45: 74, 46: 75, 47: 77, 48: 78, 49: 79, 50: 81, 51: 82, 52: 83, 53: 84, 54: 86, 55: 87}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 12, 30: 12, 31: 12, 32: 13, 33: 13, 34: 14, 35: 14, 36: 15, 37: 15, 38: 15, 39: 15, 40: 16, 41: 16, 42: 17, 43: 17, 44: 18, 45: 19, 46: 20, 47: 21, 48: 22, 49: 23, 50: 24, 51: 25, 52: 26, 53: 27, 54: 28, 55: 29}
Sub-goal achievement steps: {1: 10, 2: 13, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 28, 12: 31, 13: 33, 14: 35, 15: 39, 16: 41, 17: 43, 18: 44, 19: 45, 20: 46, 21: 47, 22: 48, 23: 49, 24: 50, 25: 51, 26: 52, 27: 53, 28: 54, 29: 55}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 55, Last requested goal index = 55, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.571976s, Solving = 0.063270s, Total = 0.635246s, Memory = (RSS = 2111.425781Mb, VMS = 2106.531250Mb), Step range = [84-87]), Calls = 3
Model :: Total atoms = 9302, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,8)))
Step 23:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,8))
Step 24:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 25:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,9)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = (block,9)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,9))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,9),puzzle_room_table) -> on((block,9)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,9),puzzle_room_table_middle)
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,9)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,9))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 43:
    Current Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 27] talos : put(manipulator_arm_2,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_2,(block,8),(block,9))
Step 44:
    Current Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 28] talos : release(manipulator_arm_2,(block,8)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,8))
Step 45:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 47:
    Current Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 30] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 48:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 49:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 31] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 51:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 52:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 53:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 54:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 56:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 33] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 34] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 59:
    Current Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 35] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 60:
    Current Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 36] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 61:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 62:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 63:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 64:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 65:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 68:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 69:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 70:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 72:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 74:
    Current Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 75:
    Current Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 46] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 76:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 77:
    Current Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 47] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 78:
    Current Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 79:
    Current Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 49] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 80:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 81:
    Current Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 50] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 82:
    Current Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 51] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 83:
    Current Sub-goals:
        [Index = 52] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 52] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 84:
    Current Sub-goals:
        [Index = 53] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 53] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))
Step 85:
    Current Sub-goals:
        [Index = 54] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,7)))
Step 86:
    Current Sub-goals:
        [Index = 54] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 54] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,7))
Step 87:
    Current Sub-goals:
        [Index = 55] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 55] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_1,(block,7),(block,8))

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Monolevel problem 24 at level 1 solved.

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Online planning increment 24 finished.

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=87, step_range=range(0, 88)

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 87, Actions = 87

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 161.71287259998462, Average ground wait time = 7.841220199999725, Absolution time = 187.00686899998982)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  29, AC =  29, CF = 1.0, GT =   3.68s, ST = 152.49s, OT = 0.00s, TT = 156.17s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  55, AC =  55, CF = 1.0, GT =   7.53s, ST =   1.97s, OT = 0.03s, TT =   9.53s, EF = (LE = 1.9, AC = 1.9), ED = (LE = 1.8, AC = 1.8), EB = (LE = 0.9, AC = 0.9)        |     
     |        Lvl = 1 (com-ref), LE =  87, AC =  87, CF = 1.0, GT =  16.83s, ST =   4.45s, OT = 0.03s, TT =  21.31s, EF = (LE = 1.6, AC = 1.6), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.7, AC = 0.7)        |     
     ========================================================================================================================================================================================================     

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=87, step_range=range(0, 88)

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=55, step_range=range(0, 56)

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=29, step_range=range(0, 30)

[02-03-2022_00-42-07] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 29, Total actions = 29, Produced sub-goal stages = 29
Level [2]: Length = 55, Total actions = 55, Produced sub-goal stages = 55
Level [1]: Length = 87, Total actions = 87, Produced sub-goal stages = 0

[02-03-2022_00-42-07] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 200.893882s           
      ================================================      

[02-03-2022_00-42-07] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 9533.243337s, Proccess time 44798.359375s        
  ################################################################################################  

[02-03-2022_00-42-07] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=5.924214202070138, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.204164601915582
Mean Absolute Errors: mae_mchild=5.1724137931034475, mae_div_indices=0.3, mae_div_steps=2.9

[02-03-2022_00-42-07] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=2.314381912382577, rmse_div_indices=3.5679514819820333, rmse_div_steps=7.454771030092816
Mean Absolute Errors: mae_mchild=1.9540495867768592, mae_div_indices=2.8200000000000007, mae_div_steps=5.54

[02-03-2022_00-42-08] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=6.859729284029973, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.401704215414752
Mean Absolute Errors: mae_mchild=6.275862068965516, mae_div_indices=0.3, mae_div_steps=3.1

[02-03-2022_00-42-08] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=2.8554717663224176, rmse_div_indices=3.7576958069777, rmse_div_steps=8.533089189215772
Mean Absolute Errors: mae_mchild=2.3613223140495867, mae_div_indices=3.0600000000000005, mae_div_steps=7.06

[02-03-2022_00-42-08] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=9.29526236838032, rmse_div_indices=0.4183300132670378, rmse_div_steps=7.083431371870557
Mean Absolute Errors: mae_mchild=8.482758620689655, mae_div_indices=0.3, mae_div_steps=5.3

[02-03-2022_00-42-08] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=4.599245356712301, rmse_div_indices=6.866848703088712, rmse_div_steps=15.419044861613333
Mean Absolute Errors: mae_mchild=4.082644628099174, mae_div_indices=5.78, mae_div_steps=13.180000000000001

[02-03-2022_00-42-08] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=5.85201978405005, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.586206896551723, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-08] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=2.4580446438326504, rmse_div_indices=3.3882558607309723, rmse_div_steps=6.779646827904172
Mean Absolute Errors: mae_mchild=1.8561983471074384, mae_div_indices=2.4966666666666657, mae_div_steps=5.44

[02-03-2022_00-42-08] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=6.759236425154073, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.6341126442934035
Mean Absolute Errors: mae_mchild=6.1724137931034475, mae_div_indices=0.3, mae_div_steps=3.3

[02-03-2022_00-42-08] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=3.1151986790439805, rmse_div_indices=4.036534542291336, rmse_div_steps=9.163893519920691
Mean Absolute Errors: mae_mchild=2.670413223140496, mae_div_indices=3.380000000000001, mae_div_steps=7.82

[02-03-2022_00-42-09] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=7.823559650975138, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.4198708471697
Mean Absolute Errors: mae_mchild=7.2413793103448265, mae_div_indices=0.3, mae_div_steps=4.1

[02-03-2022_00-42-09] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=2.91510741477384, rmse_div_indices=5.196179151817015, rmse_div_steps=10.779314037132009
Mean Absolute Errors: mae_mchild=2.5170247933884298, mae_div_indices=4.380000000000001, mae_div_steps=9.5

[02-03-2022_00-42-09] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=7.837757329264384, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.610258461069329
Mean Absolute Errors: mae_mchild=7.275862068965516, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-09] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=3.2841215789697173, rmse_div_indices=5.523610936495961, rmse_div_steps=11.62082661049166
Mean Absolute Errors: mae_mchild=2.8396694214876033, mae_div_indices=4.74, mae_div_steps=10.18

[02-03-2022_00-42-09] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=5.665046048363882, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.7914377220257753
Mean Absolute Errors: mae_mchild=4.2901307966706295, mae_div_indices=0.3, mae_div_steps=2.2

[02-03-2022_00-42-09] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=2.556598980502699, rmse_div_indices=3.328705120279923, rmse_div_steps=7.433875167098248
Mean Absolute Errors: mae_mchild=2.1157024793388435, mae_div_indices=2.3766666666666656, mae_div_steps=5.83

[02-03-2022_00-42-09] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=9.229856429150717, rmse_div_indices=0.4183300132670378, rmse_div_steps=7.083431371870557
Mean Absolute Errors: mae_mchild=8.448275862068964, mae_div_indices=0.3, mae_div_steps=5.3

[02-03-2022_00-42-09] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=4.4955441667691245, rmse_div_indices=6.866848703088712, rmse_div_steps=15.86506469503915
Mean Absolute Errors: mae_mchild=3.859504132231405, mae_div_indices=5.78, mae_div_steps=13.499999999999998

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=6.575908178418166, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.401704215414752
Mean Absolute Errors: mae_mchild=6.034482758620689, mae_div_indices=0.3, mae_div_steps=3.1

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=2.844742867724793, rmse_div_indices=3.7576958069777, rmse_div_steps=8.58042021762985
Mean Absolute Errors: mae_mchild=2.3431404958677686, mae_div_indices=3.0600000000000005, mae_div_steps=7.1

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=8.039808801507895, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.913966520026977
Mean Absolute Errors: mae_mchild=7.413793103448275, mae_div_indices=0.3, mae_div_steps=4.5

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=3.110897933139759, rmse_div_indices=5.982776204331158, rmse_div_steps=12.770158356279078
Mean Absolute Errors: mae_mchild=2.6958677685950416, mae_div_indices=5.14, mae_div_steps=11.219999999999997

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=7.601082593899803, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.4198708471697
Mean Absolute Errors: mae_mchild=7.034482758620689, mae_div_indices=0.3, mae_div_steps=4.1

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=2.3073723024576602, rmse_div_indices=5.196179151817015, rmse_div_steps=9.855807650540083
Mean Absolute Errors: mae_mchild=1.9666115702479343, mae_div_indices=4.380000000000001, mae_div_steps=8.66

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=5.518642063580634, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.317479191438763, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=2.613948597950479, rmse_div_indices=3.3882558607309723, rmse_div_steps=7.5652164542728055
Mean Absolute Errors: mae_mchild=2.1504132231404958, mae_div_indices=2.4966666666666657, mae_div_steps=6.01

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=6.767060177675079, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.401704215414752
Mean Absolute Errors: mae_mchild=6.206896551724137, mae_div_indices=0.3, mae_div_steps=3.1

[02-03-2022_00-42-10] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=2.68623672981274, rmse_div_indices=3.7576958069777, rmse_div_steps=8.448882240338724
Mean Absolute Errors: mae_mchild=2.2340495867768597, mae_div_indices=3.0600000000000005, mae_div_steps=7.02

[02-03-2022_00-42-11] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=5.665046048363882, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.7914377220257753
Mean Absolute Errors: mae_mchild=4.2901307966706295, mae_div_indices=0.3, mae_div_steps=2.2

[02-03-2022_00-42-11] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=2.4495572209100156, rmse_div_indices=3.328705120279923, rmse_div_steps=6.835710968468784
Mean Absolute Errors: mae_mchild=1.8727272727272732, mae_div_indices=2.3766666666666656, mae_div_steps=5.503333333333333

[02-03-2022_00-42-11] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=9.10370950513385, rmse_div_indices=0.4183300132670378, rmse_div_steps=6.93361377637953
Mean Absolute Errors: mae_mchild=8.275862068965516, mae_div_indices=0.3, mae_div_steps=5.1

[02-03-2022_00-42-11] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=3.772584882307471, rmse_div_indices=6.756498929014775, rmse_div_steps=14.92690523852818
Mean Absolute Errors: mae_mchild=3.1619834710743806, mae_div_indices=5.58, mae_div_steps=12.58

[02-03-2022_00-42-11] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=7.87257314020011, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.610258461069329
Mean Absolute Errors: mae_mchild=7.275862068965516, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-11] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=1.9570596936803177, rmse_div_indices=5.523610936495961, rmse_div_steps=9.941006544163983
Mean Absolute Errors: mae_mchild=1.6264462809917355, mae_div_indices=4.74, mae_div_steps=8.82

[02-03-2022_00-42-11] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=7.921658625972512, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.610258461069329
Mean Absolute Errors: mae_mchild=7.344827586206896, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-11] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=3.2755038726636725, rmse_div_indices=5.523610936495961, rmse_div_steps=11.60116134033332
Mean Absolute Errors: mae_mchild=2.8578512396694205, mae_div_indices=4.74, mae_div_steps=10.22

[02-03-2022_00-42-12] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=8.038699500240845, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.610258461069329
Mean Absolute Errors: mae_mchild=7.448275862068964, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-12] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=3.266863433664603, rmse_div_indices=5.523610936495961, rmse_div_steps=11.63673541467327
Mean Absolute Errors: mae_mchild=2.8396694214876033, mae_div_indices=4.74, mae_div_steps=10.22

[02-03-2022_00-42-12] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=9.408739328048306, rmse_div_indices=0.4183300132670378, rmse_div_steps=7.083431371870557
Mean Absolute Errors: mae_mchild=8.586206896551722, mae_div_indices=0.3, mae_div_steps=5.3

[02-03-2022_00-42-12] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=3.799390990780817, rmse_div_indices=6.866848703088712, rmse_div_steps=15.025727935777354
Mean Absolute Errors: mae_mchild=3.1619834710743806, mae_div_indices=5.78, mae_div_steps=12.78

[02-03-2022_00-42-12] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=7.933208097946694, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.610258461069329
Mean Absolute Errors: mae_mchild=7.344827586206896, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-12] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=3.31023956087973, rmse_div_indices=5.523610936495961, rmse_div_steps=11.652622499296502
Mean Absolute Errors: mae_mchild=2.8578512396694205, mae_div_indices=4.74, mae_div_steps=10.22

[02-03-2022_00-42-12] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=6.948083337796512, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.6341126442934035
Mean Absolute Errors: mae_mchild=6.344827586206896, mae_div_indices=0.3, mae_div_steps=3.3

[02-03-2022_00-42-12] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=2.8568606708346818, rmse_div_indices=4.036534542291336, rmse_div_steps=8.926567711674577
Mean Absolute Errors: mae_mchild=2.4340495867768595, mae_div_indices=3.380000000000001, mae_div_steps=7.54

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=5.696965001289855, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.7914377220257753
Mean Absolute Errors: mae_mchild=4.3769322235434, mae_div_indices=0.3, mae_div_steps=2.2

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=2.516589585231543, rmse_div_indices=3.328705120279923, rmse_div_steps=6.86126405587516
Mean Absolute Errors: mae_mchild=1.9272727272727277, mae_div_indices=2.3766666666666656, mae_div_steps=5.543333333333333

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=8.02144865504759, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.913966520026977
Mean Absolute Errors: mae_mchild=7.413793103448275, mae_div_indices=0.3, mae_div_steps=4.5

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=2.4477346585522066, rmse_div_indices=5.982776204331158, rmse_div_steps=11.864337318198602
Mean Absolute Errors: mae_mchild=2.054214876033058, mae_div_indices=5.14, mae_div_steps=10.42

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=7.980505379471383, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.913966520026977
Mean Absolute Errors: mae_mchild=7.379310344827585, mae_div_indices=0.3, mae_div_steps=4.5

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=4.275666300595684, rmse_div_indices=5.982776204331158, rmse_div_steps=13.63391400556389
Mean Absolute Errors: mae_mchild=3.7735537190082646, mae_div_indices=5.14, mae_div_steps=11.820000000000002

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=5.8399175795985485, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.428061831153388, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=2.5283843206141103, rmse_div_indices=3.3882558607309723, rmse_div_steps=7.3778384368322945
Mean Absolute Errors: mae_mchild=2.081322314049587, mae_div_indices=2.4966666666666657, mae_div_steps=5.8

[02-03-2022_00-42-13] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=5.627032596163608, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.317479191438763, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=2.495284809594235, rmse_div_indices=3.3882558607309723, rmse_div_steps=7.662480741320731
Mean Absolute Errors: mae_mchild=1.9209917355371895, mae_div_indices=2.4966666666666657, mae_div_steps=5.71

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=7.816260985325741, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.733672470589857
Mean Absolute Errors: mae_mchild=7.2413793103448265, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=3.8131135192574326, rmse_div_indices=5.681866868478275, rmse_div_steps=12.794236983892397
Mean Absolute Errors: mae_mchild=3.380165289256199, mae_div_indices=4.78, mae_div_steps=11.1

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=5.753972933411353, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.351961950059452, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=2.551097640929042, rmse_div_indices=3.3882558607309723, rmse_div_steps=6.843752219685078
Mean Absolute Errors: mae_mchild=2.0366942148760336, mae_div_indices=2.4966666666666657, mae_div_steps=5.503333333333333

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=6.830633245540072, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.401704215414752
Mean Absolute Errors: mae_mchild=6.2413793103448265, mae_div_indices=0.3, mae_div_steps=3.1

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=2.110031138386038, rmse_div_indices=3.7576958069777, rmse_div_steps=7.659144860883623
Mean Absolute Errors: mae_mchild=1.7302479338842982, mae_div_indices=3.0600000000000005, mae_div_steps=6.26

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=5.871797201719528, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.689655172413792, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-14] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=2.590637944344537, rmse_div_indices=3.3882558607309723, rmse_div_steps=7.488825007970209
Mean Absolute Errors: mae_mchild=2.1282644628099177, mae_div_indices=2.4966666666666657, mae_div_steps=5.93

[02-03-2022_00-42-15] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=7.775460651768852, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.4198708471697
Mean Absolute Errors: mae_mchild=7.206896551724137, mae_div_indices=0.3, mae_div_steps=4.1

[02-03-2022_00-42-15] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=2.751288203162203, rmse_div_indices=5.196179151817015, rmse_div_steps=10.724595304459953
Mean Absolute Errors: mae_mchild=2.335206611570248, mae_div_indices=4.380000000000001, mae_div_steps=9.38

[02-03-2022_00-42-15] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=6.671233077392022, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.401704215414752
Mean Absolute Errors: mae_mchild=6.103448275862068, mae_div_indices=0.3, mae_div_steps=3.1

[02-03-2022_00-42-15] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=2.793617282424556, rmse_div_indices=3.7576958069777, rmse_div_steps=8.58042021762985
Mean Absolute Errors: mae_mchild=2.3067768595041325, mae_div_indices=3.0600000000000005, mae_div_steps=7.1

[02-03-2022_00-42-15] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=5.673016423286846, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.428061831153388, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-15] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=2.7024323295630865, rmse_div_indices=3.3882558607309723, rmse_div_steps=7.557942841805566
Mean Absolute Errors: mae_mchild=2.2049586776859504, mae_div_indices=2.4966666666666657, mae_div_steps=6.0

[02-03-2022_00-42-15] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=7.02543366580511, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.6341126442934035
Mean Absolute Errors: mae_mchild=6.448275862068964, mae_div_indices=0.3, mae_div_steps=3.3

[02-03-2022_00-42-15] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=2.7814616527322173, rmse_div_indices=4.036534542291336, rmse_div_steps=8.934965646890372
Mean Absolute Errors: mae_mchild=2.3613223140495867, mae_div_indices=3.380000000000001, mae_div_steps=7.54

[02-03-2022_00-42-16] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=5.526931146247677, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.41141498216409, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-16] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=2.5052671786385656, rmse_div_indices=3.3882558607309723, rmse_div_steps=6.929425982319491
Mean Absolute Errors: mae_mchild=1.9616528925619838, mae_div_indices=2.4966666666666657, mae_div_steps=5.56

[02-03-2022_00-42-16] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=8.049785633884069, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.610258461069329
Mean Absolute Errors: mae_mchild=7.448275862068964, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-16] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=2.3944149891979603, rmse_div_indices=5.523610936495961, rmse_div_steps=10.781581516642166
Mean Absolute Errors: mae_mchild=2.045289256198347, mae_div_indices=4.74, mae_div_steps=9.54

[02-03-2022_00-42-16] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=9.253915840490311, rmse_div_indices=0.4183300132670378, rmse_div_steps=7.083431371870557
Mean Absolute Errors: mae_mchild=8.448275862068964, mae_div_indices=0.3, mae_div_steps=5.3

[02-03-2022_00-42-16] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=4.403604834359015, rmse_div_indices=6.866848703088712, rmse_div_steps=15.784389264220659
Mean Absolute Errors: mae_mchild=3.8049586776859505, mae_div_indices=5.78, mae_div_steps=13.459999999999997

[02-03-2022_00-42-16] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=7.853367840914411, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.610258461069329
Mean Absolute Errors: mae_mchild=7.275862068965516, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-16] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=3.270201045200901, rmse_div_indices=5.523610936495961, rmse_div_steps=11.609777967060541
Mean Absolute Errors: mae_mchild=2.8396694214876024, mae_div_indices=4.74, mae_div_steps=10.18

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=8.015813740149264, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.4198708471697
Mean Absolute Errors: mae_mchild=7.344827586206896, mae_div_indices=0.3, mae_div_steps=4.1

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=2.2638371579435552, rmse_div_indices=5.196179151817015, rmse_div_steps=9.870508823988986
Mean Absolute Errors: mae_mchild=1.9302479338842982, mae_div_indices=4.380000000000001, mae_div_steps=8.7

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=8.775167644092406, rmse_div_indices=0.4183300132670378, rmse_div_steps=6.93361377637953
Mean Absolute Errors: mae_mchild=7.999999999999999, mae_div_indices=0.3, mae_div_steps=5.1

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=3.911035457152931, rmse_div_indices=6.756498929014775, rmse_div_steps=14.496560894839083
Mean Absolute Errors: mae_mchild=3.4760330578512386, mae_div_indices=5.58, mae_div_steps=12.259999999999998

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=9.223928453954002, rmse_div_indices=0.4183300132670378, rmse_div_steps=6.93361377637953
Mean Absolute Errors: mae_mchild=8.310344827586206, mae_div_indices=0.3, mae_div_steps=5.1

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=4.701889896099368, rmse_div_indices=6.756498929014775, rmse_div_steps=15.380516173970816
Mean Absolute Errors: mae_mchild=4.191735537190083, mae_div_indices=5.58, mae_div_steps=13.060000000000002

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=9.197916322999406, rmse_div_indices=0.4183300132670378, rmse_div_steps=7.083431371870557
Mean Absolute Errors: mae_mchild=8.413793103448274, mae_div_indices=0.3, mae_div_steps=5.3

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=4.565664163755187, rmse_div_indices=6.866848703088712, rmse_div_steps=15.335371241385426
Mean Absolute Errors: mae_mchild=4.028099173553719, mae_div_indices=5.78, mae_div_steps=13.060000000000002

[02-03-2022_00-42-17] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=9.260466649600923, rmse_div_indices=0.4183300132670378, rmse_div_steps=7.083431371870557
Mean Absolute Errors: mae_mchild=8.448275862068964, mae_div_indices=0.3, mae_div_steps=5.3

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=4.47989078969603, rmse_div_indices=6.866848703088712, rmse_div_steps=15.872416675198236
Mean Absolute Errors: mae_mchild=3.841322314049587, mae_div_indices=5.78, mae_div_steps=13.499999999999998

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=9.343809589544295, rmse_div_indices=0.4183300132670378, rmse_div_steps=7.083431371870557
Mean Absolute Errors: mae_mchild=8.517241379310343, mae_div_indices=0.3, mae_div_steps=5.3

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=4.434835802489347, rmse_div_indices=6.866848703088712, rmse_div_steps=15.86506469503915
Mean Absolute Errors: mae_mchild=3.8231404958677686, mae_div_indices=5.78, mae_div_steps=13.499999999999998

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=9.496291284336007, rmse_div_indices=0.4183300132670378, rmse_div_steps=7.083431371870557
Mean Absolute Errors: mae_mchild=8.655172413793103, mae_div_indices=0.3, mae_div_steps=5.3

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=3.793556956230562, rmse_div_indices=6.866848703088712, rmse_div_steps=14.916182487486536
Mean Absolute Errors: mae_mchild=3.1619834710743806, mae_div_indices=5.78, mae_div_steps=12.66

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=5.892416376081056, rmse_div_indices=0.4183300132670378, rmse_div_steps=3.895510236156491
Mean Absolute Errors: mae_mchild=4.627824019024971, mae_div_indices=0.3, mae_div_steps=2.4

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=2.534456761197588, rmse_div_indices=3.3882558607309723, rmse_div_steps=7.426472917879658
Mean Absolute Errors: mae_mchild=2.037355371900827, mae_div_indices=2.4966666666666657, mae_div_steps=5.89

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=6.82375371363533, rmse_div_indices=0.4183300132670378, rmse_div_steps=4.6341126442934035
Mean Absolute Errors: mae_mchild=6.275862068965516, mae_div_indices=0.3, mae_div_steps=3.3

[02-03-2022_00-42-18] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=3.0046245347865557, rmse_div_indices=4.036534542291336, rmse_div_steps=9.054112018549606
Mean Absolute Errors: mae_mchild=2.543140495867769, mae_div_indices=3.380000000000001, mae_div_steps=7.66

[02-03-2022_00-42-19] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=7.668208843841598, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.4198708471697
Mean Absolute Errors: mae_mchild=7.034482758620689, mae_div_indices=0.3, mae_div_steps=4.1

[02-03-2022_00-42-19] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=2.8753727749704594, rmse_div_indices=5.196179151817015, rmse_div_steps=10.788896040734558
Mean Absolute Errors: mae_mchild=2.4806611570247936, mae_div_indices=4.380000000000001, mae_div_steps=9.5

[02-03-2022_00-42-19] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=7.891355013410646, rmse_div_indices=0.4183300132670378, rmse_div_steps=5.610258461069329
Mean Absolute Errors: mae_mchild=7.3103448275862055, mae_div_indices=0.3, mae_div_steps=4.3

[02-03-2022_00-42-19] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=2.5946543902721766, rmse_div_indices=5.523610936495961, rmse_div_steps=10.760227692758178
Mean Absolute Errors: mae_mchild=2.2224793388429758, mae_div_indices=4.74, mae_div_steps=9.46

[02-03-2022_00-42-19] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL  LE  AC  CF        GT         ST       OT         TT         LT         CT         WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  0   3  29  29 1.0  3.676754 139.857895 0.000000 143.534649 143.534649 143.534649 143.534649  481.019531  478.101562  1.000000  0.341167  0.341167  0.341167        1.0  0.341167  0.341167  0.341167   1.000000 0.341167
  0   2  55  55 1.0  7.551589   2.083803 0.025631   9.661022 147.702798 153.195671  38.326369  485.054688  485.695312  1.000000  0.337240  0.332235  0.528264        1.0  0.337240  0.332235  0.528264   1.000000 0.779080
  0   1  91  91 1.0 17.756579   2.947678 0.031187  20.735444 149.096302 173.931116   7.299242  446.523438  441.250000  0.934066  0.335952  0.314874  0.840746        1.0  0.313802  0.294113  0.785312   0.934066 0.727311
  1   3  29  29 1.0  3.735361 134.687720 0.000000 138.423081 138.423081 138.423081 138.423081  490.460938  486.429688  1.000000  0.346146  0.346146  0.346146        1.0  0.346146  0.346146  0.346146   1.000000 0.346146
  1   2  55  55 1.0  7.595116   2.296037 0.025357   9.916510 142.640003 148.339591  37.112419  496.246094  497.843750  1.000000  0.342025  0.336650  0.533068        1.0  0.342025  0.336650  0.533068   1.000000 0.780675
  1   1  89  89 1.0 17.296241   3.030555 0.031334  20.358129 143.998784 168.697721   7.081100  481.761719  474.480469  0.955056  0.340724  0.319047  0.849873        1.0  0.325410  0.304708  0.811676   0.955056 0.745174
  2   3  29  29 1.0  3.644584 130.887931 0.000000 134.532515 134.532515 134.532515 134.532515  508.902344  505.812500  1.000000  0.350064  0.350064  0.350064        1.0  0.350064  0.350064  0.350064   1.000000 0.350064
  2   2  55  55 1.0  7.602908   2.310205 0.026102   9.939215 138.998825 144.471730  36.146123  532.902344  525.687500  1.000000  0.345576  0.340274  0.537019        1.0  0.345576  0.340274  0.537019   1.000000 0.781859
  2   1  91  91 1.0 17.741382   3.203459 0.032812  20.977652 140.476924 165.449382   6.942697  522.554688  513.574219  0.934066  0.344123  0.321705  0.856004        1.0  0.321433  0.300493  0.799564   0.934066 0.729855
  3   3  29  29 1.0  3.659612 144.428648 0.000000 148.088260 148.088260 148.088260 148.088260  564.855469  562.386719  1.000000  0.336882  0.336882  0.336882        1.0  0.336882  0.336882  0.336882   1.000000 0.336882
  3   2  55  55 1.0  7.579897   2.431508 0.025758  10.037163 152.462603 158.125423  39.559322  589.707031  588.480469  1.000000  0.332892  0.327898  0.523556        1.0  0.332892  0.327898  0.523556   1.000000 0.777631
  3   1  91  91 1.0 17.559061   3.151064 0.030780  20.740905 153.819933 178.866328   7.501598  575.527344  566.695312  0.934066  0.331678  0.311054  0.832805        1.0  0.309809  0.290545  0.777894   0.934066 0.725980
  4   3  29  29 1.0  3.663144 174.781183 0.000000 178.444327 178.444327 178.444327 178.444327  598.804688  595.738281  1.000000  0.311377  0.311377  0.311377        1.0  0.311377  0.311377  0.311377   1.000000 0.311377
  4   2  55  55 1.0  7.697844   2.884204 0.025578  10.607626 182.692312 189.051953  47.290974  625.421875  626.695312  1.000000  0.308167  0.303501  0.497309        1.0  0.308167  0.303501  0.497309   1.000000 0.769389
  4   1  89  89 1.0 17.255815   2.694580 0.030613  19.981008 184.055988 209.032961   8.758677  605.460938  598.214844  0.955056  0.307152  0.289822  0.791880        1.0  0.293348  0.276796  0.756290   0.955056 0.734487
  5   3  29  29 1.0  3.665399 117.141736 0.000000 120.807134 120.807134 120.807134 120.807134  627.378906  623.546875  1.000000  0.364886  0.364886  0.364886        1.0  0.364886  0.364886  0.364886   1.000000 0.364886
  5   2  55  55 1.0  7.527343   2.785927 0.024780  10.338050 125.215244 131.145184  32.814107  649.976562  651.683594  1.000000  0.359944  0.353572  0.551618        1.0  0.359944  0.353572  0.551618   1.000000 0.786648
  5   1  91  91 1.0 17.454794   3.117001 0.031466  20.603262 126.585986 151.748446   6.371521  635.921875  627.527344  0.934066  0.358444  0.333536  0.884794        1.0  0.334810  0.311544  0.826456   0.934066 0.734314
  6   3  29  29 1.0  3.671727 126.018879 0.000000 129.690606 129.690606 129.690606 129.690606  659.199219  656.246094  1.000000  0.355107  0.355107  0.355107        1.0  0.355107  0.355107  0.355107   1.000000 0.355107
  6   2  55  55 1.0  7.531373   2.829670 0.026119  10.387163 134.090635 140.077769  35.047388  680.816406  683.261719  1.000000  0.350516  0.344513  0.541659        1.0  0.350516  0.344513  0.541659   1.000000 0.783505
  6   1  89  89 1.0 17.126086   2.947794 0.031591  20.105471 135.459820 160.183241   6.723069  657.691406  649.304688  0.955056  0.349120  0.326129  0.866353        1.0  0.333429  0.311471  0.827415   0.955056 0.747847
  7   3  29  29 1.0  3.677185 150.246799 0.000000 153.923984 153.923984 153.923984 153.923984  699.734375  698.628906  1.000000  0.331586  0.331586  0.331586        1.0  0.331586  0.331586  0.331586   1.000000 0.331586
  7   2  55  55 1.0  7.592225   2.333581 0.025796   9.951603 158.070128 163.875587  40.997167  725.199219  729.031250  1.000000  0.327946  0.323011  0.518268        1.0  0.327946  0.323011  0.518268   1.000000 0.775982
  7   1  93  93 1.0 17.979059   2.889733 0.032401  20.901194 159.442622 184.776780   7.762761  712.296875  705.027344  0.913978  0.326763  0.306619  0.823208        1.0  0.298654  0.280244  0.752394   0.913978 0.708870
  8   3  29  29 1.0  3.660418 151.333711 0.000000 154.994129 154.994129 154.994129 154.994129  734.464844  732.550781  1.000000  0.330637  0.330637  0.330637        1.0  0.330637  0.330637  0.330637   1.000000 0.330637
  8   2  55  55 1.0  7.653955   2.581735 0.026632  10.262322 159.927275 165.256451  41.342373  764.453125  765.578125  1.000000  0.326348  0.321864  0.517029        1.0  0.326348  0.321864  0.517029   1.000000 0.775449
  8   1  95  95 1.0 18.376863   3.342063 0.031620  21.750546 161.295411 187.006997   7.840810  743.570312  737.054688  0.894737  0.325182  0.304984  0.820469        1.0  0.290952  0.272880  0.734104   0.894737 0.693475
  9   3  29  29 1.0  3.663974 116.929702 0.000000 120.593676 120.593676 120.593676 120.593676  765.265625  762.882812  1.000000  0.365130  0.365130  0.365130        1.0  0.365130  0.365130  0.365130   1.000000 0.365130
  9   2  55  55 1.0  7.583334   2.798990 0.025908  10.408232 125.126665 131.001908  32.778434  761.753906  762.148438  1.000000  0.360041  0.353722  0.551783        1.0  0.360041  0.353722  0.551783   1.000000 0.786680
  9   1  89  89 1.0 17.214459   2.396264 0.031886  19.642610 126.496841 150.644517   6.325823  750.140625  747.117188  0.955056  0.358541  0.334536  0.887390        1.0  0.342426  0.319501  0.847507   0.955056 0.750846
 10   3  29  29 1.0  3.680953 133.909170 0.000000 137.590123 137.590123 137.590123 137.590123  798.703125  797.449219  1.000000  0.346975  0.346975  0.346975        1.0  0.346975  0.346975  0.346975   1.000000 0.346975
 10   2  55  55 1.0  7.555013   2.462146 0.026599  10.043758 142.030576 147.633882  36.936347  829.292969  831.289062  1.000000  0.342613  0.337304  0.533779        1.0  0.342613  0.337304  0.533779   1.000000 0.780871
 10   1  95  95 1.0 18.237443   3.497608 0.032117  21.767168 143.396188 169.401049   7.107308  804.148438  796.093750  0.894737  0.341299  0.318478  0.848743        1.0  0.305373  0.284954  0.759401   0.894737 0.698282
 11   3  29  29 1.0  3.671535 133.555180 0.000000 137.226715 137.226715 137.226715 137.226715  832.003906  830.945312  1.000000  0.347338  0.347338  0.347338        1.0  0.347338  0.347338  0.347338   1.000000 0.347338
 11   2  55  55 1.0  7.538440   3.062911 0.025778  10.627129 141.940416 147.853844  36.991194  856.574219  861.089844  1.000000  0.342700  0.337100  0.533557        1.0  0.342700  0.337100  0.533557   1.000000 0.780900
 11   1  89  89 1.0 17.106707   2.921015 0.031827  20.059550 143.311703 167.913394   7.045351  837.566406  830.953125  0.955056  0.341380  0.319684  0.851430        1.0  0.326037  0.305316  0.813163   0.955056 0.745383
 12   3  29  29 1.0  3.660132 164.118744 0.000000 167.778876 167.778876 167.778876 167.778876  881.894531  881.433594  1.000000  0.319793  0.319793  0.319793        1.0  0.319793  0.319793  0.319793   1.000000 0.319793
 12   2  55  55 1.0  7.582118   2.022150 0.025423   9.629691 171.945963 177.408567  44.380044  905.472656  907.269531  1.000000  0.316441  0.312171  0.506595        1.0  0.316441  0.312171  0.506595   1.000000 0.772147
 12   1  93  93 1.0 17.922179   3.558420 0.032317  21.512915 173.310355 198.921482   8.337521  885.550781  877.191406  0.913978  0.315362  0.296569  0.804243        1.0  0.288234  0.271058  0.735061   0.913978 0.705397
 13   3  29  29 1.0  3.658174 163.117263 0.000000 166.775437 166.775437 166.775437 166.775437  911.648438  909.093750  1.000000  0.320613  0.320613  0.320613        1.0  0.320613  0.320613  0.320613   1.000000 0.320613
 13   2  55  55 1.0  7.591047   2.012413 0.025509   9.628970 170.966093 176.404407  44.129118  934.617188  936.253906  1.000000  0.317222  0.312946  0.507427        1.0  0.317222  0.312946  0.507427   1.000000 0.772407
 13   1  89  89 1.0 17.236351   3.615176 0.031590  20.883117 172.338256 197.287524   8.269236  918.816406  912.246094  0.955056  0.316130  0.297692  0.806360        1.0  0.301922  0.284313  0.770119   0.955056 0.737345
 14   3  29  29 1.0  3.661788 150.827171 0.000000 154.488959 154.488959 154.488959 154.488959  946.089844  944.429688  1.000000  0.331084  0.331084  0.331084        1.0  0.331084  0.331084  0.331084   1.000000 0.331084
 14   2  55  55 1.0  7.615818   2.780126 0.026379  10.422323 159.380804 164.911282  41.256042  949.933594  951.757812  1.000000  0.326816  0.322150  0.517338        1.0  0.326816  0.322150  0.517338   1.000000 0.775605
 14   1  91  91 1.0 17.584392   3.767917 0.031546  21.383856 160.751553 186.295139   7.811344  939.199219  935.136719  0.934066  0.325644  0.305504  0.821496        1.0  0.304173  0.285360  0.767332   0.934066 0.724102
 15   3  29  29 1.0  3.667555 137.188063 0.000000 140.855619 140.855619 140.855619 140.855619  977.269531  976.371094  1.000000  0.343753  0.343753  0.343753        1.0  0.343753  0.343753  0.343753   1.000000 0.343753
 15   2  55  55 1.0  7.832962   2.842093 0.026073  10.701127 145.193412 151.556746  37.918756  998.546875 1003.312500  1.000000  0.339590  0.333709  0.529858        1.0  0.339590  0.333709  0.529858   1.000000 0.779863
 15   1  93  93 1.0 18.398904   3.353168 0.030674  21.782746 146.563281 173.339492   7.273084  973.902344  969.054688  0.913978  0.338302  0.315339  0.841808        1.0  0.309201  0.288213  0.769395   0.913978 0.712386
 16   3  29  29 1.0  3.778318 123.630576 0.000000 127.408894 127.408894 127.408894 127.408894 1006.109375 1004.371094  1.000000  0.357551  0.357551  0.357551        1.0  0.357551  0.357551  0.357551   1.000000 0.357551
 16   2  55  55 1.0  7.552599   2.016476 0.026058   9.595133 131.570191 137.004027  34.279177 1031.410156 1036.058594  1.000000  0.353127  0.347562  0.545002        1.0  0.353127  0.347562  0.545002   1.000000 0.784376
 16   1  91  91 1.0 17.542398   3.149415 0.031471  20.723285 132.944358 157.727312   6.621113 1015.296875 1009.390625  0.934066  0.351697  0.328243  0.871444        1.0  0.328508  0.306601  0.813986   0.934066 0.732213
 17   3  29  29 1.0  3.688818 116.301808 0.000000 119.990626 119.990626 119.990626 119.990626 1038.093750 1036.199219  1.000000  0.365822  0.365822  0.365822        1.0  0.365822  0.365822  0.365822   1.000000 0.365822
 17   2  55  55 1.0  7.560279   2.753318 0.025645  10.339243 124.186814 130.329869  32.610725 1064.859375 1069.718750  1.000000  0.361081  0.354430  0.552563        1.0  0.361081  0.354430  0.552563   1.000000 0.787027
 17   1  89  89 1.0 17.171361   2.345863 0.030604  19.547828 125.565160 149.877697   6.294083 1044.625000 1038.089844  0.955056  0.359559  0.335236  0.889223        1.0  0.343399  0.320169  0.849258   0.955056 0.751171
 18   3  29  29 1.0  3.669842 166.652280 0.000000 170.322122 170.322122 170.322122 170.322122 1098.425781 1096.890625  1.000000  0.317738  0.317738  0.317738        1.0  0.317738  0.317738  0.317738   1.000000 0.317738
 18   2  55  55 1.0  7.555618   2.814914 0.024793  10.395325 174.487830 180.717447  45.207539 1118.675781 1123.019531  1.000000  0.314437  0.309649  0.503889        1.0  0.314437  0.309649  0.503889   1.000000 0.771479
 18   1  89  89 1.0 17.168305   2.374548 0.031135  19.573988 175.863052 200.291436   8.428966 1101.300781 1095.058594  0.955056  0.313365  0.295635  0.801460        1.0  0.299282  0.282348  0.765439   0.955056 0.736465
 19   3  29  29 1.0  3.677736 126.357629 0.000000 130.035365 130.035365 130.035365 130.035365 1124.277344 1121.484375  1.000000  0.354741  0.354741  0.354741        1.0  0.354741  0.354741  0.354741   1.000000 0.354741
 19   2  55  55 1.0  7.644651   2.104563 0.026795   9.776009 134.501455 139.811375  34.981014 1146.160156 1148.437500  1.000000  0.350096  0.344775  0.541944        1.0  0.350096  0.344775  0.541944   1.000000 0.783365
 19   1  93  93 1.0 17.982870   4.280350 0.031711  22.294931 135.874984 162.106306   6.803392 1131.261719 1126.710938  0.913978  0.348699  0.324496  0.862474        1.0  0.318703  0.296582  0.788283   0.913978 0.715553
 20   3  29  29 1.0  3.673052 133.534733 0.000000 137.207786 137.207786 137.207786 137.207786 1155.867188 1153.691406  1.000000  0.347357  0.347357  0.347357        1.0  0.347357  0.347357  0.347357   1.000000 0.347357
 20   2  55  55 1.0  7.538977   2.886430 0.025699  10.451106 141.352407 147.658891  36.942963 1176.550781 1179.187500  1.000000  0.343270  0.337281  0.533753        1.0  0.343270  0.337281  0.533753   1.000000 0.781090
 20   1  89  89 1.0 17.151096   3.259206 0.032784  20.443086 142.723756 168.101977   7.053403 1161.441406 1155.285156  0.955056  0.341944  0.319530  0.851077        1.0  0.326576  0.305170  0.812827   0.955056 0.745563
 21   3  29  29 1.0  3.669193 137.541039 0.000000 141.210232 141.210232 141.210232 141.210232 1185.183594 1183.613281  1.000000  0.343408  0.343408  0.343408        1.0  0.343408  0.343408  0.343408   1.000000 0.343408
 21   2  55  55 1.0  7.648939   2.165076 0.026268   9.840284 145.399035 151.050516  37.790785 1217.164062 1222.000000  1.000000  0.339396  0.334167  0.530362        1.0  0.339396  0.334167  0.530362   1.000000 0.779799
 21   1  89  89 1.0 17.267242   3.490054 0.032697  20.789993 146.774128 171.840509   7.209282 1193.207031 1186.343750  0.955056  0.338105  0.316525  0.844435        1.0  0.322909  0.302299  0.806482   0.955056 0.744340
 22   3  29  29 1.0  3.678199 149.629674 0.000000 153.307873 153.307873 153.307873 153.307873 1217.261719 1215.375000  1.000000  0.332135  0.332135  0.332135        1.0  0.332135  0.332135  0.332135   1.000000 0.332135
 22   2  55  55 1.0  7.608984   3.002935 0.025559  10.637478 158.457913 163.945351  41.014467 1246.996094 1246.378906  1.000000  0.327611  0.322953  0.518206        1.0  0.327611  0.322953  0.518206   1.000000 0.775870
 22   1  91  91 1.0 17.601681   3.456674 0.030894  21.089249 159.836618 185.034601   7.758831 1233.976562 1227.898438  0.934066  0.326425  0.306429  0.823347        1.0  0.304903  0.286225  0.769061   0.934066 0.724345
 23   3  29  29 1.0  3.669356 156.776240 0.000000 160.445596 160.445596 160.445596 160.445596 1250.667969 1248.257812  1.000000  0.325905  0.325905  0.325905        1.0  0.325905  0.325905  0.325905   1.000000 0.325905
 23   2  55  55 1.0  7.555707   3.039379 0.026199  10.621286 164.891207 171.066882  42.794754 1277.179688 1279.050781  1.000000  0.322167  0.317142  0.511939        1.0  0.322167  0.317142  0.511939   1.000000 0.774056
 23   1  93  93 1.0 17.879810   3.521887 0.031461  21.433158 166.265478 192.500040   8.070100 1252.832031 1245.414062  0.913978  0.321032  0.301038  0.812733        1.0  0.293416  0.275142  0.742820   0.913978 0.707124
 24   3  29  29 1.0  3.707771 182.805128 0.000000 186.512899 186.512899 186.512899 186.512899 1282.621094 1282.015625  1.000000  0.305344  0.305344  0.305344        1.0  0.305344  0.305344  0.305344   1.000000 0.305344
 24   2  55  55 1.0  7.582499   3.091636 0.025256  10.699390 190.979943 197.212289  49.331254 1309.886719 1313.257812  1.000000  0.302118  0.297744  0.491165        1.0  0.302118  0.297744  0.491165   1.000000 0.767373
 24   1  91  91 1.0 17.518736   2.446384 0.030758  19.995879 192.360870 217.208169   9.099576 1256.445312 1252.031250  0.934066  0.301137  0.284606  0.782650        1.0  0.281281  0.265840  0.731047   0.934066 0.716471
 25   3  29  29 1.0  3.674871 139.383441 0.000000 143.058312 143.058312 143.058312 143.058312 1311.351562 1311.742188  1.000000  0.341623  0.341623  0.341623        1.0  0.341623  0.341623  0.341623   1.000000 0.341623
 25   2  55  55 1.0  7.611933   4.305139 0.026156  11.943229 148.376857 155.001541  38.778494 1337.675781 1340.355469  1.000000  0.336615  0.330630  0.526519        1.0  0.336615  0.330630  0.526519   1.000000 0.778872
 25   1  93  93 1.0 18.008346   2.560055 0.031755  20.600156 149.762111 175.601697   7.365793 1324.750000 1320.203125  0.913978  0.335341  0.313569  0.838082        1.0  0.306495  0.286595  0.765989   0.913978 0.711484
 26   3  29  29 1.0  3.671968 123.800087 0.000000 127.472055 127.472055 127.472055 127.472055 1342.457031 1341.003906  1.000000  0.357483  0.357483  0.357483        1.0  0.357483  0.357483  0.357483   1.000000 0.357483
 26   2  55  55 1.0  7.597591   3.179827 0.026145  10.803563 131.663484 138.275617  34.597099 1371.992188 1371.917969  1.000000  0.353029  0.346292  0.543608        1.0  0.353029  0.346292  0.543608   1.000000 0.784343
 26   1  89  89 1.0 17.236823   2.412403 0.031917  19.681143 133.039333 157.956760   6.630746 1352.000000 1345.187500  0.955056  0.351599  0.328044  0.870954        1.0  0.335797  0.313301  0.831810   0.955056 0.748636
 27   3  29  29 1.0  3.673522 122.503980 0.000000 126.177502 126.177502 126.177502 126.177502 1373.687500 1371.312500  1.000000  0.358889  0.358889  0.358889        1.0  0.358889  0.358889  0.358889   1.000000 0.358889
 27   2  55  55 1.0  7.565902   3.111243 0.025951  10.703096 131.742668 136.880598  34.248445 1400.085938 1404.394531  1.000000  0.352946  0.347685  0.545137        1.0  0.352946  0.347685  0.545137   1.000000 0.784315
 27   1  93  93 1.0 17.870551   3.735171 0.031614  21.637336 133.119268 158.517934   6.654097 1379.187500 1372.105469  0.913978  0.351516  0.327559  0.869775        1.0  0.321278  0.299382  0.794956   0.913978 0.716412
 28   3  29  29 1.0  3.673860 131.533111 0.000000 135.206972 135.206972 135.206972 135.206972 1405.328125 1404.082031  1.000000  0.349376  0.349376  0.349376        1.0  0.349376  0.349376  0.349376   1.000000 0.349376
 28   2  55  55 1.0  7.615499   2.034161 0.025788   9.675448 139.357412 144.882420  36.248764 1412.121094 1415.238281  1.000000  0.345222  0.339884  0.536594        1.0  0.345222  0.339884  0.536594   1.000000 0.781741
 28   1  91  91 1.0 17.614997   2.512442 0.031781  20.159220 140.730710 165.041640   6.925699 1400.269531 1397.246094  0.934066  0.343875  0.322042  0.856777        1.0  0.321202  0.300808  0.800286   0.934066 0.729778
 29   3  29  29 1.0  3.669225 130.923979 0.000000 134.593204 134.593204 134.593204 134.593204 1438.855469 1438.695312  1.000000  0.350002  0.350002  0.350002        1.0  0.350002  0.350002  0.350002   1.000000 0.350002
 29   2  55  55 1.0  7.590017   2.013109 0.025188   9.628314 138.750389 144.221519  36.083371 1463.226562 1469.480469  1.000000  0.345821  0.340512  0.537280        1.0  0.345821  0.340512  0.537280   1.000000 0.781940
 29   1  87  87 1.0 16.857617   3.598031 0.030851  20.486499 140.119878 164.708018   6.911911 1448.792969 1443.785156  0.977011  0.344472  0.322319  0.857407        1.0  0.336553  0.314909  0.837697   0.977011 0.763525
 30   3  29  29 1.0  3.674105 147.789726 0.000000 151.463831 151.463831 151.463831 151.463831 1473.492188 1473.355469  1.000000  0.333793  0.333793  0.333793        1.0  0.333793  0.333793  0.333793   1.000000 0.333793
 30   2  55  55 1.0  7.595702   3.365456 0.026090  10.987248 155.631765 162.451079  40.640809 1501.667969 1504.289062  1.000000  0.330074  0.324206  0.519559        1.0  0.330074  0.324206  0.519559   1.000000 0.776691
 30   1  93  93 1.0 17.994312   2.558784 0.030773  20.583869 157.012218 183.034948   7.675529 1486.617188 1481.167969  0.913978  0.328865  0.307911  0.826337        1.0  0.300576  0.281424  0.755254   0.913978 0.709511
 31   3  29  29 1.0  3.685076 163.212493 0.000000 166.897569 166.897569 166.897569 166.897569 1514.789062 1514.832031  1.000000  0.320513  0.320513  0.320513        1.0  0.320513  0.320513  0.320513   1.000000 0.320513
 31   2  55  55 1.0  7.535273   2.074193 0.025107   9.634573 171.140844 176.532142  44.161095 1539.066406 1544.394531  1.000000  0.317082  0.312847  0.507321        1.0  0.317082  0.312847  0.507321   1.000000 0.772361
 31   1  91  91 1.0 17.516653   3.838516 0.031528  21.386698 172.512900 197.918840   8.295808 1520.203125 1513.906250  0.934066  0.315992  0.297257  0.805532        1.0  0.295157  0.277658  0.752420   0.934066 0.721096
 32   3  29  29 1.0  3.683276 152.584320 0.000000 156.267596 156.267596 156.267596 156.267596 1552.285156 1552.316406  1.000000  0.329516  0.329516  0.329516        1.0  0.329516  0.329516  0.329516   1.000000 0.329516
 32   2  55  55 1.0  7.639755   2.083428 0.025551   9.748734 160.432168 166.016330  41.532262 1577.132812 1583.218750  1.000000  0.325916  0.321237  0.516352        1.0  0.325916  0.321237  0.516352   1.000000 0.775305
 32   1  89  89 1.0 17.428163   4.010058 0.031262  21.469483 161.806034 187.485813   7.861211 1560.000000 1555.125000  0.955056  0.324750  0.304635  0.819762        1.0  0.310154  0.290944  0.782919   0.955056 0.740089
 33   3  29  29 1.0  3.775556 102.874789 0.000000 106.650345 106.650345 106.650345 106.650345 1581.273438 1580.406250  1.000000  0.382122  0.382122  0.382122        1.0  0.382122  0.382122  0.382122   1.000000 0.382122
 33   2  55  55 1.0  7.591311   2.010134 0.026818   9.628263 110.803384 116.278608  29.097825 1587.390625 1593.445312  1.000000  0.376831  0.370161  0.570040        1.0  0.376831  0.370161  0.570040   1.000000 0.792277
 33   1  93  93 1.0 17.931722   3.927605 0.031404  21.890731 112.174061 138.169339   5.806100 1575.960938 1575.421875  0.913978  0.375130  0.346398  0.921130        1.0  0.342860  0.316600  0.841893   0.913978 0.723606
 34   3  29  29 1.0  3.673041 112.692112 0.000000 116.365153 116.365153 116.365153 116.365153 1612.820312 1612.707031  1.000000  0.370058  0.370058  0.370058        1.0  0.370058  0.370058  0.370058   1.000000 0.370058
 34   2  55  55 1.0  7.623092   3.562933 0.026364  11.212389 122.011085 127.577542  31.922608 1610.667969 1610.101562  1.000000  0.363518  0.357369  0.555811        1.0  0.363518  0.357369  0.555811   1.000000 0.787839
 34   1  89  89 1.0 17.246548   3.886888 0.032019  21.165455 123.382444 148.742997   6.246801 1592.792969 1588.339844  0.955056  0.361976  0.336278  0.892001        1.0  0.345708  0.321164  0.851912   0.955056 0.751940
 35   3  29  29 1.0  3.686338 135.574997 0.000000 139.261335 139.261335 139.261335 139.261335 1638.769531 1638.984375  1.000000  0.345316  0.345316  0.345316        1.0  0.345316  0.345316  0.345316   1.000000 0.345316
 35   2  55  55 1.0  7.582332   2.036459 0.025514   9.644305 143.422697 148.905640  37.254288 1669.054688 1671.667969  1.000000  0.341274  0.336128  0.532498        1.0  0.341274  0.336128  0.532498   1.000000 0.780425
 35   1  91  91 1.0 17.557012   2.435884 0.032041  20.024937 144.795916 168.930577   7.087883 1649.605469 1644.281250  0.934066  0.339966  0.318859  0.849579        1.0  0.317551  0.297835  0.793563   0.934066 0.728561
 36   3  29  29 1.0  3.687162 128.662828 0.000000 132.349990 132.349990 132.349990 132.349990 1672.230469 1671.218750  1.000000  0.352314  0.352314  0.352314        1.0  0.352314  0.352314  0.352314   1.000000 0.352314
 36   2  55  55 1.0  7.563525   1.949714 0.026070   9.539309 136.524276 141.889299  35.500385 1696.113281 1703.039062  1.000000  0.348044  0.342749  0.539726        1.0  0.348044  0.342749  0.539726   1.000000 0.782681
 36   1  93  93 1.0 17.914056   4.031246 0.031271  21.976573 137.898501 163.865872   6.876869 1681.882812 1677.089844  0.913978  0.346667  0.323020  0.859023        1.0  0.316847  0.295233  0.785128   0.913978 0.714935
 37   3  29  29 1.0  3.690827 211.070538 0.000000 214.761365 214.761365 214.761365 214.761365 1724.597656 1725.425781  1.000000  0.286145  0.286145  0.286145        1.0  0.286145  0.286145  0.286145   1.000000 0.286145
 37   2  55  55 1.0  7.678114   2.230208 0.026806   9.935128 219.322903 224.696493  56.202426 1751.542969 1755.445312  1.000000  0.283289  0.280000  0.472336        1.0  0.283289  0.280000  0.472336   1.000000 0.761096
 37   1  95  95 1.0 18.422170   4.244750 0.032088  22.699008 220.702520 247.395502  10.357282 1728.941406 1725.492188  0.894737  0.282437  0.266939  0.753240        1.0  0.252707  0.238840  0.673951   0.894737 0.680727
 38   3  29  29 1.0  3.685154 169.409007 0.000000 173.094161 173.094161 173.094161 173.094161 1755.652344 1756.660156  1.000000  0.315532  0.315532  0.315532        1.0  0.315532  0.315532  0.315532   1.000000 0.315532
 38   2  55  55 1.0  7.550177   1.999192 0.025633   9.575003 177.317720 182.669164  45.695327 1780.289062 1786.082031  1.000000  0.312241  0.308184  0.502319        1.0  0.312241  0.308184  0.502319   1.000000 0.770747
 38   1  89  89 1.0 17.177474   4.008470 0.031537  21.217482 178.691757 203.886645   8.544278 1762.378906 1757.136719  0.955056  0.311187  0.293213  0.798031        1.0  0.297202  0.280035  0.762164   0.955056 0.735771
 39   3  29  29 1.0  3.673639 151.194670 0.000000 154.868309 154.868309 154.868309 154.868309 1784.832031 1783.101562  1.000000  0.330748  0.330748  0.330748        1.0  0.330748  0.330748  0.330748   1.000000 0.330748
 39   2  55  55 1.0  7.534500   2.008580 0.025375   9.568455 159.020041 164.436764  41.137262 1804.707031 1810.289062  1.000000  0.327126  0.322544  0.517764        1.0  0.327126  0.322544  0.517764   1.000000 0.775709
 39   1  89  89 1.0 17.133031   4.091327 0.031064  21.255423 160.391253 185.692187   7.786448 1791.433594 1786.566406  0.955056  0.325951  0.305946  0.822371        1.0  0.311302  0.292195  0.785410   0.955056 0.740471
 40   3  29  29 1.0  3.668311 132.237942 0.000000 135.906254 135.906254 135.906254 135.906254 1813.656250 1812.578125  1.000000  0.348667  0.348667  0.348667        1.0  0.348667  0.348667  0.348667   1.000000 0.348667
 40   2  55  55 1.0  7.665590   2.190763 0.025606   9.881959 140.423619 145.788213  36.475124 1839.832031 1842.828125  1.000000  0.344175  0.339029  0.535661        1.0  0.344175  0.339029  0.535661   1.000000 0.781392
 40   1  89  89 1.0 17.218483   4.164579 0.032081  21.415144 141.796426 167.203356   7.015938 1822.324219 1816.304688  0.955056  0.342839  0.320263  0.852724        1.0  0.327431  0.305869  0.814400   0.955056 0.745848
 41   3  29  29 1.0  3.701601 121.808088 0.000000 125.509688 125.509688 125.509688 125.509688 1844.003906 1842.476562  1.000000  0.359620  0.359620  0.359620        1.0  0.359620  0.359620  0.359620   1.000000 0.359620
 41   2  55  55 1.0  7.762735   2.212316 0.028802  10.003854 130.188975 135.513542  33.906444 1866.859375 1869.816406  1.000000  0.354579  0.349065  0.546654        1.0  0.354579  0.349065  0.546654   1.000000 0.784860
 41   1  91  91 1.0 17.632323   4.238272 0.031316  21.901911 131.594584 157.415454   6.607960 1850.601562 1844.566406  0.934066  0.353101  0.328514  0.872115        1.0  0.329820  0.306854  0.814613   0.934066 0.732651
 42   3  29  29 1.0  3.686082 154.089354 0.000000 157.775436 157.775436 157.775436 157.775436 1883.667969 1883.703125  1.000000  0.328202  0.328202  0.328202        1.0  0.328202  0.328202  0.328202   1.000000 0.328202
 42   2  55  55 1.0  7.664137   2.153670 0.025605   9.843412 162.269233 167.618848  41.932829 1874.472656 1874.890625  1.000000  0.324359  0.319924  0.514936        1.0  0.324359  0.319924  0.514936   1.000000 0.774786
 42   1  91  91 1.0 17.622695   4.368736 0.031949  22.023381 163.643284 189.642229   7.951023 1865.183594 1862.695312  0.934066  0.323205  0.303076  0.816694        1.0  0.301895  0.283093  0.762846   0.934066 0.723342
 43   3  29  29 1.0  3.692723 142.019616 0.000000 145.712339 145.712339 145.712339 145.712339 1913.039062 1914.699219  1.000000  0.339101  0.339101  0.339101        1.0  0.339101  0.339101  0.339101   1.000000 0.339101
 43   2  55  55 1.0  7.671155   4.079730 0.026011  11.776897 150.215780 157.489235  39.400453 1941.023438 1946.042969  1.000000  0.334927  0.328450  0.524154        1.0  0.334927  0.328450  0.524154   1.000000 0.778309
 43   1  95  95 1.0 18.399041   2.612799 0.031795  21.043635 151.584847 178.532871   7.488059 1921.585938 1918.996094  0.894737  0.333684  0.311309  0.833322        1.0  0.298559  0.278540  0.745603   0.894737 0.696011
 44   3  29  29 1.0  3.676389 139.078283 0.000000 142.754672 142.754672 142.754672 142.754672 1944.253906 1943.917969  1.000000  0.341915  0.341915  0.341915        1.0  0.341915  0.341915  0.341915   1.000000 0.341915
 44   2  55  55 1.0  7.640366   2.057336 0.026289   9.723990 147.139119 152.478662  38.631654 1968.828125 1974.214844  1.000000  0.337764  0.332878  0.527083        1.0  0.337764  0.332878  0.527083   1.000000 0.779255
 44   1  95  95 1.0 18.402513   2.614743 0.030330  21.047586 148.507558 173.526249   7.360050 1943.703125 1940.863281  0.894737  0.336495  0.315192  0.838310        1.0  0.301074  0.282014  0.750067   0.894737 0.696849
 45   3  29  29 1.0  3.674584 143.006859 0.000000 146.681443 146.681443 146.681443 146.681443 1978.109375 1980.601562  1.000000  0.338191  0.338191  0.338191        1.0  0.338191  0.338191  0.338191   1.000000 0.338191
 45   2  55  55 1.0  7.632455   2.170751 0.025428   9.828633 151.120394 156.510077  39.155362 2006.746094 2013.933594  1.000000  0.334104  0.329304  0.525081        1.0  0.334104  0.329304  0.525081   1.000000 0.778035
 45   1  93  93 1.0 18.006905   4.567899 0.030547  22.605350 152.492593 179.115427   7.512277 1986.691406 1984.535156  0.913978  0.332865  0.310864  0.832398        1.0  0.304232  0.284123  0.760794   0.913978 0.710730
 46   3  29  29 1.0  3.671091 120.137669 0.000000 123.808760 123.808760 123.808760 123.808760 2011.277344 2011.839844  1.000000  0.361501  0.361501  0.361501        1.0  0.361501  0.361501  0.361501   1.000000 0.361501
 46   2  55  55 1.0  7.593817   2.054163 0.025876   9.673856 127.966974 133.482616  33.398768 2038.601562 2043.507812  1.000000  0.356949  0.351141  0.548938        1.0  0.356949  0.351141  0.548938   1.000000 0.785650
 46   1  93  93 1.0 17.988260   2.595611 0.031869  20.615740 129.341290 154.098356   6.469992 2022.859375 2017.781250  0.913978  0.355478  0.331430  0.879366        1.0  0.324899  0.302920  0.803722   0.913978 0.717619
 47   3  29  29 1.0  3.672383 135.757499 0.000000 139.429882 139.429882 139.429882 139.429882 2041.726562 2042.292969  1.000000  0.345150  0.345150  0.345150        1.0  0.345150  0.345150  0.345150   1.000000 0.345150
 47   2  55  55 1.0  7.677429   4.295817 0.025517  11.998763 145.722305 151.428645  37.885422 2048.320312 2056.855469  1.000000  0.339091  0.333825  0.529989        1.0  0.339091  0.333825  0.529989   1.000000 0.779697
 47   1  89  89 1.0 17.282632   2.502447 0.031016  19.816096 147.097747 171.244741   7.184368 2026.695312 2026.292969  0.955056  0.337803  0.317000  0.845474        1.0  0.322621  0.302752  0.807475   0.955056 0.744244
 48   3  29  29 1.0  3.683774 147.696386 0.000000 151.380160 151.380160 151.380160 151.380160 2071.332031 2072.765625  1.000000  0.333869  0.333869  0.333869        1.0  0.333869  0.333869  0.333869   1.000000 0.333869
 48   2  55  55 1.0  7.546013   2.078959 0.025906   9.650878 155.622341 161.031037  40.285884 2100.679688 2108.640625  1.000000  0.330083  0.325407  0.520858        1.0  0.330083  0.325407  0.520858   1.000000 0.776694
 48   1  91  91 1.0 17.502944   4.519502 0.032129  22.054575 156.996200 183.085612   7.677889 2078.695312 2074.792969  0.934066  0.328879  0.307873  0.826252        1.0  0.307195  0.287574  0.771773   0.934066 0.725109
 49   3  29  29 1.0  3.679418 152.489762 0.000000 156.169180 156.169180 156.169180 156.169180 2103.734375 2104.250000  1.000000  0.329602  0.329602  0.329602        1.0  0.329602  0.329602  0.329602   1.000000 0.329602
 49   2  55  55 1.0  7.530343   1.970409 0.025031   9.525783 160.340384 165.694963  41.452164 2127.785156 2136.640625  1.000000  0.325995  0.321502  0.516637        1.0  0.325995  0.321502  0.516637   1.000000 0.775332
 49   1  87  87 1.0 16.834484   4.446579 0.030843  21.311906 161.712873 187.006869   7.841220 2111.425781 2107.234375  0.977011  0.324829  0.304984  0.820455        1.0  0.317361  0.297973  0.801594   0.977011 0.757128

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL    LE    AC  CF        GT         ST       OT         TT         LT         CT         WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 29.00 29.00 1.0  3.680291 141.475809 0.000000 145.156100 145.156100 145.156100 145.156100 1292.468516 1291.378281  1.000000  0.340836  0.340836  0.340836        1.0  0.340836  0.340836  0.340836   1.000000 0.340836
  2 55.00 55.00 1.0  7.602760   2.552398 0.025886  10.181045 149.614747 155.337145  38.872068 1313.814687 1317.098359  1.000000  0.336609  0.331386  0.527396        1.0  0.336609  0.331386  0.527396   1.000000 0.778870
  1 91.04 91.04 1.0 17.606591   3.344813 0.031521  20.982926 150.990293 176.320071   7.398502 1295.312031 1289.885234  0.934167  0.335333  0.313836  0.840471        1.0  0.313289  0.293210  0.785211   0.934167 0.727207

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       LE       AC  CF       GT        ST       OT        TT        LT        CT        WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 0.000000 0.000000 0.0 0.024370 19.712835 0.000000 19.708427 19.708427 19.708427 19.708427 490.413253 491.553422  0.000000  0.017975  0.017975  0.017975        0.0  0.017975  0.017975  0.017975   0.000000 0.017975
  2 0.000000 0.000000 0.0 0.060813  0.612012 0.000641  0.624233 19.658687 19.675070  4.917822 491.063733 492.832722  0.000000  0.017384  0.016757  0.018169        0.0  0.017384  0.016757  0.018169   0.000000 0.005795
  1 2.156717 2.156717 0.0 0.423851  0.680208 0.000599  0.805933 19.657391 19.825761  0.826901 491.375236 492.693953  0.022018  0.017222  0.014839  0.031522        0.0  0.018180  0.016072  0.036221   0.022018 0.018372

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT         ST       OT         TT         YT         WT       ET         RSS         VMS  LE  AC  CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  PP_EF_L  PP_EF_A  SP_ED_L  SP_ED_A  SP_EB_L  SP_EB_A  SP_EBS_L  SP_EBS_A  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 3.676754 139.857895 0.000000 143.534649 143.534649 143.534649 0.000000  481.019531  478.101562  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   2   1   1 3.114220   1.047509 0.006420   4.168149 147.702798 147.702798 1.264869  485.054688  485.695312  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
  0   2   2   2 1.061165   0.198165 0.005540   1.264869 148.967668   1.264869 2.699798  400.324219  405.476562   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
  0   2   3   3 2.104447   0.589241 0.006109   2.699798 151.667465   2.699798 1.638011  453.082031  455.863281  15  15 1.0   15       31     45     7         7       15      21 2.142857 2.142857 0.899735 0.899735 0.419877 0.419877  0.670224  0.670224            0            1
  0   2   4   4 1.366197   0.264252 0.007562   1.638011 153.305477   1.638011 0.000000  455.578125  450.812500  10  10 1.0   10       46     55     8         8       22      29 1.250000 1.250000 0.707107 0.707107 0.565685 0.565685  0.742816  0.742816            0            4
  0   1   1   1 1.197823   0.193709 0.001972   1.393503 149.096302 149.096302 3.081263  349.957031  357.523438   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   2   2 1.579342   0.234969 0.002083   1.816394 152.177565   3.081263 4.115491  364.777344  368.960938   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  0   1   3   3 1.174369   0.238547 0.002778   1.415694 156.293056   4.115491 3.024820  360.683594  367.109375   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  0   1   4   4 1.194211   0.189830 0.002767   1.386809 159.317877   3.024820 1.890851  369.960938  378.273438   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
  0   1   5   5 1.552454   0.335400 0.002997   1.890851 161.208728   1.890851 1.344085  379.179688  384.957031   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
  0   1   6   6 1.176051   0.164960 0.003074   1.344085 162.552813   1.344085 0.308030  381.570312  387.128906   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  0   1   7   7 0.273055   0.034975 0.000000   0.308030 162.860843   0.308030 0.404501  393.769531  398.242188   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1   8   8 0.275941   0.128561 0.000000   0.404501 163.265345   0.404501 0.483063  394.226562  398.546875   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   9   9 0.432015   0.051048 0.000000   0.483063 163.748408   0.483063 0.316817  396.304688  400.414062   2   2 1.0    0       43     44     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  10  10 0.273619   0.043199 0.000000   0.316817 164.065225   0.316817 0.494436  396.640625  400.773438   1   1 1.0    0       45     45     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  11  11 0.435488   0.057975 0.000974   0.494436 164.559662   0.494436 0.773554  398.500000  402.343750   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  12  12 0.598523   0.174183 0.000848   0.773554 165.333216   0.773554 0.492474  404.234375  406.808594   3   3 1.0    0       48     50     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  0   1  13  13 0.435569   0.056090 0.000814   0.492474 165.825690   0.492474 0.497309  428.675781  424.925781   2   2 1.0    0       51     52     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  14  14 0.436137   0.060327 0.000845   0.497309 166.322999   0.497309 0.673942  428.957031  424.925781   2   2 1.0    0       53     54     2         2       33      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  15  15 0.597973   0.075025 0.000943   0.673942 166.996941   0.673942 1.725370  429.082031  424.929688   3   3 1.0    0       55     57     2         2       35      36 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  0   1  16  16 1.390917   0.332460 0.001993   1.725370 168.722311   1.725370 0.972849  443.953125  441.250000   7   7 1.0    0       58     64     3         3       37      39 2.333333 2.333333 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            0
  0   1  17  17 0.859097   0.111823 0.001929   0.972849 169.695160   0.972849 1.314895  436.453125  431.402344   4   4 1.0    0       65     68     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
  0   1  18  18 1.163490   0.149328 0.002077   1.314895 171.010055   1.314895 0.321297  439.925781  434.691406   6   6 1.0    0       69     74     3         3       43      45 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  0   1  19  19 0.281075   0.040222 0.000000   0.321297 171.331351   0.321297 0.317824  443.511719  438.062500   1   1 1.0    0       75     75     1         1       46      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  20  20 0.277613   0.040211 0.000000   0.317824 171.649176   0.317824 1.346322  443.511719  438.062500   1   1 1.0    0       76     76     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1  21  21 1.179999   0.165392 0.000931   1.346322 172.995498   1.346322 0.897990  445.917969  439.882812   6   6 1.0    0       77     82     2         2       48      49 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            1
  0   1  22  22 0.802634   0.094322 0.001034   0.897990 173.893488   0.897990 0.498290  445.890625  440.007812   4   4 1.0    0       83     86     2         2       50      51 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            1
  0   1  23  23 0.445447   0.051942 0.000901   0.498290 174.391777   0.498290 0.790021  446.058594  439.984375   2   2 1.0    0       87     88     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  0   1  24  24 0.613749   0.174046 0.002226   0.790021 175.181799   0.790021 0.000000  446.523438  440.488281   3   3 1.0    0       89     91     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  1   3   1   1 3.735361 134.687720 0.000000 138.423081 138.423081 138.423081 0.000000  490.460938  486.429688  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   2   1   1 3.135223   1.075485 0.006215   4.216922 142.640003 142.640003 1.273240  496.246094  497.843750  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
  1   2   2   2 1.064129   0.203799 0.005312   1.273240 143.913244   1.273240 2.936310  465.703125  457.718750   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
  1   2   3   3 2.258354   0.671854 0.006102   2.936310 146.849553   2.936310 1.600123  486.437500  477.886719  16  16 1.0   16       31     46     7         7       15      21 2.285714 2.285714 1.380131 1.380131 0.603807 0.603807  0.554370  0.554370            0            1
  1   2   4   4 1.232212   0.360183 0.007728   1.600123 148.449676   1.600123 0.000000  487.406250  479.753906   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
  1   1   1   1 1.175557   0.181145 0.002079   1.358781 143.998784 143.998784 3.030221  464.144531  457.359375   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   2   2 1.536758   0.218197 0.002025   1.756980 147.029004   3.030221 4.297372  465.136719  457.550781   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  1   1   3   3 1.139791   0.218446 0.002826   1.361062 151.326376   4.297372 3.208432  458.664062  449.507812   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  1   1   4   4 1.380001   0.225580 0.002728   1.608309 154.534808   3.208432 1.628180  466.359375  457.953125   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  1   1   5   5 1.348237   0.276976 0.002967   1.628180 156.162988   1.628180 1.454559  459.269531  450.062500   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  1   1   6   6 1.173202   0.278634 0.002724   1.454559 157.617547   1.454559 0.314369  459.046875  449.839844   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  1   1   7   7 0.274148   0.040221 0.000000   0.314369 157.931917   0.314369 0.322019  458.945312  449.835938   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1   8   8 0.275924   0.046095 0.000000   0.322019 158.253936   0.322019 0.319825  458.949219  449.835938   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1   9   9 0.274528   0.045296 0.000000   0.319825 158.573761   0.319825 0.494393  458.949219  449.835938   1   1 1.0    0       43     43     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  10  10 0.435658   0.058735 0.000000   0.494393 159.068154   0.494393 0.491775  458.957031  449.835938   2   2 1.0    0       44     45     1         1       26      26 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  11  11 0.435472   0.055384 0.000918   0.491775 159.559929   0.491775 0.595798  458.957031  449.835938   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  12  12 0.434413   0.160360 0.001025   0.595798 160.155727   0.595798 0.501795  459.082031  449.835938   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  13  13 0.436898   0.064010 0.000886   0.501795 160.657521   0.501795 1.233131  464.761719  455.683594   2   2 1.0    0       50     51     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  14  14 0.983050   0.248920 0.001161   1.233131 161.890653   1.233131 1.131630  470.914062  463.425781   5   5 1.0    0       52     56     2         2       33      34 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  1   1  15  15 0.982644   0.147005 0.001981   1.131630 163.022283   1.131630 0.891306  470.746094  463.371094   5   5 1.0    0       57     61     3         3       35      37 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
  1   1  16  16 0.789241   0.100156 0.001909   0.891306 163.913588   0.891306 1.470803  465.839844  456.687500   4   4 1.0    0       62     65     3         3       38      40 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
  1   1  17  17 1.194636   0.274140 0.002027   1.470803 165.384392   1.470803 1.628418  471.726562  463.351562   6   6 1.0    0       66     71     3         3       41      43 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  1   1  18  18 1.399795   0.226665 0.001958   1.628418 167.012810   1.628418 0.319820  481.761719  474.480469   7   7 1.0    0       72     78     3         3       44      46 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
  1   1  19  19 0.279073   0.040748 0.000000   0.319820 167.332630   0.319820 0.426694  476.343750  467.312500   1   1 1.0    0       79     79     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  20  20 0.280977   0.145717 0.000000   0.426694 167.759323   0.426694 0.317481  476.343750  467.312500   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  21  21 0.280488   0.036992 0.000000   0.317481 168.076804   0.317481 0.686367  476.343750  467.312500   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   1  22  22 0.613304   0.072113 0.000950   0.686367 168.763171   0.686367 0.499063  476.343750  467.312500   3   3 1.0    0       82     84     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  1   1  23  23 0.445828   0.052327 0.000908   0.499063 169.262234   0.499063 0.684177  476.343750  467.312500   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1  24  24 0.615260   0.066655 0.002262   0.684177 169.946411   0.684177 0.000000  476.351562  467.312500   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  2   3   1   1 3.644584 130.887931 0.000000 134.532515 134.532515 134.532515 0.000000  508.902344  505.812500  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   2   1   1 3.301190   1.158724 0.006395   4.466310 138.998825 138.998825 2.872191  524.847656  525.687500  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.147183 3.147183 0.957838 0.957838  0.269016  0.269016            0            2
  2   2   2   2 2.259548   0.606509 0.006134   2.872191 141.871016   2.872191 1.430934  532.902344  525.601562  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.380131 1.380131 0.603807 0.603807  0.554370  0.554370            0            1
  2   2   3   3 1.068219   0.356818 0.005897   1.430934 143.301950   1.430934 1.282543  526.765625  518.859375   8   8 1.0    8       40     47     7         7       15      21 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            2
  2   2   4   4 1.070601   0.204266 0.007676   1.282543 144.584493   1.282543 0.000000  530.789062  522.246094   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  2   1   1   1 1.173335   0.302773 0.001991   1.478099 140.476924 140.476924 4.883493  494.812500  487.667969   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   2   2 1.740956   0.267100 0.003247   2.011302 145.360417   4.883493 2.833628  498.765625  489.792969   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
  2   1   3   3 1.148676   0.251063 0.002955   1.402694 148.194045   2.833628 3.347636  490.132812  480.894531   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  2   1   4   4 1.762555   0.299530 0.003008   2.065093 151.541682   3.347636 1.678021  503.539062  497.042969   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
  2   1   5   5 1.343483   0.331623 0.002914   1.678021 153.219702   1.678021 1.814588  500.343750  492.859375   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  2   1   6   6 1.572511   0.239272 0.002805   1.814588 155.034290   1.814588 0.488148  518.226562  509.816406   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
  2   1   7   7 0.433983   0.053181 0.000984   0.488148 155.522438   0.488148 0.670531  512.339844  503.562500   2   2 1.0    0       45     46     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   8   8 0.600203   0.069323 0.001005   0.670531 156.192970   0.670531 1.568544  512.339844  503.562500   3   3 1.0    0       47     49     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  2   1   9   9 1.368778   0.197776 0.001990   1.568544 157.761513   1.568544 0.871418  519.933594  512.992188   7   7 1.0    0       50     56     3         3       28      30 2.333333 2.333333 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            0
  2   1  10  10 0.778550   0.090886 0.001981   0.871418 158.632931   0.871418 1.435983  512.671875  503.812500   4   4 1.0    0       57     60     3         3       31      33 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
  2   1  11  11 1.146965   0.286934 0.002084   1.435983 160.068914   1.435983 0.890108  514.710938  505.648438   6   6 1.0    0       61     66     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  2   1  12  12 0.795814   0.092195 0.002099   0.890108 160.959022   0.890108 0.481325  514.625000  505.562500   4   4 1.0    0       67     70     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
  2   1  13  13 0.434105   0.047219 0.000000   0.481325 161.440346   0.481325 0.308853  518.242188  509.070312   2   2 1.0    0       71     72     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  14  14 0.276077   0.032776 0.000000   0.308853 161.749199   0.308853 0.313985  518.246094  509.070312   1   1 1.0    0       73     73     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  15  15 0.275290   0.038695 0.000000   0.313985 162.063184   0.313985 0.313138  518.246094  509.070312   1   1 1.0    0       74     74     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  16  16 0.276277   0.036860 0.000000   0.313138 162.376322   0.313138 0.491352  518.246094  509.070312   1   1 1.0    0       75     75     1         1       43      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  17  17 0.435549   0.054748 0.001055   0.491352 162.867674   0.491352 1.024621  518.246094  509.070312   2   2 1.0    0       76     77     2         2       44      45 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  18  18 0.780976   0.242274 0.001371   1.024621 163.892295   1.024621 0.313887  519.328125  510.382812   4   4 1.0    0       78     81     2         2       46      47 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  2   1  19  19 0.274125   0.039762 0.000000   0.313887 164.206182   0.313887 0.461962  522.058594  513.074219   1   1 1.0    0       82     82     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  20  20 0.275192   0.186770 0.000000   0.461962 164.668144   0.461962 0.313768  522.058594  513.074219   1   1 1.0    0       83     83     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  21  21 0.276146   0.037622 0.000000   0.313768 164.981912   0.313768 0.484049  522.062500  513.074219   1   1 1.0    0       84     84     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  2   1  22  22 0.435010   0.049039 0.000000   0.484049 165.465962   0.484049 0.670754  522.062500  513.074219   2   2 1.0    0       85     86     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1  23  23 0.601859   0.067703 0.001193   0.670754 166.136716   0.670754 0.488012  522.273438  513.074219   3   3 1.0    0       87     89     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  2   1  24  24 0.432746   0.053138 0.002128   0.488012 166.624728   0.488012 0.000000  522.554688  513.574219   2   2 1.0    0       90     91     2         2       54      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   3   1   1 3.659612 144.428648 0.000000 148.088260 148.088260 148.088260 0.000000  564.855469  562.386719  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   2   1   1 3.153182   1.214873 0.006289   4.374343 152.462603 152.462603 1.277638  585.000000  587.390625  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
  3   2   2   2 1.071268   0.200714 0.005656   1.277638 153.740241   1.277638 1.723081  564.343750  556.910156   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
  3   2   3   3 1.357934   0.359423 0.005723   1.723081 155.463322   1.723081 2.773968  572.820312  565.078125  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
  3   2   4   4 2.093784   0.672093 0.008090   2.773968 158.237290   2.773968 0.000000  589.707031  588.480469  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.246423 1.246423 0.664759 0.664759  0.610790  0.610790            0            3
  3   1   1   1 1.175175   0.180248 0.001907   1.357330 153.819933 153.819933 3.045156  552.722656  546.273438   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   2   2 1.540983   0.224510 0.002025   1.767518 156.865089   3.045156 2.588311  554.421875  547.214844   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  3   1   3   3 0.778148   0.084390 0.002693   0.865231 159.453401   2.588311 4.311072  548.480469  539.750000   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   4   4 1.182098   0.352015 0.002993   1.537105 163.764473   4.311072 1.816078  551.378906  542.507812   6   6 1.0    0       19     24     4         4       11      14 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  3   1   5   5 1.560180   0.252910 0.002987   1.816078 165.580551   1.816078 1.554184  560.417969  551.875000   8   8 1.0    0       25     32     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
  3   1   6   6 1.179516   0.371848 0.002820   1.554184 167.134735   1.554184 0.313172  556.035156  547.261719   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  3   1   7   7 0.277398   0.035774 0.000000   0.313172 167.447907   0.313172 0.315954  556.570312  547.875000   1   1 1.0    0       39     39     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1   8   8 0.277282   0.038672 0.000000   0.315954 167.763861   0.315954 0.318256  556.570312  547.875000   1   1 1.0    0       40     40     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1   9   9 0.278039   0.040217 0.000000   0.318256 168.082118   0.318256 0.490812  556.570312  547.875000   1   1 1.0    0       41     41     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  10  10 0.276611   0.214201 0.000000   0.490812 168.572930   0.490812 0.670783  556.570312  547.875000   1   1 1.0    0       42     42     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  11  11 0.599505   0.070327 0.000951   0.670783 169.243713   0.670783 0.495339  556.699219  547.875000   3   3 1.0    0       43     45     2         2       27      28 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  3   1  12  12 0.434671   0.059830 0.000838   0.495339 169.739052   0.495339 0.491025  556.699219  547.875000   2   2 1.0    0       46     47     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  13  13 0.436961   0.054064 0.000000   0.491025 170.230076   0.491025 0.325416  560.476562  551.378906   2   2 1.0    0       48     49     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  14  14 0.277173   0.048244 0.000000   0.325416 170.555493   0.325416 0.669724  560.480469  551.378906   1   1 1.0    0       50     50     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1  15  15 0.598972   0.069763 0.000989   0.669724 171.225216   0.669724 0.486837  560.605469  551.378906   3   3 1.0    0       51     53     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  3   1  16  16 0.436109   0.049861 0.000868   0.486837 171.712053   0.486837 0.494664  560.613281  551.378906   2   2 1.0    0       54     55     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  17  17 0.435407   0.058376 0.000881   0.494664 172.206718   0.494664 1.107874  560.863281  551.628906   2   2 1.0    0       56     57     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  18  18 0.980477   0.126383 0.001014   1.107874 173.314592   1.107874 0.498411  562.843750  553.609375   5   5 1.0    0       58     62     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  3   1  19  19 0.439702   0.057792 0.000917   0.498411 173.813003   0.498411 2.014398  565.769531  556.726562   2   2 1.0    0       63     64     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  20  20 1.748224   0.265102 0.001072   2.014398 175.827401   2.014398 0.680161  575.527344  566.695312   9   9 1.0    0       65     73     2         2       43      44 4.500000 4.500000 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
  3   1  21  21 0.435611   0.243715 0.000834   0.680161 176.507561   0.680161 1.322859  566.914062  557.726562   2   2 1.0    0       74     75     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   1  22  22 1.167889   0.153070 0.001900   1.322859 177.830420   1.322859 1.100821  569.074219  560.066406   6   6 1.0    0       76     81     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  3   1  23  23 0.971998   0.126910 0.001913   1.100821 178.931242   1.100821 1.107112  569.972656  560.925781   5   5 1.0    0       82     86     3         3       50      52 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            1
  3   1  24  24 0.971341   0.132593 0.003178   1.107112 180.038354   1.107112 0.000000  572.304688  563.121094   5   5 1.0    0       87     91     3         3       53      55 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
  4   3   1   1 3.663144 174.781183 0.000000 178.444327 178.444327 178.444327 0.000000  598.804688  595.738281  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   2   1   1 3.216179   1.025502 0.006304   4.247985 182.692312 182.692312 1.502455  620.250000  621.203125  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
  4   2   2   2 1.070815   0.425958 0.005681   1.502455 184.194767   1.502455 3.410098  597.910156  590.316406   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
  4   2   3   3 2.422306   0.981805 0.005987   3.410098 187.604865   3.410098 1.559030  625.421875  626.695312  17  17 1.0   17       31     47     7         7       15      21 2.428571 2.428571 1.133893 1.133893 0.466897 0.466897  0.610492  0.610492            0            2
  4   2   4   4 1.084563   0.466860 0.007606   1.559030 189.163895   1.559030 0.000000  615.285156  608.507812   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
  4   1   1   1 1.177901   0.183776 0.001999   1.363676 184.055988 184.055988 3.274110  586.949219  580.546875   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   2   2 1.547328   0.222164 0.002163   1.771655 187.330098   3.274110 4.718882  589.035156  581.371094   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  4   1   3   3 1.155809   0.150157 0.002818   1.308784 192.048980   4.718882 3.181945  584.011719  575.230469   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  4   1   4   4 1.389401   0.230583 0.002932   1.622916 195.230926   3.181945 1.549995  593.019531  585.140625   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  4   1   5   5 1.348226   0.198947 0.002822   1.549995 196.780921   1.549995 1.367797  587.113281  578.250000   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  4   1   6   6 1.179217   0.185689 0.002891   1.367797 198.148718   1.367797 0.316089  589.832031  581.031250   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  4   1   7   7 0.278571   0.037518 0.000000   0.316089 198.464807   0.316089 0.314601  589.843750  581.031250   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1   8   8 0.276756   0.037844 0.000000   0.314601 198.779407   0.314601 0.490339  589.843750  581.031250   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   9   9 0.438619   0.051720 0.000000   0.490339 199.269747   0.490339 0.320320  589.867188  581.031250   2   2 1.0    0       43     44     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  10  10 0.276621   0.043699 0.000000   0.320320 199.590067   0.320320 0.496500  589.992188  581.031250   1   1 1.0    0       45     45     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  11  11 0.436736   0.058939 0.000825   0.496500 200.086567   0.496500 0.495205  590.007812  581.031250   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  12  12 0.438499   0.055855 0.000851   0.495205 200.581772   0.495205 0.502157  590.011719  581.031250   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  13  13 0.435968   0.065247 0.000943   0.502157 201.083929   0.502157 1.380307  593.691406  584.816406   2   2 1.0    0       50     51     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  14  14 1.182637   0.195780 0.001890   1.380307 202.464237   1.380307 2.068643  601.847656  593.085938   6   6 1.0    0       52     57     3         3       33      35 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  4   1  15  15 1.574316   0.492512 0.001816   2.068643 204.532880   2.068643 0.884824  605.460938  598.214844   8   8 1.0    0       58     65     3         3       36      38 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  4   1  16  16 0.783088   0.099970 0.001766   0.884824 205.417703   0.884824 1.356723  596.660156  587.566406   4   4 1.0    0       66     69     3         3       39      41 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
  4   1  17  17 1.178147   0.176677 0.001899   1.356723 206.774427   1.356723 0.681979  602.921875  595.957031   6   6 1.0    0       70     75     3         3       42      44 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            1
  4   1  18  18 0.598810   0.081242 0.001927   0.681979 207.456406   0.681979 0.480653  601.539062  593.398438   3   3 1.0    0       76     78     3         3       45      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  19  19 0.434248   0.046404 0.000000   0.480653 207.937058   0.480653 0.313522  603.648438  595.378906   2   2 1.0    0       79     80     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  20  20 0.276145   0.037377 0.000000   0.313522 208.250580   0.313522 0.485267  603.648438  595.378906   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  21  21 0.434686   0.050581 0.000000   0.485267 208.735848   0.485267 0.312428  603.710938  595.378906   2   2 1.0    0       82     83     1         1       50      50 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1  22  22 0.275555   0.036874 0.000000   0.312428 209.048276   0.312428 0.670165  603.710938  595.378906   1   1 1.0    0       84     84     1         1       51      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  4   1  23  23 0.602089   0.067146 0.000930   0.670165 209.718441   0.670165 0.489805  603.710938  595.378906   3   3 1.0    0       85     87     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  4   1  24  24 0.434735   0.052928 0.002142   0.489805 210.208246   0.489805 0.000000  604.210938  595.878906   2   2 1.0    0       88     89     2         2       54      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   3   1   1 3.665399 117.141736 0.000000 120.807134 120.807134 120.807134 0.000000  627.378906  623.546875  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   2   1   1 3.155935   1.246028 0.006147   4.408110 125.215244 125.215244 2.297970  649.976562  651.683594  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
  5   2   2   2 1.802317   0.489985 0.005669   2.297970 127.513214   2.297970 2.002422  640.125000  637.683594  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 1.069045 1.069045 0.575640 0.575640  0.626351  0.626351            0            2
  5   2   3   3 1.456331   0.540515 0.005577   2.002422 129.515636   2.002422 1.740791  640.281250  633.007812  11  11 1.0   11       36     46     7         7       15      21 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            2
  5   2   4   4 1.207963   0.525440 0.007388   1.740791 131.256427   1.740791 0.000000  645.593750  639.886719   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
  5   1   1   1 1.184856   0.183770 0.002115   1.370741 126.585986 126.585986 4.322486  619.625000  613.062500   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   2   2 1.550943   0.471299 0.002275   2.024517 130.908472   4.322486 3.315085  621.480469  613.890625   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  5   1   3   3 1.159793   0.150095 0.002774   1.312662 134.223557   3.315085 3.336295  614.652344  606.062500   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  5   1   4   4 1.372377   0.220341 0.002787   1.595505 137.559852   3.336295 1.535345  623.160156  615.558594   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  5   1   5   5 1.343573   0.188853 0.002918   1.535345 139.095197   1.535345 1.619419  618.796875  610.046875   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  5   1   6   6 1.179792   0.436779 0.002849   1.619419 140.714616   1.619419 0.492604  620.785156  612.101562   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  5   1   7   7 0.435045   0.056640 0.000918   0.492604 141.207219   0.492604 0.492832  623.378906  615.089844   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1   8   8 0.435020   0.056826 0.000985   0.492832 141.700051   0.492832 0.757839  623.382812  615.089844   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   9   9 0.439206   0.317665 0.000968   0.757839 142.457890   0.757839 0.675800  623.382812  615.089844   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1  10  10 0.599426   0.075379 0.000995   0.675800 143.133690   0.675800 0.888969  623.386719  615.089844   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1  11  11 0.790841   0.097284 0.000843   0.888969 144.022658   0.888969 1.798791  623.386719  615.089844   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  5   1  12  12 1.553215   0.243163 0.002413   1.798791 145.821449   1.798791 0.317276  635.000000  627.527344   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  5   1  13  13 0.276725   0.040552 0.000000   0.317276 146.138725   0.317276 0.668681  629.851562  621.101562   1   1 1.0    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  14  14 0.599430   0.068300 0.000950   0.668681 146.807406   0.668681 0.885840  629.914062  621.101562   3   3 1.0    0       63     65     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1  15  15 0.795801   0.089137 0.000902   0.885840 147.693246   0.885840 1.101373  629.914062  621.101562   4   4 1.0    0       66     69     2         2       39      40 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  5   1  16  16 0.969348   0.131093 0.000932   1.101373 148.794618   1.101373 0.676284  631.324219  622.511719   5   5 1.0    0       70     74     2         2       41      42 2.500000 2.500000 2.121320 2.121320 0.848528 0.848528 -0.642156 -0.642156            0            1
  5   1  17  17 0.602285   0.073099 0.000900   0.676284 149.470902   0.676284 0.665283  630.921875  622.101562   3   3 1.0    0       75     77     2         2       43      44 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  5   1  18  18 0.599341   0.065040 0.000902   0.665283 150.136185   0.665283 0.316072  631.296875  622.601562   3   3 1.0    0       78     80     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1  19  19 0.274719   0.041353 0.000000   0.316072 150.452258   0.316072 0.312231  635.046875  626.363281   1   1 1.0    0       81     81     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  5   1  20  20 0.274882   0.037349 0.000000   0.312231 150.764489   0.312231 0.314933  635.109375  626.363281   1   1 1.0    0       82     82     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  21  21 0.277241   0.037693 0.000000   0.314933 151.079422   0.314933 0.674682  635.109375  626.363281   1   1 1.0    0       83     83     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1  22  22 0.601044   0.072802 0.000836   0.674682 151.754104   0.674682 0.669376  635.171875  626.363281   3   3 1.0    0       84     86     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  5   1  23  23 0.600285   0.068142 0.000949   0.669376 152.423480   0.669376 0.493015  635.421875  626.613281   3   3 1.0    0       87     89     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1  24  24 0.436525   0.054236 0.002255   0.493015 152.916495   0.493015 0.000000  635.921875  627.113281   2   2 1.0    0       90     91     2         2       54      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   3   1   1 3.671727 126.018879 0.000000 129.690606 129.690606 129.690606 0.000000  659.199219  656.246094  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   2   1   1 3.151194   1.242572 0.006263   4.400029 134.090635 134.090635 2.571991  680.816406  683.261719  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
  6   2   2   2 1.798348   0.767081 0.006563   2.571991 136.662627   2.571991 2.214691  612.066406  615.945312  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 0.899735 0.899735 0.484473 0.484473  0.670224  0.670224            0            2
  6   2   3   3 1.598642   0.610455 0.005595   2.214691 138.877318   2.214691 1.312235  637.312500  633.687500  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            3
  6   2   4   4 1.078789   0.225747 0.007699   1.312235 140.189553   1.312235 0.000000  647.238281  644.273438   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
  6   1   1   1 1.182883   0.184122 0.002180   1.369185 135.459820 135.459820 4.342664  650.566406  643.941406   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1   2   2 1.542405   0.226074 0.002194   1.770673 139.802484   4.342664 3.822069  651.468750  644.132812   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  6   1   3   3 1.154189   0.450234 0.002954   1.607377 143.624553   3.822069 2.688968  646.714844  638.125000   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  6   1   4   4 1.186619   0.187081 0.003033   1.376733 146.313521   2.688968 1.823345  648.589844  639.925781   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  6   1   5   5 1.560673   0.259761 0.002911   1.823345 148.136866   1.823345 1.359920  657.691406  649.304688   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
  6   1   6   6 1.178140   0.179049 0.002731   1.359920 149.496785   1.359920 0.496148  651.941406  643.175781   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  6   1   7   7 0.435304   0.060028 0.000816   0.496148 149.992933   0.496148 0.494703  596.402344  595.839844   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1   8   8 0.437050   0.056716 0.000936   0.494703 150.487636   0.494703 0.494116  599.320312  598.468750   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1   9   9 0.438067   0.055091 0.000958   0.494116 150.981752   0.494116 0.675455  600.464844  599.601562   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  10  10 0.599040   0.075374 0.001041   0.675455 151.657207   0.675455 0.890444  603.464844  602.050781   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  6   1  11  11 0.791038   0.098521 0.000885   0.890444 152.547651   0.890444 1.807807  604.687500  602.699219   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
  6   1  12  12 1.558702   0.247136 0.001968   1.807807 154.355458   1.807807 0.496376  623.847656  622.261719   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  6   1  13  13 0.437219   0.058219 0.000937   0.496376 154.851834   0.496376 1.099444  625.558594  621.453125   2   2 1.0    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  14  14 0.980308   0.118117 0.001020   1.099444 155.951278   1.099444 0.690515  627.371094  622.902344   5   5 1.0    0       64     68     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  6   1  15  15 0.617347   0.072232 0.000935   0.690515 156.641793   0.690515 0.664877  626.972656  622.582031   3   3 1.0    0       69     71     2         2       40      41 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  6   1  16  16 0.598638   0.065179 0.001060   0.664877 157.306669   0.664877 0.495786  628.296875  623.687500   3   3 1.0    0       72     74     2         2       42      43 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  6   1  17  17 0.433291   0.061603 0.000892   0.495786 157.802455   0.495786 0.807800  629.421875  624.937500   2   2 1.0    0       75     76     2         2       44      45 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  18  18 0.435058   0.371776 0.000966   0.807800 158.610255   0.807800 0.485740  629.921875  625.437500   2   2 1.0    0       77     78     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  19  19 0.437363   0.048377 0.000000   0.485740 159.095996   0.485740 0.314958  636.558594  631.613281   2   2 1.0    0       79     80     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  20  20 0.276663   0.038296 0.000000   0.314958 159.410954   0.314958 0.308763  636.562500  631.613281   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  21  21 0.275410   0.033354 0.000000   0.308763 159.719717   0.308763 0.479428  637.125000  632.000000   1   1 1.0    0       82     82     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  22  22 0.433913   0.045515 0.000000   0.479428 160.199145   0.479428 0.488199  637.214844  632.078125   2   2 1.0    0       83     84     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   1  23  23 0.435604   0.051667 0.000928   0.488199 160.687344   0.488199 0.666305  637.515625  632.328125   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1  24  24 0.598280   0.065780 0.002245   0.666305 161.353649   0.666305 0.000000  638.394531  633.179688   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  7   3   1   1 3.677185 150.246799 0.000000 153.923984 153.923984 153.923984 0.000000  699.734375  698.628906  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   2   1   1 3.163746   0.976014 0.006384   4.146144 158.070128 158.070128 1.464291  724.769531  729.031250  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
  7   2   2   2 0.932055   0.526576 0.005660   1.464291 159.534420   1.464291 1.820228  697.324219  691.128906   7   7 1.0    7       23     29     7         7        8      14 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
  7   2   3   3 1.495563   0.318688 0.005977   1.820228 161.354648   1.820228 2.634020  707.273438  703.449219  11  11 1.0   11       30     40     7         7       15      21 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            2
  7   2   4   4 2.097659   0.528586 0.007775   2.634020 163.988668   2.634020 0.000000  725.199219  723.558594  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.125992 1.125992 0.600529 0.600529  0.637288  0.637288            0            3
  7   1   1   1 1.186679   0.183863 0.001953   1.372494 159.442622 159.442622 3.244740  687.507812  681.601562   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   2   2 1.553192   0.224991 0.002266   1.780449 162.687362   3.244740 3.456264  689.398438  682.164062   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  7   1   3   3 1.154798   0.477924 0.003313   1.636035 166.143626   3.456264 4.015097  684.187500  675.980469   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  7   1   4   4 1.185812   0.192333 0.002933   1.381077 170.158723   4.015097 1.820047  691.507812  685.156250   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
  7   1   5   5 1.559834   0.257221 0.002992   1.820047 171.978770   1.820047 1.371173  695.781250  687.976562   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
  7   1   6   6 1.181074   0.187180 0.002920   1.371173 173.349943   1.371173 0.323306  690.949219  682.609375   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  7   1   7   7 0.276135   0.047171 0.000000   0.323306 173.673249   0.323306 0.321245  690.828125  682.671875   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1   8   8 0.275310   0.045935 0.000000   0.321245 173.994494   0.321245 0.494395  690.828125  682.671875   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   9   9 0.434082   0.060313 0.000000   0.494395 174.488890   0.494395 0.322661  690.835938  682.671875   2   2 1.0    0       43     44     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  10  10 0.276208   0.046452 0.000000   0.322661 174.811550   0.322661 0.317844  690.835938  682.671875   1   1 1.0    0       45     45     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  11  11 0.275240   0.042604 0.000000   0.317844 175.129394   0.317844 0.675345  690.835938  682.671875   1   1 1.0    0       46     46     1         1       27      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  12  12 0.598431   0.075943 0.000971   0.675345 175.804739   0.675345 0.312949  691.078125  682.671875   3   3 1.0    0       47     49     2         2       28      29 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  7   1  13  13 0.274890   0.038059 0.000000   0.312949 176.117689   0.312949 0.493175  694.761719  686.429688   1   1 1.0    0       50     50     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  14  14 0.436374   0.055842 0.000959   0.493175 176.610864   0.493175 0.668211  694.886719  686.429688   2   2 1.0    0       51     52     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  15  15 0.599437   0.067805 0.000969   0.668211 177.279074   0.668211 0.848218  694.890625  686.429688   3   3 1.0    0       53     55     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  7   1  16  16 0.436307   0.410991 0.000920   0.848218 178.127293   0.848218 0.495245  695.328125  686.929688   2   2 1.0    0       56     57     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  7   1  17  17 0.437240   0.057101 0.000904   0.495245 178.622538   0.495245 1.114502  695.765625  687.429688   2   2 1.0    0       58     59     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  18  18 0.987451   0.126038 0.001013   1.114502 179.737040   1.114502 0.498002  697.109375  688.644531   5   5 1.0    0       60     64     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  7   1  19  19 0.439620   0.057118 0.001264   0.498002 180.235041   0.498002 2.009680  701.457031  692.949219   2   2 1.0    0       65     66     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  20  20 1.742093   0.266497 0.001090   2.009680 182.244721   2.009680 0.490673  710.550781  702.519531   9   9 1.0    0       67     75     2         2       43      44 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            0
  7   1  21  21 0.436182   0.053598 0.000892   0.490673 182.735394   0.490673 1.317744  702.218750  693.699219   2   2 1.0    0       76     77     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1  22  22 1.170990   0.144828 0.001926   1.317744 184.053138   1.317744 1.574315  704.566406  695.992188   6   6 1.0    0       78     83     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  7   1  23  23 1.361389   0.210931 0.001995   1.574315 185.627453   1.574315 0.678801  712.296875  705.027344   7   7 1.0    0       84     90     3         3       50      52 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
  7   1  24  24 0.601588   0.074091 0.003122   0.678801 186.306255   0.678801 0.000000  705.785156  697.203125   3   3 1.0    0       91     93     3         3       53      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   3   1   1 3.660418 151.333711 0.000000 154.994129 154.994129 154.994129 0.000000  734.464844  732.550781  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   2   1   1 3.339244   1.587699 0.006203   4.933146 159.927275 159.927275 2.861453  764.453125  765.578125  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.199702 3.199702 0.973822 0.973822  0.262549  0.262549            0            2
  8   2   2   2 2.269082   0.586007 0.006364   2.861453 162.788728   2.861453 1.292638  752.406250  745.945312  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 0.755929 0.755929 0.330719 0.330719  0.710676  0.710676            0            1
  8   2   3   3 1.072139   0.214505 0.005993   1.292638 164.081366   1.292638 1.288125  745.414062  738.234375   8   8 1.0    8       40     47     7         7       15      21 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            2
  8   2   4   4 1.069706   0.210347 0.008072   1.288125 165.369491   1.288125 0.000000  749.527344  741.796875   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
  8   1   1   1 1.180568   0.185624 0.001943   1.368136 161.295411 161.295411 4.889810  719.324219  710.890625   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   2   2 1.749763   0.275518 0.003076   2.028356 166.185220   4.889810 2.585472  728.082031  719.886719   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
  8   1   3   3 1.154939   0.135230 0.002666   1.292834 168.770693   2.585472 3.359117  719.750000  711.113281   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  8   1   4   4 1.763060   0.305097 0.002836   2.070992 172.129810   3.359117 1.954988  732.363281  726.226562   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
  8   1   5   5 1.359666   0.592251 0.003071   1.954988 174.084798   1.954988 1.590552  729.468750  722.191406   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  8   1   6   6 1.360663   0.226951 0.002938   1.590552 175.675350   1.590552 0.494168  732.324219  724.652344   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
  8   1   7   7 0.437437   0.055847 0.000884   0.494168 176.169518   0.494168 0.674630  729.394531  721.031250   2   2 1.0    0       45     46     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   8   8 0.602284   0.071262 0.001084   0.674630 176.844148   0.674630 1.102120  729.394531  721.031250   3   3 1.0    0       47     49     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  8   1   9   9 0.976490   0.123773 0.001857   1.102120 177.946268   1.102120 2.288232  730.546875  722.058594   5   5 1.0    0       50     54     3         3       28      30 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
  8   1  10  10 1.964157   0.322003 0.002072   2.288232 180.234500   2.288232 1.307638  743.570312  737.054688  10  10 1.0    0       55     64     3         3       31      33 3.333333 3.333333 4.041452 4.041452 1.212436 1.212436 -0.472489 -0.472489            0            0
  8   1  11  11 1.154897   0.150788 0.001953   1.307638 181.542138   1.307638 0.893101  734.082031  725.433594   6   6 1.0    0       65     70     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  8   1  12  12 0.798735   0.092408 0.001957   0.893101 182.435239   0.893101 0.484478  733.281250  724.847656   4   4 1.0    0       71     74     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
  8   1  13  13 0.436329   0.048149 0.000000   0.484478 182.919717   0.484478 0.308132  736.906250  728.441406   2   2 1.0    0       75     76     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  14  14 0.274181   0.033950 0.000000   0.308132 183.227849   0.308132 0.316353  736.968750  728.441406   1   1 1.0    0       77     77     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  15  15 0.276429   0.039924 0.000000   0.316353 183.544202   0.316353 0.313245  736.968750  728.441406   1   1 1.0    0       78     78     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  16  16 0.275517   0.037728 0.000000   0.313245 183.857446   0.313245 0.671998  736.972656  728.441406   1   1 1.0    0       79     79     1         1       43      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  17  17 0.598819   0.072258 0.000920   0.671998 184.529444   0.671998 1.071367  736.972656  728.441406   3   3 1.0    0       80     82     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  8   1  18  18 0.599972   0.470436 0.000958   1.071367 185.600811   1.071367 0.313194  737.222656  728.691406   3   3 1.0    0       83     85     2         2       46      47 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  8   1  19  19 0.276552   0.036641 0.000000   0.313194 185.914005   0.313194 0.308347  740.730469  732.203125   1   1 1.0    0       86     86     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  20  20 0.274789   0.033559 0.000000   0.308347 186.222352   0.308347 0.310484  740.730469  732.203125   1   1 1.0    0       87     87     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  21  21 0.276922   0.033562 0.000000   0.310484 186.532836   0.310484 0.483725  740.730469  732.203125   1   1 1.0    0       88     88     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  22  22 0.437424   0.046300 0.000000   0.483725 187.016561   0.483725 0.487693  740.734375  732.203125   2   2 1.0    0       89     90     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1  23  23 0.436392   0.050341 0.000960   0.487693 187.504255   0.487693 0.675185  740.734375  732.203125   2   2 1.0    0       91     92     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  8   1  24  24 0.606396   0.066345 0.002444   0.675185 188.179440   0.675185 0.000000  741.281250  732.953125   3   3 1.0    0       93     95     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  9   3   1   1 3.663974 116.929702 0.000000 120.593676 120.593676 120.593676 0.000000  765.265625  762.882812  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   2   1   1 3.152098   1.374567 0.006325   4.532989 125.126665 125.126665 1.282461  744.574219  753.660156  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.184785 3.184785 1.013341 1.013341  0.264377  0.264377            0            1
  9   2   2   2 1.069862   0.206613 0.005986   1.282461 126.409126   1.282461 3.242822  718.292969  715.890625   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
  9   2   3   3 2.244556   0.992086 0.006179   3.242822 129.651948   3.242822 1.461790  761.753906  762.148438  16  16 1.0   16       31     46     7         7       15      21 2.285714 2.285714 1.380131 1.380131 0.603807 0.603807  0.554370  0.554370            0            1
  9   2   4   4 1.212986   0.241386 0.007417   1.461790 131.113738   1.461790 0.000000  757.812500  756.191406   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
  9   1   1   1 1.181024   0.187154 0.001997   1.370176 126.496841 126.496841 3.053700  667.703125  666.445312   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   2   2 1.544454   0.224660 0.002126   1.771239 129.550541   3.053700 4.551208  680.718750  677.296875   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
  9   1   3   3 1.152803   0.152645 0.002938   1.308386 134.101750   4.551208 3.085682  678.066406  673.429688   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
  9   1   4   4 1.387448   0.233339 0.003105   1.623892 137.187431   3.085682 1.570844  693.058594  689.371094   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  9   1   5   5 1.355404   0.212427 0.003013   1.570844 138.758275   1.570844 1.363445  703.445312  701.816406   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
  9   1   6   6 1.179827   0.180744 0.002874   1.363445 140.121720   1.363445 0.313042  701.554688  697.976562   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
  9   1   7   7 0.276646   0.036396 0.000000   0.313042 140.434762   0.313042 0.316463  710.769531  707.320312   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1   8   8 0.276847   0.039616 0.000000   0.316463 140.751225   0.316463 0.490079  711.324219  707.871094   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   9   9 0.437210   0.052869 0.000000   0.490079 141.241304   0.490079 0.317606  713.195312  709.363281   2   2 1.0    0       43     44     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  10  10 0.277853   0.039753 0.000000   0.317606 141.558910   0.317606 0.496178  713.328125  709.484375   1   1 1.0    0       45     45     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  11  11 0.437326   0.057846 0.001006   0.496178 142.055088   0.496178 0.502560  713.460938  709.484375   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  12  12 0.437688   0.063490 0.001382   0.502560 142.557648   0.502560 0.496939  714.789062  710.816406   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  13  13 0.435754   0.060326 0.000859   0.496939 143.054587   0.496939 1.111989  736.984375  732.554688   2   2 1.0    0       50     51     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  14  14 0.980874   0.130038 0.001078   1.111989 144.166576   1.111989 1.109269  738.429688  733.800781   5   5 1.0    0       52     56     2         2       33      34 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
  9   1  15  15 0.979385   0.127964 0.001920   1.109269 145.275845   1.109269 0.877686  738.976562  734.339844   5   5 1.0    0       57     61     3         3       35      37 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
  9   1  16  16 0.779826   0.096036 0.001824   0.877686 146.153531   0.877686 1.326214  739.101562  734.667969   4   4 1.0    0       62     65     3         3       38      40 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
  9   1  17  17 1.170015   0.154380 0.001819   1.326214 147.479745   1.326214 1.572942  741.933594  737.593750   6   6 1.0    0       66     71     3         3       41      43 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
  9   1  18  18 1.358333   0.212648 0.001961   1.572942 149.052687   1.572942 0.318875  750.140625  747.117188   7   7 1.0    0       72     78     3         3       44      46 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
  9   1  19  19 0.276454   0.042421 0.000000   0.318875 149.371563   0.318875 0.312740  747.968750  742.941406   1   1 1.0    0       79     79     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  20  20 0.275070   0.037670 0.000000   0.312740 149.684303   0.312740 0.313288  747.968750  742.941406   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1  21  21 0.275804   0.037485 0.000000   0.313288 149.997591   0.313288 0.666587  747.968750  742.941406   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  22  22 0.600636   0.064968 0.000983   0.666587 150.664178   0.666587 0.486513  748.777344  743.699219   3   3 1.0    0       82     84     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  9   1  23  23 0.435449   0.050235 0.000829   0.486513 151.150691   0.486513 0.669070  748.789062  743.699219   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  24  24 0.600813   0.066084 0.002173   0.669070 151.819761   0.669070 0.000000  749.609375  744.507812   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 10   3   1   1 3.680953 133.909170 0.000000 137.590123 137.590123 137.590123 0.000000  798.703125  797.449219  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   2   1   1 3.318298   1.115865 0.006289   4.440453 142.030576 142.030576 2.491880  829.292969  831.289062  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.199702 3.199702 0.973822 0.973822  0.262549  0.262549            0            2
 10   2   2   2 1.653615   0.831901 0.006363   2.491880 144.522455   2.491880 1.910155  804.539062  796.835938  12  12 1.0   12       24     35     7         7        8      14 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            1
 10   2   3   3 1.601457   0.302658 0.006040   1.910155 146.432611   1.910155 1.312776  808.675781  801.304688  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.253566 1.253566 0.731247 0.731247  0.582450  0.582450            0            3
 10   2   4   4 1.077348   0.227521 0.007907   1.312776 147.745387   1.312776 0.000000  813.761719  807.539062   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 10   1   1   1 1.179634   0.183902 0.002076   1.365612 143.396188 143.396188 4.991025  787.226562  781.503906   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1   2   2 1.750823   0.745248 0.003074   2.499146 148.387213   4.991025 3.196047  791.656250  787.433594   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 10   1   3   3 1.157925   0.125186 0.002781   1.285892 151.583261   3.196047 3.389579  783.042969  775.226562   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 10   1   4   4 1.766398   0.307301 0.003103   2.076803 154.972839   3.389579 1.575741  796.058594  790.890625   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 1.892969 1.892969 0.841320 0.841320  0.233724  0.233724            0            0
 10   1   5   5 1.352635   0.220184 0.002922   1.575741 156.548580   1.575741 1.597140  793.167969  786.945312   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 10   1   6   6 1.365841   0.228299 0.003000   1.597140 158.145720   1.597140 0.672285  794.996094  787.796875   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 10   1   7   7 0.600516   0.070820 0.000948   0.672285 158.818004   0.672285 0.499398  790.875000  782.812500   3   3 1.0    0       45     47     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 10   1   8   8 0.435587   0.062865 0.000946   0.499398 159.317402   0.499398 0.503134  790.875000  782.812500   2   2 1.0    0       48     49     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1   9   9 0.439401   0.062754 0.000978   0.503134 159.820536   0.503134 1.124523  790.878906  782.812500   2   2 1.0    0       50     51     2         2       28      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  10  10 0.982321   0.141061 0.001141   1.124523 160.945059   1.124523 0.896683  793.578125  786.964844   5   5 1.0    0       52     56     2         2       30      31 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 10   1  11  11 0.793427   0.102244 0.001011   0.896683 161.841742   0.896683 0.673557  792.066406  784.273438   4   4 1.0    0       57     60     2         2       32      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  12  12 0.601060   0.071470 0.001027   0.673557 162.515298   0.673557 0.499046  791.753906  783.957031   3   3 1.0    0       61     63     2         2       34      35 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 10   1  13  13 0.439317   0.058775 0.000954   0.499046 163.014345   0.499046 1.098707  796.261719  788.718750   2   2 1.0    0       64     65     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  14  14 0.979369   0.118292 0.001046   1.098707 164.113051   1.098707 0.983958  797.519531  789.890625   5   5 1.0    0       66     70     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 10   1  15  15 0.438548   0.544495 0.000916   0.983958 165.097010   0.983958 1.335071  796.347656  788.718750   2   2 1.0    0       71     72     2         2       40      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  16  16 1.162646   0.171505 0.000920   1.335071 166.432081   1.335071 0.882191  799.707031  791.886719   6   6 1.0    0       73     78     2         2       42      43 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            1
 10   1  17  17 0.783158   0.098086 0.000947   0.882191 167.314272   0.882191 0.492216  800.156250  792.183594   4   4 1.0    0       79     82     2         2       44      45 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  18  18 0.437050   0.054178 0.000988   0.492216 167.806488   0.492216 0.313786  799.570312  791.828125   2   2 1.0    0       83     84     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  19  19 0.276191   0.037595 0.000000   0.313786 168.120274   0.313786 0.489240  804.011719  796.093750   1   1 1.0    0       85     85     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  20  20 0.438805   0.050435 0.000000   0.489240 168.609514   0.489240 0.314223  804.023438  796.093750   2   2 1.0    0       86     87     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  21  21 0.276686   0.037537 0.000000   0.314223 168.923737   0.314223 0.485598  804.148438  796.093750   1   1 1.0    0       88     88     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1  22  22 0.436482   0.049116 0.000000   0.485598 169.409335   0.485598 0.669185  804.148438  796.093750   2   2 1.0    0       89     90     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   1  23  23 0.600380   0.067850 0.000955   0.669185 170.078520   0.669185 0.496862  804.148438  796.093750   3   3 1.0    0       91     93     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 10   1  24  24 0.440808   0.053670 0.002384   0.496862 170.575382   0.496862 0.000000  804.148438  796.093750   2   2 1.0    0       94     95     2         2       54      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   3   1   1 3.671535 133.555180 0.000000 137.226715 137.226715 137.226715 0.000000  832.003906  830.945312  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   2   1   1 3.159650   1.547658 0.006394   4.713701 141.940416 141.940416 2.286583  856.574219  861.089844  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
 11   2   2   2 1.799507   0.481081 0.005995   2.286583 144.226999   2.286583 2.265700  844.488281  843.460938  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 1.069045 1.069045 0.575640 0.575640  0.626351  0.626351            0            2
 11   2   3   3 1.462123   0.797898 0.005680   2.265700 146.492699   2.265700 1.472077  840.746094  834.109375  11  11 1.0   11       36     46     7         7       15      21 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            2
 11   2   4   4 1.212443   0.251925 0.007709   1.472077 147.964776   1.472077 0.000000  847.804688  841.093750   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 11   1   1   1 1.182128   0.187238 0.001921   1.371287 143.311703 143.311703 4.064793  821.148438  815.589844   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   2   2 1.550875   0.225172 0.002164   1.778210 147.376496   4.064793 3.134673  823.691406  816.906250   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 11   1   3   3 0.778349   0.087610 0.003014   0.868973 150.511169   3.134673 2.849344  817.269531  809.308594   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   4   4 1.185625   0.188638 0.003004   1.377267 153.360513   2.849344 1.824948  820.281250  812.074219   6   6 1.0    0       19     24     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 11   1   5   5 1.559664   0.262415 0.002869   1.824948 155.185461   1.824948 1.890272  829.363281  821.453125   8   8 1.0    0       25     32     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 11   1   6   6 1.178363   0.708846 0.003063   1.890272 157.075733   1.890272 0.501696  824.183594  816.074219   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 11   1   7   7 0.436335   0.064389 0.000972   0.501696 157.577429   0.501696 0.506060  825.679688  817.363281   2   2 1.0    0       39     40     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1   8   8 0.437892   0.067187 0.000981   0.506060 158.083490   0.506060 0.497226  825.679688  817.363281   2   2 1.0    0       41     42     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1   9   9 0.435883   0.060379 0.000964   0.497226 158.580715   0.497226 0.680169  825.679688  817.363281   2   2 1.0    0       43     44     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  10  10 0.601955   0.077135 0.001079   0.680169 159.260884   0.680169 0.893441  825.691406  817.363281   3   3 1.0    0       45     47     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 11   1  11  11 0.793165   0.099382 0.000894   0.893441 160.154325   0.893441 1.806621  825.691406  817.363281   4   4 1.0    0       48     51     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 11   1  12  12 1.554714   0.249668 0.002239   1.806621 161.960946   1.806621 0.316891  837.566406  830.953125   8   8 1.0    0       52     59     3         3       33      35 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 11   1  13  13 0.275191   0.041700 0.000000   0.316891 162.277837   0.316891 0.672124  830.218750  821.855469   1   1 1.0    0       60     60     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  14  14 0.600873   0.070205 0.001045   0.672124 162.949961   0.672124 0.890634  830.281250  821.855469   3   3 1.0    0       61     63     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 11   1  15  15 0.796641   0.093146 0.000846   0.890634 163.840595   0.890634 1.107314  830.281250  821.855469   4   4 1.0    0       64     67     2         2       39      40 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 11   1  16  16 0.971285   0.135143 0.000887   1.107314 164.947909   1.107314 0.674691  833.542969  825.945312   5   5 1.0    0       68     72     2         2       41      42 2.500000 2.500000 2.121320 2.121320 0.848528 0.848528 -0.642156 -0.642156            0            1
 11   1  17  17 0.599549   0.074256 0.000887   0.674691 165.622601   0.674691 0.674983  832.132812  823.742188   3   3 1.0    0       73     75     2         2       43      44 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 11   1  18  18 0.599747   0.074277 0.000960   0.674983 166.297584   0.674983 0.321795  832.632812  824.242188   3   3 1.0    0       76     78     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 11   1  19  19 0.277386   0.044409 0.000000   0.321795 166.619379   0.321795 0.322635  836.136719  827.750000   1   1 1.0    0       79     79     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  20  20 0.278853   0.043782 0.000000   0.322635 166.942014   0.322635 0.311221  836.136719  827.750000   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1  21  21 0.274994   0.036227 0.000000   0.311221 167.253235   0.311221 0.676190  836.136719  827.750000   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1  22  22 0.599440   0.075846 0.000903   0.676190 167.929425   0.676190 0.491024  836.160156  827.750000   3   3 1.0    0       82     84     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 11   1  23  23 0.438632   0.051436 0.000957   0.491024 168.420449   0.491024 0.667970  836.660156  828.250000   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 11   1  24  24 0.599431   0.066359 0.002180   0.667970 169.088419   0.667970 0.000000  837.218750  829.003906   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 12   3   1   1 3.660132 164.118744 0.000000 167.778876 167.778876 167.778876 0.000000  881.894531  881.433594  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   2   1   1 3.143555   1.017348 0.006184   4.167087 171.945963 171.945963 1.284459  903.125000  907.269531  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
 12   2   2   2 1.072733   0.206381 0.005345   1.284459 173.230422   1.284459 1.691794  878.843750  871.878906   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 12   2   3   3 1.359670   0.326337 0.005786   1.691794 174.922217   1.691794 2.597961  887.019531  882.824219  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 0.786796 0.786796 0.550757 0.550757  0.701721  0.701721            0            2
 12   2   4   4 2.101555   0.488299 0.008107   2.597961 177.520177   2.597961 0.000000  905.472656  905.312500  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 0.991031 0.991031 0.528550 0.528550  0.668828  0.668828            0            3
 12   1   1   1 1.179650   0.182712 0.002030   1.364392 173.310355 173.310355 3.061005  867.750000  861.996094   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   2   2 1.551058   0.223266 0.002222   1.776546 176.371360   3.061005 3.002050  869.703125  863.074219   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 12   1   3   3 1.153728   0.153630 0.002898   1.310256 179.373410   3.002050 4.210822  864.675781  856.687500   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 12   1   4   4 1.383105   0.226706 0.003050   1.612861 183.584232   4.210822 1.563041  873.085938  866.425781   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 12   1   5   5 1.351823   0.208292 0.002927   1.563041 185.147274   1.563041 1.921265  873.378906  866.964844   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 12   1   6   6 1.179981   0.738465 0.002819   1.921265 187.068539   1.921265 0.312495  869.660156  861.484375   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 12   1   7   7 0.276462   0.036034 0.000000   0.312495 187.381034   0.312495 0.315990  870.972656  862.839844   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1   8   8 0.277369   0.038620 0.000000   0.315990 187.697024   0.315990 0.491170  870.972656  862.839844   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1   9   9 0.438853   0.052318 0.000000   0.491170 188.188194   0.491170 0.322561  870.984375  862.839844   2   2 1.0    0       43     44     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  10  10 0.277900   0.044661 0.000000   0.322561 188.510755   0.322561 0.503687  870.984375  862.839844   1   1 1.0    0       45     45     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  11  11 0.439869   0.062882 0.000937   0.503687 189.014442   0.503687 0.678072  870.992188  862.839844   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  12  12 0.605706   0.071285 0.001082   0.678072 189.692514   0.678072 0.316068  870.992188  862.839844   3   3 1.0    0       48     50     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 12   1  13  13 0.276568   0.039500 0.000000   0.316068 190.008581   0.316068 0.313378  874.691406  866.753906   1   1 1.0    0       51     51     1         1       31      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 12   1  14  14 0.277339   0.036039 0.000000   0.313378 190.321959   0.313378 0.674076  874.691406  866.753906   1   1 1.0    0       52     52     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  15  15 0.600928   0.072220 0.000928   0.674076 190.996035   0.674076 0.487139  874.691406  866.753906   3   3 1.0    0       53     55     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 12   1  16  16 0.436010   0.050136 0.000993   0.487139 191.483174   0.487139 1.054616  874.914062  866.753906   2   2 1.0    0       56     57     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  17  17 0.435481   0.617965 0.001170   1.054616 192.537790   1.054616 1.112657  875.164062  867.003906   2   2 1.0    0       58     59     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  18  18 0.984281   0.127242 0.001134   1.112657 193.650447   1.112657 0.497606  877.011719  868.976562   5   5 1.0    0       60     64     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 12   1  19  19 0.438571   0.058105 0.000929   0.497606 194.148053   0.497606 1.526158  880.390625  872.167969   2   2 1.0    0       65     66     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   1  20  20 1.349761   0.175542 0.000856   1.526158 195.674211   1.526158 0.886997  882.113281  873.765625   7   7 1.0    0       67     73     2         2       43      44 3.500000 3.500000 3.535534 3.535534 1.010153 1.010153 -1.181272 -1.181272            0            0
 12   1  21  21 0.793703   0.092292 0.001002   0.886997 196.561208   0.886997 1.317958  881.015625  872.667969   4   4 1.0    0       74     77     2         2       45      46 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 12   1  22  22 1.170407   0.145507 0.002044   1.317958 197.879166   1.317958 1.332202  883.707031  875.480469   6   6 1.0    0       78     83     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 12   1  23  23 1.165955   0.164345 0.001902   1.332202 199.211368   1.332202 0.889127  885.167969  876.812500   6   6 1.0    0       84     89     3         3       50      52 2.000000 2.000000 1.732051 1.732051 0.866025 0.866025  0.085162  0.085162            0            1
 12   1  24  24 0.781790   0.103943 0.003394   0.889127 200.100495   0.889127 0.000000  885.550781  877.191406   4   4 1.0    0       90     93     3         3       53      55 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 13   3   1   1 3.658174 163.117263 0.000000 166.775437 166.775437 166.775437 0.000000  911.648438  909.093750  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   2   1   1 3.161796   1.022605 0.006255   4.190656 170.966093 170.966093 1.281615  934.179688  936.253906  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
 13   2   2   2 1.072997   0.203158 0.005460   1.281615 172.247708   1.281615 2.807714  912.796875  905.800781   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 13   2   3   3 2.242968   0.558668 0.006078   2.807714 175.055422   2.807714 1.461048  934.617188  931.687500  16  16 1.0   16       31     46     7         7       15      21 2.285714 2.285714 1.112697 1.112697 0.486805 0.486805  0.615622  0.615622            0            1
 13   2   4   4 1.208946   0.244386 0.007716   1.461048 176.516470   1.461048 0.000000  924.257812  919.281250   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 13   1   1   1 1.180562   0.189619 0.001981   1.372163 172.338256 172.338256 3.046938  901.875000  896.019531   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   2   2 1.539874   0.223159 0.002290   1.765323 175.385194   3.046938 4.105857  903.257812  896.714844   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 13   1   3   3 1.153665   0.141601 0.002876   1.298142 179.491050   4.105857 2.843728  898.636719  890.667969   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 13   1   4   4 1.186768   0.193250 0.002662   1.382680 182.334778   2.843728 1.818573  905.867188  899.839844   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 13   1   5   5 1.560057   0.255522 0.002994   1.818573 184.153351   1.818573 1.969173  909.550781  901.875000   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 13   1   6   6 1.179655   0.786711 0.002807   1.969173 186.122524   1.969173 0.313435  904.441406  896.257812   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 13   1   7   7 0.277397   0.036038 0.000000   0.313435 186.435959   0.313435 0.318230  904.960938  896.761719   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   8   8 0.276399   0.041831 0.000000   0.318230 186.754189   0.318230 0.315172  904.960938  896.761719   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1   9   9 0.275969   0.039203 0.000000   0.315172 187.069361   0.315172 0.316617  904.960938  896.761719   1   1 1.0    0       43     43     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  10  10 0.275419   0.041199 0.000000   0.316617 187.385979   0.316617 0.675545  904.964844  896.761719   1   1 1.0    0       44     44     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  11  11 0.602607   0.071979 0.000959   0.675545 188.061524   0.675545 0.499207  904.964844  896.761719   3   3 1.0    0       45     47     2         2       27      28 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 13   1  12  12 0.436094   0.062149 0.000964   0.499207 188.560730   0.499207 0.496047  904.964844  896.761719   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  13  13 0.435683   0.059454 0.000909   0.496047 189.056777   0.496047 1.112038  905.824219  897.738281   2   2 1.0    0       50     51     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  14  14 0.981837   0.129142 0.001059   1.112038 190.168815   1.112038 1.121714  907.152344  898.960938   5   5 1.0    0       52     56     2         2       33      34 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 13   1  15  15 0.982714   0.136910 0.002089   1.121714 191.290528   1.121714 1.505331  907.906250  899.718750   5   5 1.0    0       57     61     3         3       35      37 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
 13   1  16  16 0.792816   0.710531 0.001984   1.505331 192.795860   1.505331 1.316650  907.457031  899.238281   4   4 1.0    0       62     65     3         3       38      40 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 13   1  17  17 1.168521   0.146124 0.002005   1.316650 194.112509   1.316650 1.571520  910.453125  902.304688   6   6 1.0    0       66     71     3         3       41      43 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 13   1  18  18 1.358460   0.211225 0.001835   1.571520 195.684030   1.571520 0.314762  918.816406  912.246094   7   7 1.0    0       72     78     3         3       44      46 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
 13   1  19  19 0.278611   0.036151 0.000000   0.314762 195.998791   0.314762 0.312475  913.742188  905.761719   1   1 1.0    0       79     79     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  20  20 0.276858   0.035617 0.000000   0.312475 196.311266   0.312475 0.313612  913.742188  905.761719   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  21  21 0.275830   0.037782 0.000000   0.313612 196.624878   0.313612 0.674722  913.742188  905.761719   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1  22  22 0.600929   0.072957 0.000836   0.674722 197.299600   0.674722 0.671177  913.742188  905.761719   3   3 1.0    0       82     84     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 13   1  23  23 0.603338   0.066700 0.001139   0.671177 197.970777   0.671177 0.490878  913.996094  906.011719   3   3 1.0    0       85     87     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 13   1  24  24 0.435937   0.052741 0.002201   0.490878 198.461655   0.490878 0.000000  914.730469  906.511719   2   2 1.0    0       88     89     2         2       54      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   3   1   1 3.661788 150.827171 0.000000 154.488959 154.488959 154.488959 0.000000  946.089844  944.429688  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   2   1   1 3.176916   1.708643 0.006285   4.891844 159.380804 159.380804 1.116806  917.511719  924.093750  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
 14   2   2   2 0.932262   0.178447 0.006098   1.116806 160.497610   1.116806 1.904491  912.902344  912.468750   7   7 1.0    7       23     29     7         7        8      14 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 14   2   3   3 1.506321   0.392193 0.005976   1.904491 162.402101   1.904491 2.622066  931.265625  929.710938  11  11 1.0   11       30     40     7         7       15      21 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            2
 14   2   4   4 2.096322   0.517725 0.008019   2.622066 165.024167   2.622066 0.000000  949.933594  951.757812  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.125992 1.125992 0.600529 0.600529  0.637288  0.637288            0            3
 14   1   1   1 1.181522   0.187242 0.001986   1.370749 160.751553 160.751553 2.892973  887.523438  890.566406   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   2   2 1.546866   0.227020 0.002280   1.776166 163.644526   2.892973 2.772474  891.945312  893.214844   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 14   1   3   3 0.778938   0.086366 0.002680   0.867984 166.417000   2.772474 3.991388  886.660156  886.207031   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   4   4 1.178156   0.188476 0.002690   1.369321 170.408388   3.991388 1.823540  893.332031  892.031250   6   6 1.0    0       19     24     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 14   1   5   5 1.561324   0.259336 0.002879   1.823540 172.231928   1.823540 1.364968  905.679688  903.984375   8   8 1.0    0       25     32     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 14   1   6   6 1.180375   0.181757 0.002835   1.364968 173.596895   1.364968 0.312907  902.332031  899.597656   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 14   1   7   7 0.276318   0.036589 0.000000   0.312907 173.909802   0.312907 0.316865  906.824219  904.105469   1   1 1.0    0       39     39     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1   8   8 0.276585   0.040280 0.000000   0.316865 174.226667   0.316865 0.490125  906.976562  904.285156   1   1 1.0    0       40     40     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   9   9 0.436682   0.053443 0.000000   0.490125 174.716792   0.490125 0.315619  907.531250  904.683594   2   2 1.0    0       41     42     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  10  10 0.276530   0.039089 0.000000   0.315619 175.032411   0.315619 0.320620  908.726562  906.023438   1   1 1.0    0       43     43     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  11  11 0.277477   0.043143 0.000000   0.320620 175.353031   0.320620 1.326207  909.390625  906.593750   1   1 1.0    0       44     44     1         1       27      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  12  12 0.602656   0.722586 0.000965   1.326207 176.679237   1.326207 0.319020  911.378906  907.718750   3   3 1.0    0       45     47     2         2       28      29 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 14   1  13  13 0.280350   0.038669 0.000000   0.319020 176.998257   0.319020 0.496971  916.593750  912.117188   1   1 1.0    0       48     48     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  14  14 0.438791   0.057209 0.000971   0.496971 177.495229   0.496971 0.675866  916.660156  912.117188   2   2 1.0    0       49     50     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  15  15 0.601883   0.073103 0.000881   0.675866 178.171095   0.675866 0.489990  916.726562  912.160156   3   3 1.0    0       51     53     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 14   1  16  16 0.436553   0.052509 0.000928   0.489990 178.661085   0.489990 0.493392  916.734375  912.160156   2   2 1.0    0       54     55     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  17  17 0.435674   0.056737 0.000981   0.493392 179.154477   0.493392 1.112601  917.234375  912.660156   2   2 1.0    0       56     57     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  18  18 0.982781   0.128725 0.001095   1.112601 180.267078   1.112601 0.498211  920.101562  915.527344   5   5 1.0    0       58     62     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 14   1  19  19 0.438998   0.058187 0.001026   0.498211 180.765289   0.498211 1.979837  926.363281  921.609375   2   2 1.0    0       63     64     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  20  20 1.729047   0.249618 0.001173   1.979837 182.745126   1.979837 0.493171  935.382812  931.253906   9   9 1.0    0       65     73     2         2       43      44 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            0
 14   1  21  21 0.436603   0.055597 0.000971   0.493171 183.238298   0.493171 1.981616  927.878906  922.882812   2   2 1.0    0       74     75     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1  22  22 1.170587   0.808948 0.002082   1.981616 185.219914   1.981616 1.574903  930.796875  925.437500   6   6 1.0    0       76     81     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 14   1  23  23 1.360703   0.212195 0.002005   1.574903 186.794817   1.574903 0.677427  939.199219  935.136719   7   7 1.0    0       82     88     3         3       50      52 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
 14   1  24  24 0.599875   0.074432 0.003120   0.677427 187.472244   0.677427 0.000000  932.761719  927.308594   3   3 1.0    0       89     91     3         3       53      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   3   1   1 3.667555 137.188063 0.000000 140.855619 140.855619 140.855619 0.000000  977.269531  976.371094  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   2   1   1 3.313477   1.017890 0.006427   4.337794 145.193412 145.193412 3.017272  998.546875 1003.312500  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.039424 3.039424 0.925042 0.925042  0.282546  0.282546            0            2
 15   2   2   2 2.368533   0.642329 0.006410   3.017272 148.210684   3.017272 1.939716  950.714844  949.058594  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.603567 1.603567 0.701561 0.701561  0.508260  0.508260            0            1
 15   2   3   3 1.001504   0.932703 0.005509   1.939716 150.150400   1.939716 1.524626  954.285156  950.812500   7   7 1.0    7       40     46     7         7       15      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 15   2   4   4 1.251724   0.265175 0.007727   1.524626 151.675026   1.524626 0.000000  965.164062  960.636719   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 15   1   1   1 1.181117   0.186752 0.002000   1.369869 146.563281 146.563281 5.051548  965.601562  960.417969   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   2   2 1.754523   0.276759 0.002993   2.034276 151.614829   5.051548 2.810617  970.101562  966.105469   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 15   1   3   3 0.780024   0.088245 0.002633   0.870902 154.425446   2.810617 3.612092  961.070312  953.640625   4   4 1.0    0       16     19     4         4        8      11 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   4   4 1.771389   0.313008 0.003069   2.087466 158.037538   3.612092 2.254557  973.902344  969.054688   9   9 1.0    0       20     28     4         4       12      15 2.250000 2.250000 1.892969 1.892969 0.841320 0.841320  0.233724  0.233724            0            0
 15   1   5   5 1.354457   0.897256 0.002844   2.254557 160.292095   2.254557 1.653088  885.292969  882.574219   7   7 1.0    0       29     35     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 15   1   6   6 1.393530   0.256730 0.002827   1.653088 161.945183   1.653088 0.511046  897.968750  895.449219   7   7 1.0    0       36     42     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 15   1   7   7 0.452053   0.058129 0.000863   0.511046 162.456229   0.511046 0.696017  930.082031  927.882812   2   2 1.0    0       43     44     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   8   8 0.619624   0.075473 0.000921   0.696017 163.152246   0.696017 1.148384  931.265625  928.929688   3   3 1.0    0       45     47     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 15   1   9   9 1.007365   0.139111 0.001908   1.148384 164.300630   1.148384 2.356316  933.304688  930.390625   5   5 1.0    0       48     52     3         3       28      30 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 15   1  10  10 2.010544   0.343882 0.001891   2.356316 166.656946   2.356316 1.369175  949.597656  947.234375  10  10 1.0    0       53     62     3         3       31      33 3.333333 3.333333 2.516611 2.516611 0.754983 0.754983 -0.144624 -0.144624            0            0
 15   1  11  11 1.208061   0.159167 0.001948   1.369175 168.026121   1.369175 0.918209  942.089844  937.507812   6   6 1.0    0       63     68     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 15   1  12  12 0.817833   0.098408 0.001968   0.918209 168.944329   0.918209 0.520371  941.531250  936.816406   4   4 1.0    0       69     72     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 15   1  13  13 0.469030   0.051341 0.000000   0.520371 169.464701   0.520371 0.317120  947.035156  941.480469   2   2 1.0    0       73     74     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  14  14 0.282814   0.034306 0.000000   0.317120 169.781821   0.317120 0.335956  947.058594  941.480469   1   1 1.0    0       75     75     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  15  15 0.295285   0.040672 0.000000   0.335956 170.117777   0.335956 0.513681  947.093750  941.531250   1   1 1.0    0       76     76     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  16  16 0.463550   0.050131 0.000000   0.513681 170.631458   0.513681 0.330901  947.785156  942.257812   2   2 1.0    0       77     78     1         1       43      43 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  17  17 0.284731   0.046170 0.000000   0.330901 170.962359   0.330901 0.691648  948.046875  942.324219   1   1 1.0    0       79     79     1         1       44      44 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  18  18 0.616907   0.073787 0.000953   0.691648 171.654007   0.691648 0.329997  948.382812  942.621094   3   3 1.0    0       80     82     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 15   1  19  19 0.283083   0.046913 0.000000   0.329997 171.984003   0.329997 0.342157  954.027344  948.218750   1   1 1.0    0       83     83     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  20  20 0.298055   0.044103 0.000000   0.342157 172.326161   0.342157 0.321861  954.027344  948.218750   1   1 1.0    0       84     84     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  21  21 0.285041   0.036819 0.000000   0.321861 172.648021   0.321861 0.717793  954.082031  948.269531   1   1 1.0    0       85     85     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1  22  22 0.635286   0.081657 0.000851   0.717793 173.365815   0.717793 0.505638  954.191406  948.285156   3   3 1.0    0       86     88     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 15   1  23  23 0.449303   0.055486 0.000849   0.505638 173.871452   0.505638 0.682571  954.765625  948.753906   2   2 1.0    0       89     90     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 15   1  24  24 0.611229   0.069185 0.002157   0.682571 174.554023   0.682571 0.000000  955.480469  949.441406   3   3 1.0    0       91     93     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 16   3   1   1 3.778318 123.630576 0.000000 127.408894 127.408894 127.408894 0.000000 1006.109375 1004.371094  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   2   1   1 3.157496   0.997547 0.006254   4.161297 131.570191 131.570191 2.311002 1031.410156 1036.058594  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
 16   2   2   2 1.806277   0.498560 0.006165   2.311002 133.881193   2.311002 1.911192 1017.023438 1016.457031  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 1.069045 1.069045 0.575640 0.575640  0.626351  0.626351            0            2
 16   2   3   3 1.601687   0.303639 0.005867   1.911192 135.792385   1.911192 1.324324 1018.234375 1011.164062  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.253566 1.253566 0.731247 0.731247  0.582450  0.582450            0            3
 16   2   4   4 1.084084   0.232469 0.007771   1.324324 137.116710   1.324324 0.000000 1022.945312 1016.683594   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 16   1   1   1 1.185484   0.186768 0.001915   1.374167 132.944358 132.944358 4.090995  995.140625  989.914062   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   2   2 1.553999   0.223836 0.002159   1.779993 137.035353   4.090995 2.783318  997.109375  991.230469   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 16   1   3   3 0.782928   0.086423 0.002774   0.872126 139.818671   2.783318 2.709686  990.757812  983.636719   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   4   4 1.186926   0.195422 0.003013   1.385362 142.528357   2.709686 1.822823  998.992188  993.730469   6   6 1.0    0       19     24     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 16   1   5   5 1.561748   0.258224 0.002851   1.822823 144.351180   1.822823 1.365804 1002.683594  995.765625   8   8 1.0    0       25     32     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 16   1   6   6 1.180660   0.182063 0.003081   1.365804 145.716984   1.365804 0.497454  996.996094  989.644531   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 16   1   7   7 0.436392   0.060171 0.000892   0.497454 146.214438   0.497454 0.496338  999.777344  992.816406   2   2 1.0    0       39     40     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1   8   8 0.437709   0.057655 0.000974   0.496338 146.710776   0.496338 0.494614  999.902344  992.816406   2   2 1.0    0       41     42     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1   9   9 0.436652   0.056973 0.000989   0.494614 147.205389   0.494614 0.680032  999.906250  992.816406   2   2 1.0    0       43     44     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  10  10 0.602672   0.076435 0.000926   0.680032 147.885422   0.680032 0.890822  999.906250  992.816406   3   3 1.0    0       45     47     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 16   1  11  11 0.794346   0.095511 0.000965   0.890822 148.776244   0.890822 2.535683  999.917969  992.816406   4   4 1.0    0       48     51     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 16   1  12  12 1.552318   0.981385 0.001980   2.535683 151.311926   2.535683 0.498974 1011.250000 1005.250000   8   8 1.0    0       52     59     3         3       33      35 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 16   1  13  13 0.438902   0.059152 0.000921   0.498974 151.810900   0.498974 1.099537 1006.000000  998.578125   2   2 1.0    0       60     61     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  14  14 0.979668   0.118874 0.000994   1.099537 152.910438   1.099537 0.504219 1007.171875  999.750000   5   5 1.0    0       62     66     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 16   1  15  15 0.442461   0.060779 0.000979   0.504219 153.414657   0.504219 1.575406 1006.003906  998.578125   2   2 1.0    0       67     68     2         2       40      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  16  16 1.360863   0.213465 0.001077   1.575406 154.990063   1.575406 0.668578 1015.296875 1009.390625   7   7 1.0    0       69     75     2         2       42      43 3.500000 3.500000 3.535534 3.535534 1.010153 1.010153 -1.181272 -1.181272            0            2
 16   1  17  17 0.601959   0.065568 0.001051   0.668578 155.658641   0.668578 0.495573 1007.871094 1000.328125   3   3 1.0    0       76     78     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 16   1  18  18 0.438095   0.056588 0.000890   0.495573 156.154214   0.495573 0.483042 1008.808594 1001.328125   2   2 1.0    0       79     80     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1  19  19 0.435912   0.047130 0.000000   0.483042 156.637257   0.483042 0.311897 1012.441406 1004.835938   2   2 1.0    0       81     82     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  20  20 0.277074   0.034823 0.000000   0.311897 156.949154   0.311897 0.308982 1012.441406 1004.835938   1   1 1.0    0       83     83     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1  21  21 0.276584   0.032398 0.000000   0.308982 157.258135   0.308982 0.481325 1012.441406 1004.835938   1   1 1.0    0       84     84     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  22  22 0.436368   0.044957 0.000000   0.481325 157.739460   0.481325 0.672375 1012.441406 1004.835938   2   2 1.0    0       85     86     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1  23  23 0.604561   0.066885 0.000928   0.672375 158.411835   0.672375 0.494865 1012.441406 1004.835938   3   3 1.0    0       87     89     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 16   1  24  24 0.439183   0.053568 0.002114   0.494865 158.906700   0.494865 0.000000 1012.691406 1005.085938   2   2 1.0    0       90     91     2         2       54      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   3   1   1 3.688818 116.301808 0.000000 119.990626 119.990626 119.990626 0.000000 1038.093750 1036.199219  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   2   1   1 3.160395   1.029200 0.006594   4.196188 124.186814 124.186814 3.020077 1064.859375 1069.718750  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
 17   2   2   2 1.806136   1.208088 0.005853   3.020077 127.206892   3.020077 1.913359 1049.226562 1047.957031  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 0.690066 0.690066 0.371574 0.371574  0.730323  0.730323            0            2
 17   2   3   3 1.607513   0.300306 0.005540   1.913359 129.120251   1.913359 1.322648 1051.074219 1044.046875  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            3
 17   2   4   4 1.082787   0.232203 0.007658   1.322648 130.442899   1.322648 0.000000 1055.175781 1048.722656   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 17   1   1   1 1.188010   0.188435 0.001901   1.378346 125.565160 125.565160 4.806282 1026.136719 1020.300781   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   2   2 1.554519   0.229594 0.002092   1.786205 130.371443   4.806282 3.225404 1028.222656 1021.625000   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 17   1   3   3 1.157572   0.151603 0.002870   1.312045 133.596847   3.225404 2.932334 1023.164062 1015.468750   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 17   1   4   4 1.379515   0.227153 0.003018   1.609686 136.529180   2.932334 1.567077 1031.625000 1024.976562   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 17   1   5   5 1.357209   0.207080 0.002788   1.567077 138.096258   1.567077 1.376984 1026.351562 1018.515625   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 17   1   6   6 1.182243   0.191905 0.002836   1.376984 139.473242   1.376984 0.496088 1028.980469 1021.285156   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 17   1   7   7 0.435995   0.059253 0.000840   0.496088 139.969330   0.496088 0.497481 1032.910156 1025.601562   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1   8   8 0.438650   0.057914 0.000918   0.497481 140.466811   0.497481 0.498334 1032.910156 1025.601562   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   9   9 0.438608   0.058821 0.000904   0.498334 140.965145   0.498334 0.675426 1032.910156 1025.601562   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  10  10 0.602759   0.071759 0.000909   0.675426 141.640571   0.675426 0.889960 1032.910156 1025.601562   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 17   1  11  11 0.794914   0.094203 0.000843   0.889960 142.530531   0.889960 1.805931 1032.910156 1025.601562   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 17   1  12  12 1.559230   0.244781 0.001920   1.805931 144.336462   1.805931 0.493350 1044.308594 1038.089844   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 2.081666 2.081666 0.780625 0.780625 -0.024447 -0.024447            0            0
 17   1  13  13 0.438459   0.054047 0.000844   0.493350 144.829812   0.493350 1.099811 1038.859375 1031.113281   2   2 1.0    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  14  14 0.982086   0.116635 0.001090   1.099811 145.929623   1.099811 0.692203 1040.035156 1032.289062   5   5 1.0    0       64     68     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 17   1  15  15 0.620445   0.070794 0.000965   0.692203 146.621826   0.692203 0.491391 1038.859375 1031.113281   3   3 1.0    0       69     71     2         2       40      41 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 17   1  16  16 0.438425   0.052082 0.000884   0.491391 147.113217   0.491391 0.678537 1039.296875 1031.613281   2   2 1.0    0       72     73     2         2       42      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  17  17 0.600953   0.076745 0.000839   0.678537 147.791755   0.678537 0.496697 1039.875000 1032.363281   3   3 1.0    0       74     76     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 17   1  18  18 0.436283   0.059522 0.000892   0.496697 148.288451   0.496697 0.313663 1040.609375 1032.863281   2   2 1.0    0       77     78     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  19  19 0.277016   0.036647 0.000000   0.313663 148.602114   0.313663 0.489174 1043.878906 1036.375000   1   1 1.0    0       79     79     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  20  20 0.437378   0.051796 0.000000   0.489174 149.091288   0.489174 0.486436 1043.878906 1036.375000   2   2 1.0    0       80     81     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  21  21 0.437022   0.049414 0.000000   0.486436 149.577724   0.486436 0.317387 1043.878906 1036.375000   2   2 1.0    0       82     83     1         1       50      50 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1  22  22 0.277314   0.040073 0.000000   0.317387 149.895112   0.317387 0.670210 1043.878906 1036.375000   1   1 1.0    0       84     84     1         1       51      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  23  23 0.603466   0.065658 0.001086   0.670210 150.565321   0.670210 0.492663 1044.050781 1036.375000   3   3 1.0    0       85     87     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 17   1  24  24 0.436978   0.053521 0.002164   0.492663 151.057985   0.492663 0.000000 1044.625000 1037.125000   2   2 1.0    0       88     89     2         2       54      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   3   1   1 3.669842 166.652280 0.000000 170.322122 170.322122 170.322122 0.000000 1098.425781 1096.890625  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   2   1   1 3.158835   1.000728 0.006145   4.165708 174.487830 174.487830 3.098689 1118.675781 1123.019531  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
 18   2   2   2 1.801353   1.291757 0.005579   3.098689 177.586519   3.098689 1.920158 1105.675781 1104.320312  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 1.069045 1.069045 0.575640 0.575640  0.626351  0.626351            0            2
 18   2   3   3 1.608397   0.306071 0.005690   1.920158 179.506677   1.920158 1.323479 1106.750000 1099.320312  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            3
 18   2   4   4 1.083256   0.232844 0.007379   1.323479 180.830156   1.323479 0.000000 1110.437500 1104.371094   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 18   1   1   1 1.186107   0.187157 0.001958   1.375222 175.863052 175.863052 4.881040 1083.742188 1078.515625   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   2   2 1.552552   0.227575 0.002225   1.782352 180.744092   4.881040 3.221431 1086.128906 1079.839844   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 18   1   3   3 1.153374   0.144851 0.003048   1.301274 183.965523   3.221431 2.711906 1081.074219 1073.656250   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 18   1   4   4 1.187532   0.197870 0.003025   1.388427 186.677429   2.711906 1.826025 1088.289062 1082.832031   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 18   1   5   5 1.562652   0.260428 0.002944   1.826025 188.503454   1.826025 1.369105 1091.996094 1084.871094   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 18   1   6   6 1.183007   0.183346 0.002751   1.369105 189.872559   1.369105 0.490713 1086.375000 1078.750000   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 18   1   7   7 0.435857   0.054024 0.000832   0.490713 190.363272   0.490713 0.498692 1088.968750 1081.468750   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1   8   8 0.434883   0.062852 0.000957   0.498692 190.861963   0.498692 0.497038 1088.976562 1081.468750   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1   9   9 0.438183   0.058005 0.000851   0.497038 191.359001   0.497038 0.681220 1088.976562 1081.468750   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  10  10 0.601624   0.078622 0.000974   0.681220 192.040221   0.681220 0.894729 1088.976562 1081.468750   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 18   1  11  11 0.797004   0.096871 0.000854   0.894729 192.934950   0.894729 1.809247 1088.976562 1081.468750   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 18   1  12  12 1.558014   0.249411 0.001822   1.809247 194.744197   1.809247 0.497613 1101.300781 1095.058594   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 18   1  13  13 0.438075   0.058565 0.000974   0.497613 195.241811   0.497613 1.099836 1094.382812 1086.730469   2   2 1.0    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  14  14 0.979345   0.119452 0.001039   1.099836 196.341646   1.099836 0.694086 1095.679688 1087.902344   5   5 1.0    0       64     68     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 18   1  15  15 0.619777   0.073416 0.000894   0.694086 197.035732   0.694086 0.666728 1094.507812 1086.730469   3   3 1.0    0       69     71     2         2       40      41 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 18   1  16  16 0.600773   0.064982 0.000974   0.666728 197.702461   0.666728 0.501797 1094.953125 1087.230469   3   3 1.0    0       72     74     2         2       42      43 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 18   1  17  17 0.437564   0.063266 0.000967   0.501797 198.204258   0.501797 0.494176 1096.140625 1088.480469   2   2 1.0    0       75     76     2         2       44      45 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  18  18 0.435845   0.057479 0.000853   0.494176 198.698434   0.494176 1.316969 1096.644531 1088.980469   2   2 1.0    0       77     78     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  19  19 0.438301   0.878668 0.000000   1.316969 200.015403   1.316969 0.317413 1100.023438 1092.242188   2   2 1.0    0       79     80     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  20  20 0.277149   0.040264 0.000000   0.317413 200.332817   0.317413 0.489688 1100.023438 1092.242188   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  21  21 0.440100   0.049588 0.000000   0.489688 200.822504   0.489688 0.315278 1100.023438 1092.242188   2   2 1.0    0       82     83     1         1       50      50 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1  22  22 0.276931   0.038347 0.000000   0.315278 201.137783   0.315278 0.488886 1100.023438 1092.242188   1   1 1.0    0       84     84     1         1       51      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  23  23 0.437060   0.050842 0.000984   0.488886 201.626668   0.488886 0.668516 1100.023438 1092.242188   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 18   1  24  24 0.599811   0.066494 0.002211   0.668516 202.295185   0.668516 0.000000 1100.273438 1092.492188   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 19   3   1   1 3.677736 126.357629 0.000000 130.035365 130.035365 130.035365 0.000000 1124.277344 1121.484375  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   2   1   1 3.328272   1.131146 0.006671   4.466089 134.501455 134.501455 2.835959 1146.160156 1148.437500  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.251373 3.251373 0.989548 0.989548  0.256265  0.256265            0            2
 19   2   2   2 2.266637   0.562984 0.006337   2.835959 137.337414   2.835959 1.293443 1141.351562 1136.140625  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.380131 1.380131 0.603807 0.603807  0.554370  0.554370            0            1
 19   2   3   3 1.073643   0.213899 0.005901   1.293443 138.630857   1.293443 1.293200 1134.531250 1128.226562   8   8 1.0    8       40     47     7         7       15      21 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            2
 19   2   4   4 1.072260   0.213054 0.007886   1.293200 139.924057   1.293200 0.000000 1138.792969 1131.789062   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 19   1   1   1 1.186112   0.185473 0.001944   1.373529 135.874984 135.874984 4.870157 1113.871094 1108.421875   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   2   2 1.754334   0.276819 0.003045   2.034198 140.745141   4.870157 2.163585 1118.617188 1111.417969   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 19   1   3   3 0.780804   0.086764 0.002573   0.870141 142.908726   2.163585 3.374161 1109.925781 1102.644531   4   4 1.0    0       16     19     4         4        8      11 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   4   4 1.770140   0.307633 0.003189   2.080962 146.282887   3.374161 1.566957 1122.753906 1118.054688   9   9 1.0    0       20     28     4         4       12      15 2.250000 2.250000 1.500000 1.500000 0.666667 0.666667  0.339036  0.339036            0            0
 19   1   5   5 1.354607   0.209374 0.002976   1.566957 147.849844   1.566957 2.469612 1119.832031 1114.363281   7   7 1.0    0       29     35     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 19   1   6   6 1.365017   1.101837 0.002758   2.469612 150.319456   2.469612 0.491806 1124.273438 1117.726562   7   7 1.0    0       36     42     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 19   1   7   7 0.436130   0.054684 0.000992   0.491806 150.811262   0.491806 0.670552 1119.074219 1111.421875   2   2 1.0    0       43     44     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   8   8 0.598435   0.071078 0.001039   0.670552 151.481814   0.670552 1.113942 1119.074219 1111.421875   3   3 1.0    0       45     47     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 19   1   9   9 0.978201   0.133780 0.001962   1.113942 152.595756   1.113942 2.246528 1120.226562 1112.574219   5   5 1.0    0       48     52     3         3       28      30 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 19   1  10  10 1.936333   0.308096 0.002099   2.246528 154.842285   2.246528 1.310437 1131.261719 1126.710938  10  10 1.0    0       53     62     3         3       31      33 3.333333 3.333333 4.041452 4.041452 1.212436 1.212436 -0.472489 -0.472489            0            0
 19   1  11  11 1.155831   0.152483 0.002123   1.310437 156.152721   1.310437 0.894611 1123.171875 1115.511719   6   6 1.0    0       63     68     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 19   1  12  12 0.797802   0.094966 0.001844   0.894611 157.047333   0.894611 0.482655 1122.339844 1114.671875   4   4 1.0    0       69     72     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 19   1  13  13 0.433979   0.048676 0.000000   0.482655 157.529987   0.482655 0.309270 1125.542969 1117.929688   2   2 1.0    0       73     74     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  14  14 0.275826   0.033443 0.000000   0.309270 157.839257   0.309270 0.313056 1125.542969 1117.929688   1   1 1.0    0       75     75     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  15  15 0.273837   0.039219 0.000000   0.313056 158.152313   0.313056 0.315255 1125.605469 1117.929688   1   1 1.0    0       76     76     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  16  16 0.275237   0.040018 0.000000   0.315255 158.467568   0.315255 0.677703 1125.605469 1117.929688   1   1 1.0    0       77     77     1         1       43      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  17  17 0.602879   0.073872 0.000952   0.677703 159.145271   0.677703 0.674552 1125.605469 1117.929688   3   3 1.0    0       78     80     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 19   1  18  18 0.604594   0.068939 0.001019   0.674552 159.819823   0.674552 1.185961 1126.144531 1118.679688   3   3 1.0    0       81     83     2         2       46      47 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 19   1  19  19 0.276502   0.909459 0.000000   1.185961 161.005784   1.185961 0.314854 1130.425781 1122.945312   1   1 1.0    0       84     84     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  20  20 0.276309   0.038545 0.000000   0.314854 161.320638   0.314854 0.488679 1130.425781 1122.945312   1   1 1.0    0       85     85     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  21  21 0.437535   0.051144 0.000000   0.488679 161.809317   0.488679 0.313603 1130.425781 1122.945312   2   2 1.0    0       86     87     1         1       50      50 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1  22  22 0.275191   0.038412 0.000000   0.313603 162.122920   0.313603 0.488849 1130.613281 1122.945312   1   1 1.0    0       88     88     1         1       51      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  23  23 0.436277   0.051610 0.000963   0.488849 162.611769   0.488849 0.669645 1130.613281 1122.945312   2   2 1.0    0       89     90     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 19   1  24  24 0.600962   0.066449 0.002233   0.669645 163.281414   0.669645 0.000000 1130.613281 1122.945312   3   3 1.0    0       91     93     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 20   3   1   1 3.673052 133.534733 0.000000 137.207786 137.207786 137.207786 0.000000 1155.867188 1153.691406  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   2   1   1 3.155416   0.982976 0.006229   4.144621 141.352407 141.352407 3.209952 1176.550781 1179.187500  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
 20   2   2   2 1.802211   1.401416 0.006326   3.209952 144.562359   3.209952 1.917088 1165.910156 1165.167969  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 0.690066 0.690066 0.371574 0.371574  0.730323  0.730323            0            2
 20   2   3   3 1.603914   0.307384 0.005790   1.917088 146.479448   1.917088 1.292406 1168.097656 1161.453125  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            2
 20   2   4   4 1.073669   0.211383 0.007353   1.292406 147.771854   1.292406 0.000000 1169.980469 1163.464844   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 20   1   1   1 1.183400   0.185903 0.002046   1.371349 142.723756 142.723756 4.991044 1145.277344 1139.609375   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   2   2 1.554215   0.224697 0.002180   1.781092 147.714800   4.991044 3.230101 1147.351562 1140.933594   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 20   1   3   3 1.155737   0.154258 0.003017   1.313012 150.944901   3.230101 2.901522 1142.285156 1134.546875   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 20   1   4   4 1.378863   0.227176 0.003078   1.609117 153.846423   2.901522 1.559487 1150.687500 1144.285156   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            0
 20   1   5   5 1.349418   0.207036 0.003033   1.559487 155.405910   1.559487 1.383634 1145.425781 1137.808594   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 20   1   6   6 1.182122   0.198493 0.003020   1.383634 156.789544   1.383634 0.491386 1148.832031 1141.093750   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 20   1   7   7 0.437888   0.052597 0.000901   0.491386 157.280931   0.491386 0.495402 1149.867188 1142.847656   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1   8   8 0.436763   0.057666 0.000973   0.495402 157.776333   0.495402 0.500696 1149.867188 1142.847656   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1   9   9 0.436762   0.062909 0.001025   0.500696 158.277028   0.500696 0.680838 1149.867188 1142.847656   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  10  10 0.602349   0.077451 0.001038   0.680838 158.957866   0.680838 0.893945 1149.867188 1142.847656   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 20   1  11  11 0.796390   0.096618 0.000936   0.893945 159.851811   0.893945 1.806405 1150.062500 1142.847656   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 20   1  12  12 1.554017   0.250354 0.002033   1.806405 161.658216   1.806405 0.494763 1161.171875 1155.285156   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 2.081666 2.081666 0.780625 0.780625 -0.024447 -0.024447            0            0
 20   1  13  13 0.435440   0.058351 0.000972   0.494763 162.152978   0.494763 1.100851 1155.562500 1148.363281   2   2 1.0    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  14  14 0.980943   0.118908 0.001000   1.100851 163.253829   1.100851 0.706463 1156.734375 1149.535156   5   5 1.0    0       64     68     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 20   1  15  15 0.632307   0.073108 0.001048   0.706463 163.960293   0.706463 0.493706 1155.562500 1148.363281   3   3 1.0    0       69     71     2         2       40      41 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 20   1  16  16 0.436245   0.056510 0.000950   0.493706 164.453999   0.493706 0.668302 1156.062500 1148.863281   2   2 1.0    0       72     73     2         2       42      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  17  17 0.602536   0.064840 0.000926   0.668302 165.122301   0.668302 0.669870 1156.621094 1149.613281   3   3 1.0    0       74     76     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 20   1  18  18 0.601352   0.067410 0.001108   0.669870 165.792171   0.669870 0.311806 1157.312500 1150.113281   3   3 1.0    0       77     79     2         2       46      47 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 20   1  19  19 0.275702   0.036104 0.000000   0.311806 166.103977   0.311806 0.314336 1161.089844 1154.121094   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  20  20 0.274136   0.040200 0.000000   0.314336 166.418313   0.314336 0.308865 1161.089844 1154.121094   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  21  21 0.275755   0.033110 0.000000   0.308865 166.727179   0.308865 0.481809 1161.089844 1154.121094   1   1 1.0    0       82     82     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  22  22 0.435150   0.046659 0.000000   0.481809 167.208988   0.481809 1.402286 1161.089844 1154.121094   2   2 1.0    0       83     84     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1  23  23 0.436046   0.964957 0.001282   1.402286 168.611273   1.402286 0.670402 1161.089844 1154.121094   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 20   1  24  24 0.600607   0.067578 0.002217   0.670402 169.281675   0.670402 0.000000 1161.441406 1154.371094   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 21   3   1   1 3.669193 137.541039 0.000000 141.210232 141.210232 141.210232 0.000000 1185.183594 1183.613281  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   2   1   1 3.162695   1.019883 0.006226   4.188804 145.399035 145.399035 1.291781 1211.113281 1214.890625  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
 21   2   2   2 1.073654   0.212120 0.006007   1.291781 146.690817   1.291781 3.142732 1186.261719 1180.160156   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 21   2   3   3 2.423603   0.713150 0.005978   3.142732 149.833548   3.142732 1.329592 1217.164062 1222.000000  17  17 1.0   17       31     47     7         7       15      21 2.428571 2.428571 0.975900 0.975900 0.401841 0.401841  0.650023  0.650023            0            2
 21   2   4   4 1.084960   0.236575 0.008057   1.329592 151.163140   1.329592 0.000000 1202.531250 1197.152344   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 21   1   1   1 1.182885   0.190075 0.002133   1.375093 146.774128 146.774128 3.056093 1169.597656 1162.636719   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   2   2 1.542936   0.219227 0.002149   1.764312 149.830222   3.056093 4.460225 1176.363281 1170.796875   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 21   1   3   3 1.158333   0.156154 0.003006   1.317494 154.290447   4.460225 2.716947 1171.839844 1164.828125   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 21   1   4   4 1.187697   0.196634 0.003024   1.387354 157.007393   2.716947 1.825843 1179.007812 1174.214844   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 21   1   5   5 1.561164   0.261489 0.003190   1.825843 158.833236   1.825843 1.363868 1182.683594 1176.000000   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 21   1   6   6 1.178214   0.182778 0.002877   1.363868 160.197105   1.363868 0.312607 1177.046875 1169.875000   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 21   1   7   7 0.275643   0.036964 0.000000   0.312607 160.509712   0.312607 0.317192 1177.941406 1170.628906   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1   8   8 0.277524   0.039669 0.000000   0.317192 160.826904   0.317192 0.318168 1177.941406 1170.628906   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1   9   9 0.276437   0.041731 0.000000   0.318168 161.145072   0.318168 0.317575 1177.941406 1170.628906   1   1 1.0    0       43     43     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  10  10 0.276244   0.041331 0.000000   0.317575 161.462647   0.317575 1.628156 1177.945312 1170.628906   1   1 1.0    0       44     44     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  11  11 0.601326   1.025861 0.000970   1.628156 163.090803   1.628156 0.503764 1178.070312 1170.628906   3   3 1.0    0       45     47     2         2       27      28 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 21   1  12  12 0.440121   0.062749 0.000893   0.503764 163.594567   0.503764 0.504699 1178.070312 1170.628906   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  13  13 0.438323   0.065486 0.000889   0.504699 164.099266   0.504699 1.387722 1182.117188 1174.835938   2   2 1.0    0       50     51     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  14  14 1.182412   0.203356 0.001954   1.387722 165.486987   1.387722 1.582443 1190.539062 1183.335938   6   6 1.0    0       52     57     3         3       33      35 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 21   1  15  15 1.359626   0.220548 0.002268   1.582443 167.069430   1.582443 1.101821 1191.902344 1184.687500   7   7 1.0    0       58     64     3         3       36      38 2.333333 2.333333 2.309401 2.309401 0.989743 0.989743 -0.089344 -0.089344            0            0
 21   1  16  16 0.965340   0.134551 0.001930   1.101821 168.171251   1.101821 1.358848 1186.410156 1178.890625   5   5 1.0    0       65     69     3         3       39      41 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
 21   1  17  17 1.175906   0.181080 0.001863   1.358848 169.530100   1.358848 0.680798 1190.898438 1184.269531   6   6 1.0    0       70     75     3         3       42      44 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            1
 21   1  18  18 0.602460   0.076340 0.001997   0.680798 170.210897   0.680798 0.319947 1188.960938 1182.007812   3   3 1.0    0       76     78     3         3       45      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  19  19 0.278079   0.041867 0.000000   0.319947 170.530844   0.319947 0.487458 1192.042969 1185.273438   1   1 1.0    0       79     79     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  20  20 0.436737   0.050721 0.000000   0.487458 171.018302   0.487458 0.315716 1192.042969 1185.273438   2   2 1.0    0       80     81     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  21  21 0.277864   0.037852 0.000000   0.315716 171.334018   0.315716 0.314745 1192.042969 1185.273438   1   1 1.0    0       82     82     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1  22  22 0.276633   0.038112 0.000000   0.314745 171.648763   0.314745 0.882894 1192.042969 1185.273438   1   1 1.0    0       83     83     1         1       51      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   1  23  23 0.783003   0.098783 0.001108   0.882894 172.531657   0.882894 0.491118 1193.207031 1186.343750   4   4 1.0    0       84     87     2         2       52      53 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 21   1  24  24 0.434122   0.054550 0.002445   0.491118 173.022775   0.491118 0.000000 1192.761719 1185.773438   2   2 1.0    0       88     89     2         2       54      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   3   1   1 3.678199 149.629674 0.000000 153.307873 153.307873 153.307873 0.000000 1217.261719 1215.375000  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   2   1   1 3.158607   1.985015 0.006418   5.150040 158.457913 158.457913 1.118555 1241.296875 1246.304688  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
 22   2   2   2 0.937083   0.175951 0.005522   1.118555 159.576469   1.118555 1.862308 1215.570312 1210.246094   7   7 1.0    7       23     29     7         7        8      14 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 22   2   3   3 1.510544   0.346008 0.005755   1.862308 161.438777   1.862308 2.619090 1230.414062 1225.644531  11  11 1.0   11       30     40     7         7       15      21 1.571429 1.571429 0.975900 0.975900 0.621027 0.621027  0.650023  0.650023            0            2
 22   2   4   4 2.098772   0.512453 0.007865   2.619090 164.057867   2.619090 0.000000 1246.996094 1246.378906  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.125992 1.125992 0.600529 0.600529  0.637288  0.637288            0            3
 22   1   1   1 1.187330   0.189452 0.001922   1.378704 159.836618 159.836618 2.899047 1205.746094 1201.164062   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   2   2 1.552381   0.225976 0.002134   1.780491 162.735665   2.899047 2.730562 1208.437500 1202.230469   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 22   1   3   3 0.778015   0.087523 0.002716   0.868255 165.466227   2.730562 3.993508 1202.039062 1194.636719   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   4   4 1.183523   0.188241 0.002655   1.374418 169.459735   3.993508 1.822621 1204.910156 1197.640625   6   6 1.0    0       19     24     4         4       11      14 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 22   1   5   5 1.560997   0.258601 0.003024   1.822621 171.282356   1.822621 1.365565 1214.054688 1206.765625   8   8 1.0    0       25     32     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 22   1   6   6 1.179511   0.183131 0.002923   1.365565 172.647921   1.365565 0.315165 1208.300781 1200.898438   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 22   1   7   7 0.277651   0.037515 0.000000   0.315165 172.963086   0.315165 0.316586 1209.195312 1201.894531   1   1 1.0    0       39     39     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1   8   8 0.277206   0.039380 0.000000   0.316586 173.279672   0.316586 0.490237 1209.195312 1201.894531   1   1 1.0    0       40     40     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   9   9 0.437835   0.052402 0.000000   0.490237 173.769909   0.490237 0.321527 1209.199219 1201.894531   2   2 1.0    0       41     42     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  10  10 0.276141   0.045386 0.000000   0.321527 174.091436   0.321527 0.320866 1209.199219 1201.894531   1   1 1.0    0       43     43     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  11  11 0.277729   0.043137 0.000000   0.320866 174.412303   0.320866 0.681388 1209.199219 1201.894531   1   1 1.0    0       44     44     1         1       27      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  12  12 0.600562   0.079878 0.000947   0.681388 175.093691   0.681388 0.315113 1209.207031 1201.894531   3   3 1.0    0       45     47     2         2       28      29 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 22   1  13  13 0.276230   0.038883 0.000000   0.315113 175.408804   0.315113 0.496634 1216.480469 1208.996094   1   1 1.0    0       48     48     1         1       30      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  14  14 0.438584   0.057074 0.000977   0.496634 175.905439   0.496634 0.491491 1216.542969 1208.996094   2   2 1.0    0       49     50     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1  15  15 0.435984   0.054588 0.000918   0.491491 176.396929   0.491491 1.656755 1216.542969 1208.996094   2   2 1.0    0       51     52     2         2       33      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  16  16 0.600743   1.055039 0.000973   1.656755 178.053684   1.656755 0.488515 1216.542969 1208.996094   3   3 1.0    0       53     55     2         2       35      36 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 22   1  17  17 0.434949   0.052637 0.000929   0.488515 178.542199   0.488515 1.110762 1217.042969 1209.496094   2   2 1.0    0       56     57     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  18  18 0.979696   0.130063 0.001002   1.110762 179.652961   1.110762 0.503062 1218.937500 1211.453125   5   5 1.0    0       58     62     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 22   1  19  19 0.442386   0.059740 0.000936   0.503062 180.156023   0.503062 1.971371 1222.953125 1215.511719   2   2 1.0    0       63     64     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  20  20 1.727010   0.243252 0.001110   1.971371 182.127394   1.971371 0.496106 1231.425781 1224.921875   9   9 1.0    0       65     73     2         2       43      44 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            0
 22   1  21  21 0.438476   0.056737 0.000892   0.496106 182.623500   0.496106 1.328524 1224.109375 1216.515625   2   2 1.0    0       74     75     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1  22  22 1.172695   0.153950 0.001879   1.328524 183.952025   1.328524 1.583007 1226.367188 1218.835938   6   6 1.0    0       76     81     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 22   1  23  23 1.366015   0.215081 0.001911   1.583007 185.535031   1.583007 0.676919 1233.976562 1227.898438   7   7 1.0    0       82     88     3         3       50      52 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
 22   1  24  24 0.601192   0.072680 0.003047   0.676919 186.211950   0.676919 0.000000 1227.371094 1219.765625   3   3 1.0    0       89     91     3         3       53      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   3   1   1 3.669356 156.776240 0.000000 160.445596 160.445596 160.445596 0.000000 1250.667969 1248.257812  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   2   1   1 3.318352   1.120893 0.006365   4.445611 164.891207 164.891207 2.030177 1277.179688 1279.050781  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.039424 3.039424 0.925042 0.925042  0.282546  0.282546            0            2
 23   2   2   2 1.652240   0.371693 0.006244   2.030177 166.921384   2.030177 1.917932 1254.414062 1247.164062  12  12 1.0   12       24     35     7         7        8      14 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 23   2   3   3 1.606861   0.305256 0.005814   1.917932 168.839316   1.917932 2.339702 1258.531250 1251.746094  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.253566 1.253566 0.731247 0.731247  0.582450  0.582450            0            3
 23   2   4   4 1.074237   1.257689 0.007776   2.339702 171.179017   2.339702 0.000000 1261.550781 1254.414062   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 23   1   1   1 1.184847   0.187092 0.002332   1.374271 166.265478 166.265478 4.079239 1238.320312 1233.148438   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   2   2 1.763782   0.282269 0.003011   2.049062 170.344717   4.079239 3.805107 1241.339844 1237.589844   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 23   1   3   3 0.779610   1.104854 0.002711   1.887175 174.149824   3.805107 4.427927 1232.140625 1224.882812   4   4 1.0    0       16     19     4         4        8      11 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   4   4 1.768355   0.317022 0.002849   2.088226 178.577751   4.427927 1.571552 1245.082031 1240.527344   9   9 1.0    0       20     28     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 23   1   5   5 1.357793   0.210845 0.002914   1.571552 180.149302   1.571552 1.596142 1241.843750 1236.593750   7   7 1.0    0       29     35     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 23   1   6   6 1.371230   0.222187 0.002726   1.596142 181.745444   1.596142 0.677774 1244.785156 1238.453125   7   7 1.0    0       36     42     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 23   1   7   7 0.603190   0.073687 0.000897   0.677774 182.423218   0.677774 0.507959 1240.476562 1233.140625   3   3 1.0    0       43     45     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 23   1   8   8 0.437309   0.069741 0.000909   0.507959 182.931177   0.507959 0.501110 1240.539062 1233.140625   2   2 1.0    0       46     47     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1   9   9 0.437124   0.063009 0.000977   0.501110 183.432287   0.501110 1.130086 1240.539062 1233.140625   2   2 1.0    0       48     49     2         2       28      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  10  10 0.984637   0.144344 0.001105   1.130086 184.562373   1.130086 0.904248 1241.992188 1234.593750   5   5 1.0    0       50     54     2         2       30      31 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 23   1  11  11 0.799163   0.104063 0.001022   0.904248 185.466620   0.904248 0.674616 1241.984375 1234.707031   4   4 1.0    0       55     58     2         2       32      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  12  12 0.602060   0.071630 0.000926   0.674616 186.141236   0.674616 0.498170 1241.667969 1234.390625   3   3 1.0    0       59     61     2         2       34      35 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 23   1  13  13 0.438219   0.058977 0.000973   0.498170 186.639406   0.498170 1.099673 1245.792969 1238.402344   2   2 1.0    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  14  14 0.979051   0.119576 0.001045   1.099673 187.739078   1.099673 0.505599 1246.964844 1239.574219   5   5 1.0    0       64     68     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 23   1  15  15 0.444617   0.060069 0.000914   0.505599 188.244678   0.505599 1.337990 1246.074219 1238.902344   2   2 1.0    0       69     70     2         2       40      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  16  16 1.165196   0.171822 0.000972   1.337990 189.582668   1.337990 0.672218 1248.781250 1241.460938   6   6 1.0    0       71     76     2         2       42      43 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            1
 23   1  17  17 0.599105   0.072150 0.000964   0.672218 190.254887   0.672218 0.676326 1248.042969 1240.652344   3   3 1.0    0       77     79     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 23   1  18  18 0.602414   0.072937 0.000975   0.676326 190.931213   0.676326 0.482813 1248.417969 1241.152344   3   3 1.0    0       80     82     2         2       46      47 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 23   1  19  19 0.436859   0.045954 0.000000   0.482813 191.414026   0.482813 0.314583 1252.078125 1244.664062   2   2 1.0    0       83     84     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  20  20 0.274802   0.039781 0.000000   0.314583 191.728609   0.314583 0.309333 1252.203125 1244.664062   1   1 1.0    0       85     85     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1  21  21 0.275386   0.033947 0.000000   0.309333 192.037941   0.309333 0.482950 1252.207031 1244.664062   1   1 1.0    0       86     86     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  22  22 0.436368   0.046582 0.000000   0.482950 192.520891   0.482950 0.489279 1252.207031 1244.664062   2   2 1.0    0       87     88     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1  23  23 0.436761   0.051620 0.000898   0.489279 193.010170   0.489279 0.672239 1252.207031 1244.664062   2   2 1.0    0       89     90     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 23   1  24  24 0.603652   0.066245 0.002343   0.672239 193.682409   0.672239 0.000000 1252.832031 1245.414062   3   3 1.0    0       91     93     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 24   3   1   1 3.707771 182.805128 0.000000 186.512899 186.512899 186.512899 0.000000 1282.621094 1282.015625  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   2   1   1 3.334436   1.126266 0.006342   4.467044 190.979943 190.979943 3.097338 1309.886719 1313.257812  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.147183 3.147183 0.957838 0.957838  0.269016  0.269016            0            2
 24   2   2   2 1.652061   1.439279 0.005998   3.097338 194.077281   3.097338 1.925531 1250.125000 1247.000000  12  12 1.0   12       24     35     7         7        8      14 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            1
 24   2   3   3 1.609184   0.310812 0.005535   1.925531 196.002812   1.925531 1.322202 1259.652344 1256.468750  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            3
 24   2   4   4 1.083866   0.230955 0.007381   1.322202 197.325014   1.322202 0.000000 1265.750000 1263.421875   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 24   1   1   1 1.188368   0.190552 0.002007   1.380927 192.360870 192.360870 5.128922 1183.820312 1185.410156   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   2   2 1.752456   0.276110 0.003018   2.031584 197.489792   5.128922 3.225480 1202.367188 1199.644531   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 24   1   3   3 1.153379   0.143798 0.002772   1.299949 200.715272   3.225480 3.403695 1198.718750 1196.449219   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 24   1   4   4 1.769933   0.308652 0.002908   2.081493 204.118967   3.403695 1.561825 1221.882812 1223.304688   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 1.892969 1.892969 0.841320 0.841320  0.233724  0.233724            0            0
 24   1   5   5 1.351211   0.207654 0.002960   1.561825 205.680792   1.561825 1.592126 1225.339844 1225.679688   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 24   1   6   6 1.367166   0.222292 0.002667   1.592126 207.272918   1.592126 0.675194 1230.875000 1229.742188   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 24   1   7   7 0.601931   0.072282 0.000981   0.675194 207.948112   0.675194 0.501151 1235.835938 1232.957031   3   3 1.0    0       45     47     2         2       24      25 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 24   1   8   8 0.436532   0.063654 0.000965   0.501151 208.449264   0.501151 0.506182 1236.550781 1233.765625   2   2 1.0    0       48     49     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1   9   9 0.442194   0.063063 0.000924   0.506182 208.955446   0.506182 1.129301 1236.976562 1233.980469   2   2 1.0    0       50     51     2         2       28      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  10  10 0.983452   0.144840 0.001009   1.129301 210.084747   1.129301 0.902251 1239.359375 1236.335938   5   5 1.0    0       52     56     2         2       30      31 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 24   1  11  11 0.796011   0.105270 0.000970   0.902251 210.986998   0.902251 0.673660 1239.703125 1236.703125   4   4 1.0    0       57     60     2         2       32      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  12  12 0.600106   0.072622 0.000932   0.673660 211.660658   0.673660 0.497329 1240.078125 1237.042969   3   3 1.0    0       61     63     2         2       34      35 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 24   1  13  13 0.436773   0.059656 0.000900   0.497329 212.157987   0.497329 1.101052 1247.382812 1243.796875   2   2 1.0    0       64     65     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  14  14 0.980868   0.119205 0.000979   1.101052 213.259040   1.101052 0.692766 1248.921875 1245.203125   5   5 1.0    0       66     70     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 24   1  15  15 0.618130   0.073673 0.000964   0.692766 213.951806   0.692766 0.495768 1247.785156 1244.031250   3   3 1.0    0       71     73     2         2       40      41 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 24   1  16  16 0.436824   0.058077 0.000867   0.495768 214.447574   0.495768 0.679643 1248.289062 1244.531250   2   2 1.0    0       74     75     2         2       42      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  17  17 0.602583   0.076237 0.000823   0.679643 215.127217   0.679643 0.489568 1249.101562 1245.421875   3   3 1.0    0       76     78     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 24   1  18  18 0.438399   0.050334 0.000835   0.489568 215.616785   0.489568 0.316081 1250.230469 1246.250000   2   2 1.0    0       79     80     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  19  19 0.277462   0.038619 0.000000   0.316081 215.932866   0.316081 0.490462 1255.289062 1250.980469   1   1 1.0    0       81     81     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  20  20 0.437587   0.052875 0.000000   0.490462 216.423328   0.490462 0.316564 1255.566406 1251.167969   2   2 1.0    0       82     83     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  21  21 0.278507   0.038057 0.000000   0.316564 216.739892   0.316564 0.486783 1255.710938 1251.187500   1   1 1.0    0       84     84     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  22  22 0.437476   0.049307 0.000000   0.486783 217.226676   0.486783 0.493097 1255.718750 1251.187500   2   2 1.0    0       85     86     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1  23  23 0.436945   0.055233 0.000918   0.493097 217.719773   0.493097 0.670048 1255.804688 1251.281250   2   2 1.0    0       87     88     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  24  24 0.600612   0.067078 0.002358   0.670048 218.389820   0.670048 0.000000 1256.445312 1252.031250   3   3 1.0    0       89     91     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 25   3   1   1 3.674871 139.383441 0.000000 143.058312 143.058312 143.058312 0.000000 1311.351562 1311.742188  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   2   1   1 3.161568   2.150697 0.006280   5.318545 148.376857 148.376857 1.292512 1335.628906 1340.355469  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
 25   2   2   2 1.077406   0.209310 0.005796   1.292512 149.669369   1.292512 1.685326 1310.191406 1305.929688   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 25   2   3   3 1.367676   0.311711 0.005939   1.685326 151.354694   1.685326 3.759283 1318.902344 1314.605469  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 0.786796 0.786796 0.550757 0.550757  0.701721  0.701721            0            2
 25   2   4   4 2.101496   1.649646 0.008142   3.759283 155.113978   3.759283 0.000000 1337.675781 1339.628906  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.125992 1.125992 0.600529 0.600529  0.637288  0.637288            0            3
 25   1   1   1 1.191008   0.192312 0.001934   1.385254 149.762111 149.762111 3.071852 1297.917969 1295.902344   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   2   2 1.551739   0.225387 0.002213   1.779340 152.833963   3.071852 2.999841 1300.261719 1296.976562   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 25   1   3   3 1.159602   0.152155 0.002758   1.314516 155.833804   2.999841 5.134115 1295.234375 1290.835938   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 25   1   4   4 1.185119   0.186821 0.002891   1.374832 160.967919   5.134115 1.818644 1297.128906 1292.636719   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 25   1   5   5 1.558623   0.257133 0.002888   1.818644 162.786563   1.818644 1.357508 1306.355469 1302.011719   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 25   1   6   6 1.174497   0.179988 0.003022   1.357508 164.144071   1.357508 0.312629 1300.832031 1295.886719   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 25   1   7   7 0.275982   0.036647 0.000000   0.312629 164.456700   0.312629 0.316098 1302.101562 1296.890625   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1   8   8 0.276696   0.039403 0.000000   0.316098 164.772798   0.316098 0.316987 1302.101562 1296.890625   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1   9   9 0.277374   0.039614 0.000000   0.316987 165.089786   0.316987 0.317260 1302.101562 1296.890625   1   1 1.0    0       43     43     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  10  10 0.276250   0.041010 0.000000   0.317260 165.407046   0.317260 0.684065 1302.117188 1296.890625   1   1 1.0    0       44     44     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  11  11 0.602972   0.080272 0.000821   0.684065 166.091110   0.684065 0.493739 1302.339844 1296.890625   3   3 1.0    0       45     47     2         2       27      28 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 25   1  12  12 0.435283   0.057534 0.000922   0.493739 166.584850   0.493739 0.493176 1302.714844 1297.390625   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  13  13 0.437825   0.055352 0.000000   0.493176 167.078026   0.493176 0.319403 1306.664062 1300.898438   2   2 1.0    0       50     51     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  14  14 0.278325   0.041078 0.000000   0.319403 167.397429   0.319403 0.675784 1306.726562 1300.898438   1   1 1.0    0       52     52     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  15  15 0.603170   0.071670 0.000944   0.675784 168.073213   0.675784 0.500621 1306.734375 1300.898438   3   3 1.0    0       53     55     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 25   1  16  16 0.437831   0.061910 0.000880   0.500621 168.573834   0.500621 0.491249 1306.734375 1300.898438   2   2 1.0    0       56     57     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 25   1  17  17 0.438404   0.051939 0.000906   0.491249 169.065084   0.491249 1.111041 1306.738281 1300.898438   2   2 1.0    0       58     59     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  18  18 0.981610   0.128424 0.001007   1.111041 170.176124   1.111041 0.501943 1308.738281 1303.121094   5   5 1.0    0       60     64     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 25   1  19  19 0.441683   0.059289 0.000971   0.501943 170.678067   0.501943 2.026717 1313.867188 1307.871094   2   2 1.0    0       65     66     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  20  20 1.752395   0.273194 0.001128   2.026717 172.704785   2.026717 0.492860 1323.851562 1317.925781   9   9 1.0    0       67     75     2         2       43      44 4.500000 4.500000 2.121320 2.121320 0.471405 0.471405 -0.642156 -0.642156            0            0
 25   1  21  21 0.435867   0.056129 0.000863   0.492860 173.197644   0.492860 1.324311 1314.734375 1308.871094   2   2 1.0    0       76     77     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   1  22  22 1.173072   0.149074 0.002166   1.324311 174.521956   1.324311 1.579004 1317.035156 1310.933594   6   6 1.0    0       78     83     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 25   1  23  23 1.364062   0.212929 0.002012   1.579004 176.100960   1.579004 0.678061 1324.750000 1320.203125   7   7 1.0    0       84     90     3         3       50      52 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
 25   1  24  24 0.599461   0.075173 0.003427   0.678061 176.779020   0.678061 0.000000 1318.230469 1312.125000   3   3 1.0    0       91     93     3         3       53      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   3   1   1 3.671968 123.800087 0.000000 127.472055 127.472055 127.472055 0.000000 1342.457031 1341.003906  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   2   1   1 3.167910   1.017276 0.006244   4.191430 131.663484 131.663484 2.458193 1366.464844 1371.519531  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
 26   2   2   2 1.072771   1.379506 0.005916   2.458193 134.121677   2.458193 1.659326 1342.906250 1337.273438   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 26   2   3   3 1.356677   0.296740 0.005910   1.659326 135.781004   1.659326 2.607393 1353.281250 1350.625000  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 0.786796 0.786796 0.550757 0.550757  0.701721  0.701721            0            2
 26   2   4   4 2.096696   0.502623 0.008074   2.607393 138.388396   2.607393 0.000000 1371.992188 1371.917969  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.125992 1.125992 0.600529 0.600529  0.637288  0.637288            0            3
 26   1   1   1 1.182876   0.191022 0.001951   1.375848 133.039333 133.039333 4.240117 1326.511719 1320.140625   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   2   2 1.553780   0.225834 0.002309   1.781924 137.279450   4.240117 2.959972 1333.808594 1328.476562   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 26   1   3   3 1.152865   0.144876 0.002906   1.300646 140.239422   2.959972 3.993923 1328.742188 1322.296875   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 26   1   4   4 1.185662   0.197912 0.002956   1.386530 144.233345   3.993923 1.835563 1335.910156 1331.464844   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 26   1   5   5 1.568944   0.263617 0.003001   1.835563 146.068908   1.835563 1.378634 1339.660156 1333.519531   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 26   1   6   6 1.184190   0.191442 0.003002   1.378634 147.447542   1.378634 0.326357 1334.792969 1328.132812   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 26   1   7   7 0.276917   0.049440 0.000000   0.326357 147.773899   0.326357 0.324354 1335.132812 1328.382812   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1   8   8 0.277619   0.046735 0.000000   0.324354 148.098253   0.324354 0.325256 1335.195312 1328.382812   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   9   9 0.277823   0.047433 0.000000   0.325256 148.423510   0.325256 0.318155 1335.195312 1328.382812   1   1 1.0    0       43     43     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  10  10 0.277629   0.040526 0.000000   0.318155 148.741665   0.318155 0.681610 1335.195312 1328.382812   1   1 1.0    0       44     44     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  11  11 0.602950   0.077709 0.000951   0.681610 149.423275   0.681610 0.506475 1335.292969 1328.382812   3   3 1.0    0       45     47     2         2       27      28 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 26   1  12  12 0.444499   0.061033 0.000944   0.506475 149.929750   0.506475 0.489072 1335.292969 1328.382812   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  13  13 0.436495   0.052577 0.000000   0.489072 150.418822   0.489072 0.315981 1341.308594 1334.546875   2   2 1.0    0       50     51     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  14  14 0.276593   0.039388 0.000000   0.315981 150.734803   0.315981 0.671049 1341.371094 1334.546875   1   1 1.0    0       52     52     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  15  15 0.601020   0.068976 0.001052   0.671049 151.405852   0.671049 0.497367 1341.371094 1334.546875   3   3 1.0    0       53     55     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 26   1  16  16 0.436691   0.059811 0.000864   0.497367 151.903219   0.497367 0.495116 1341.996094 1335.296875   2   2 1.0    0       56     57     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 26   1  17  17 0.437194   0.056989 0.000933   0.495116 152.398335   0.495116 1.112303 1342.621094 1335.796875   2   2 1.0    0       58     59     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  18  18 0.983123   0.128065 0.001115   1.112303 153.510637   1.112303 0.893792 1343.894531 1337.261719   5   5 1.0    0       60     64     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 26   1  19  19 0.797075   0.095747 0.000970   0.893792 154.404429   0.893792 0.690940 1348.269531 1341.566406   4   4 1.0    0       65     68     2         2       41      42 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  20  20 0.621595   0.068287 0.001058   0.690940 155.095369   0.690940 0.492750 1348.394531 1341.566406   3   3 1.0    0       69     71     2         2       43      44 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 26   1  21  21 0.437373   0.054523 0.000854   0.492750 155.588119   0.492750 1.331564 1348.394531 1341.566406   2   2 1.0    0       72     73     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1  22  22 1.176162   0.153555 0.001847   1.331564 156.919683   1.331564 1.333396 1350.589844 1343.890625   6   6 1.0    0       74     79     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 26   1  23  23 1.166652   0.164586 0.002158   1.333396 158.253079   1.333396 0.884832 1352.000000 1345.187500   6   6 1.0    0       80     85     3         3       50      52 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            2
 26   1  24  24 0.783313   0.098472 0.003048   0.884832 159.137912   0.884832 0.000000 1351.460938 1344.574219   4   4 1.0    0       86     89     3         3       53      55 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 27   3   1   1 3.673522 122.503980 0.000000 126.177502 126.177502 126.177502 0.000000 1373.687500 1371.312500  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   2   1   1 3.328803   2.230163 0.006200   5.565166 131.742668 131.742668 2.017841 1400.085938 1404.394531  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.093773 3.093773 0.941583 0.941583  0.275677  0.275677            0            2
 27   2   2   2 1.648297   0.363260 0.006284   2.017841 133.760510   2.017841 1.742679 1381.312500 1374.359375  12  12 1.0   12       24     35     7         7        8      14 1.714286 1.714286 0.755929 0.755929 0.440959 0.440959  0.710676  0.710676            0            1
 27   2   3   3 1.465987   0.270930 0.005762   1.742679 135.503189   1.742679 1.490591 1383.750000 1378.003906  11  11 1.0   11       36     46     7         7       15      21 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            2
 27   2   4   4 1.219641   0.263245 0.007705   1.490591 136.993780   1.490591 0.000000 1390.156250 1384.355469   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 27   1   1   1 1.186738   0.187777 0.002085   1.376599 133.119268 133.119268 4.056566 1365.195312 1360.316406   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   2   2 1.757494   0.277984 0.003246   2.038724 137.175833   4.056566 3.040053 1369.105469 1362.437500   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 27   1   3   3 1.157823   0.136533 0.003019   1.297374 140.215886   3.040053 3.575382 1360.425781 1353.535156   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 27   1   4   4 1.771928   0.309912 0.002951   2.084791 143.791268   3.575382 1.578681 1373.796875 1369.437500   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 27   1   5   5 1.357828   0.217906 0.002948   1.578681 145.369950   1.578681 1.614078 1370.550781 1365.285156   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 27   1   6   6 1.364048   0.247290 0.002740   1.614078 146.984027   1.614078 0.497238 1375.730469 1369.613281   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 27   1   7   7 0.438775   0.057586 0.000877   0.497238 147.481265   0.497238 0.672201 1368.125000 1361.082031   2   2 1.0    0       45     46     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   8   8 0.598949   0.072259 0.000993   0.672201 148.153466   0.672201 0.499567 1368.125000 1361.082031   3   3 1.0    0       47     49     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 27   1   9   9 0.435975   0.062705 0.000888   0.499567 148.653034   0.499567 1.128905 1368.125000 1361.082031   2   2 1.0    0       50     51     2         2       28      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  10  10 0.984133   0.143667 0.001105   1.128905 149.781939   1.128905 0.904335 1369.691406 1362.531250   5   5 1.0    0       52     56     2         2       30      31 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 27   1  11  11 0.798357   0.104876 0.001102   0.904335 150.686274   0.904335 0.673272 1369.316406 1362.152344   4   4 1.0    0       57     60     2         2       32      33 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  12  12 0.599018   0.073168 0.001086   0.673272 151.359545   0.673272 0.319825 1368.523438 1361.582031   3   3 1.0    0       61     63     2         2       34      35 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 27   1  13  13 0.277580   0.042244 0.000000   0.319825 151.679370   0.319825 0.675604 1373.027344 1366.089844   1   1 1.0    0       64     64     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  14  14 0.604226   0.070438 0.000940   0.675604 152.354974   0.675604 0.888814 1373.027344 1366.089844   3   3 1.0    0       65     67     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 27   1  15  15 0.797252   0.090715 0.000847   0.888814 153.243788   0.888814 1.106073 1373.027344 1366.089844   4   4 1.0    0       68     71     2         2       39      40 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 27   1  16  16 0.970131   0.135032 0.000909   1.106073 154.349860   1.106073 0.677790 1374.781250 1367.750000   5   5 1.0    0       72     76     2         2       41      42 2.500000 2.500000 2.121320 2.121320 0.848528 0.848528 -0.642156 -0.642156            0            1
 27   1  17  17 0.602002   0.074935 0.000854   0.677790 155.027651   0.677790 1.876747 1374.304688 1367.339844   3   3 1.0    0       77     79     2         2       43      44 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 27   1  18  18 0.600556   1.275260 0.000930   1.876747 156.904397   1.876747 0.318819 1374.769531 1367.839844   3   3 1.0    0       80     82     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 27   1  19  19 0.276200   0.042619 0.000000   0.318819 157.223217   0.318819 0.318702 1378.687500 1371.605469   1   1 1.0    0       83     83     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  20  20 0.276258   0.042444 0.000000   0.318702 157.541919   0.318702 0.317563 1378.687500 1371.605469   1   1 1.0    0       84     84     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1  21  21 0.278143   0.039419 0.000000   0.317563 157.859481   0.317563 0.678890 1378.750000 1371.605469   1   1 1.0    0       85     85     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1  22  22 0.602569   0.075278 0.001043   0.678890 158.538371   0.678890 0.491050 1378.750000 1371.605469   3   3 1.0    0       86     88     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 27   1  23  23 0.437684   0.052504 0.000862   0.491050 159.029421   0.491050 0.668903 1378.750000 1371.605469   2   2 1.0    0       89     90     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 27   1  24  24 0.600083   0.066628 0.002192   0.668903 159.698324   0.668903 0.000000 1379.187500 1372.105469   3   3 1.0    0       91     93     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   3   1   1 3.673860 131.533111 0.000000 135.206972 135.206972 135.206972 0.000000 1405.328125 1404.082031  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   2   1   1 3.152402   0.991689 0.006349   4.150440 139.357412 139.357412 1.290839 1387.390625 1397.160156  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
 28   2   2   2 1.074645   0.210399 0.005794   1.290839 140.648251   1.290839 1.689771 1375.792969 1374.085938   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 28   2   3   3 1.361894   0.322138 0.005738   1.689771 142.338021   1.689771 2.657034 1390.500000 1390.851562  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 0.534522 0.534522 0.374166 0.374166  0.779939  0.779939            0            2
 28   2   4   4 2.123279   0.525848 0.007907   2.657034 144.995055   2.657034 0.000000 1412.121094 1415.238281  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.125992 1.125992 0.600529 0.600529  0.637288  0.637288            0            3
 28   1   1   1 1.183422   0.187848 0.002029   1.373298 140.730710 140.730710 3.078674 1353.574219 1355.425781   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   2   2 1.552391   0.233178 0.002266   1.787835 143.809384   3.078674 2.558257 1357.894531 1358.382812   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 28   1   3   3 0.779032   0.086587 0.002867   0.868486 146.367641   2.558257 4.290645 1352.039062 1351.542969   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   4   4 1.391735   0.238729 0.003146   1.633611 150.658285   4.290645 1.549036 1364.207031 1364.378906   7   7 1.0    0       19     25     4         4       11      14 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 28   1   5   5 1.348859   0.197099 0.003078   1.549036 152.207321   1.549036 1.383165 1361.429688 1359.902344   7   7 1.0    0       26     32     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 28   1   6   6 1.179559   0.200571 0.003035   1.383165 153.590486   1.383165 0.314917 1365.878906 1363.929688   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 28   1   7   7 0.278303   0.036614 0.000000   0.314917 153.905403   0.314917 0.311774 1368.214844 1365.339844   1   1 1.0    0       39     39     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   8   8 0.275242   0.036532 0.000000   0.311774 154.217176   0.311774 0.317924 1368.218750 1365.339844   1   1 1.0    0       40     40     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1   9   9 0.277788   0.040136 0.000000   0.317924 154.535100   0.317924 0.319016 1368.250000 1365.367188   1   1 1.0    0       41     41     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  10  10 0.277962   0.041054 0.000000   0.319016 154.854116   0.319016 0.679268 1368.312500 1365.554688   1   1 1.0    0       42     42     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  11  11 0.605125   0.073326 0.000817   0.679268 155.533384   0.679268 0.674985 1368.804688 1365.875000   3   3 1.0    0       43     45     2         2       27      28 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 28   1  12  12 0.600774   0.073294 0.000917   0.674985 156.208369   0.674985 0.316016 1370.000000 1367.011719   3   3 1.0    0       46     48     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   1  13  13 0.277306   0.038710 0.000000   0.316016 156.524385   0.316016 0.312485 1378.695312 1375.625000   1   1 1.0    0       49     49     1         1       31      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  14  14 0.276262   0.036222 0.000000   0.312485 156.836869   0.312485 0.672870 1378.726562 1375.648438   1   1 1.0    0       50     50     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  15  15 0.599930   0.072018 0.000922   0.672870 157.509739   0.672870 0.497740 1379.011719 1375.773438   3   3 1.0    0       51     53     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   1  16  16 0.437693   0.059177 0.000870   0.497740 158.007479   0.497740 0.494662 1379.328125 1376.296875   2   2 1.0    0       54     55     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  17  17 0.438777   0.055033 0.000852   0.494662 158.502141   0.494662 1.110482 1380.441406 1377.281250   2   2 1.0    0       56     57     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  18  18 0.981707   0.127692 0.001083   1.110482 159.612623   1.110482 0.499142 1382.863281 1379.792969   5   5 1.0    0       58     62     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 28   1  19  19 0.440877   0.057346 0.000919   0.499142 160.111766   0.499142 2.026179 1387.894531 1384.250000   2   2 1.0    0       63     64     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  20  20 1.741415   0.283632 0.001132   2.026179 162.137945   2.026179 0.493223 1397.964844 1394.109375   9   9 1.0    0       65     73     2         2       43      44 4.500000 4.500000 2.121320 2.121320 0.471405 0.471405 -0.642156 -0.642156            0            0
 28   1  21  21 0.436817   0.055454 0.000952   0.493223 162.631168   0.493223 1.325279 1388.992188 1385.187500   2   2 1.0    0       74     75     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1  22  22 1.170432   0.152819 0.002028   1.325279 163.956446   1.325279 1.582338 1391.875000 1387.609375   6   6 1.0    0       76     81     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 28   1  23  23 1.363463   0.217042 0.001834   1.582338 165.538784   1.582338 0.677992 1400.269531 1397.246094   7   7 1.0    0       82     88     3         3       50      52 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
 28   1  24  24 0.600854   0.074104 0.003034   0.677992 166.216776   0.677992 0.000000 1393.851562 1389.421875   3   3 1.0    0       89     91     3         3       53      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   3   1   1 3.669225 130.923979 0.000000 134.593204 134.593204 134.593204 0.000000 1438.855469 1438.695312  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   2   1   1 3.153161   0.997678 0.006345   4.157184 138.750389 138.750389 1.293699 1463.226562 1469.480469  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
 29   2   2   2 1.072376   0.215898 0.005425   1.293699 140.044087   1.293699 2.832179 1436.210938 1430.890625   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 29   2   3   3 2.252685   0.573468 0.006026   2.832179 142.876267   2.832179 1.457218 1462.933594 1462.957031  16  16 1.0   16       31     46     7         7       15      21 2.285714 2.285714 1.380131 1.380131 0.603807 0.603807  0.554370  0.554370            0            1
 29   2   4   4 1.207533   0.242293 0.007392   1.457218 144.333485   1.457218 0.000000 1454.292969 1448.832031   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 29   1   1   1 1.182424   0.185138 0.001927   1.369489 140.119878 140.119878 3.077408 1425.882812 1421.523438   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   2   2 1.550874   0.230756 0.002078   1.783709 143.197285   3.077408 3.700132 1427.488281 1422.339844   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 29   1   3   3 0.779514   0.085812 0.002627   0.867953 146.897418   3.700132 4.352415 1421.214844 1414.746094   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   4   4 1.385069   1.507208 0.002920   2.895197 151.249833   4.352415 1.547873 1430.371094 1425.199219   7   7 1.0    0       19     25     4         4       11      14 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 29   1   5   5 1.350890   0.194182 0.002801   1.547873 152.797706   1.547873 1.370794 1425.175781 1418.707031   7   7 1.0    0       26     32     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 29   1   6   6 1.179904   0.187866 0.003024   1.370794 154.168499   1.370794 0.322927 1427.757812 1421.511719   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 29   1   7   7 0.280301   0.042626 0.000000   0.322927 154.491426   0.322927 0.319409 1428.363281 1422.011719   1   1 1.0    0       39     39     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   8   8 0.277311   0.042098 0.000000   0.319409 154.810835   0.319409 0.315227 1428.363281 1422.011719   1   1 1.0    0       40     40     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1   9   9 0.276629   0.038598 0.000000   0.315227 155.126063   0.315227 0.490914 1428.367188 1422.011719   1   1 1.0    0       41     41     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  10  10 0.437848   0.053066 0.000000   0.490914 155.616977   0.490914 0.507026 1428.367188 1422.011719   2   2 1.0    0       42     43     1         1       26      26 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  11  11 0.438713   0.067345 0.000968   0.507026 156.124003   0.507026 0.500100 1428.492188 1422.011719   2   2 1.0    0       44     45     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  12  12 0.439228   0.060008 0.000865   0.500100 156.624103   0.500100 0.495705 1428.996094 1422.511719   2   2 1.0    0       46     47     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  13  13 0.436824   0.057938 0.000943   0.495705 157.119809   0.495705 1.111267 1437.136719 1431.144531   2   2 1.0    0       48     49     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  14  14 0.980901   0.129312 0.001054   1.111267 158.231076   1.111267 1.112309 1438.542969 1432.425781   5   5 1.0    0       50     54     2         2       33      34 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 29   1  15  15 0.984387   0.125920 0.002002   1.112309 159.343385   1.112309 0.877243 1438.511719 1432.394531   5   5 1.0    0       55     59     3         3       35      37 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 29   1  16  16 0.782195   0.093175 0.001874   0.877243 160.220628   0.877243 1.315413 1438.019531 1431.894531   4   4 1.0    0       60     63     3         3       38      40 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 29   1  17  17 1.166948   0.146441 0.002024   1.315413 161.536042   1.315413 1.572626 1440.492188 1434.496094   6   6 1.0    0       64     69     3         3       41      43 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 29   1  18  18 1.362773   0.208004 0.001849   1.572626 163.108668   1.572626 0.310143 1448.792969 1443.785156   7   7 1.0    0       70     76     3         3       44      46 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
 29   1  19  19 0.276140   0.034003 0.000000   0.310143 163.418811   0.310143 0.316443 1444.714844 1438.656250   1   1 1.0    0       77     77     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  20  20 0.276828   0.039616 0.000000   0.316443 163.735254   0.316443 0.315198 1444.714844 1438.656250   1   1 1.0    0       78     78     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  21  21 0.275779   0.039419 0.000000   0.315198 164.050453   0.315198 0.492767 1444.777344 1438.656250   1   1 1.0    0       79     79     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1  22  22 0.437713   0.054130 0.000924   0.492767 164.543220   0.492767 0.672539 1444.777344 1438.656250   2   2 1.0    0       80     81     2         2       50      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 29   1  23  23 0.600578   0.071120 0.000842   0.672539 165.215759   0.672539 0.670106 1444.777344 1438.656250   3   3 1.0    0       82     84     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 29   1  24  24 0.600958   0.067020 0.002128   0.670106 165.885866   0.670106 0.000000 1444.777344 1438.656250   3   3 1.0    0       85     87     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 30   3   1   1 3.674105 147.789726 0.000000 151.463831 151.463831 151.463831 0.000000 1473.492188 1473.355469  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   2   1   1 3.162641   0.998825 0.006468   4.167934 155.631765 155.631765 1.287188 1497.464844 1504.289062  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
 30   2   2   2 1.071309   0.210560 0.005319   1.287188 156.918953   1.287188 1.695948 1471.605469 1466.820312   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 30   2   3   3 1.361360   0.328474 0.006114   1.695948 158.614901   1.695948 3.948336 1479.523438 1473.355469  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 0.786796 0.786796 0.550757 0.550757  0.701721  0.701721            0            2
 30   2   4   4 2.096346   1.843802 0.008189   3.948336 162.563237   3.948336 0.000000 1501.667969 1503.355469  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.125992 1.125992 0.600529 0.600529  0.637288  0.637288            0            3
 30   1   1   1 1.191238   0.187582 0.001633   1.380453 157.012218 157.012218 3.063938 1459.417969 1456.546875   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   2   2 1.551945   0.222528 0.002278   1.776750 160.076156   3.063938 3.008478 1462.027344 1457.863281   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 30   1   3   3 1.156574   0.153008 0.002948   1.312530 163.084635   3.008478 5.322596 1456.996094 1451.730469   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 30   1   4   4 1.184164   0.187214 0.002882   1.374260 168.407231   5.322596 1.828072 1458.929688 1453.527344   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 30   1   5   5 1.563739   0.261422 0.002911   1.828072 170.235302   1.828072 1.366227 1467.945312 1462.902344   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 30   1   6   6 1.183067   0.180382 0.002779   1.366227 171.601530   1.366227 0.313497 1462.671875 1456.781250   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 30   1   7   7 0.276995   0.036502 0.000000   0.313497 171.915026   0.313497 0.317934 1463.890625 1457.789062   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1   8   8 0.278140   0.039794 0.000000   0.317934 172.232961   0.317934 0.489694 1463.890625 1457.789062   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1   9   9 0.436094   0.053600 0.000000   0.489694 172.722655   0.489694 0.316656 1463.968750 1457.789062   2   2 1.0    0       43     44     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  10  10 0.277088   0.039568 0.000000   0.316656 173.039311   0.316656 0.502131 1463.968750 1457.789062   1   1 1.0    0       45     45     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  11  11 0.437424   0.063728 0.000979   0.502131 173.541442   0.502131 0.676448 1463.968750 1457.789062   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 30   1  12  12 0.603738   0.071731 0.000979   0.676448 174.217890   0.676448 0.323741 1464.218750 1458.039062   3   3 1.0    0       48     50     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 30   1  13  13 0.277036   0.046706 0.000000   0.323741 174.541631   0.323741 0.326494 1467.152344 1461.042969   1   1 1.0    0       51     51     1         1       31      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  14  14 0.277496   0.048998 0.000000   0.326494 174.868125   0.326494 0.504295 1467.160156 1461.042969   1   1 1.0    0       52     52     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  15  15 0.436347   0.067085 0.000864   0.504295 175.372421   0.504295 0.680315 1467.160156 1461.042969   2   2 1.0    0       53     54     2         2       33      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1  16  16 0.601800   0.077600 0.000916   0.680315 176.052736   0.680315 0.496386 1467.578125 1461.292969   3   3 1.0    0       55     57     2         2       35      36 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 30   1  17  17 0.437952   0.057541 0.000893   0.496386 176.549122   0.496386 1.113639 1468.152344 1462.042969   2   2 1.0    0       58     59     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  18  18 0.982711   0.129947 0.000980   1.113639 177.662761   1.113639 0.500383 1470.121094 1463.765625   5   5 1.0    0       60     64     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 30   1  19  19 0.439869   0.059576 0.000937   0.500383 178.163144   0.500383 2.001352 1477.585938 1471.355469   2   2 1.0    0       65     66     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  20  20 1.737658   0.262714 0.000981   2.001352 180.164496   2.001352 0.493366 1486.617188 1481.167969   9   9 1.0    0       67     75     2         2       43      44 4.500000 4.500000 4.949747 4.949747 1.099944 1.099944 -1.572828 -1.572828            0            0
 30   1  21  21 0.435831   0.056667 0.000867   0.493366 180.657863   0.493366 1.317621 1478.605469 1472.355469   2   2 1.0    0       76     77     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   1  22  22 1.168764   0.146900 0.001957   1.317621 181.975483   1.317621 1.340394 1480.984375 1474.667969   6   6 1.0    0       78     83     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 30   1  23  23 1.170356   0.168247 0.001792   1.340394 183.315878   1.340394 0.896818 1482.597656 1476.492188   6   6 1.0    0       84     89     3         3       50      52 2.000000 2.000000 1.732051 1.732051 0.866025 0.866025  0.085162  0.085162            0            1
 30   1  24  24 0.788599   0.105020 0.003199   0.896818 184.212696   0.896818 0.000000 1482.980469 1476.625000   4   4 1.0    0       90     93     3         3       53      55 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 31   3   1   1 3.685076 163.212493 0.000000 166.897569 166.897569 166.897569 0.000000 1514.789062 1514.832031  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   2   1   1 3.153225   1.083710 0.006340   4.243275 171.140844 171.140844 2.287083 1539.066406 1544.394531  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
 31   2   2   2 1.800737   0.480558 0.005788   2.287083 173.427927   2.287083 1.739717 1524.058594 1524.437500  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 1.069045 1.069045 0.575640 0.575640  0.626351  0.626351            0            2
 31   2   3   3 1.463446   0.270841 0.005430   1.739717 175.167644   1.739717 1.476736 1524.464844 1519.753906  11  11 1.0   11       36     46     7         7       15      21 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            2
 31   2   4   4 1.213978   0.255210 0.007549   1.476736 176.644381   1.476736 0.000000 1530.691406 1525.410156   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 31   1   1   1 1.182445   0.187569 0.002041   1.372056 172.512900 172.512900 4.070262 1503.074219 1499.105469   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   2   2 1.551503   0.229501 0.002174   1.783179 176.583162   4.070262 3.057319 1503.046875 1498.289062   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 31   1   3   3 1.160339   0.154171 0.003093   1.317602 179.640480   3.057319 2.863436 1498.453125 1492.281250   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 31   1   4   4 1.187207   0.196537 0.002957   1.386700 182.503916   2.863436 1.826113 1505.621094 1501.417969   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 31   1   5   5 1.561933   0.261153 0.003028   1.826113 184.330030   1.826113 1.375827 1509.417969 1503.464844   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 31   1   6   6 1.181448   0.191692 0.002687   1.375827 185.705857   1.375827 0.506278 1504.464844 1498.082031   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 31   1   7   7 0.440184   0.065199 0.000895   0.506278 186.212135   0.506278 0.503887 1506.671875 1500.816406   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1   8   8 0.438550   0.064403 0.000933   0.503887 186.716022   0.503887 0.500897 1506.679688 1500.816406   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1   9   9 0.439303   0.060698 0.000896   0.500897 187.216918   0.500897 0.679079 1506.679688 1500.816406   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  10  10 0.601487   0.076661 0.000932   0.679079 187.895997   0.679079 0.893126 1506.746094 1500.816406   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 31   1  11  11 0.794518   0.097705 0.000903   0.893126 188.789123   0.893126 3.170017 1507.261719 1500.816406   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 31   1  12  12 1.553407   1.614186 0.002424   3.170017 191.959140   3.170017 0.320853 1519.132812 1513.906250   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 0.577350 0.577350 0.216506 0.216506  0.585162  0.585162            0            0
 31   1  13  13 0.279035   0.041818 0.000000   0.320853 192.279994   0.320853 0.674352 1513.722656 1507.253906   1   1 1.0    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  14  14 0.602016   0.071440 0.000896   0.674352 192.954346   0.674352 0.892935 1513.722656 1507.253906   3   3 1.0    0       63     65     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 31   1  15  15 0.799828   0.092281 0.000826   0.892935 193.847280   0.892935 1.109828 1513.722656 1507.253906   4   4 1.0    0       66     69     2         2       39      40 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 31   1  16  16 0.972978   0.135946 0.000904   1.109828 194.957109   1.109828 0.676554 1515.500000 1508.925781   5   5 1.0    0       70     74     2         2       41      42 2.500000 2.500000 2.121320 2.121320 0.848528 0.848528 -0.642156 -0.642156            0            1
 31   1  17  17 0.600987   0.074645 0.000922   0.676554 195.633663   0.676554 0.678128 1514.984375 1508.503906   3   3 1.0    0       75     77     2         2       43      44 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 31   1  18  18 0.602417   0.074734 0.000976   0.678128 196.311791   0.678128 0.315545 1515.453125 1508.753906   3   3 1.0    0       78     80     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 31   1  19  19 0.276625   0.038920 0.000000   0.315545 196.627336   0.315545 0.315575 1519.328125 1512.757812   1   1 1.0    0       81     81     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  20  20 0.276300   0.039275 0.000000   0.315575 196.942911   0.315575 0.318172 1519.328125 1512.757812   1   1 1.0    0       82     82     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  21  21 0.278486   0.039686 0.000000   0.318172 197.261083   0.318172 0.492203 1519.328125 1512.757812   1   1 1.0    0       83     83     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1  22  22 0.435545   0.055732 0.000926   0.492203 197.753286   0.492203 0.675465 1519.453125 1512.757812   2   2 1.0    0       84     85     2         2       50      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 31   1  23  23 0.601873   0.072690 0.000902   0.675465 198.428751   0.675465 0.670638 1519.453125 1512.757812   3   3 1.0    0       86     88     2         2       52      53 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 31   1  24  24 0.601867   0.066557 0.002214   0.670638 199.099389   0.670638 0.000000 1520.203125 1513.507812   3   3 1.0    0       89     91     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 32   3   1   1 3.683276 152.584320 0.000000 156.267596 156.267596 156.267596 0.000000 1552.285156 1552.316406  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   2   1   1 3.150804   1.007485 0.006284   4.164573 160.432168 160.432168 1.296209 1577.132812 1583.218750  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.184785 3.184785 1.013341 1.013341  0.264377  0.264377            0            1
 32   2   2   2 1.073680   0.217098 0.005431   1.296209 161.728377   1.296209 2.877210 1548.953125 1543.332031   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 32   2   3   3 2.266075   0.605075 0.006060   2.877210 164.605587   2.877210 1.523462 1574.792969 1569.625000  16  16 1.0   16       31     46     7         7       15      21 2.285714 2.285714 1.603567 1.603567 0.701561 0.701561  0.508260  0.508260            0            1
 32   2   4   4 1.245641   0.270046 0.007775   1.523462 166.129049   1.523462 0.000000 1564.890625 1559.617188   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 32   1   1   1 1.185377   0.186430 0.002058   1.373866 161.806034 161.806034 3.083373 1538.167969 1533.957031   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   2   2 1.552691   0.232317 0.002156   1.787165 164.889407   3.083373 4.190572 1540.078125 1535.023438   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 32   1   3   3 1.157674   0.152906 0.002782   1.313361 169.079979   4.190572 3.152957 1535.078125 1528.644531   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 32   1   4   4 1.390082   0.236464 0.002948   1.629495 172.232936   3.152957 1.562911 1544.218750 1538.550781   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 32   1   5   5 1.354362   0.205610 0.002939   1.562911 173.795847   1.562911 2.786622 1538.425781 1531.917969   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 32   1   6   6 1.178859   1.604682 0.003081   2.786622 176.582469   2.786622 0.326128 1540.855469 1534.445312   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 32   1   7   7 0.277746   0.048383 0.000000   0.326128 176.908598   0.326128 0.324991 1541.390625 1534.945312   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1   8   8 0.278155   0.046837 0.000000   0.324991 177.233589   0.324991 0.495770 1541.390625 1534.945312   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1   9   9 0.435603   0.060167 0.000000   0.495770 177.729359   0.495770 0.317758 1541.390625 1534.945312   2   2 1.0    0       43     44     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  10  10 0.278030   0.039728 0.000000   0.317758 178.047118   0.317758 0.496270 1541.390625 1534.945312   1   1 1.0    0       45     45     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  11  11 0.435050   0.060380 0.000840   0.496270 178.543388   0.496270 0.493899 1541.605469 1534.945312   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  12  12 0.436473   0.056515 0.000911   0.493899 179.037287   0.493899 0.504136 1541.605469 1534.945312   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  13  13 0.436902   0.066278 0.000956   0.504136 179.541423   0.504136 1.155940 1547.054688 1540.417969   2   2 1.0    0       50     51     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  14  14 0.994478   0.160379 0.001083   1.155940 180.697363   1.155940 1.165462 1553.128906 1548.160156   5   5 1.0    0       52     56     2         2       33      34 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 32   1  15  15 1.002586   0.160889 0.001988   1.165462 181.862825   1.165462 0.899560 1553.746094 1548.855469   5   5 1.0    0       57     61     3         3       35      37 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
 32   1  16  16 0.792957   0.104828 0.001775   0.899560 182.762385   0.899560 1.388264 1548.703125 1542.167969   4   4 1.0    0       62     65     3         3       38      40 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 32   1  17  17 1.194355   0.191990 0.001919   1.388264 184.150649   1.388264 1.658959 1554.218750 1550.050781   6   6 1.0    0       66     71     3         3       41      43 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 32   1  18  18 1.422365   0.234747 0.001847   1.658959 185.809608   1.658959 0.321226 1560.000000 1555.125000   7   7 1.0    0       72     78     3         3       44      46 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
 32   1  19  19 0.280417   0.040809 0.000000   0.321226 186.130834   0.321226 0.321923 1554.179688 1547.714844   1   1 1.0    0       79     79     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  20  20 0.279535   0.042388 0.000000   0.321923 186.452757   0.321923 0.328874 1554.179688 1547.714844   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  21  21 0.288270   0.040604 0.000000   0.328874 186.781632   0.328874 0.692489 1554.179688 1547.714844   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   1  22  22 0.617040   0.074531 0.000918   0.692489 187.474120   0.692489 0.504816 1554.375000 1547.714844   3   3 1.0    0       82     84     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 32   1  23  23 0.446033   0.057895 0.000888   0.504816 187.978937   0.504816 0.690121 1554.375000 1547.714844   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1  24  24 0.619624   0.068325 0.002172   0.690121 188.669058   0.690121 0.000000 1554.378906 1547.714844   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 33   3   1   1 3.775556 102.874789 0.000000 106.650345 106.650345 106.650345 0.000000 1581.273438 1580.406250  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   2   1   1 3.164656   0.981995 0.006387   4.153039 110.803384 110.803384 1.285733 1566.582031 1581.621094  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
 33   2   2   2 1.072878   0.207222 0.005633   1.285733 112.089117   1.285733 1.646466 1554.585938 1556.156250   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 33   2   3   3 1.350854   0.288782 0.006830   1.646466 113.735583   1.646466 2.655719 1564.593750 1565.156250  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 1.133893 1.133893 0.793725 0.793725  0.610492  0.610492            0            2
 33   2   4   4 2.098946   0.548805 0.007967   2.655719 116.391302   2.655719 0.000000 1587.390625 1593.445312  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.356203 1.356203 0.723308 0.723308  0.587845  0.587845            0            3
 33   1   1   1 1.182795   0.185940 0.001942   1.370677 112.174061 112.174061 3.060480 1533.570312 1539.394531   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   2   2 1.545080   0.227518 0.002149   1.774747 115.234541   3.060480 4.390106 1535.816406 1540.519531   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 33   1   3   3 1.158365   1.582386 0.002888   2.743640 119.624647   4.390106 4.266198 1531.476562 1534.351562   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 33   1   4   4 1.378367   0.229134 0.002978   1.610479 123.890844   4.266198 1.555974 1542.816406 1546.355469   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            0
 33   1   5   5 1.353332   0.199707 0.002934   1.555974 125.446818   1.555974 1.374917 1545.636719 1548.722656   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 33   1   6   6 1.181097   0.190972 0.002848   1.374917 126.821735   1.374917 0.312771 1544.050781 1545.265625   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 33   1   7   7 0.276879   0.035892 0.000000   0.312771 127.134506   0.312771 0.317610 1546.808594 1547.218750   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1   8   8 0.279217   0.038393 0.000000   0.317610 127.452115   0.317610 0.488224 1546.816406 1547.230469   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   9   9 0.436327   0.051897 0.000000   0.488224 127.940340   0.488224 0.316866 1547.367188 1547.636719   2   2 1.0    0       43     44     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  10  10 0.277851   0.039015 0.000000   0.316866 128.257205   0.316866 0.497338 1547.636719 1547.832031   1   1 1.0    0       45     45     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  11  11 0.438537   0.057819 0.000981   0.497338 128.754543   0.497338 0.681760 1547.648438 1547.832031   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  12  12 0.601984   0.078934 0.000842   0.681760 129.436303   0.681760 0.316235 1548.792969 1548.742188   3   3 1.0    0       48     50     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 33   1  13  13 0.277655   0.038581 0.000000   0.316235 129.752538   0.316235 0.490324 1554.113281 1553.210938   1   1 1.0    0       51     51     1         1       31      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  14  14 0.437215   0.053109 0.000000   0.490324 130.242862   0.490324 0.497164 1554.550781 1553.523438   2   2 1.0    0       52     53     1         1       32      32 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  15  15 0.434759   0.061496 0.000910   0.497164 130.740027   0.497164 0.503417 1554.648438 1553.566406   2   2 1.0    0       54     55     2         2       33      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  16  16 0.441169   0.061365 0.000883   0.503417 131.243444   0.503417 0.497255 1555.250000 1554.085938   2   2 1.0    0       56     57     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 33   1  17  17 0.437133   0.059045 0.001077   0.497255 131.740699   0.497255 1.114685 1555.496094 1554.187500   2   2 1.0    0       58     59     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  18  18 0.983794   0.129874 0.001017   1.114685 132.855384   1.114685 0.503051 1557.523438 1556.250000   5   5 1.0    0       60     64     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 33   1  19  19 0.441928   0.060239 0.000885   0.503051 133.358435   0.503051 1.516079 1563.097656 1561.453125   2   2 1.0    0       65     66     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1  20  20 1.339413   0.175774 0.000892   1.516079 134.874514   1.516079 0.886904 1565.152344 1563.425781   7   7 1.0    0       67     73     2         2       43      44 3.500000 3.500000 3.535534 3.535534 1.010153 1.010153 -1.181272 -1.181272            0            0
 33   1  21  21 0.793013   0.093006 0.000885   0.886904 135.761418   0.886904 1.329169 1564.593750 1562.593750   4   4 1.0    0       74     77     2         2       45      46 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 33   1  22  22 1.171506   0.155699 0.001964   1.329169 137.090587   1.329169 1.579250 1567.832031 1565.921875   6   6 1.0    0       78     83     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 33   1  23  23 1.363850   0.213399 0.002001   1.579250 138.669837   1.579250 0.676558 1575.960938 1575.421875   7   7 1.0    0       84     90     3         3       50      52 2.333333 2.333333 1.527525 1.527525 0.654654 0.654654  0.155989  0.155989            0            1
 33   1  24  24 0.599542   0.073689 0.003327   0.676558 139.346395   0.676558 0.000000 1569.703125 1567.636719   3   3 1.0    0       91     93     3         3       53      55 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   3   1   1 3.673041 112.692112 0.000000 116.365153 116.365153 116.365153 0.000000 1612.820312 1612.707031  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   2   1   1 3.150190   2.489495 0.006247   5.645932 122.011085 122.011085 1.286402 1585.777344 1595.726562  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
 34   2   2   2 1.071625   0.208770 0.006007   1.286402 123.297486   1.286402 3.076057 1579.597656 1577.472656   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 34   2   3   3 2.405126   0.664601 0.006330   3.076057 126.373543   3.076057 1.316889 1610.667969 1610.101562  17  17 1.0   17       31     47     7         7       15      21 2.428571 2.428571 1.511858 1.511858 0.622530 0.622530  0.526688  0.526688            0            2
 34   2   4   4 1.092026   0.217082 0.007781   1.316889 127.690432   1.316889 0.000000 1601.289062 1597.054688   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 34   1   1   1 1.182107   0.187300 0.001952   1.371360 123.382444 123.382444 3.062254 1558.410156 1559.667969   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   2   2 1.547525   0.226243 0.002085   1.775853 126.444699   3.062254 4.391999 1562.156250 1561.277344   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 34   1   3   3 1.160541   0.152597 0.002804   1.315942 130.836698   4.391999 2.688327 1557.828125 1555.417969   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 34   1   4   4 1.180884   0.187520 0.003034   1.371439 133.525025   2.688327 1.824563 1561.609375 1559.281250   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 34   1   5   5 1.563257   0.258204 0.003102   1.824563 135.349588   1.824563 1.371912 1572.722656 1570.039062   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 34   1   6   6 1.179101   0.189725 0.003086   1.371912 136.721500   1.371912 0.314636 1569.480469 1566.218750   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 34   1   7   7 0.278207   0.036429 0.000000   0.314636 137.036137   0.314636 0.319487 1571.941406 1568.632812   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   8   8 0.277380   0.042106 0.000000   0.319487 137.355623   0.319487 0.316491 1572.000000 1568.691406   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1   9   9 0.276801   0.039689 0.000000   0.316491 137.672114   0.316491 0.318088 1572.050781 1568.750000   1   1 1.0    0       43     43     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  10  10 0.276914   0.041174 0.000000   0.318088 137.990202   0.318088 0.679169 1572.222656 1568.957031   1   1 1.0    0       44     44     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  11  11 0.605015   0.073109 0.001045   0.679169 138.669371   0.679169 0.502856 1573.792969 1569.992188   3   3 1.0    0       45     47     2         2       27      28 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 34   1  12  12 0.439136   0.062816 0.000904   0.502856 139.172227   0.502856 0.497474 1574.402344 1570.730469   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  13  13 0.437231   0.059316 0.000927   0.497474 139.669701   0.497474 1.350002 1582.960938 1579.144531   2   2 1.0    0       50     51     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  14  14 1.173792   0.174130 0.002080   1.350002 141.019703   1.350002 1.313506 1585.281250 1581.277344   6   6 1.0    0       52     57     3         3       33      35 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 34   1  15  15 1.156797   0.154609 0.002100   1.313506 142.333209   1.313506 1.346397 1586.046875 1581.941406   6   6 1.0    0       58     63     3         3       36      38 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 34   1  16  16 1.176706   0.167710 0.001980   1.346397 143.679606   1.346397 1.331929 1587.781250 1583.671875   6   6 1.0    0       64     69     3         3       39      41 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 34   1  17  17 1.175011   0.154918 0.002000   1.331929 145.011535   1.331929 0.672384 1589.039062 1584.867188   6   6 1.0    0       70     75     3         3       42      44 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            1
 34   1  18  18 0.599195   0.071353 0.001837   0.672384 145.683918   0.672384 0.483063 1588.890625 1584.527344   3   3 1.0    0       76     78     3         3       45      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  19  19 0.437253   0.045810 0.000000   0.483063 146.166981   0.483063 1.807882 1592.515625 1588.035156   2   2 1.0    0       79     80     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  20  20 0.275758   1.532123 0.000000   1.807882 147.974863   1.807882 0.309553 1592.582031 1588.101562   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  21  21 0.276161   0.033392 0.000000   0.309553 148.284416   0.309553 0.483772 1592.582031 1588.101562   1   1 1.0    0       82     82     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  22  22 0.437499   0.046273 0.000000   0.483772 148.768187   0.483772 0.487135 1592.765625 1588.316406   2   2 1.0    0       83     84     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1  23  23 0.435955   0.050307 0.000873   0.487135 149.255322   0.487135 0.667907 1592.789062 1588.339844   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 34   1  24  24 0.600423   0.065274 0.002210   0.667907 149.923230   0.667907 0.000000 1592.792969 1588.339844   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 35   3   1   1 3.686338 135.574997 0.000000 139.261335 139.261335 139.261335 0.000000 1638.769531 1638.984375  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   2   1   1 3.145250   1.009922 0.006189   4.161362 143.422697 143.422697 1.292566 1666.058594 1671.667969  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.184785 3.184785 1.013341 1.013341  0.264377  0.264377            0            1
 35   2   2   2 1.074531   0.212530 0.005505   1.292566 144.715263   1.292566 1.674512 1641.714844 1637.546875   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 35   2   3   3 1.356391   0.312326 0.005795   1.674512 146.389775   1.674512 2.627379 1650.320312 1649.222656  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 0.786796 0.786796 0.550757 0.550757  0.701721  0.701721            0            2
 35   2   4   4 2.101666   0.517687 0.008025   2.627379 149.017153   2.627379 0.000000 1669.054688 1670.523438  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.356203 1.356203 0.723308 0.723308  0.587845  0.587845            0            3
 35   1   1   1 1.186055   0.185237 0.001928   1.373219 144.795916 144.795916 3.077277 1630.785156 1627.925781   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   2   2 1.556822   0.225652 0.002236   1.784710 147.873193   3.077277 2.543622 1632.812500 1629.250000   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 35   1   3   3 0.778320   0.087875 0.002916   0.869111 150.416815   2.543622 4.260597 1626.375000 1621.648438   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   4   4 1.393427   0.236748 0.003044   1.633219 154.677413   4.260597 1.559411 1636.507812 1632.523438   7   7 1.0    0       19     25     4         4       11      14 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 35   1   5   5 1.354060   0.202209 0.003141   1.559411 156.236823   1.559411 1.364122 1630.828125 1625.636719   7   7 1.0    0       26     32     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 35   1   6   6 1.178512   0.182716 0.002894   1.364122 157.600945   1.364122 0.320069 1632.609375 1627.660156   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 35   1   7   7 0.277570   0.042499 0.000000   0.320069 157.921015   0.320069 0.323197 1633.906250 1628.910156   1   1 1.0    0       39     39     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1   8   8 0.277055   0.046142 0.000000   0.323197 158.244212   0.323197 0.495552 1633.906250 1628.910156   1   1 1.0    0       40     40     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1   9   9 0.435185   0.060367 0.000000   0.495552 158.739763   0.495552 0.321633 1633.910156 1628.910156   2   2 1.0    0       41     42     1         1       25      25 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  10  10 0.276406   0.045226 0.000000   0.321633 159.061396   0.321633 0.504412 1633.914062 1628.910156   1   1 1.0    0       43     43     1         1       26      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  11  11 0.438296   0.065078 0.001038   0.504412 159.565808   0.504412 0.498431 1633.917969 1628.910156   2   2 1.0    0       44     45     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1  12  12 0.437163   0.060391 0.000876   0.498431 160.064239   0.498431 0.491500 1633.925781 1628.910156   2   2 1.0    0       46     47     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1  13  13 0.438743   0.052757 0.000000   0.491500 160.555739   0.491500 0.486053 1638.378906 1633.144531   2   2 1.0    0       48     49     1         1       31      31 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  14  14 0.435409   0.050644 0.000000   0.486053 161.041792   0.486053 0.497656 1638.441406 1633.144531   2   2 1.0    0       50     51     1         1       32      32 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  15  15 0.435372   0.061394 0.000890   0.497656 161.539448   0.497656 0.494066 1638.492188 1633.394531   2   2 1.0    0       52     53     2         2       33      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 35   1  16  16 0.437175   0.055923 0.000969   0.494066 162.033514   0.494066 0.495871 1638.980469 1633.894531   2   2 1.0    0       54     55     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  17  17 0.438045   0.056936 0.000890   0.495871 162.529385   0.495871 1.113781 1639.195312 1633.894531   2   2 1.0    0       56     57     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  18  18 0.985703   0.126982 0.001095   1.113781 163.643167   1.113781 0.499384 1640.941406 1635.855469   5   5 1.0    0       58     62     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 35   1  19  19 0.440592   0.057741 0.001051   0.499384 164.142550   0.499384 1.528290 1644.949219 1639.664062   2   2 1.0    0       63     64     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   1  20  20 1.346077   0.181225 0.000988   1.528290 165.670840   1.528290 0.889219 1646.679688 1641.398438   7   7 1.0    0       65     71     2         2       43      44 3.500000 3.500000 3.535534 3.535534 1.010153 1.010153 -1.181272 -1.181272            0            0
 35   1  21  21 0.795577   0.092723 0.000919   0.889219 166.560059   0.889219 1.326748 1645.199219 1639.914062   4   4 1.0    0       72     75     2         2       45      46 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 35   1  22  22 1.170695   0.154016 0.002036   1.326748 167.886807   1.326748 1.328422 1647.996094 1642.738281   6   6 1.0    0       76     81     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 35   1  23  23 1.161054   0.165411 0.001957   1.328422 169.215229   1.328422 0.893956 1649.605469 1644.281250   6   6 1.0    0       82     87     3         3       50      52 2.000000 2.000000 1.732051 1.732051 0.866025 0.866025  0.085162  0.085162            0            1
 35   1  24  24 0.785289   0.105494 0.003173   0.893956 170.109185   0.893956 0.000000 1648.996094 1643.667969   4   4 1.0    0       88     91     3         3       53      55 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 36   3   1   1 3.687162 128.662828 0.000000 132.349990 132.349990 132.349990 0.000000 1672.230469 1671.218750  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   2   1   1 3.161850   1.005917 0.006519   4.174286 136.524276 136.524276 2.241864 1696.113281 1703.039062  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
 36   2   2   2 1.808857   0.426959 0.006049   2.241864 138.766140   2.241864 1.913160 1684.593750 1685.015625  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 0.690066 0.690066 0.371574 0.371574  0.730323  0.730323            0            2
 36   2   3   3 1.605604   0.302172 0.005384   1.913160 140.679300   1.913160 1.322240 1687.859375 1683.058594  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.253566 1.253566 0.731247 0.731247  0.582450  0.582450            0            3
 36   2   4   4 1.083322   0.230799 0.008119   1.322240 142.001540   1.322240 0.000000 1691.738281 1688.324219   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 36   1   1   1 1.183886   0.188426 0.001913   1.374225 137.898501 137.898501 4.024554 1663.777344 1660.191406   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   2   2 1.555730   0.224675 0.002285   1.782690 141.923055   4.024554 3.213222 1665.125000 1660.519531   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 36   1   3   3 1.153788   0.143378 0.002896   1.300062 145.136277   3.213222 2.949832 1659.855469 1654.089844   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 36   1   4   4 1.388328   0.236330 0.002934   1.627592 148.086109   2.949832 1.565989 1669.062500 1664.039062   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 36   1   5   5 1.355293   0.207868 0.002828   1.565989 149.652098   1.565989 1.375058 1668.531250 1664.410156   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 36   1   6   6 1.182999   0.189147 0.002912   1.375058 151.027156   1.375058 0.496372 1665.847656 1660.175781   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 36   1   7   7 0.436812   0.058655 0.000905   0.496372 151.523528   0.496372 0.495314 1669.605469 1664.601562   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1   8   8 0.437354   0.056980 0.000981   0.495314 152.018842   0.495314 0.498212 1669.605469 1664.601562   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1   9   9 0.438717   0.058540 0.000955   0.498212 152.517054   0.498212 0.671471 1669.605469 1664.601562   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  10  10 0.600181   0.070230 0.001060   0.671471 153.188525   0.671471 0.888135 1669.605469 1664.601562   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 36   1  11  11 0.794676   0.092518 0.000941   0.888135 154.076660   0.888135 1.805540 1669.605469 1664.601562   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 36   1  12  12 1.557588   0.246087 0.001864   1.805540 155.882199   1.805540 0.492631 1680.980469 1677.089844   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 36   1  13  13 0.437235   0.054548 0.000848   0.492631 156.374831   0.492631 2.686251 1675.898438 1670.617188   2   2 1.0    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  14  14 0.983273   1.701947 0.001032   2.686251 159.061082   2.686251 0.496201 1677.085938 1671.792969   5   5 1.0    0       64     68     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 36   1  15  15 0.439246   0.056071 0.000884   0.496201 159.557283   0.496201 1.342213 1675.914062 1670.617188   2   2 1.0    0       69     70     2         2       40      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  16  16 1.173288   0.167969 0.000956   1.342213 160.899495   1.342213 0.896907 1677.722656 1672.429688   6   6 1.0    0       71     76     2         2       42      43 3.000000 3.000000 2.828427 2.828427 0.942809 0.942809 -0.936752 -0.936752            0            1
 36   1  17  17 0.791790   0.104040 0.001076   0.896907 161.796402   0.896907 0.486912 1678.332031 1673.031250   4   4 1.0    0       77     80     2         2       44      45 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            1
 36   1  18  18 0.435863   0.050084 0.000965   0.486912 162.283314   0.486912 0.488176 1677.667969 1672.367188   2   2 1.0    0       81     82     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  19  19 0.438694   0.049482 0.000000   0.488176 162.771490   0.488176 0.315203 1680.945312 1675.628906   2   2 1.0    0       83     84     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  20  20 0.276419   0.038784 0.000000   0.315203 163.086693   0.315203 0.311114 1680.945312 1675.628906   1   1 1.0    0       85     85     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  21  21 0.277018   0.034096 0.000000   0.311114 163.397808   0.311114 0.483436 1680.945312 1675.628906   1   1 1.0    0       86     86     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  22  22 0.437032   0.046404 0.000000   0.483436 163.881243   0.483436 0.491708 1680.945312 1675.628906   2   2 1.0    0       87     88     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   1  23  23 0.439185   0.051605 0.000918   0.491708 164.372952   0.491708 0.671915 1681.195312 1675.878906   2   2 1.0    0       89     90     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1  24  24 0.601953   0.067843 0.002119   0.671915 165.044867   0.671915 0.000000 1681.882812 1676.628906   3   3 1.0    0       91     93     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 37   3   1   1 3.690827 211.070538 0.000000 214.761365 214.761365 214.761365 0.000000 1724.597656 1725.425781  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   2   1   1 3.342883   1.212066 0.006588   4.561538 219.322903 219.322903 2.851643 1751.542969 1755.445312  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.039424 3.039424 0.925042 0.925042  0.282546  0.282546            0            2
 37   2   2   2 2.264892   0.580525 0.006226   2.851643 222.174546   2.851643 1.297564 1739.792969 1736.949219  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.112697 1.112697 0.486805 0.486805  0.615622  0.615622            0            1
 37   2   3   3 1.075798   0.215317 0.006449   1.297564 223.472110   1.297564 1.337592 1731.210938 1726.320312   8   8 1.0    8       40     47     7         7       15      21 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 37   2   4   4 1.091423   0.238627 0.007542   1.337592 224.809703   1.337592 0.000000 1737.160156 1732.671875   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 37   1   1   1 1.189628   0.188105 0.001884   1.379617 220.702520 220.702520 4.889116 1707.210938 1701.597656   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   2   2 1.754956   0.279184 0.003332   2.037473 225.591637   4.889116 2.589835 1717.039062 1711.859375   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 37   1   3   3 1.152470   0.136924 0.002876   1.292271 228.181471   2.589835 3.408781 1708.640625 1703.082031   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 37   1   4   4 1.761140   0.307119 0.002930   2.071189 231.590253   3.408781 1.561032 1721.351562 1718.816406   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 37   1   5   5 1.362974   0.194678 0.003380   1.561032 233.151285   1.561032 1.611002 1713.675781 1707.769531   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 37   1   6   6 1.366889   0.241383 0.002730   1.611002 234.762287   1.611002 0.495737 1723.414062 1718.414062   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 37   1   7   7 0.437240   0.057603 0.000894   0.495737 235.258024   0.495737 0.672682 1716.199219 1710.265625   2   2 1.0    0       45     46     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   8   8 0.600123   0.071524 0.001034   0.672682 235.930706   0.672682 1.103976 1716.199219 1710.265625   3   3 1.0    0       47     49     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 37   1   9   9 0.976280   0.125770 0.001926   1.103976 237.034681   1.103976 2.269139 1717.355469 1711.296875   5   5 1.0    0       50     54     3         3       28      30 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 37   1  10  10 1.952464   0.314641 0.002035   2.269139 239.303820   2.269139 2.949047 1728.941406 1725.492188  10  10 1.0    0       55     64     3         3       31      33 3.333333 3.333333 2.516611 2.516611 0.754983 0.754983 -0.144624 -0.144624            0            0
 37   1  11  11 1.153404   1.793482 0.002161   2.949047 242.252867   2.949047 0.899404 1720.027344 1713.855469   6   6 1.0    0       65     70     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 37   1  12  12 0.801669   0.095755 0.001981   0.899404 243.152272   0.899404 0.314779 1719.066406 1713.019531   4   4 1.0    0       71     74     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 37   1  13  13 0.277135   0.037645 0.000000   0.314779 243.467051   0.314779 0.486192 1722.398438 1716.277344   1   1 1.0    0       75     75     1         1       40      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  14  14 0.437617   0.048575 0.000000   0.486192 243.953243   0.486192 0.320195 1722.398438 1716.277344   2   2 1.0    0       76     77     1         1       41      41 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  15  15 0.277766   0.042429 0.000000   0.320195 244.273438   0.320195 0.316979 1722.460938 1716.277344   1   1 1.0    0       78     78     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  16  16 0.278511   0.038467 0.000000   0.316979 244.590417   0.316979 0.680152 1722.460938 1716.277344   1   1 1.0    0       79     79     1         1       43      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  17  17 0.603575   0.075731 0.000845   0.680152 245.270568   0.680152 0.499819 1722.460938 1716.277344   3   3 1.0    0       80     82     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 37   1  18  18 0.438297   0.060585 0.000937   0.499819 245.770388   0.499819 0.499248 1722.960938 1716.777344   2   2 1.0    0       83     84     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  19  19 0.446015   0.053233 0.000000   0.499248 246.269636   0.499248 0.319290 1726.714844 1720.535156   2   2 1.0    0       85     86     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  20  20 0.279306   0.039984 0.000000   0.319290 246.588926   0.319290 0.491321 1726.714844 1720.535156   1   1 1.0    0       87     87     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  21  21 0.441616   0.049705 0.000000   0.491321 247.080247   0.491321 0.316963 1726.714844 1720.535156   2   2 1.0    0       88     89     1         1       50      50 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1  22  22 0.278727   0.038237 0.000000   0.316963 247.397210   0.316963 0.494118 1726.714844 1720.535156   1   1 1.0    0       90     90     1         1       51      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  23  23 0.441469   0.051753 0.000896   0.494118 247.891329   0.494118 0.683435 1726.714844 1720.535156   2   2 1.0    0       91     92     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 37   1  24  24 0.613819   0.067370 0.002246   0.683435 248.574764   0.683435 0.000000 1727.214844 1721.035156   3   3 1.0    0       93     95     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 38   3   1   1 3.685154 169.409007 0.000000 173.094161 173.094161 173.094161 0.000000 1755.652344 1756.660156  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   2   1   1 3.169907   1.047269 0.006383   4.223559 177.317720 177.317720 2.255453 1780.289062 1786.082031  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.184785 3.184785 1.013341 1.013341  0.264377  0.264377            0            1
 38   2   2   2 1.802447   0.446872 0.006134   2.255453 179.573173   2.255453 1.915826 1767.269531 1767.492188  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 1.069045 1.069045 0.575640 0.575640  0.626351  0.626351            0            2
 38   2   3   3 1.603451   0.306698 0.005677   1.915826 181.488999   1.915826 1.292310 1768.785156 1763.343750  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            2
 38   2   4   4 1.070110   0.214761 0.007439   1.292310 182.781310   1.292310 0.000000 1770.683594 1765.511719   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 38   1   1   1 1.184480   0.187495 0.002062   1.374037 178.691757 178.691757 4.034571 1745.535156 1741.671875   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   2   2 1.549579   0.227445 0.002094   1.779118 182.726328   4.034571 3.223115 1747.710938 1742.996094   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 38   1   3   3 1.153181   0.151144 0.002964   1.307289 185.949444   3.223115 2.921139 1742.625000 1736.605469   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 38   1   4   4 1.388660   0.237292 0.002877   1.628829 188.870582   2.921139 1.560008 1751.750000 1746.515625   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 38   1   5   5 1.355550   0.201446 0.003012   1.560008 190.430591   1.560008 1.382496 1751.023438 1746.863281   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 38   1   6   6 1.182314   0.197415 0.002767   1.382496 191.813087   1.382496 0.491651 1749.199219 1743.156250   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 38   1   7   7 0.437249   0.053476 0.000926   0.491651 192.304738   0.491651 0.495829 1751.453125 1745.644531   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1   8   8 0.436645   0.058271 0.000913   0.495829 192.800567   0.495829 0.494993 1751.453125 1745.644531   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   9   9 0.436409   0.057560 0.001023   0.494993 193.295560   0.494993 0.673546 1751.453125 1745.644531   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  10  10 0.601985   0.070659 0.000902   0.673546 193.969106   0.673546 0.885585 1751.453125 1745.644531   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 38   1  11  11 0.792202   0.092506 0.000877   0.885585 194.854692   0.885585 3.471338 1751.453125 1745.644531   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 38   1  12  12 1.558661   1.910542 0.002136   3.471338 198.326030   3.471338 0.492631 1761.597656 1757.136719   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 2.081666 2.081666 0.780625 0.780625 -0.024447 -0.024447            0            0
 38   1  13  13 0.436338   0.055470 0.000823   0.492631 198.818660   0.492631 1.096829 1756.691406 1750.656250   2   2 1.0    0       62     63     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  14  14 0.980676   0.115017 0.001136   1.096829 199.915489   1.096829 0.691430 1757.867188 1751.832031   5   5 1.0    0       64     68     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 38   1  15  15 0.620259   0.070172 0.000998   0.691430 200.606919   0.691430 0.492116 1756.691406 1750.656250   3   3 1.0    0       69     71     2         2       40      41 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 38   1  16  16 0.438364   0.052867 0.000885   0.492116 201.099036   0.492116 0.494767 1756.816406 1750.906250   2   2 1.0    0       72     73     2         2       42      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  17  17 0.435599   0.058243 0.000926   0.494767 201.593803   0.494767 0.885576 1757.316406 1751.406250   2   2 1.0    0       74     75     2         2       44      45 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  18  18 0.784256   0.100309 0.001012   0.885576 202.479379   0.885576 0.314856 1759.050781 1753.218750   4   4 1.0    0       76     79     2         2       46      47 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 38   1  19  19 0.277570   0.037286 0.000000   0.314856 202.794236   0.314856 0.314297 1761.816406 1755.914062   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  20  20 0.275009   0.039288 0.000000   0.314297 203.108533   0.314297 0.311488 1761.941406 1755.914062   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  21  21 0.277502   0.033986 0.000000   0.311488 203.420021   0.311488 0.485089 1761.941406 1755.914062   1   1 1.0    0       82     82     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  22  22 0.438420   0.046669 0.000000   0.485089 203.905110   0.485089 0.488627 1761.941406 1755.914062   2   2 1.0    0       83     84     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1  23  23 0.435720   0.051914 0.000994   0.488627 204.393737   0.488627 0.668935 1761.941406 1755.914062   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  24  24 0.600683   0.066041 0.002210   0.668935 205.062672   0.668935 0.000000 1762.378906 1756.414062   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 39   3   1   1 3.673639 151.194670 0.000000 154.868309 154.868309 154.868309 0.000000 1784.832031 1783.101562  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   2   1   1 3.154629   0.990725 0.006377   4.151731 159.020041 159.020041 2.311692 1804.707031 1810.289062  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
 39   2   2   2 1.798222   0.507547 0.005924   2.311692 161.331733   2.311692 1.738721 1795.152344 1795.269531  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 0.899735 0.899735 0.484473 0.484473  0.670224  0.670224            0            2
 39   2   3   3 1.461018   0.272269 0.005434   1.738721 163.070454   1.738721 1.478595 1796.082031 1792.296875  11  11 1.0   11       36     46     7         7       15      21 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            2
 39   2   4   4 1.216680   0.254275 0.007640   1.478595 164.549049   1.478595 0.000000 1802.316406 1798.050781   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 39   1   1   1 1.181655   0.187584 0.001974   1.371213 160.391253 160.391253 4.090233 1773.859375 1769.972656   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   2   2 1.545230   0.231031 0.002280   1.778540 164.481486   4.090233 2.607410 1775.628906 1771.039062   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 39   1   3   3 0.779078   0.086715 0.002897   0.868689 167.088896   2.607410 2.860507 1769.242188 1763.449219   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1   4   4 1.184820   0.194342 0.002750   1.381912 169.949404   2.860507 1.822822 1777.394531 1773.539062   6   6 1.0    0       19     24     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 39   1   5   5 1.559776   0.260124 0.002922   1.822822 171.772226   1.822822 1.374363 1781.238281 1775.589844   8   8 1.0    0       25     32     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 39   1   6   6 1.181331   0.190159 0.002873   1.374363 173.146589   1.374363 0.498858 1776.378906 1770.207031   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 39   1   7   7 0.438394   0.059531 0.000932   0.498858 173.645447   0.498858 0.492973 1779.945312 1774.628906   2   2 1.0    0       39     40     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1   8   8 0.435084   0.057031 0.000858   0.492973 174.138421   0.492973 0.493606 1779.945312 1774.628906   2   2 1.0    0       41     42     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1   9   9 0.436417   0.056298 0.000891   0.493606 174.632026   0.493606 0.679540 1779.945312 1774.628906   2   2 1.0    0       43     44     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  10  10 0.600462   0.078035 0.001043   0.679540 175.311566   0.679540 2.620559 1779.945312 1774.628906   3   3 1.0    0       45     47     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 39   1  11  11 0.796489   1.823182 0.000888   2.620559 177.932125   2.620559 1.811224 1779.953125 1774.628906   4   4 1.0    0       48     51     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 39   1  12  12 1.561069   0.247992 0.002162   1.811224 179.743349   1.811224 0.317786 1790.726562 1786.566406   8   8 1.0    0       52     59     3         3       33      35 2.666667 2.666667 1.154701 1.154701 0.433013 0.433013  0.301253  0.301253            0            0
 39   1  13  13 0.276272   0.041514 0.000000   0.317786 180.061135   0.317786 0.674844 1785.449219 1780.136719   1   1 1.0    0       60     60     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  14  14 0.603199   0.070734 0.000912   0.674844 180.735979   0.674844 0.891520 1785.449219 1780.136719   3   3 1.0    0       61     63     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 39   1  15  15 0.798166   0.092448 0.000905   0.891520 181.627499   0.891520 1.112550 1785.449219 1780.136719   4   4 1.0    0       64     67     2         2       39      40 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 39   1  16  16 0.976514   0.135168 0.000868   1.112550 182.740049   1.112550 0.675427 1787.214844 1781.796875   5   5 1.0    0       68     72     2         2       41      42 2.500000 2.500000 2.121320 2.121320 0.848528 0.848528 -0.642156 -0.642156            0            1
 39   1  17  17 0.600786   0.073697 0.000943   0.675427 183.415475   0.675427 0.672364 1786.722656 1781.386719   3   3 1.0    0       73     75     2         2       43      44 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 39   1  18  18 0.601452   0.069859 0.001054   0.672364 184.087839   0.672364 0.317204 1787.183594 1781.636719   3   3 1.0    0       76     78     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 39   1  19  19 0.277876   0.039329 0.000000   0.317204 184.405043   0.317204 0.317398 1791.371094 1785.898438   1   1 1.0    0       79     79     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  20  20 0.278272   0.039125 0.000000   0.317398 184.722441   0.317398 0.488347 1791.433594 1785.898438   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  21  21 0.439484   0.048863 0.000000   0.488347 185.210789   0.488347 0.494158 1791.433594 1785.898438   2   2 1.0    0       81     82     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   1  22  22 0.437531   0.055673 0.000954   0.494158 185.704946   0.494158 0.491719 1791.433594 1785.898438   2   2 1.0    0       83     84     2         2       50      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  23  23 0.439813   0.050974 0.000932   0.491719 186.196665   0.491719 0.678083 1791.433594 1785.898438   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 39   1  24  24 0.608930   0.067127 0.002025   0.678083 186.874748   0.678083 0.000000 1790.316406 1786.398438   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 40   3   1   1 3.668311 132.237942 0.000000 135.906254 135.906254 135.906254 0.000000 1813.656250 1812.578125  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   2   1   1 3.345192   1.165901 0.006273   4.517365 140.423619 140.423619 2.867222 1839.832031 1842.828125  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.093773 3.093773 0.941583 0.941583  0.275677  0.275677            0            2
 40   2   2   2 2.260112   0.600916 0.006194   2.867222 143.290842   2.867222 1.126809 1831.718750 1827.445312  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.253566 1.253566 0.548435 0.548435  0.582450  0.582450            0            1
 40   2   3   3 0.934450   0.186653 0.005707   1.126809 144.417651   1.126809 1.482844 1824.695312 1820.910156   7   7 1.0    7       40     46     7         7       15      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 40   2   4   4 1.221651   0.253760 0.007433   1.482844 145.900495   1.482844 0.000000 1832.914062 1828.203125   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 40   1   1   1 1.182549   0.188268 0.001989   1.372806 141.796426 141.796426 4.898355 1806.777344 1802.789062   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   2   2 1.748295   0.279059 0.003779   2.031132 146.694780   4.898355 1.995562 1811.429688 1805.410156   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 40   1   3   3 0.778369   0.087555 0.002829   0.868753 148.690343   1.995562 3.568421 1802.578125 1796.511719   4   4 1.0    0       16     19     4         4        8      11 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   4   4 1.767790   0.314905 0.002884   2.085578 152.258764   3.568421 1.554638 1815.656250 1812.410156   9   9 1.0    0       20     28     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 40   1   5   5 1.352054   0.199576 0.003008   1.554638 153.813402   1.554638 1.591596 1812.363281 1808.203125   7   7 1.0    0       29     35     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 40   1   6   6 1.366227   0.222504 0.002866   1.591596 155.404998   1.591596 0.494338 1815.316406 1810.089844   7   7 1.0    0       36     42     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 40   1   7   7 0.437183   0.056297 0.000858   0.494338 155.899336   0.494338 0.669410 1811.875000 1805.785156   2   2 1.0    0       43     44     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   8   8 0.597350   0.071050 0.001009   0.669410 156.568745   0.669410 3.344926 1811.875000 1805.785156   3   3 1.0    0       45     47     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 40   1   9   9 1.370885   1.972067 0.001974   3.344926 159.913671   3.344926 0.874100 1819.953125 1815.343750   7   7 1.0    0       48     54     3         3       28      30 2.333333 2.333333 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            0
 40   1  10  10 0.779405   0.092858 0.001837   0.874100 160.787771   0.874100 1.307259 1812.375000 1806.285156   4   4 1.0    0       55     58     3         3       31      33 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 40   1  11  11 1.153171   0.152065 0.002023   1.307259 162.095030   1.307259 0.896098 1814.460938 1808.375000   6   6 1.0    0       59     64     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 40   1  12  12 0.799272   0.094780 0.002046   0.896098 162.991128   0.896098 0.483188 1814.160156 1808.285156   4   4 1.0    0       65     68     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 40   1  13  13 0.434502   0.048687 0.000000   0.483188 163.474317   0.483188 0.313917 1817.507812 1811.539062   2   2 1.0    0       69     70     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  14  14 0.279306   0.034612 0.000000   0.313917 163.788234   0.313917 0.316489 1817.507812 1811.539062   1   1 1.0    0       71     71     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  15  15 0.276067   0.040422 0.000000   0.316489 164.104723   0.316489 0.487499 1817.507812 1811.539062   1   1 1.0    0       72     72     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  16  16 0.437894   0.049605 0.000000   0.487499 164.592222   0.487499 0.321910 1817.632812 1811.539062   2   2 1.0    0       73     74     1         1       43      43 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  17  17 0.277486   0.044423 0.000000   0.321910 164.914132   0.321910 0.676083 1817.632812 1811.539062   1   1 1.0    0       75     75     1         1       44      44 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  18  18 0.604611   0.070466 0.001006   0.676083 165.590215   0.676083 0.317099 1817.632812 1811.539062   3   3 1.0    0       76     78     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 40   1  19  19 0.277230   0.039869 0.000000   0.317099 165.907313   0.317099 0.323157 1821.414062 1815.554688   1   1 1.0    0       79     79     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  20  20 0.282937   0.040220 0.000000   0.323157 166.230470   0.323157 0.316297 1821.414062 1815.554688   1   1 1.0    0       80     80     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1  21  21 0.276573   0.039724 0.000000   0.316297 166.546767   0.316297 0.671572 1821.414062 1815.554688   1   1 1.0    0       81     81     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  22  22 0.602921   0.067674 0.000977   0.671572 167.218339   0.671572 0.492823 1821.414062 1815.554688   3   3 1.0    0       82     84     2         2       50      51 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 40   1  23  23 0.435694   0.056273 0.000857   0.492823 167.711162   0.492823 0.671349 1821.636719 1815.554688   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 40   1  24  24 0.602897   0.066313 0.002139   0.671349 168.382511   0.671349 0.000000 1822.324219 1816.304688   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 41   3   1   1 3.701601 121.808088 0.000000 125.509688 125.509688 125.509688 0.000000 1844.003906 1842.476562  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   2   1   1 3.454445   1.215432 0.009410   4.679286 130.188975 130.188975 2.850430 1866.859375 1869.816406  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.251373 3.251373 0.989548 0.989548  0.256265  0.256265            0            2
 41   2   2   2 2.261080   0.582929 0.006421   2.850430 133.039405   2.850430 1.123943 1859.945312 1855.699219  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.380131 1.380131 0.603807 0.603807  0.554370  0.554370            0            1
 41   2   3   3 0.933817   0.184623 0.005503   1.123943 134.163348   1.123943 1.462429 1852.902344 1849.164062   7   7 1.0    7       40     46     7         7       15      21 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 41   2   4   4 1.209911   0.245049 0.007468   1.462429 135.625776   1.462429 0.000000 1860.199219 1854.734375   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 41   1   1   1 1.206824   0.196797 0.001987   1.405609 131.594584 131.594584 4.931212 1834.769531 1830.796875   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   2   2 1.784082   0.293716 0.002984   2.080782 136.525796   4.931212 2.402951 1839.433594 1833.417969   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 41   1   3   3 1.148277   0.127768 0.002963   1.279008 138.928747   2.402951 3.537866 1830.714844 1824.773438   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 41   1   4   4 1.766566   0.305849 0.003022   2.075437 142.466612   3.537866 1.553554 1843.988281 1840.679688   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 41   1   5   5 1.350549   0.200035 0.002970   1.553554 144.020167   1.553554 1.595235 1835.550781 1829.492188   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 41   1   6   6 1.360859   0.231549 0.002827   1.595235 145.615401   1.595235 0.489489 1844.441406 1839.355469   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 41   1   7   7 0.433734   0.054824 0.000931   0.489489 146.104890   0.489489 0.673257 1840.718750 1834.792969   2   2 1.0    0       45     46     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1   8   8 0.601746   0.070515 0.000996   0.673257 146.778147   0.673257 1.587213 1840.718750 1834.792969   3   3 1.0    0       47     49     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 41   1   9   9 1.374694   0.210474 0.002045   1.587213 148.365361   1.587213 2.668461 1848.839844 1844.347656   7   7 1.0    0       50     56     3         3       28      30 2.333333 2.333333 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            0
 41   1  10  10 0.779334   1.887322 0.001804   2.668461 151.033821   2.668461 1.305749 1841.093750 1835.042969   4   4 1.0    0       57     60     3         3       31      33 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 41   1  11  11 1.153457   0.150324 0.001967   1.305749 152.339570   1.305749 0.895324 1842.679688 1836.628906   6   6 1.0    0       61     66     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 41   1  12  12 0.799755   0.093727 0.001841   0.895324 153.234894   0.895324 0.485597 1842.468750 1836.542969   4   4 1.0    0       67     70     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 41   1  13  13 0.435920   0.049677 0.000000   0.485597 153.720490   0.485597 0.315569 1845.781250 1839.804688   2   2 1.0    0       71     72     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  14  14 0.279083   0.036486 0.000000   0.315569 154.036059   0.315569 0.314833 1845.785156 1839.804688   1   1 1.0    0       73     73     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  15  15 0.277118   0.037716 0.000000   0.314833 154.350893   0.314833 0.490338 1845.847656 1839.804688   1   1 1.0    0       74     74     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  16  16 0.436996   0.053342 0.000000   0.490338 154.841231   0.490338 0.312676 1845.847656 1839.804688   2   2 1.0    0       75     76     1         1       43      43 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  17  17 0.274631   0.038044 0.000000   0.312676 155.153906   0.312676 0.669837 1845.847656 1839.804688   1   1 1.0    0       77     77     1         1       44      44 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  18  18 0.601665   0.067177 0.000994   0.669837 155.823743   0.669837 0.311231 1845.867188 1840.054688   3   3 1.0    0       78     80     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 41   1  19  19 0.277174   0.034056 0.000000   0.311231 156.134973   0.311231 0.317258 1850.097656 1844.062500   1   1 1.0    0       81     81     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  20  20 0.277762   0.039496 0.000000   0.317258 156.452231   0.317258 0.484847 1850.097656 1844.062500   1   1 1.0    0       82     82     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  21  21 0.436317   0.048529 0.000000   0.484847 156.937078   0.484847 0.493212 1850.097656 1844.062500   2   2 1.0    0       83     84     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   1  22  22 0.437654   0.054690 0.000868   0.493212 157.430290   0.493212 0.489891 1850.097656 1844.062500   2   2 1.0    0       85     86     2         2       50      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  23  23 0.438610   0.050364 0.000917   0.489891 157.920181   0.489891 0.670858 1850.101562 1844.066406   2   2 1.0    0       87     88     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1  24  24 0.601685   0.066974 0.002199   0.670858 158.591040   0.670858 0.000000 1850.601562 1844.566406   3   3 1.0    0       89     91     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 42   3   1   1 3.686082 154.089354 0.000000 157.775436 157.775436 157.775436 0.000000 1883.667969 1883.703125  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   2   1   1 3.333850   1.153800 0.006148   4.493797 162.269233 162.269233 2.837256 1864.128906 1874.890625  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.147183 3.147183 0.957838 0.957838  0.269016  0.269016            0            2
 42   2   2   2 2.267367   0.563762 0.006126   2.837256 165.106489   2.837256 1.297441 1873.679688 1874.445312  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.112697 1.112697 0.486805 0.486805  0.615622  0.615622            0            1
 42   2   3   3 1.076167   0.215397 0.005877   1.297441 166.403930   1.297441 1.327386 1867.609375 1866.613281   8   8 1.0    8       40     47     7         7       15      21 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 42   2   4   4 1.082600   0.237332 0.007453   1.327386 167.731316   1.327386 0.000000 1874.472656 1873.632812   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 42   1   1   1 1.185108   0.186907 0.002035   1.374050 163.643284 163.643284 4.884165 1829.597656 1833.828125   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   2   2 1.759728   0.283617 0.003564   2.046909 168.527448   4.884165 2.612923 1837.332031 1841.664062   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 42   1   3   3 1.158997   0.153667 0.002819   1.315482 171.140371   2.612923 3.414360 1830.136719 1831.003906   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 42   1   4   4 1.772531   0.311077 0.003367   2.086975 174.554731   3.414360 1.580318 1844.691406 1847.472656   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 1.892969 1.892969 0.841320 0.841320  0.233724  0.233724            0            0
 42   1   5   5 1.357342   0.220031 0.002945   1.580318 176.135049   1.580318 1.601496 1845.726562 1847.414062   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 42   1   6   6 1.364053   0.234735 0.002708   1.601496 177.736545   1.601496 0.495219 1850.636719 1850.800781   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 42   1   7   7 0.436427   0.057818 0.000973   0.495219 178.231764   0.495219 0.674044 1849.972656 1848.125000   2   2 1.0    0       45     46     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1   8   8 0.601279   0.071793 0.000972   0.674044 178.905808   0.674044 1.570863 1850.343750 1848.292969   3   3 1.0    0       47     49     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 42   1   9   9 1.366175   0.202620 0.002067   1.570863 180.476671   1.570863 0.873863 1858.675781 1858.843750   7   7 1.0    0       50     56     3         3       28      30 2.333333 2.333333 0.577350 0.577350 0.247436 0.247436  0.585162  0.585162            0            0
 42   1  10  10 0.780662   0.091333 0.001869   0.873863 181.350534   0.873863 1.306608 1852.574219 1850.699219   4   4 1.0    0       57     60     3         3       31      33 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 42   1  11  11 1.152597   0.152143 0.001868   1.306608 182.657142   1.306608 2.780164 1855.500000 1853.562500   6   6 1.0    0       61     66     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 42   1  12  12 0.814551   1.963578 0.002036   2.780164 185.437306   2.780164 0.316173 1855.304688 1853.273438   4   4 1.0    0       67     70     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 42   1  13  13 0.278115   0.038059 0.000000   0.316173 185.753479   0.316173 0.486187 1858.906250 1856.601562   1   1 1.0    0       71     71     1         1       40      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  14  14 0.436991   0.049196 0.000000   0.486187 186.239666   0.486187 0.318497 1859.015625 1856.652344   2   2 1.0    0       72     73     1         1       41      41 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  15  15 0.275114   0.043382 0.000000   0.318497 186.558163   0.318497 0.315915 1859.132812 1856.785156   1   1 1.0    0       74     74     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  16  16 0.277454   0.038461 0.000000   0.315915 186.874078   0.315915 0.678642 1859.132812 1856.785156   1   1 1.0    0       75     75     1         1       43      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  17  17 0.601698   0.076092 0.000852   0.678642 187.552720   0.678642 0.502915 1859.292969 1856.949219   3   3 1.0    0       76     78     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 42   1  18  18 0.439475   0.062499 0.000940   0.502915 188.055635   0.502915 0.318442 1859.898438 1857.546875   2   2 1.0    0       79     80     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  19  19 0.277334   0.041108 0.000000   0.318442 188.374077   0.318442 0.486805 1863.687500 1861.253906   1   1 1.0    0       81     81     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  20  20 0.436307   0.050498 0.000000   0.486805 188.860882   0.486805 0.316571 1864.261719 1861.925781   2   2 1.0    0       82     83     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  21  21 0.276949   0.039622 0.000000   0.316571 189.177453   0.316571 0.484170 1864.292969 1861.945312   1   1 1.0    0       84     84     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  22  22 0.437531   0.046639 0.000000   0.484170 189.661623   0.484170 0.489354 1864.304688 1861.945312   2   2 1.0    0       85     86     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   1  23  23 0.436993   0.051513 0.000848   0.489354 190.150977   0.489354 0.673586 1864.414062 1862.195312   2   2 1.0    0       87     88     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1  24  24 0.603898   0.067601 0.002087   0.673586 190.824563   0.673586 0.000000 1865.183594 1862.695312   3   3 1.0    0       89     91     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 43   3   1   1 3.692723 142.019616 0.000000 145.712339 145.712339 145.712339 0.000000 1913.039062 1914.699219  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   2   1   1 3.344670   1.152528 0.006243   4.503442 150.215780 150.215780 2.863653 1941.023438 1946.042969  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.147183 3.147183 0.957838 0.957838  0.269016  0.269016            0            2
 43   2   2   2 2.265389   0.591945 0.006319   2.863653 153.079433   2.863653 3.202639 1929.015625 1926.417969  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.380131 1.380131 0.603807 0.603807  0.554370  0.554370            0            1
 43   2   3   3 1.076353   2.120450 0.005836   3.202639 156.282072   3.202639 1.319741 1923.125000 1919.582031   8   8 1.0    8       40     47     7         7       15      21 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 43   2   4   4 1.080948   0.231180 0.007613   1.319741 157.601813   1.319741 0.000000 1928.765625 1925.988281   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 43   1   1   1 1.181750   0.185302 0.002014   1.369067 151.584847 151.584847 4.904189 1903.859375 1901.347656   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   2   2 1.758569   0.278880 0.003087   2.040536 156.489035   4.904189 4.474908 1907.472656 1906.273438   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 43   1   3   3 1.145220   0.124232 0.002818   1.272269 160.963943   4.474908 3.412509 1898.492188 1893.816406   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 43   1   4   4 1.774778   0.314910 0.003081   2.092768 164.376452   3.412509 1.576734 1911.519531 1909.464844   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 1.892969 1.892969 0.841320 0.841320  0.233724  0.233724            0            0
 43   1   5   5 1.359803   0.214051 0.002880   1.576734 165.953186   1.576734 1.606871 1908.964844 1905.933594   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 43   1   6   6 1.363531   0.240575 0.002765   1.606871 167.560056   1.606871 0.493399 1912.929688 1909.398438   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 43   1   7   7 0.437493   0.055015 0.000891   0.493399 168.053455   0.493399 0.671520 1907.566406 1903.035156   2   2 1.0    0       45     46     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1   8   8 0.598776   0.071683 0.001061   0.671520 168.724975   0.671520 1.115604 1907.566406 1903.035156   3   3 1.0    0       47     49     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 43   1   9   9 0.980552   0.133277 0.001775   1.115604 169.840580   1.115604 2.303832 1908.718750 1904.187500   5   5 1.0    0       50     54     3         3       28      30 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 43   1  10  10 1.969309   0.332572 0.001951   2.303832 172.144411   2.303832 1.301106 1921.585938 1918.996094  10  10 1.0    0       55     64     3         3       31      33 3.333333 3.333333 4.041452 4.041452 1.212436 1.212436 -0.472489 -0.472489            0            0
 43   1  11  11 1.154442   0.144505 0.002159   1.301106 173.445518   1.301106 0.897614 1911.796875 1907.089844   6   6 1.0    0       65     70     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 43   1  12  12 0.799971   0.095174 0.002470   0.897614 174.343132   0.897614 0.482195 1911.246094 1906.539062   4   4 1.0    0       71     74     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 43   1  13  13 0.433517   0.048678 0.000000   0.482195 174.825327   0.482195 0.312015 1914.691406 1910.039062   2   2 1.0    0       75     76     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  14  14 0.276611   0.035404 0.000000   0.312015 175.137342   0.312015 0.317267 1914.753906 1910.039062   1   1 1.0    0       77     77     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  15  15 0.277570   0.039697 0.000000   0.317267 175.454609   0.317267 0.488039 1914.753906 1910.039062   1   1 1.0    0       78     78     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  16  16 0.438046   0.049993 0.000000   0.488039 175.942648   0.488039 0.501987 1914.753906 1910.039062   2   2 1.0    0       79     80     1         1       43      43 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  17  17 0.436877   0.064202 0.000908   0.501987 176.444634   0.501987 0.497784 1914.765625 1910.039062   2   2 1.0    0       81     82     2         2       44      45 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  18  18 0.439042   0.057866 0.000877   0.497784 176.942419   0.497784 0.487199 1915.265625 1910.539062   2   2 1.0    0       83     84     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  19  19 0.436944   0.050255 0.000000   0.487199 177.429618   0.487199 0.317653 1918.265625 1913.546875   2   2 1.0    0       85     86     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  20  20 0.279273   0.038380 0.000000   0.317653 177.747271   0.317653 0.312108 1918.265625 1913.546875   1   1 1.0    0       87     87     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  21  21 0.277175   0.034933 0.000000   0.312108 178.059379   0.312108 0.483144 1918.265625 1913.546875   1   1 1.0    0       88     88     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  22  22 0.436234   0.046910 0.000000   0.483144 178.542523   0.483144 0.489918 1918.265625 1913.546875   2   2 1.0    0       89     90     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   1  23  23 0.437103   0.051922 0.000893   0.489918 179.032441   0.489918 0.680982 1918.265625 1913.546875   2   2 1.0    0       91     92     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1  24  24 0.610282   0.068534 0.002167   0.680982 179.713423   0.680982 0.000000 1918.953125 1914.296875   3   3 1.0    0       93     95     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 44   3   1   1 3.676389 139.078283 0.000000 142.754672 142.754672 142.754672 0.000000 1944.253906 1943.917969  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   2   1   1 3.322364   1.055703 0.006379   4.384446 147.139119 147.139119 2.860754 1968.828125 1974.214844  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.039424 3.039424 0.925042 0.925042  0.282546  0.282546            0            2
 44   2   2   2 2.268098   0.585612 0.007044   2.860754 149.999872   2.860754 1.298570 1960.265625 1957.089844  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.380131 1.380131 0.603807 0.603807  0.554370  0.554370            0            1
 44   2   3   3 1.076003   0.217166 0.005401   1.298570 151.298443   1.298570 3.228173 1907.667969 1907.996094   8   8 1.0    8       40     47     7         7       15      21 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            2
 44   2   4   4 1.071140   2.149568 0.007464   3.228173 154.526615   3.228173 0.000000 1918.144531 1917.312500   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 44   1   1   1 1.181195   0.185162 0.002083   1.368439 148.507558 148.507558 4.905400 1934.242188 1930.984375   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   2   2 1.758252   0.283675 0.002720   2.044647 153.412958   4.905400 2.600109 1938.019531 1933.855469   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 44   1   3   3 1.155334   0.143283 0.002921   1.301538 156.013067   2.600109 5.319107 1930.613281 1926.128906   6   6 1.0    0       16     21     4         4        8      11 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 44   1   4   4 1.776408   0.311587 0.002940   2.090935 161.332174   5.319107 1.561126 1942.835938 1940.863281   9   9 1.0    0       22     30     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 44   1   5   5 1.350122   0.208112 0.002892   1.561126 162.893300   1.561126 1.606153 1939.800781 1936.683594   7   7 1.0    0       31     37     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 44   1   6   6 1.369054   0.234475 0.002624   1.606153 164.499453   1.606153 0.500862 1943.703125 1939.542969   7   7 1.0    0       38     44     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 44   1   7   7 0.441797   0.058229 0.000835   0.500862 165.000315   0.500862 0.675357 1833.242188 1829.550781   2   2 1.0    0       45     46     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   8   8 0.602375   0.072068 0.000915   0.675357 165.675672   0.675357 1.113370 1841.800781 1839.875000   3   3 1.0    0       47     49     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 44   1   9   9 0.977737   0.133875 0.001758   1.113370 166.789042   1.113370 2.290896 1851.750000 1850.914062   5   5 1.0    0       50     54     3         3       28      30 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 44   1  10  10 1.967149   0.321746 0.002000   2.290896 169.079938   2.290896 1.309901 1887.949219 1889.417969  10  10 1.0    0       55     64     3         3       31      33 3.333333 3.333333 2.516611 2.516611 0.754983 0.754983 -0.144624 -0.144624            0            0
 44   1  11  11 1.153288   0.154636 0.001976   1.309901 170.389839   1.309901 0.894653 1885.757812 1885.773438   6   6 1.0    0       65     70     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 44   1  12  12 0.797892   0.094997 0.001764   0.894653 171.284492   0.894653 0.484923 1886.398438 1886.164062   4   4 1.0    0       71     74     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 44   1  13  13 0.435696   0.049227 0.000000   0.484923 171.769416   0.484923 0.311180 1899.636719 1898.976562   2   2 1.0    0       75     76     1         1       40      40 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  14  14 0.276789   0.034391 0.000000   0.311180 172.080595   0.311180 0.309585 1899.894531 1898.976562   1   1 1.0    0       77     77     1         1       41      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  15  15 0.275889   0.033695 0.000000   0.309585 172.390180   0.309585 0.316218 1899.910156 1898.992188   1   1 1.0    0       78     78     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  16  16 0.276764   0.039454 0.000000   0.316218 172.706398   0.316218 0.675434 1899.945312 1899.027344   1   1 1.0    0       79     79     1         1       43      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  17  17 0.601081   0.073458 0.000895   0.675434 173.381832   0.675434 0.669495 1901.566406 1900.269531   3   3 1.0    0       80     82     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 44   1  18  18 0.600068   0.068524 0.000904   0.669495 174.051327   0.669495 0.313660 1903.179688 1901.843750   3   3 1.0    0       83     85     2         2       46      47 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 44   1  19  19 0.276536   0.037124 0.000000   0.313660 174.364987   0.313660 0.316056 1909.304688 1907.906250   1   1 1.0    0       86     86     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  20  20 0.275841   0.040215 0.000000   0.316056 174.681043   0.316056 0.311063 1909.421875 1907.906250   1   1 1.0    0       87     87     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  21  21 0.276846   0.034217 0.000000   0.311063 174.992106   0.311063 0.482993 1909.707031 1908.019531   1   1 1.0    0       88     88     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  22  22 0.435659   0.047334 0.000000   0.482993 175.475099   0.482993 0.489079 1909.960938 1908.230469   2   2 1.0    0       89     90     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1  23  23 0.436396   0.051720 0.000962   0.489079 175.964178   0.489079 0.677014 1910.238281 1908.472656   2   2 1.0    0       91     92     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 44   1  24  24 0.607513   0.067361 0.002140   0.677014 176.641192   0.677014 0.000000 1911.093750 1909.289062   3   3 1.0    0       93     95     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 45   3   1   1 3.674584 143.006859 0.000000 146.681443 146.681443 146.681443 0.000000 1978.109375 1980.601562  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   2   1   1 3.305548   1.127055 0.006348   4.438951 151.120394 151.120394 2.875909 2006.746094 2013.933594  23  23 1.0   23        1     23     7         7        1       7 3.285714 3.285714 3.251373 3.251373 0.989548 0.989548  0.256265  0.256265            0            2
 45   2   2   2 2.264136   0.605533 0.006240   2.875909 153.996303   2.875909 1.295801 1998.597656 1996.691406  16  16 1.0   16       24     39     7         7        8      14 2.285714 2.285714 1.603567 1.603567 0.701561 0.701561  0.508260  0.508260            0            1
 45   2   3   3 1.073694   0.216682 0.005426   1.295801 155.292104   1.295801 1.329346 1988.855469 1985.636719   8   8 1.0    8       40     47     7         7       15      21 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 45   2   4   4 1.084997   0.236934 0.007414   1.329346 156.621450   1.329346 0.000000 1994.738281 1991.984375   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 45   1   1   1 1.182073   0.188323 0.001804   1.372199 152.492593 152.492593 4.914913 1965.445312 1961.406250   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   2   2 1.757749   0.278070 0.003185   2.039004 157.407506   4.914913 2.164071 1974.269531 1970.089844   9   9 1.0    0        7     15     4         4        4       7 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 45   1   3   3 0.779127   0.086534 0.002609   0.868269 159.571576   2.164071 3.416252 1965.500000 1961.203125   4   4 1.0    0       16     19     4         4        8      11 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   4   4 1.767415   0.316829 0.002662   2.086906 162.987828   3.416252 1.559908 1978.531250 1976.855469   9   9 1.0    0       20     28     4         4       12      15 2.250000 2.250000 2.500000 2.500000 1.111111 1.111111  0.096323  0.096323            0            0
 45   1   5   5 1.356094   0.200918 0.002896   1.559908 164.547737   1.559908 1.614943 1975.210938 1972.886719   7   7 1.0    0       29     35     4         4       16      19 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 45   1   6   6 1.364431   0.247692 0.002820   1.614943 166.162680   1.614943 0.493485 1979.726562 1976.234375   7   7 1.0    0       36     42     4         4       20      23 1.750000 1.750000 1.500000 1.500000 0.857143 0.857143  0.339036  0.339036            0            2
 45   1   7   7 0.436310   0.056323 0.000852   0.493485 166.656164   0.493485 0.674526 1974.906250 1970.562500   2   2 1.0    0       43     44     2         2       24      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   8   8 0.601448   0.072094 0.000984   0.674526 167.330690   0.674526 1.104853 1973.421875 1969.078125   3   3 1.0    0       45     47     2         2       26      27 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 45   1   9   9 0.976294   0.126627 0.001932   1.104853 168.435544   1.104853 2.298843 1974.484375 1970.105469   5   5 1.0    0       48     52     3         3       28      30 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 45   1  10  10 1.970254   0.326628 0.001961   2.298843 170.734387   2.298843 1.309049 1986.691406 1984.535156  10  10 1.0    0       53     62     3         3       31      33 3.333333 3.333333 4.041452 4.041452 1.212436 1.212436 -0.472489 -0.472489            0            0
 45   1  11  11 1.152665   0.154333 0.002051   1.309049 172.043436   1.309049 0.896461 1977.339844 1972.917969   6   6 1.0    0       63     68     3         3       34      36 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 45   1  12  12 0.800110   0.094554 0.001797   0.896461 172.939897   0.896461 0.312991 1976.503906 1972.082031   4   4 1.0    0       69     72     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 45   1  13  13 0.275898   0.037093 0.000000   0.312991 173.252888   0.312991 0.484570 1979.714844 1975.343750   1   1 1.0    0       73     73     1         1       40      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  14  14 0.434411   0.050159 0.000000   0.484570 173.737458   0.484570 0.317890 1979.777344 1975.343750   2   2 1.0    0       74     75     1         1       41      41 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  15  15 0.277551   0.040338 0.000000   0.317890 174.055348   0.317890 0.316227 1979.777344 1975.343750   1   1 1.0    0       76     76     1         1       42      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  16  16 0.276800   0.039427 0.000000   0.316227 174.371575   0.316227 0.677593 1979.777344 1975.343750   1   1 1.0    0       77     77     1         1       43      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  17  17 0.602238   0.074359 0.000996   0.677593 175.049168   0.677593 0.498670 1979.808594 1975.343750   3   3 1.0    0       78     80     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 45   1  18  18 0.437043   0.060743 0.000884   0.498670 175.547838   0.498670 2.474298 1980.808594 1976.343750   2   2 1.0    0       81     82     2         2       46      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  19  19 0.437322   2.036976 0.000000   2.474298 178.022136   2.474298 0.312964 1984.000000 1979.605469   2   2 1.0    0       83     84     1         1       48      48 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  20  20 0.273588   0.039376 0.000000   0.312964 178.335100   0.312964 0.313102 1984.000000 1979.605469   1   1 1.0    0       85     85     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  21  21 0.276029   0.037072 0.000000   0.313102 178.648202   0.313102 0.487763 1984.000000 1979.605469   1   1 1.0    0       86     86     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  22  22 0.438080   0.049683 0.000000   0.487763 179.135965   0.487763 0.489182 1984.125000 1979.605469   2   2 1.0    0       87     88     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1  23  23 0.436340   0.051938 0.000904   0.489182 179.625147   0.489182 0.669500 1984.125000 1979.605469   2   2 1.0    0       89     90     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  24  24 0.600859   0.066433 0.002209   0.669500 180.294648   0.669500 0.000000 1984.316406 1979.855469   3   3 1.0    0       91     93     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 46   3   1   1 3.671091 120.137669 0.000000 123.808760 123.808760 123.808760 0.000000 2011.277344 2011.839844  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   2   1   1 3.158348   0.993543 0.006323   4.158214 127.966974 127.966974 1.293514 2036.199219 2043.507812  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.338092 3.338092 1.062120 1.062120  0.245888  0.245888            0            1
 46   2   2   2 1.072756   0.215224 0.005534   1.293514 129.260487   1.293514 1.670939 2012.570312 2008.585938   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 46   2   3   3 1.357080   0.308176 0.005684   1.670939 130.931426   1.670939 2.663647 2019.855469 2015.761719  10  10 1.0   10       31     40     7         7       15      21 1.428571 1.428571 1.133893 1.133893 0.793725 0.793725  0.610492  0.610492            0            2
 46   2   4   4 2.101664   0.553647 0.008336   2.663647 133.595073   2.663647 0.000000 2038.601562 2040.332031  15  15 1.0   15       41     55     8         8       22      29 1.875000 1.875000 1.246423 1.246423 0.664759 0.664759  0.610790  0.610790            0            3
 46   1   1   1 1.182752   0.189500 0.002064   1.374316 129.341290 129.341290 3.087496 2002.011719 1998.960938   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   2   2 1.552282   0.239427 0.002274   1.793983 132.428786   3.087496 2.984759 2003.589844 1999.789062   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 46   1   3   3 1.157743   0.153299 0.002778   1.313820 135.413545   2.984759 4.037985 1998.535156 1993.394531   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 46   1   4   4 1.183949   0.187684 0.002705   1.374338 139.451530   4.037985 1.829153 2000.351562 1995.441406   6   6 1.0    0       21     26     4         4       11      14 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 46   1   5   5 1.563493   0.262715 0.002945   1.829153 141.280683   1.829153 1.375463 2009.609375 2004.566406   8   8 1.0    0       27     34     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 46   1   6   6 1.182378   0.190311 0.002774   1.375463 142.656147   1.375463 0.325519 2004.417969 1999.445312   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 46   1   7   7 0.277543   0.047976 0.000000   0.325519 142.981666   0.325519 0.324981 2005.140625 1999.945312   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1   8   8 0.277831   0.047150 0.000000   0.324981 143.306647   0.324981 0.325009 2005.140625 1999.945312   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1   9   9 0.278091   0.046918 0.000000   0.325009 143.631655   0.325009 0.499214 2005.140625 1999.945312   1   1 1.0    0       43     43     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  10  10 0.437625   0.061589 0.000000   0.499214 144.130869   0.499214 0.502448 2005.140625 1999.945312   2   2 1.0    0       44     45     1         1       26      26 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  11  11 0.436719   0.064799 0.000929   0.502448 144.633317   0.502448 0.674035 2005.140625 1999.945312   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 46   1  12  12 0.602537   0.070464 0.001034   0.674035 145.307352   0.674035 0.316585 2005.140625 1999.945312   3   3 1.0    0       48     50     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 46   1  13  13 0.276805   0.039780 0.000000   0.316585 145.623937   0.316585 0.313724 2008.140625 2002.957031   1   1 1.0    0       51     51     1         1       31      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  14  14 0.276496   0.037228 0.000000   0.313724 145.937661   0.313724 0.674354 2008.140625 2002.957031   1   1 1.0    0       52     52     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  15  15 0.600956   0.072396 0.001002   0.674354 146.612015   0.674354 0.500664 2008.140625 2002.957031   3   3 1.0    0       53     55     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 46   1  16  16 0.439641   0.060105 0.000918   0.500664 147.112679   0.500664 0.497478 2008.394531 2003.207031   2   2 1.0    0       56     57     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  17  17 0.438922   0.057673 0.000883   0.497478 147.610157   0.497478 1.113102 2008.894531 2003.707031   2   2 1.0    0       58     59     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  18  18 0.984341   0.127572 0.001189   1.113102 148.723259   1.113102 0.498608 2010.855469 2005.667969   5   5 1.0    0       60     64     2         2       39      40 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 46   1  19  19 0.441093   0.056583 0.000932   0.498608 149.221867   0.498608 2.026022 2013.050781 2008.000000   2   2 1.0    0       65     66     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  20  20 1.751825   0.273106 0.001091   2.026022 151.247889   2.026022 0.491363 2022.859375 2017.781250   9   9 1.0    0       67     75     2         2       43      44 4.500000 4.500000 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 46   1  21  21 0.435146   0.055233 0.000984   0.491363 151.739252   0.491363 1.326061 2013.925781 2008.750000   2   2 1.0    0       76     77     2         2       45      46 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   1  22  22 1.171478   0.152627 0.001956   1.326061 153.065313   1.326061 1.103727 2016.187500 2011.070312   6   6 1.0    0       78     83     3         3       47      49 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 46   1  23  23 0.970895   0.130756 0.002076   1.103727 154.169040   1.103727 1.110774 2017.050781 2011.929688   5   5 1.0    0       84     88     3         3       50      52 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            1
 46   1  24  24 0.971791   0.135648 0.003336   1.110774 155.279815   1.110774 0.000000 2018.351562 2013.390625   5   5 1.0    0       89     93     3         3       53      55 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 47   3   1   1 3.672383 135.757499 0.000000 139.429882 139.429882 139.429882 0.000000 2041.726562 2042.292969  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   2   1   1 3.198243   3.087992 0.006188   6.292423 145.722305 145.722305 1.286020 2021.386719 2030.953125  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.184785 3.184785 1.013341 1.013341  0.264377  0.264377            0            1
 47   2   2   2 1.070471   0.209718 0.005831   1.286020 147.008325   1.286020 3.209254 2012.343750 2011.523438   8   8 1.0    8       23     30     7         7        8      14 1.142857 1.142857 0.377964 0.377964 0.330719 0.330719  0.835240  0.835240            0            3
 47   2   3   3 2.425367   0.777744 0.006143   3.209254 150.217579   3.209254 1.324110 2048.320312 2056.855469  17  17 1.0   17       31     47     7         7       15      21 2.428571 2.428571 1.272418 1.272418 0.523937 0.523937  0.578169  0.578169            0            2
 47   2   4   4 1.080185   0.236569 0.007355   1.324110 151.541689   1.324110 0.000000 2035.484375 2034.675781   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            3
 47   1   1   1 1.183717   0.189625 0.002099   1.375442 147.097747 147.097747 3.073224 1991.066406 1993.339844   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   2   2 1.557966   0.227104 0.002134   1.787204 150.170971   3.073224 4.523114 1994.511719 1995.343750   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 47   1   3   3 1.157716   0.153269 0.002874   1.313860 154.694085   4.523114 2.952748 1990.714844 1990.457031   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 47   1   4   4 1.387860   0.237996 0.002783   1.628638 157.646833   2.952748 1.559579 2001.812500 2002.140625   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 47   1   5   5 1.351094   0.205564 0.002920   1.559579 159.206412   1.559579 1.368869 1998.699219 1997.226562   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 47   1   6   6 1.184442   0.181460 0.002967   1.368869 160.575280   1.368869 0.313249 2001.175781 1999.441406   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 47   1   7   7 0.276577   0.036672 0.000000   0.313249 160.888530   0.313249 0.314296 2005.066406 2003.062500   1   1 1.0    0       41     41     1         1       23      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   8   8 0.277098   0.037197 0.000000   0.314296 161.202825   0.314296 0.314676 2005.128906 2003.105469   1   1 1.0    0       42     42     1         1       24      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1   9   9 0.275055   0.039621 0.000000   0.314676 161.517501   0.314676 0.491006 2005.207031 2003.199219   1   1 1.0    0       43     43     1         1       25      25 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  10  10 0.436674   0.054333 0.000000   0.491006 162.008507   0.491006 0.502256 2005.597656 2003.652344   2   2 1.0    0       44     45     1         1       26      26 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  11  11 0.437146   0.064200 0.000911   0.502256 162.510763   0.502256 0.496821 2007.261719 2005.371094   2   2 1.0    0       46     47     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 47   1  12  12 0.437854   0.058123 0.000844   0.496821 163.007584   0.496821 0.503346 2008.261719 2006.390625   2   2 1.0    0       48     49     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  13  13 0.437243   0.065249 0.000853   0.503346 163.510930   0.503346 1.386213 2014.300781 2012.414062   2   2 1.0    0       50     51     2         2       31      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  14  14 1.183476   0.200885 0.001852   1.386213 164.897143   1.386213 1.830335 2022.914062 2021.097656   6   6 1.0    0       52     57     3         3       33      35 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            0
 47   1  15  15 1.565962   0.262222 0.002152   1.830335 166.727478   1.830335 0.882629 2026.695312 2026.292969   8   8 1.0    0       58     65     3         3       36      38 2.666667 2.666667 1.527525 1.527525 0.572822 0.572822  0.155989  0.155989            0            0
 47   1  16  16 0.781796   0.098885 0.001947   0.882629 167.610106   0.882629 1.360238 2018.191406 2015.898438   4   4 1.0    0       66     69     3         3       39      41 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 47   1  17  17 1.178731   0.179573 0.001934   1.360238 168.970345   1.360238 0.679559 2021.980469 2019.683594   6   6 1.0    0       70     75     3         3       42      44 2.000000 2.000000 1.000000 1.000000 0.500000 0.500000  0.369070  0.369070            0            1
 47   1  18  18 0.602507   0.075357 0.001696   0.679559 169.649904   0.679559 0.319463 2021.652344 2019.261719   3   3 1.0    0       76     78     3         3       45      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  19  19 0.277894   0.041569 0.000000   0.319463 169.969367   0.319463 0.488157 2024.964844 2022.585938   1   1 1.0    0       79     79     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  20  20 0.437064   0.051093 0.000000   0.488157 170.457523   0.488157 0.318291 2025.371094 2022.910156   2   2 1.0    0       80     81     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  21  21 0.277928   0.040363 0.000000   0.318291 170.775814   0.318291 0.484854 2025.476562 2022.949219   1   1 1.0    0       82     82     1         1       50      50 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  22  22 0.438260   0.046593 0.000000   0.484854 171.260668   0.484854 0.493229 2025.550781 2022.949219   2   2 1.0    0       83     84     1         1       51      51 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1  23  23 0.440494   0.051829 0.000906   0.493229 171.753897   0.493229 0.670942 2025.648438 2023.046875   2   2 1.0    0       85     86     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 47   1  24  24 0.601651   0.067147 0.002143   0.670942 172.424838   0.670942 0.000000 2026.105469 2023.546875   3   3 1.0    0       87     89     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 48   3   1   1 3.683774 147.696386 0.000000 151.380160 151.380160 151.380160 0.000000 2071.332031 2072.765625  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   2   1   1 3.166404   1.069414 0.006363   4.242181 155.622341 155.622341 2.315188 2100.679688 2108.640625  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.236694 3.236694 1.029857 1.029857  0.258042  0.258042            0            1
 48   2   2   2 1.804315   0.504911 0.005962   2.315188 157.937528   2.315188 1.739541 2081.316406 2082.214844  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 0.899735 0.899735 0.484473 0.484473  0.670224  0.670224            0            2
 48   2   3   3 1.460608   0.273035 0.005899   1.739541 159.677070   1.739541 1.466468 2083.007812 2080.144531  11  11 1.0   11       36     46     7         7       15      21 1.571429 1.571429 1.133893 1.133893 0.721569 0.721569  0.610492  0.610492            0            2
 48   2   4   4 1.210836   0.247949 0.007683   1.466468 161.143538   1.466468 0.000000 2088.281250 2084.328125   9   9 1.0    9       47     55     8         8       22      29 1.125000 1.125000 0.353553 0.353553 0.314270 0.314270  0.854416  0.854416            0            4
 48   1   1   1 1.184087   0.187634 0.002138   1.373859 156.996200 156.996200 4.100274 2063.652344 2061.457031   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   2   2 1.555271   0.227609 0.002207   1.785086 161.096474   4.100274 3.058075 2064.437500 2061.359375   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 48   1   3   3 1.160861   0.154868 0.002805   1.318534 164.154549   3.058075 5.166135 2059.488281 2055.214844   6   6 1.0    0       15     20     4         4        7      10 1.500000 1.500000 1.000000 1.000000 0.666667 0.666667  0.500000  0.500000            0            0
 48   1   4   4 1.383144   2.313464 0.003058   3.699667 169.320684   5.166135 1.546792 2066.625000 2063.371094   7   7 1.0    0       21     27     4         4       11      14 1.750000 1.750000 0.500000 0.500000 0.285714 0.285714  0.707519  0.707519            0            0
 48   1   5   5 1.347962   0.195854 0.002975   1.546792 170.867476   1.546792 1.377292 2061.332031 2056.886719   7   7 1.0    0       28     34     4         4       15      18 1.750000 1.750000 0.957427 0.957427 0.547101 0.547101  0.515521  0.515521            0            0
 48   1   6   6 1.182744   0.191609 0.002939   1.377292 172.244768   1.377292 0.504952 2063.937500 2059.675781   6   6 1.0    0       35     40     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 48   1   7   7 0.437600   0.066347 0.001006   0.504952 172.749720   0.504952 0.507011 2066.328125 2062.128906   2   2 1.0    0       41     42     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1   8   8 0.437771   0.068231 0.001009   0.507011 173.256731   0.507011 0.507336 2066.339844 2062.128906   2   2 1.0    0       43     44     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1   9   9 0.438737   0.067613 0.000986   0.507336 173.764067   0.507336 0.678691 2066.339844 2062.128906   2   2 1.0    0       45     46     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  10  10 0.600497   0.077230 0.000964   0.678691 174.442757   0.678691 0.897908 2066.339844 2062.128906   3   3 1.0    0       47     49     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 48   1  11  11 0.798826   0.098202 0.000880   0.897908 175.340666   0.897908 1.810482 2066.605469 2062.128906   4   4 1.0    0       50     53     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 48   1  12  12 1.557875   0.250603 0.002004   1.810482 177.151147   1.810482 0.319845 2077.730469 2074.792969   8   8 1.0    0       54     61     3         3       33      35 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 48   1  13  13 0.277609   0.042236 0.000000   0.319845 177.470992   0.319845 0.675096 2071.984375 2067.394531   1   1 1.0    0       62     62     1         1       36      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  14  14 0.601781   0.072277 0.001038   0.675096 178.146087   0.675096 0.893555 2071.984375 2067.394531   3   3 1.0    0       63     65     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 48   1  15  15 0.801006   0.091256 0.001292   0.893555 179.039642   0.893555 1.114162 2071.984375 2067.394531   4   4 1.0    0       66     69     2         2       39      40 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 48   1  16  16 0.976465   0.136796 0.000901   1.114162 180.153804   1.114162 0.676518 2074.050781 2069.566406   5   5 1.0    0       70     74     2         2       41      42 2.500000 2.500000 2.121320 2.121320 0.848528 0.848528 -0.642156 -0.642156            0            1
 48   1  17  17 0.599511   0.076060 0.000947   0.676518 180.830322   0.676518 0.672939 2073.503906 2068.894531   3   3 1.0    0       75     77     2         2       43      44 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 48   1  18  18 0.602695   0.069208 0.001036   0.672939 181.503261   0.672939 0.309628 2074.003906 2069.394531   3   3 1.0    0       78     80     2         2       45      46 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 48   1  19  19 0.275087   0.034541 0.000000   0.309628 181.812888   0.309628 0.317195 2077.878906 2073.402344   1   1 1.0    0       81     81     1         1       47      47 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  20  20 0.276230   0.040965 0.000000   0.317195 182.130083   0.317195 0.487885 2077.878906 2073.402344   1   1 1.0    0       82     82     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  21  21 0.437568   0.050318 0.000000   0.487885 182.617968   0.487885 0.493499 2077.878906 2073.402344   2   2 1.0    0       83     84     1         1       49      49 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   1  22  22 0.436917   0.055679 0.000904   0.493499 183.111468   0.493499 0.487956 2078.003906 2073.402344   2   2 1.0    0       85     86     2         2       50      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  23  23 0.436016   0.051036 0.000904   0.487956 183.599423   0.487956 0.669918 2078.003906 2073.402344   2   2 1.0    0       87     88     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1  24  24 0.599736   0.068045 0.002137   0.669918 184.269341   0.669918 0.000000 2078.695312 2074.152344   3   3 1.0    0       89     91     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 49   3   1   1 3.679418 152.489762 0.000000 156.169180 156.169180 156.169180 0.000000 2103.734375 2104.250000  29  29 1.0   29        1     29     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   2   1   1 3.142877   1.022109 0.006219   4.171204 160.340384 160.340384 2.260604 2127.785156 2136.640625  22  22 1.0   22        1     22     7         7        1       7 3.142857 3.142857 3.132016 3.132016 0.996551 0.996551  0.270899  0.270899            0            1
 49   2   2   2 1.806023   0.448830 0.005751   2.260604 162.600988   2.260604 1.913858 2114.839844 2115.664062  13  13 1.0   13       23     35     7         7        8      14 1.857143 1.857143 0.899735 0.899735 0.484473 0.484473  0.670224  0.670224            0            2
 49   2   3   3 1.605827   0.302441 0.005590   1.913858 164.514845   1.913858 1.293809 2117.718750 2113.457031  12  12 1.0   12       36     47     7         7       15      21 1.714286 1.714286 1.112697 1.112697 0.649073 0.649073  0.615622  0.615622            0            2
 49   2   4   4 1.073803   0.212535 0.007471   1.293809 165.808655   1.293809 0.000000 2119.730469 2115.453125   8   8 1.0    8       48     55     8         8       22      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            4
 49   1   1   1 1.182967   0.187590 0.001931   1.372489 161.712873 161.712873 4.044753 2094.417969 2091.574219   6   6 1.0    0        1      6     3         3        1       3 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   2   2 1.554932   0.227142 0.002076   1.784149 165.757626   4.044753 2.784223 2096.187500 2092.648438   8   8 1.0    0        7     14     3         3        4       6 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 49   1   3   3 0.780169   0.087603 0.002593   0.870365 168.541848   2.784223 2.674682 2089.753906 2084.792969   4   4 1.0    0       15     18     4         4        7      10 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   4   4 1.189063   0.188920 0.002890   1.380873 171.216530   2.674682 1.830434 2092.632812 2087.804688   6   6 1.0    0       19     24     4         4       11      14 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            0
 49   1   5   5 1.565826   0.261739 0.002869   1.830434 173.046965   1.830434 1.373938 2101.843750 2097.187500   8   8 1.0    0       25     32     4         4       15      18 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.569421  0.569421            0            0
 49   1   6   6 1.181738   0.189400 0.002799   1.373938 174.420902   1.373938 2.637172 2096.781250 2091.804688   6   6 1.0    0       33     38     4         4       19      22 1.500000 1.500000 0.577350 0.577350 0.384900 0.384900  0.671248  0.671248            0            1
 49   1   7   7 0.436613   2.199590 0.000969   2.637172 177.058074   2.637172 0.497087 2099.640625 2095.253906   2   2 1.0    0       39     40     2         2       23      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1   8   8 0.437376   0.058880 0.000831   0.497087 177.555161   0.497087 0.499261 2099.640625 2095.253906   2   2 1.0    0       41     42     2         2       25      26 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   9   9 0.438957   0.059365 0.000939   0.499261 178.054422   0.499261 0.674889 2099.640625 2095.253906   2   2 1.0    0       43     44     2         2       27      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  10  10 0.600606   0.073280 0.001003   0.674889 178.729311   0.674889 0.891839 2099.644531 2095.253906   3   3 1.0    0       45     47     2         2       29      30 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 49   1  11  11 0.798728   0.092219 0.000892   0.891839 179.621150   0.891839 1.804023 2099.742188 2095.253906   4   4 1.0    0       48     51     2         2       31      32 2.000000 2.000000 1.414214 1.414214 0.707107 0.707107 -0.271553 -0.271553            0            0
 49   1  12  12 1.556230   0.245627 0.002166   1.804023 181.425173   1.804023 0.494975 2110.703125 2107.234375   8   8 1.0    0       52     59     3         3       33      35 2.666667 2.666667 2.886751 2.886751 1.082532 1.082532 -0.235717 -0.235717            0            0
 49   1  13  13 0.437881   0.056263 0.000831   0.494975 181.920148   0.494975 1.098485 2105.675781 2101.015625   2   2 1.0    0       60     61     2         2       36      37 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  14  14 0.982251   0.115153 0.001082   1.098485 183.018633   1.098485 0.692238 2106.851562 2102.191406   5   5 1.0    0       62     66     2         2       38      39 2.500000 2.500000 0.707107 0.707107 0.282843 0.282843  0.228447  0.228447            0            0
 49   1  15  15 0.620455   0.070803 0.000980   0.692238 183.710871   0.692238 0.488249 2105.832031 2101.015625   3   3 1.0    0       67     69     2         2       40      41 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 49   1  16  16 0.434355   0.052981 0.000914   0.488249 184.199120   0.488249 0.683821 2105.894531 2101.015625   2   2 1.0    0       70     71     2         2       42      43 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  17  17 0.605439   0.077342 0.001040   0.683821 184.882941   0.683821 0.671555 2106.332031 2101.515625   3   3 1.0    0       72     74     2         2       44      45 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 49   1  18  18 0.602737   0.067760 0.001057   0.671555 185.554496   0.671555 0.315794 2107.019531 2102.265625   3   3 1.0    0       75     77     2         2       46      47 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 49   1  19  19 0.275741   0.040053 0.000000   0.315794 185.870290   0.315794 0.316663 2110.601562 2105.781250   1   1 1.0    0       78     78     1         1       48      48 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  20  20 0.276838   0.039824 0.000000   0.316663 186.186953   0.316663 0.496189 2110.664062 2105.781250   1   1 1.0    0       79     79     1         1       49      49 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  21  21 0.443353   0.052836 0.000000   0.496189 186.683142   0.496189 0.322053 2110.664062 2105.781250   2   2 1.0    0       80     81     1         1       50      50 2.000000 2.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1  22  22 0.281995   0.040059 0.000000   0.322053 187.005195   0.322053 0.500036 2110.671875 2105.781250   1   1 1.0    0       82     82     1         1       51      51 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  23  23 0.443545   0.055647 0.000845   0.500036 187.505232   0.500036 0.684053 2110.683594 2106.031250   2   2 1.0    0       83     84     2         2       52      53 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 49   1  24  24 0.611627   0.070289 0.002137   0.684053 188.189285   0.684053 0.000000 2111.425781 2106.531250   3   3 1.0    0       85     87     2         2       54      55 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0

[02-03-2022_00-42-19] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-03-01_21-57-13_PL1_hcr_online_4_6_yield_preach_opt.xlsx

[02-03-2022_00-42-25] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-03-01_21-57-13_PL1_hcr_online_4_6_yield_preach_opt.dat

[02-03-2022_00-42-26] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-03-01_21-57-13_PL1_hcr_online_4_6_yield_preach_opt.png

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[02-03-2022_00-42-26] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[02-03-2022_00-42-29] INFO :: __main__ >> Overall time: Real = 9916.7379477, Process = 46494.03125

[02-03-2022_00-42-29] INFO :: __main__ >> Exiting with code 0

