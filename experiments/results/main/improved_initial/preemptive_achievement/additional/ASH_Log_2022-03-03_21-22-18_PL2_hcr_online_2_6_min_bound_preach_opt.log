[03-03-2022_22-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=19']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002628F252430>]
	incrementor = SolveIncrementor(step_start=16, step_increase=1, step_increase_initial=4, step_end_min=20, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1785.7168905000003, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 16), range_=None), IncPart(name='plan_module', args=('#inc', 16, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 16, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 16, 5, 8, 'sequential', 'false'), range_=None)]

[03-03-2022_22-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 822 rules

[03-03-2022_22-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0047559999998156854s

[03-03-2022_22-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-29-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115952s.

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022092s with result Satisfiable.

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002628EF09810>

[03-03-2022_22-29-26] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 16)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 5)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002628EF09810>)

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 16). %* None *%
#program plan_module(#inc, 16, false, false). %* None *%
#program optimisation_module(#inc, 16, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 16, 5, 8, sequential, false). %* None *%

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     15 : Current =     19
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(16), Number(16)]), ('plan_module', [Number(16), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(17), Number(16)]), ('plan_module', [Number(17), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(18), Number(16)]), ('plan_module', [Number(18), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(19), Number(16)]), ('plan_module', [Number(19), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.654590s.

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.155762s with result Satisfiable.

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8103512999996383, Incremental time limit = None
Running cumulative time = 0.8103512999996383, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2176.660156Mb, VMS = 2195.070312Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.654590s, Solving = 0.155762s, Total = 0.810351s, Memory = (RSS = 2176.660156Mb, VMS = 2195.070312Mb), Step range = [16-19]), Calls = 1
Final Model :: Total atoms = 21423, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(16)]), ('plan_module', [Number(20), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.219638s.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023944s with result Unsatisfiable.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24358280000024024, Incremental time limit = None
Running cumulative time = 1.0539340999998785, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2176.871094Mb, VMS = 2195.285156Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(16)]), ('plan_module', [Number(21), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.247172s.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033770s with result Unsatisfiable.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28094240000018544, Incremental time limit = None
Running cumulative time = 1.334876500000064, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2178.101562Mb, VMS = 2196.800781Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(16)]), ('plan_module', [Number(22), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261438s.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043602s with result Unsatisfiable.

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30504019999989396, Incremental time limit = None
Running cumulative time = 1.639916699999958, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2185.562500Mb, VMS = 2205.753906Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(16)]), ('plan_module', [Number(23), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274710s.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045845s with result Unsatisfiable.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32055579999996553, Incremental time limit = None
Running cumulative time = 1.9604724999999235, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2188.558594Mb, VMS = 2207.714844Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(16)]), ('plan_module', [Number(24), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.281673s.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050374s with result Unsatisfiable.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33204699999987497, Incremental time limit = None
Running cumulative time = 2.2925194999997984, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2190.988281Mb, VMS = 2212.500000Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(16)]), ('plan_module', [Number(25), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.308705s.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055352s with result Unsatisfiable.

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3640563999997539, Incremental time limit = None
Running cumulative time = 2.6565758999995523, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2193.066406Mb, VMS = 2213.589844Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(16)]), ('plan_module', [Number(26), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.298374s.

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054522s with result Unsatisfiable.

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3528955000001588, Incremental time limit = None
Running cumulative time = 3.009471399999711, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2195.316406Mb, VMS = 2214.855469Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(16)]), ('plan_module', [Number(27), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.296920s.

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062916s with result Unsatisfiable.

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3598367999998118, Incremental time limit = None
Running cumulative time = 3.369308199999523, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2203.421875Mb, VMS = 2229.500000Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(16)]), ('plan_module', [Number(28), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.305699s.

[03-03-2022_22-29-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083795s with result Unsatisfiable.

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3894940999998653, Incremental time limit = None
Running cumulative time = 3.758802299999388, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2206.300781Mb, VMS = 2230.062500Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(16)]), ('plan_module', [Number(29), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.330534s.

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.112206s with result Unsatisfiable.

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.44273930000008477, Incremental time limit = None
Running cumulative time = 4.201541599999473, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2209.382812Mb, VMS = 2230.621094Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(16)]), ('plan_module', [Number(30), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306942s.

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.136822s with result Unsatisfiable.

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.44376370000009047, Incremental time limit = None
Running cumulative time = 4.645305299999563, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2212.046875Mb, VMS = 2233.042969Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     20 : Maximum =    300

[03-03-2022_22-29-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(16)]), ('plan_module', [Number(31), Number(16), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(16), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(16), Number(5), Number(8), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.328300s.

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.233350s with result Satisfiable.

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5616509000001315, Incremental time limit = None
Running cumulative time = 5.206956199999695, Cumulative time limit = 1785.7168905000003
Used memory = (RSS = 2218.781250Mb, VMS = 2250.726562Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.114695s, Solving = 1.092261s, Total = 5.206956s, Memory = (RSS = 2218.781250Mb, VMS = 2250.726562Mb), Step range = [16-31]), Calls = 13
Final Model :: Total atoms = 26206, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.654590s, Solving = 0.155762s, Total = 0.810351s, Memory = (RSS = 2176.660156Mb, VMS = 2195.070312Mb), Step range = [16-19]
2 : Statistics :: Grounding = 0.219638s, Solving = 0.023944s, Total = 0.243583s, Memory = (RSS = 2176.871094Mb, VMS = 2195.285156Mb), Step range = [20-20]
3 : Statistics :: Grounding = 0.247172s, Solving = 0.033770s, Total = 0.280942s, Memory = (RSS = 2178.101562Mb, VMS = 2196.800781Mb), Step range = [21-21]
4 : Statistics :: Grounding = 0.261438s, Solving = 0.043602s, Total = 0.305040s, Memory = (RSS = 2185.562500Mb, VMS = 2205.753906Mb), Step range = [22-22]
5 : Statistics :: Grounding = 0.274710s, Solving = 0.045845s, Total = 0.320556s, Memory = (RSS = 2188.558594Mb, VMS = 2207.714844Mb), Step range = [23-23]
6 : Statistics :: Grounding = 0.281673s, Solving = 0.050374s, Total = 0.332047s, Memory = (RSS = 2190.988281Mb, VMS = 2212.500000Mb), Step range = [24-24]
7 : Statistics :: Grounding = 0.308705s, Solving = 0.055352s, Total = 0.364056s, Memory = (RSS = 2193.066406Mb, VMS = 2213.589844Mb), Step range = [25-25]
8 : Statistics :: Grounding = 0.298374s, Solving = 0.054522s, Total = 0.352896s, Memory = (RSS = 2195.316406Mb, VMS = 2214.855469Mb), Step range = [26-26]
9 : Statistics :: Grounding = 0.296920s, Solving = 0.062916s, Total = 0.359837s, Memory = (RSS = 2203.421875Mb, VMS = 2229.500000Mb), Step range = [27-27]
10 : Statistics :: Grounding = 0.305699s, Solving = 0.083795s, Total = 0.389494s, Memory = (RSS = 2206.300781Mb, VMS = 2230.062500Mb), Step range = [28-28]
11 : Statistics :: Grounding = 0.330534s, Solving = 0.112206s, Total = 0.442739s, Memory = (RSS = 2209.382812Mb, VMS = 2230.621094Mb), Step range = [29-29]
12 : Statistics :: Grounding = 0.306942s, Solving = 0.136822s, Total = 0.443764s, Memory = (RSS = 2212.046875Mb, VMS = 2233.042969Mb), Step range = [30-30]
13 : Statistics :: Grounding = 0.328300s, Solving = 0.233350s, Total = 0.561651s, Memory = (RSS = 2218.781250Mb, VMS = 2250.726562Mb), Step range = [31-31]

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.206956s due to: Stop condition reached.

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.114695s, Solving = 1.092261s, Total = 5.206956s, Memory = (RSS = 2218.781250Mb, VMS = 2250.726562Mb), Step range = [16-31]), Calls = 13
Model :: Total atoms = 26206, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 15 :: Actions = 15                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 24 : Goals achieved = 8 : Goals unachieved = 16 : Complete = False

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-1].

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 24, Sub-goal Stage Range = [1-24]
Division points [total=5] : [(Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 16, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-12]

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=31, step_range=range(0, 32)

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-12], problem number = 3, increment number = 3

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 12)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1795.7599964)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [9-12] : Concurrency disabled : Minimum search length bound enabled with value 34

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 12
start_step = 31
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 34

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-29-32] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-29-32] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 31 as problem start state.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 31})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,8,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,8,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,8,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,8,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,8,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,8,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 31})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,8,1)', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 31})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 31).
holds(1, complete_tower(red,puzzle_room_table), false, 31).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 31).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 31).
holds(1, configuration(manipulator_limb_1), retracted, 31).
holds(1, configuration(manipulator_limb_2), extended, 31).
holds(1, configuration(puzzle_room_door), open, 31).
holds(1, configuration(starting_room_door), closed, 31).
holds(1, configuration(store_room_door), open, 31).
holds(1, grasping(manipulator_arm_1), nothing, 31).
holds(1, grasping(manipulator_arm_2), nothing, 31).
holds(1, grasping(manipulator_end_1), nothing, 31).
holds(1, grasping(manipulator_end_2), nothing, 31).
holds(1, in((block,1)), (puzzle_room,5,0), 31).
holds(1, in((block,2)), (puzzle_room,5,0), 31).
holds(1, in((block,3)), (puzzle_room,5,0), 31).
holds(1, in((block,4)), (store_room,0,0), 31).
holds(1, in((block,5)), (store_room,0,0), 31).
holds(1, in((block,6)), (store_room,0,0), 31).
holds(1, in(manipulator_arm_1), (hallway,8,1), 31).
holds(1, in(manipulator_arm_2), (hallway,8,1), 31).
holds(1, in(manipulator_end_1), (hallway,8,1), 31).
holds(1, in(manipulator_end_2), (hallway,8,1), 31).
holds(1, in(manipulator_limb_1), (hallway,8,1), 31).
holds(1, in(manipulator_limb_2), (hallway,8,1), 31).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 31).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 31).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 31).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 31).
holds(1, in(talos), (hallway,8,1), 31).
holds(1, in_tower((block,1),(block,1)), true, 31).
holds(1, in_tower((block,1),(block,2)), false, 31).
holds(1, in_tower((block,1),(block,3)), true, 31).
holds(1, in_tower((block,1),(block,4)), false, 31).
holds(1, in_tower((block,1),(block,5)), false, 31).
holds(1, in_tower((block,1),(block,6)), false, 31).
holds(1, in_tower((block,2),(block,1)), false, 31).
holds(1, in_tower((block,2),(block,2)), true, 31).
holds(1, in_tower((block,2),(block,3)), false, 31).
holds(1, in_tower((block,2),(block,4)), false, 31).
holds(1, in_tower((block,2),(block,5)), false, 31).
holds(1, in_tower((block,2),(block,6)), false, 31).
holds(1, in_tower((block,3),(block,1)), false, 31).
holds(1, in_tower((block,3),(block,2)), false, 31).
holds(1, in_tower((block,3),(block,3)), false, 31).
holds(1, in_tower((block,3),(block,4)), false, 31).
holds(1, in_tower((block,3),(block,5)), false, 31).
holds(1, in_tower((block,3),(block,6)), false, 31).
holds(1, in_tower((block,4),(block,1)), false, 31).
holds(1, in_tower((block,4),(block,2)), false, 31).
holds(1, in_tower((block,4),(block,3)), false, 31).
holds(1, in_tower((block,4),(block,4)), false, 31).
holds(1, in_tower((block,4),(block,5)), false, 31).
holds(1, in_tower((block,4),(block,6)), false, 31).
holds(1, in_tower((block,5),(block,1)), false, 31).
holds(1, in_tower((block,5),(block,2)), false, 31).
holds(1, in_tower((block,5),(block,3)), false, 31).
holds(1, in_tower((block,5),(block,4)), false, 31).
holds(1, in_tower((block,5),(block,5)), false, 31).
holds(1, in_tower((block,5),(block,6)), false, 31).
holds(1, in_tower((block,6),(block,1)), false, 31).
holds(1, in_tower((block,6),(block,2)), false, 31).
holds(1, in_tower((block,6),(block,3)), false, 31).
holds(1, in_tower((block,6),(block,4)), false, 31).
holds(1, in_tower((block,6),(block,5)), false, 31).
holds(1, in_tower((block,6),(block,6)), false, 31).
holds(1, on((block,1)), puzzle_room_table_left, 31).
holds(1, on((block,2)), puzzle_room_table_right, 31).
holds(1, on((block,3)), (block,1), 31).
holds(1, on((block,4)), nothing, 31).
holds(1, on((block,5)), nothing, 31).
holds(1, on((block,6)), nothing, 31).
holds(1, tower_base((block,1),puzzle_room_table), true, 31).
holds(1, tower_base((block,2),puzzle_room_table), true, 31).
holds(1, tower_base((block,3),puzzle_room_table), false, 31).
holds(1, tower_base((block,4),puzzle_room_table), false, 31).
holds(1, tower_base((block,5),puzzle_room_table), false, 31).
holds(1, tower_base((block,6),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 31).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 31).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 31).
holds(2, complete_tower(blue,puzzle_room_table), false, 31).
holds(2, complete_tower(red,puzzle_room_table), false, 31).
holds(2, configuration(manipulator_arm_1), retracted, 31).
holds(2, configuration(manipulator_arm_2), extended, 31).
holds(2, configuration(puzzle_room_door), open, 31).
holds(2, configuration(starting_room_door), closed, 31).
holds(2, configuration(store_room_door), open, 31).
holds(2, grasping(manipulator_arm_1), nothing, 31).
holds(2, grasping(manipulator_arm_2), nothing, 31).
holds(2, in((block,1)), puzzle_room, 31).
holds(2, in((block,2)), puzzle_room, 31).
holds(2, in((block,3)), puzzle_room, 31).
holds(2, in((block,4)), store_room, 31).
holds(2, in((block,5)), store_room, 31).
holds(2, in((block,6)), store_room, 31).
holds(2, in(manipulator_arm_1), hallway, 31).
holds(2, in(manipulator_arm_2), hallway, 31).
holds(2, in(puzzle_room_table), puzzle_room, 31).
holds(2, in(talos), hallway, 31).
holds(2, in_tower((block,1),(block,1)), true, 31).
holds(2, in_tower((block,1),(block,2)), false, 31).
holds(2, in_tower((block,1),(block,3)), true, 31).
holds(2, in_tower((block,1),(block,4)), false, 31).
holds(2, in_tower((block,1),(block,5)), false, 31).
holds(2, in_tower((block,1),(block,6)), false, 31).
holds(2, in_tower((block,2),(block,1)), false, 31).
holds(2, in_tower((block,2),(block,2)), true, 31).
holds(2, in_tower((block,2),(block,3)), false, 31).
holds(2, in_tower((block,2),(block,4)), false, 31).
holds(2, in_tower((block,2),(block,5)), false, 31).
holds(2, in_tower((block,2),(block,6)), false, 31).
holds(2, in_tower((block,3),(block,1)), false, 31).
holds(2, in_tower((block,3),(block,2)), false, 31).
holds(2, in_tower((block,3),(block,3)), false, 31).
holds(2, in_tower((block,3),(block,4)), false, 31).
holds(2, in_tower((block,3),(block,5)), false, 31).
holds(2, in_tower((block,3),(block,6)), false, 31).
holds(2, in_tower((block,4),(block,1)), false, 31).
holds(2, in_tower((block,4),(block,2)), false, 31).
holds(2, in_tower((block,4),(block,3)), false, 31).
holds(2, in_tower((block,4),(block,4)), false, 31).
holds(2, in_tower((block,4),(block,5)), false, 31).
holds(2, in_tower((block,4),(block,6)), false, 31).
holds(2, in_tower((block,5),(block,1)), false, 31).
holds(2, in_tower((block,5),(block,2)), false, 31).
holds(2, in_tower((block,5),(block,3)), false, 31).
holds(2, in_tower((block,5),(block,4)), false, 31).
holds(2, in_tower((block,5),(block,5)), false, 31).
holds(2, in_tower((block,5),(block,6)), false, 31).
holds(2, in_tower((block,6),(block,1)), false, 31).
holds(2, in_tower((block,6),(block,2)), false, 31).
holds(2, in_tower((block,6),(block,3)), false, 31).
holds(2, in_tower((block,6),(block,4)), false, 31).
holds(2, in_tower((block,6),(block,5)), false, 31).
holds(2, in_tower((block,6),(block,6)), false, 31).
holds(2, on((block,1)), puzzle_room_table, 31).
holds(2, on((block,2)), puzzle_room_table, 31).
holds(2, on((block,3)), (block,1), 31).
holds(2, on((block,4)), nothing, 31).
holds(2, on((block,5)), nothing, 31).
holds(2, on((block,6)), nothing, 31).
holds(2, tower_base((block,1),puzzle_room_table), true, 31).
holds(2, tower_base((block,2),puzzle_room_table), true, 31).
holds(2, tower_base((block,3),puzzle_room_table), false, 31).
holds(2, tower_base((block,4),puzzle_room_table), false, 31).
holds(2, tower_base((block,5),puzzle_room_table), false, 31).
holds(2, tower_base((block,6),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 31).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 31).

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=34']

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 12})

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 9).
sub_goal(2, talos, move(store_room), in(talos), store_room, 10).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 12).

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=31, step_range=range(0, 32)

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 31, Total actions = 31, Produced sub-goal stages = 0

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=34']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002628F2529D0>]
	incrementor = SolveIncrementor(step_start=31, step_increase=1, step_increase_initial=4, step_end_min=35, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1780.5099343000006, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 31), range_=None), IncPart(name='plan_module', args=('#inc', 31, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 31, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 31, 9, 12, 'sequential', 'false'), range_=None)]

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 822 rules

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0046922000001359265s

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118534s.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023680s with result Satisfiable.

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002628F969B30>

[03-03-2022_22-29-32] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 31)
	('last_sgoals', 12)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 9)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002628F969B30>)

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 31). %* None *%
#program plan_module(#inc, 31, false, false). %* None *%
#program optimisation_module(#inc, 31, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 31, 9, 12, sequential, false). %* None *%

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     30 : Current =     34
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(31), Number(31)]), ('plan_module', [Number(31), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(31)]), ('plan_module', [Number(32), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(31)]), ('plan_module', [Number(33), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(31)]), ('plan_module', [Number(34), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.676458s.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.227320s with result Satisfiable.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9037772000001496, Incremental time limit = None
Running cumulative time = 0.9037772000001496, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2181.519531Mb, VMS = 2201.257812Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.676458s, Solving = 0.227320s, Total = 0.903777s, Memory = (RSS = 2181.519531Mb, VMS = 2201.257812Mb), Step range = [31-34]), Calls = 1
Final Model :: Total atoms = 21425, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(31)]), ('plan_module', [Number(35), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.231528s.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027489s with result Unsatisfiable.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25901680000015403, Incremental time limit = None
Running cumulative time = 1.1627940000003036, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2184.898438Mb, VMS = 2205.355469Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(31)]), ('plan_module', [Number(36), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.251982s.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037428s with result Unsatisfiable.

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28940949999969234, Incremental time limit = None
Running cumulative time = 1.452203499999996, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2187.234375Mb, VMS = 2206.875000Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(31)]), ('plan_module', [Number(37), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.263951s.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046397s with result Unsatisfiable.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31034790000012435, Incremental time limit = None
Running cumulative time = 1.7625514000001203, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2190.242188Mb, VMS = 2212.640625Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(31)]), ('plan_module', [Number(38), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280127s.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046047s with result Unsatisfiable.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3261734999996406, Incremental time limit = None
Running cumulative time = 2.088724899999761, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2186.742188Mb, VMS = 2213.195312Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(31)]), ('plan_module', [Number(39), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286620s.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057865s with result Unsatisfiable.

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34448429999974906, Incremental time limit = None
Running cumulative time = 2.43320919999951, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2189.128906Mb, VMS = 2213.753906Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(31)]), ('plan_module', [Number(40), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.290298s.

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061836s with result Unsatisfiable.

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3521338000000469, Incremental time limit = None
Running cumulative time = 2.785342999999557, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2191.769531Mb, VMS = 2221.359375Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(31)]), ('plan_module', [Number(41), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.305681s.

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073888s with result Unsatisfiable.

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3795691000000261, Incremental time limit = None
Running cumulative time = 3.164912099999583, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2194.148438Mb, VMS = 2221.925781Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(31)]), ('plan_module', [Number(42), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.316523s.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070585s with result Unsatisfiable.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38710770000034245, Incremental time limit = None
Running cumulative time = 3.5520197999999255, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2197.488281Mb, VMS = 2223.898438Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(31)]), ('plan_module', [Number(43), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.303471s.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.076719s with result Unsatisfiable.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38018970000030095, Incremental time limit = None
Running cumulative time = 3.9322095000002264, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2199.976562Mb, VMS = 2224.460938Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(31)]), ('plan_module', [Number(44), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.309937s.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080359s with result Unsatisfiable.

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3902957999998762, Incremental time limit = None
Running cumulative time = 4.322505300000103, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2208.820312Mb, VMS = 2243.519531Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(31)]), ('plan_module', [Number(45), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311674s.

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.101123s with result Unsatisfiable.

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.41279679999979635, Incremental time limit = None
Running cumulative time = 4.735302099999899, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2211.746094Mb, VMS = 2244.875000Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(31)]), ('plan_module', [Number(46), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.315407s.

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.111388s with result Unsatisfiable.

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4267950000003111, Incremental time limit = None
Running cumulative time = 5.16209710000021, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2214.589844Mb, VMS = 2245.433594Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(31)]), ('plan_module', [Number(47), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.318360s.

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.125856s with result Unsatisfiable.

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4442161000001761, Incremental time limit = None
Running cumulative time = 5.606313200000386, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2217.359375Mb, VMS = 2246.695312Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(31)]), ('plan_module', [Number(48), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.330087s.

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.111572s with result Unsatisfiable.

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.44165849999990314, Incremental time limit = None
Running cumulative time = 6.047971700000289, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2220.410156Mb, VMS = 2247.257812Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(31)]), ('plan_module', [Number(49), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.330783s.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.145706s with result Unsatisfiable.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.47648879999997007, Incremental time limit = None
Running cumulative time = 6.524460500000259, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2223.105469Mb, VMS = 2247.816406Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =     35 : Maximum =    300

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(31)]), ('plan_module', [Number(50), Number(31), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(31), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(31), Number(9), Number(12), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.320735s.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.236488s with result Satisfiable.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5572229000003972, Incremental time limit = None
Running cumulative time = 7.0816834000006565, Cumulative time limit = 1780.5099343000006
Used memory = (RSS = 2234.800781Mb, VMS = 2277.953125Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.443620s, Solving = 1.638063s, Total = 7.081683s, Memory = (RSS = 2234.800781Mb, VMS = 2277.953125Mb), Step range = [31-50]), Calls = 17
Final Model :: Total atoms = 27797, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.676458s, Solving = 0.227320s, Total = 0.903777s, Memory = (RSS = 2181.519531Mb, VMS = 2201.257812Mb), Step range = [31-34]
2 : Statistics :: Grounding = 0.231528s, Solving = 0.027489s, Total = 0.259017s, Memory = (RSS = 2184.898438Mb, VMS = 2205.355469Mb), Step range = [35-35]
3 : Statistics :: Grounding = 0.251982s, Solving = 0.037428s, Total = 0.289409s, Memory = (RSS = 2187.234375Mb, VMS = 2206.875000Mb), Step range = [36-36]
4 : Statistics :: Grounding = 0.263951s, Solving = 0.046397s, Total = 0.310348s, Memory = (RSS = 2190.242188Mb, VMS = 2212.640625Mb), Step range = [37-37]
5 : Statistics :: Grounding = 0.280127s, Solving = 0.046047s, Total = 0.326173s, Memory = (RSS = 2186.742188Mb, VMS = 2213.195312Mb), Step range = [38-38]
6 : Statistics :: Grounding = 0.286620s, Solving = 0.057865s, Total = 0.344484s, Memory = (RSS = 2189.128906Mb, VMS = 2213.753906Mb), Step range = [39-39]
7 : Statistics :: Grounding = 0.290298s, Solving = 0.061836s, Total = 0.352134s, Memory = (RSS = 2191.769531Mb, VMS = 2221.359375Mb), Step range = [40-40]
8 : Statistics :: Grounding = 0.305681s, Solving = 0.073888s, Total = 0.379569s, Memory = (RSS = 2194.148438Mb, VMS = 2221.925781Mb), Step range = [41-41]
9 : Statistics :: Grounding = 0.316523s, Solving = 0.070585s, Total = 0.387108s, Memory = (RSS = 2197.488281Mb, VMS = 2223.898438Mb), Step range = [42-42]
10 : Statistics :: Grounding = 0.303471s, Solving = 0.076719s, Total = 0.380190s, Memory = (RSS = 2199.976562Mb, VMS = 2224.460938Mb), Step range = [43-43]
11 : Statistics :: Grounding = 0.309937s, Solving = 0.080359s, Total = 0.390296s, Memory = (RSS = 2208.820312Mb, VMS = 2243.519531Mb), Step range = [44-44]
12 : Statistics :: Grounding = 0.311674s, Solving = 0.101123s, Total = 0.412797s, Memory = (RSS = 2211.746094Mb, VMS = 2244.875000Mb), Step range = [45-45]
13 : Statistics :: Grounding = 0.315407s, Solving = 0.111388s, Total = 0.426795s, Memory = (RSS = 2214.589844Mb, VMS = 2245.433594Mb), Step range = [46-46]
14 : Statistics :: Grounding = 0.318360s, Solving = 0.125856s, Total = 0.444216s, Memory = (RSS = 2217.359375Mb, VMS = 2246.695312Mb), Step range = [47-47]
15 : Statistics :: Grounding = 0.330087s, Solving = 0.111572s, Total = 0.441658s, Memory = (RSS = 2220.410156Mb, VMS = 2247.257812Mb), Step range = [48-48]
16 : Statistics :: Grounding = 0.330783s, Solving = 0.145706s, Total = 0.476489s, Memory = (RSS = 2223.105469Mb, VMS = 2247.816406Mb), Step range = [49-49]
17 : Statistics :: Grounding = 0.320735s, Solving = 0.236488s, Total = 0.557223s, Memory = (RSS = 2234.800781Mb, VMS = 2277.953125Mb), Step range = [50-50]

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.081683s due to: Stop condition reached.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 12, Last requested goal index = 12, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.443620s, Solving = 1.638063s, Total = 7.081683s, Memory = (RSS = 2234.800781Mb, VMS = 2277.953125Mb), Step range = [31-50]), Calls = 17
Model :: Total atoms = 27797, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 19 :: Actions = 19                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 24 : Goals achieved = 12 : Goals unachieved = 12 : Complete = False

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-1].

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 24, Sub-goal Stage Range = [1-24]
Division points [total=5] : [(Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 16, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [13-16]

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=50, step_range=range(0, 51)

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [13-16], problem number = 4, increment number = 4

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 13)
	('last_sgoals', 16)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1795.7599964)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [13-16] : Concurrency disabled : Minimum search length bound enabled with value 53

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 13
last_sgoals = 16
start_step = 50
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 53

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-29-40] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-29-40] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 50 as problem start state.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 50})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 50})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0,0)', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 50})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 50})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 50})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 50})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 50})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 50})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 50})

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 50).
holds(1, complete_tower(red,puzzle_room_table), false, 50).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 50).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 50).
holds(1, configuration(manipulator_limb_1), extended, 50).
holds(1, configuration(manipulator_limb_2), retracted, 50).
holds(1, configuration(puzzle_room_door), open, 50).
holds(1, configuration(starting_room_door), closed, 50).
holds(1, configuration(store_room_door), open, 50).
holds(1, grasping(manipulator_arm_1), (block,6), 50).
holds(1, grasping(manipulator_arm_2), nothing, 50).
holds(1, grasping(manipulator_end_1), (block,6), 50).
holds(1, grasping(manipulator_end_2), nothing, 50).
holds(1, in((block,1)), (puzzle_room,5,0), 50).
holds(1, in((block,2)), (puzzle_room,5,0), 50).
holds(1, in((block,3)), (puzzle_room,5,0), 50).
holds(1, in((block,4)), (store_room,0,0), 50).
holds(1, in((block,5)), (store_room,0,0), 50).
holds(1, in((block,6)), (store_room,0,0), 50).
holds(1, in(manipulator_arm_1), (store_room,0,0), 50).
holds(1, in(manipulator_arm_2), (store_room,0,0), 50).
holds(1, in(manipulator_end_1), (store_room,0,0), 50).
holds(1, in(manipulator_end_2), (store_room,0,0), 50).
holds(1, in(manipulator_limb_1), (store_room,0,0), 50).
holds(1, in(manipulator_limb_2), (store_room,0,0), 50).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 50).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 50).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 50).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 50).
holds(1, in(talos), (store_room,0,0), 50).
holds(1, in_tower((block,1),(block,1)), true, 50).
holds(1, in_tower((block,1),(block,2)), false, 50).
holds(1, in_tower((block,1),(block,3)), true, 50).
holds(1, in_tower((block,1),(block,4)), false, 50).
holds(1, in_tower((block,1),(block,5)), false, 50).
holds(1, in_tower((block,1),(block,6)), false, 50).
holds(1, in_tower((block,2),(block,1)), false, 50).
holds(1, in_tower((block,2),(block,2)), true, 50).
holds(1, in_tower((block,2),(block,3)), false, 50).
holds(1, in_tower((block,2),(block,4)), false, 50).
holds(1, in_tower((block,2),(block,5)), false, 50).
holds(1, in_tower((block,2),(block,6)), false, 50).
holds(1, in_tower((block,3),(block,1)), false, 50).
holds(1, in_tower((block,3),(block,2)), false, 50).
holds(1, in_tower((block,3),(block,3)), false, 50).
holds(1, in_tower((block,3),(block,4)), false, 50).
holds(1, in_tower((block,3),(block,5)), false, 50).
holds(1, in_tower((block,3),(block,6)), false, 50).
holds(1, in_tower((block,4),(block,1)), false, 50).
holds(1, in_tower((block,4),(block,2)), false, 50).
holds(1, in_tower((block,4),(block,3)), false, 50).
holds(1, in_tower((block,4),(block,4)), false, 50).
holds(1, in_tower((block,4),(block,5)), false, 50).
holds(1, in_tower((block,4),(block,6)), false, 50).
holds(1, in_tower((block,5),(block,1)), false, 50).
holds(1, in_tower((block,5),(block,2)), false, 50).
holds(1, in_tower((block,5),(block,3)), false, 50).
holds(1, in_tower((block,5),(block,4)), false, 50).
holds(1, in_tower((block,5),(block,5)), false, 50).
holds(1, in_tower((block,5),(block,6)), false, 50).
holds(1, in_tower((block,6),(block,1)), false, 50).
holds(1, in_tower((block,6),(block,2)), false, 50).
holds(1, in_tower((block,6),(block,3)), false, 50).
holds(1, in_tower((block,6),(block,4)), false, 50).
holds(1, in_tower((block,6),(block,5)), false, 50).
holds(1, in_tower((block,6),(block,6)), false, 50).
holds(1, on((block,1)), puzzle_room_table_left, 50).
holds(1, on((block,2)), puzzle_room_table_right, 50).
holds(1, on((block,3)), (block,1), 50).
holds(1, on((block,4)), nothing, 50).
holds(1, on((block,5)), nothing, 50).
holds(1, on((block,6)), nothing, 50).
holds(1, tower_base((block,1),puzzle_room_table), true, 50).
holds(1, tower_base((block,2),puzzle_room_table), true, 50).
holds(1, tower_base((block,3),puzzle_room_table), false, 50).
holds(1, tower_base((block,4),puzzle_room_table), false, 50).
holds(1, tower_base((block,5),puzzle_room_table), false, 50).
holds(1, tower_base((block,6),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 50).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 50).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 50).
holds(2, complete_tower(blue,puzzle_room_table), false, 50).
holds(2, complete_tower(red,puzzle_room_table), false, 50).
holds(2, configuration(manipulator_arm_1), extended, 50).
holds(2, configuration(manipulator_arm_2), retracted, 50).
holds(2, configuration(puzzle_room_door), open, 50).
holds(2, configuration(starting_room_door), closed, 50).
holds(2, configuration(store_room_door), open, 50).
holds(2, grasping(manipulator_arm_1), (block,6), 50).
holds(2, grasping(manipulator_arm_2), nothing, 50).
holds(2, in((block,1)), puzzle_room, 50).
holds(2, in((block,2)), puzzle_room, 50).
holds(2, in((block,3)), puzzle_room, 50).
holds(2, in((block,4)), store_room, 50).
holds(2, in((block,5)), store_room, 50).
holds(2, in((block,6)), store_room, 50).
holds(2, in(manipulator_arm_1), store_room, 50).
holds(2, in(manipulator_arm_2), store_room, 50).
holds(2, in(puzzle_room_table), puzzle_room, 50).
holds(2, in(talos), store_room, 50).
holds(2, in_tower((block,1),(block,1)), true, 50).
holds(2, in_tower((block,1),(block,2)), false, 50).
holds(2, in_tower((block,1),(block,3)), true, 50).
holds(2, in_tower((block,1),(block,4)), false, 50).
holds(2, in_tower((block,1),(block,5)), false, 50).
holds(2, in_tower((block,1),(block,6)), false, 50).
holds(2, in_tower((block,2),(block,1)), false, 50).
holds(2, in_tower((block,2),(block,2)), true, 50).
holds(2, in_tower((block,2),(block,3)), false, 50).
holds(2, in_tower((block,2),(block,4)), false, 50).
holds(2, in_tower((block,2),(block,5)), false, 50).
holds(2, in_tower((block,2),(block,6)), false, 50).
holds(2, in_tower((block,3),(block,1)), false, 50).
holds(2, in_tower((block,3),(block,2)), false, 50).
holds(2, in_tower((block,3),(block,3)), false, 50).
holds(2, in_tower((block,3),(block,4)), false, 50).
holds(2, in_tower((block,3),(block,5)), false, 50).
holds(2, in_tower((block,3),(block,6)), false, 50).
holds(2, in_tower((block,4),(block,1)), false, 50).
holds(2, in_tower((block,4),(block,2)), false, 50).
holds(2, in_tower((block,4),(block,3)), false, 50).
holds(2, in_tower((block,4),(block,4)), false, 50).
holds(2, in_tower((block,4),(block,5)), false, 50).
holds(2, in_tower((block,4),(block,6)), false, 50).
holds(2, in_tower((block,5),(block,1)), false, 50).
holds(2, in_tower((block,5),(block,2)), false, 50).
holds(2, in_tower((block,5),(block,3)), false, 50).
holds(2, in_tower((block,5),(block,4)), false, 50).
holds(2, in_tower((block,5),(block,5)), false, 50).
holds(2, in_tower((block,5),(block,6)), false, 50).
holds(2, in_tower((block,6),(block,1)), false, 50).
holds(2, in_tower((block,6),(block,2)), false, 50).
holds(2, in_tower((block,6),(block,3)), false, 50).
holds(2, in_tower((block,6),(block,4)), false, 50).
holds(2, in_tower((block,6),(block,5)), false, 50).
holds(2, in_tower((block,6),(block,6)), false, 50).
holds(2, on((block,1)), puzzle_room_table, 50).
holds(2, on((block,2)), puzzle_room_table, 50).
holds(2, on((block,3)), (block,1), 50).
holds(2, on((block,4)), nothing, 50).
holds(2, on((block,5)), nothing, 50).
holds(2, on((block,6)), nothing, 50).
holds(2, tower_base((block,1),puzzle_room_table), true, 50).
holds(2, tower_base((block,2),puzzle_room_table), true, 50).
holds(2, tower_base((block,3),puzzle_room_table), false, 50).
holds(2, tower_base((block,4),puzzle_room_table), false, 50).
holds(2, tower_base((block,5),puzzle_room_table), false, 50).
holds(2, tower_base((block,6),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 50).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 50).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 50).

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=53']

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 16})

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 13).
sub_goal(2, talos, move(hallway), in(talos), hallway, 14).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 15).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 16).

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=50, step_range=range(0, 51)

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 50, Total actions = 50, Produced sub-goal stages = 0

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=53']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002628F252EE0>]
	incrementor = SolveIncrementor(step_start=50, step_increase=1, step_increase_initial=4, step_end_min=54, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1773.4282509, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 50), range_=None), IncPart(name='plan_module', args=('#inc', 50, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 50, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 50, 13, 16, 'sequential', 'false'), range_=None)]

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 822 rules

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004774300000008225s

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119031s.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023867s with result Satisfiable.

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002628EEF9130>

[03-03-2022_22-29-40] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 50)
	('last_sgoals', 16)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 13)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002628EEF9130>)

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 50). %* None *%
#program plan_module(#inc, 50, false, false). %* None *%
#program optimisation_module(#inc, 50, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 50, 13, 16, sequential, false). %* None *%

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     49 : Current =     53
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(50), Number(50)]), ('plan_module', [Number(50), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(51), Number(50)]), ('plan_module', [Number(51), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(52), Number(50)]), ('plan_module', [Number(52), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(53), Number(50)]), ('plan_module', [Number(53), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.696771s.

[03-03-2022_22-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.191519s with result Satisfiable.

[03-03-2022_22-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8882895999995526, Incremental time limit = None
Running cumulative time = 0.8882895999995526, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2179.214844Mb, VMS = 2203.105469Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.696771s, Solving = 0.191519s, Total = 0.888290s, Memory = (RSS = 2179.214844Mb, VMS = 2203.105469Mb), Step range = [50-53]), Calls = 1
Final Model :: Total atoms = 21420, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(50)]), ('plan_module', [Number(54), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.239210s.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033795s with result Unsatisfiable.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27300460000014937, Incremental time limit = None
Running cumulative time = 1.161294199999702, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2183.078125Mb, VMS = 2207.230469Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(50)]), ('plan_module', [Number(55), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244277s.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035860s with result Unsatisfiable.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2801377999999204, Incremental time limit = None
Running cumulative time = 1.4414319999996223, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2185.621094Mb, VMS = 2208.753906Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(50)]), ('plan_module', [Number(56), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274301s.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048938s with result Unsatisfiable.

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3232394999999997, Incremental time limit = None
Running cumulative time = 1.764671499999622, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2188.695312Mb, VMS = 2214.425781Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(50)]), ('plan_module', [Number(57), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270311s.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046943s with result Unsatisfiable.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3172535000003336, Incremental time limit = None
Running cumulative time = 2.0819249999999556, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2190.695312Mb, VMS = 2214.925781Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(50)]), ('plan_module', [Number(58), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.279716s.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049690s with result Unsatisfiable.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3294060999996873, Incremental time limit = None
Running cumulative time = 2.411331099999643, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2192.871094Mb, VMS = 2215.480469Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(59), Number(50)]), ('plan_module', [Number(59), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.291849s.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075043s with result Unsatisfiable.

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3668926000000283, Incremental time limit = None
Running cumulative time = 2.7782236999996712, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2195.351562Mb, VMS = 2222.929688Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     59 : Current =     60
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(60), Number(50)]), ('plan_module', [Number(60), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306959s.

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.102561s with result Unsatisfiable.

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.40952010000046357, Incremental time limit = None
Running cumulative time = 3.187743800000135, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2197.605469Mb, VMS = 2223.488281Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(50)]), ('plan_module', [Number(61), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307302s.

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083466s with result Unsatisfiable.

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39076780000004874, Incremental time limit = None
Running cumulative time = 3.5785116000001835, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2200.988281Mb, VMS = 2225.468750Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(50)]), ('plan_module', [Number(62), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.308973s.

[03-03-2022_22-29-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108888s with result Unsatisfiable.

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4178609000000506, Incremental time limit = None
Running cumulative time = 3.996372500000234, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2203.246094Mb, VMS = 2226.023438Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(50)]), ('plan_module', [Number(63), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.313205s.

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.141354s with result Unsatisfiable.

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4545592999998007, Incremental time limit = None
Running cumulative time = 4.450931800000035, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2212.066406Mb, VMS = 2244.644531Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(50)]), ('plan_module', [Number(64), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.317852s.

[03-03-2022_22-29-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.175087s with result Unsatisfiable.

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.49293939999961367, Incremental time limit = None
Running cumulative time = 4.9438711999996485, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2214.843750Mb, VMS = 2245.992188Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(50)]), ('plan_module', [Number(65), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.329733s.

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.195229s with result Unsatisfiable.

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5249617999998009, Incremental time limit = None
Running cumulative time = 5.468832999999449, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2217.734375Mb, VMS = 2247.261719Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(50)]), ('plan_module', [Number(66), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.340410s.

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.173797s with result Unsatisfiable.

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5142068999998628, Incremental time limit = None
Running cumulative time = 5.983039899999312, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2220.636719Mb, VMS = 2247.820312Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(50)]), ('plan_module', [Number(67), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.340133s.

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.214735s with result Unsatisfiable.

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.554868699999588, Incremental time limit = None
Running cumulative time = 6.5379085999989, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2223.550781Mb, VMS = 2248.378906Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     54 : Maximum =    300

[03-03-2022_22-29-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(50)]), ('plan_module', [Number(68), Number(50), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(50), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(50), Number(13), Number(16), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.326679s.

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.290665s with result Satisfiable.

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6173438999994687, Incremental time limit = None
Running cumulative time = 7.155252499998369, Cumulative time limit = 1773.4282509
Used memory = (RSS = 2234.703125Mb, VMS = 2276.308594Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.187682s, Solving = 1.967571s, Total = 7.155252s, Memory = (RSS = 2234.703125Mb, VMS = 2276.308594Mb), Step range = [50-68]), Calls = 16
Final Model :: Total atoms = 27381, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.696771s, Solving = 0.191519s, Total = 0.888290s, Memory = (RSS = 2179.214844Mb, VMS = 2203.105469Mb), Step range = [50-53]
2 : Statistics :: Grounding = 0.239210s, Solving = 0.033795s, Total = 0.273005s, Memory = (RSS = 2183.078125Mb, VMS = 2207.230469Mb), Step range = [54-54]
3 : Statistics :: Grounding = 0.244277s, Solving = 0.035860s, Total = 0.280138s, Memory = (RSS = 2185.621094Mb, VMS = 2208.753906Mb), Step range = [55-55]
4 : Statistics :: Grounding = 0.274301s, Solving = 0.048938s, Total = 0.323239s, Memory = (RSS = 2188.695312Mb, VMS = 2214.425781Mb), Step range = [56-56]
5 : Statistics :: Grounding = 0.270311s, Solving = 0.046943s, Total = 0.317254s, Memory = (RSS = 2190.695312Mb, VMS = 2214.925781Mb), Step range = [57-57]
6 : Statistics :: Grounding = 0.279716s, Solving = 0.049690s, Total = 0.329406s, Memory = (RSS = 2192.871094Mb, VMS = 2215.480469Mb), Step range = [58-58]
7 : Statistics :: Grounding = 0.291849s, Solving = 0.075043s, Total = 0.366893s, Memory = (RSS = 2195.351562Mb, VMS = 2222.929688Mb), Step range = [59-59]
8 : Statistics :: Grounding = 0.306959s, Solving = 0.102561s, Total = 0.409520s, Memory = (RSS = 2197.605469Mb, VMS = 2223.488281Mb), Step range = [60-60]
9 : Statistics :: Grounding = 0.307302s, Solving = 0.083466s, Total = 0.390768s, Memory = (RSS = 2200.988281Mb, VMS = 2225.468750Mb), Step range = [61-61]
10 : Statistics :: Grounding = 0.308973s, Solving = 0.108888s, Total = 0.417861s, Memory = (RSS = 2203.246094Mb, VMS = 2226.023438Mb), Step range = [62-62]
11 : Statistics :: Grounding = 0.313205s, Solving = 0.141354s, Total = 0.454559s, Memory = (RSS = 2212.066406Mb, VMS = 2244.644531Mb), Step range = [63-63]
12 : Statistics :: Grounding = 0.317852s, Solving = 0.175087s, Total = 0.492939s, Memory = (RSS = 2214.843750Mb, VMS = 2245.992188Mb), Step range = [64-64]
13 : Statistics :: Grounding = 0.329733s, Solving = 0.195229s, Total = 0.524962s, Memory = (RSS = 2217.734375Mb, VMS = 2247.261719Mb), Step range = [65-65]
14 : Statistics :: Grounding = 0.340410s, Solving = 0.173797s, Total = 0.514207s, Memory = (RSS = 2220.636719Mb, VMS = 2247.820312Mb), Step range = [66-66]
15 : Statistics :: Grounding = 0.340133s, Solving = 0.214735s, Total = 0.554869s, Memory = (RSS = 2223.550781Mb, VMS = 2248.378906Mb), Step range = [67-67]
16 : Statistics :: Grounding = 0.326679s, Solving = 0.290665s, Total = 0.617344s, Memory = (RSS = 2234.703125Mb, VMS = 2276.308594Mb), Step range = [68-68]

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 7.155252s due to: Stop condition reached.

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 16, Last requested goal index = 16, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.187682s, Solving = 1.967571s, Total = 7.155252s, Memory = (RSS = 2234.703125Mb, VMS = 2276.308594Mb), Step range = [50-68]), Calls = 16
Model :: Total atoms = 27381, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 18 :: Actions = 18                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 24 : Goals achieved = 16 : Goals unachieved = 8 : Complete = False

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-1].

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 24, Sub-goal Stage Range = [1-24]
Division points [total=5] : [(Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 16, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [17-20]

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=68, step_range=range(0, 69)

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [17-20], problem number = 5, increment number = 5

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 17)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1795.7599964)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [17-20] : Concurrency disabled : Minimum search length bound enabled with value 71

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 17
last_sgoals = 20
start_step = 68
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 71

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-29-49] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-29-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 68 as problem start state.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,0,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 68).
holds(1, complete_tower(red,puzzle_room_table), false, 68).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 68).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 68).
holds(1, configuration(manipulator_limb_1), retracted, 68).
holds(1, configuration(manipulator_limb_2), extended, 68).
holds(1, configuration(puzzle_room_door), open, 68).
holds(1, configuration(starting_room_door), closed, 68).
holds(1, configuration(store_room_door), open, 68).
holds(1, grasping(manipulator_arm_1), (block,6), 68).
holds(1, grasping(manipulator_arm_2), nothing, 68).
holds(1, grasping(manipulator_end_1), (block,6), 68).
holds(1, grasping(manipulator_end_2), nothing, 68).
holds(1, in((block,1)), (puzzle_room,5,0), 68).
holds(1, in((block,2)), (puzzle_room,5,0), 68).
holds(1, in((block,3)), (puzzle_room,5,0), 68).
holds(1, in((block,4)), (store_room,0,0), 68).
holds(1, in((block,5)), (store_room,0,0), 68).
holds(1, in((block,6)), (puzzle_room,0,1), 68).
holds(1, in(manipulator_arm_1), (puzzle_room,0,1), 68).
holds(1, in(manipulator_arm_2), (puzzle_room,0,1), 68).
holds(1, in(manipulator_end_1), (puzzle_room,0,1), 68).
holds(1, in(manipulator_end_2), (puzzle_room,0,1), 68).
holds(1, in(manipulator_limb_1), (puzzle_room,0,1), 68).
holds(1, in(manipulator_limb_2), (puzzle_room,0,1), 68).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 68).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 68).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 68).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 68).
holds(1, in(talos), (puzzle_room,0,1), 68).
holds(1, in_tower((block,1),(block,1)), true, 68).
holds(1, in_tower((block,1),(block,2)), false, 68).
holds(1, in_tower((block,1),(block,3)), true, 68).
holds(1, in_tower((block,1),(block,4)), false, 68).
holds(1, in_tower((block,1),(block,5)), false, 68).
holds(1, in_tower((block,1),(block,6)), false, 68).
holds(1, in_tower((block,2),(block,1)), false, 68).
holds(1, in_tower((block,2),(block,2)), true, 68).
holds(1, in_tower((block,2),(block,3)), false, 68).
holds(1, in_tower((block,2),(block,4)), false, 68).
holds(1, in_tower((block,2),(block,5)), false, 68).
holds(1, in_tower((block,2),(block,6)), false, 68).
holds(1, in_tower((block,3),(block,1)), false, 68).
holds(1, in_tower((block,3),(block,2)), false, 68).
holds(1, in_tower((block,3),(block,3)), false, 68).
holds(1, in_tower((block,3),(block,4)), false, 68).
holds(1, in_tower((block,3),(block,5)), false, 68).
holds(1, in_tower((block,3),(block,6)), false, 68).
holds(1, in_tower((block,4),(block,1)), false, 68).
holds(1, in_tower((block,4),(block,2)), false, 68).
holds(1, in_tower((block,4),(block,3)), false, 68).
holds(1, in_tower((block,4),(block,4)), false, 68).
holds(1, in_tower((block,4),(block,5)), false, 68).
holds(1, in_tower((block,4),(block,6)), false, 68).
holds(1, in_tower((block,5),(block,1)), false, 68).
holds(1, in_tower((block,5),(block,2)), false, 68).
holds(1, in_tower((block,5),(block,3)), false, 68).
holds(1, in_tower((block,5),(block,4)), false, 68).
holds(1, in_tower((block,5),(block,5)), false, 68).
holds(1, in_tower((block,5),(block,6)), false, 68).
holds(1, in_tower((block,6),(block,1)), false, 68).
holds(1, in_tower((block,6),(block,2)), false, 68).
holds(1, in_tower((block,6),(block,3)), false, 68).
holds(1, in_tower((block,6),(block,4)), false, 68).
holds(1, in_tower((block,6),(block,5)), false, 68).
holds(1, in_tower((block,6),(block,6)), false, 68).
holds(1, on((block,1)), puzzle_room_table_left, 68).
holds(1, on((block,2)), puzzle_room_table_right, 68).
holds(1, on((block,3)), (block,1), 68).
holds(1, on((block,4)), nothing, 68).
holds(1, on((block,5)), nothing, 68).
holds(1, on((block,6)), nothing, 68).
holds(1, tower_base((block,1),puzzle_room_table), true, 68).
holds(1, tower_base((block,2),puzzle_room_table), true, 68).
holds(1, tower_base((block,3),puzzle_room_table), false, 68).
holds(1, tower_base((block,4),puzzle_room_table), false, 68).
holds(1, tower_base((block,5),puzzle_room_table), false, 68).
holds(1, tower_base((block,6),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 68).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(2, complete_tower(blue,puzzle_room_table), false, 68).
holds(2, complete_tower(red,puzzle_room_table), false, 68).
holds(2, configuration(manipulator_arm_1), retracted, 68).
holds(2, configuration(manipulator_arm_2), extended, 68).
holds(2, configuration(puzzle_room_door), open, 68).
holds(2, configuration(starting_room_door), closed, 68).
holds(2, configuration(store_room_door), open, 68).
holds(2, grasping(manipulator_arm_1), (block,6), 68).
holds(2, grasping(manipulator_arm_2), nothing, 68).
holds(2, in((block,1)), puzzle_room, 68).
holds(2, in((block,2)), puzzle_room, 68).
holds(2, in((block,3)), puzzle_room, 68).
holds(2, in((block,4)), store_room, 68).
holds(2, in((block,5)), store_room, 68).
holds(2, in((block,6)), puzzle_room, 68).
holds(2, in(manipulator_arm_1), puzzle_room, 68).
holds(2, in(manipulator_arm_2), puzzle_room, 68).
holds(2, in(puzzle_room_table), puzzle_room, 68).
holds(2, in(talos), puzzle_room, 68).
holds(2, in_tower((block,1),(block,1)), true, 68).
holds(2, in_tower((block,1),(block,2)), false, 68).
holds(2, in_tower((block,1),(block,3)), true, 68).
holds(2, in_tower((block,1),(block,4)), false, 68).
holds(2, in_tower((block,1),(block,5)), false, 68).
holds(2, in_tower((block,1),(block,6)), false, 68).
holds(2, in_tower((block,2),(block,1)), false, 68).
holds(2, in_tower((block,2),(block,2)), true, 68).
holds(2, in_tower((block,2),(block,3)), false, 68).
holds(2, in_tower((block,2),(block,4)), false, 68).
holds(2, in_tower((block,2),(block,5)), false, 68).
holds(2, in_tower((block,2),(block,6)), false, 68).
holds(2, in_tower((block,3),(block,1)), false, 68).
holds(2, in_tower((block,3),(block,2)), false, 68).
holds(2, in_tower((block,3),(block,3)), false, 68).
holds(2, in_tower((block,3),(block,4)), false, 68).
holds(2, in_tower((block,3),(block,5)), false, 68).
holds(2, in_tower((block,3),(block,6)), false, 68).
holds(2, in_tower((block,4),(block,1)), false, 68).
holds(2, in_tower((block,4),(block,2)), false, 68).
holds(2, in_tower((block,4),(block,3)), false, 68).
holds(2, in_tower((block,4),(block,4)), false, 68).
holds(2, in_tower((block,4),(block,5)), false, 68).
holds(2, in_tower((block,4),(block,6)), false, 68).
holds(2, in_tower((block,5),(block,1)), false, 68).
holds(2, in_tower((block,5),(block,2)), false, 68).
holds(2, in_tower((block,5),(block,3)), false, 68).
holds(2, in_tower((block,5),(block,4)), false, 68).
holds(2, in_tower((block,5),(block,5)), false, 68).
holds(2, in_tower((block,5),(block,6)), false, 68).
holds(2, in_tower((block,6),(block,1)), false, 68).
holds(2, in_tower((block,6),(block,2)), false, 68).
holds(2, in_tower((block,6),(block,3)), false, 68).
holds(2, in_tower((block,6),(block,4)), false, 68).
holds(2, in_tower((block,6),(block,5)), false, 68).
holds(2, in_tower((block,6),(block,6)), false, 68).
holds(2, on((block,1)), puzzle_room_table, 68).
holds(2, on((block,2)), puzzle_room_table, 68).
holds(2, on((block,3)), (block,1), 68).
holds(2, on((block,4)), nothing, 68).
holds(2, on((block,5)), nothing, 68).
holds(2, on((block,6)), nothing, 68).
holds(2, tower_base((block,1),puzzle_room_table), true, 68).
holds(2, tower_base((block,2),puzzle_room_table), true, 68).
holds(2, tower_base((block,3),puzzle_room_table), false, 68).
holds(2, tower_base((block,4),puzzle_room_table), false, 68).
holds(2, tower_base((block,5),puzzle_room_table), false, 68).
holds(2, tower_base((block,6),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 68).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 68).

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=71']

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,3)', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,3))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 20})

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), (block,3), 17).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 18).
sub_goal(2, talos, put(manipulator_arm_2,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 19).
sub_goal(2, talos, release(manipulator_arm_2,(block,3)), grasping(manipulator_arm_2), nothing, 20).

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=68, step_range=range(0, 69)

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 68, Total actions = 68, Produced sub-goal stages = 0

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=71']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002628FAE8430>]
	incrementor = SolveIncrementor(step_start=68, step_increase=1, step_increase_initial=4, step_end_min=72, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1766.2729984000016, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 68), range_=None), IncPart(name='plan_module', args=('#inc', 68, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 68, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 68, 17, 20, 'sequential', 'false'), range_=None)]

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 822 rules

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004690499999924214s

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118975s.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023955s with result Satisfiable.

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002628E861270>

[03-03-2022_22-29-49] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 68)
	('last_sgoals', 20)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 17)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002628E861270>)

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 68). %* None *%
#program plan_module(#inc, 68, false, false). %* None *%
#program optimisation_module(#inc, 68, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 68, 17, 20, sequential, false). %* None *%

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     67 : Current =     71
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(68), Number(68)]), ('plan_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(69), Number(68)]), ('plan_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(70), Number(68)]), ('plan_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(71), Number(68)]), ('plan_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.673861s.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.190577s with result Satisfiable.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.864438500000233, Incremental time limit = None
Running cumulative time = 0.864438500000233, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2181.906250Mb, VMS = 2205.359375Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.673861s, Solving = 0.190577s, Total = 0.864439s, Memory = (RSS = 2181.906250Mb, VMS = 2205.359375Mb), Step range = [68-71]), Calls = 1
Final Model :: Total atoms = 21421, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(68)]), ('plan_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.226174s.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024530s with result Unsatisfiable.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2507043999999041, Incremental time limit = None
Running cumulative time = 1.1151429000001372, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2185.468750Mb, VMS = 2209.386719Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(68)]), ('plan_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.254000s.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033799s with result Unsatisfiable.

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28779919999988124, Incremental time limit = None
Running cumulative time = 1.4029421000000184, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2187.804688Mb, VMS = 2210.906250Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     73 : Current =     74
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(74)]), ('state_module', [Number(74), Number(68)]), ('plan_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261119s.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043608s with result Unsatisfiable.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30472710000003644, Incremental time limit = None
Running cumulative time = 1.7076692000000548, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2190.832031Mb, VMS = 2216.601562Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     74 : Current =     75
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(75)]), ('state_module', [Number(75), Number(68)]), ('plan_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267512s.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039554s with result Unsatisfiable.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30706610000015644, Incremental time limit = None
Running cumulative time = 2.0147353000002113, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2193.007812Mb, VMS = 2217.156250Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     75 : Current =     76
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(76)]), ('state_module', [Number(76), Number(68)]), ('plan_module', [Number(76), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(76), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.285701s.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052414s with result Unsatisfiable.

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33811480000031224, Incremental time limit = None
Running cumulative time = 2.3528501000005235, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2195.144531Mb, VMS = 2217.718750Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     76 : Current =     77
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(77)]), ('state_module', [Number(77), Number(68)]), ('plan_module', [Number(77), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(77), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287554s.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054049s with result Unsatisfiable.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3416026999998394, Incremental time limit = None
Running cumulative time = 2.694452800000363, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2197.656250Mb, VMS = 2225.179688Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     77 : Current =     78
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(78)]), ('state_module', [Number(78), Number(68)]), ('plan_module', [Number(78), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(78), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.291043s.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054694s with result Unsatisfiable.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34573700000055396, Incremental time limit = None
Running cumulative time = 3.040189800000917, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2199.781250Mb, VMS = 2225.738281Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     78 : Current =     79
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(79)]), ('state_module', [Number(79), Number(68)]), ('plan_module', [Number(79), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(79), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.299303s.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056043s with result Unsatisfiable.

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3553461999999854, Incremental time limit = None
Running cumulative time = 3.3955360000009023, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2203.066406Mb, VMS = 2227.707031Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     79 : Current =     80
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(80)]), ('state_module', [Number(80), Number(68)]), ('plan_module', [Number(80), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(80), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.305184s.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065623s with result Unsatisfiable.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37080740000010337, Incremental time limit = None
Running cumulative time = 3.7663434000010056, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2205.507812Mb, VMS = 2228.265625Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     80 : Current =     81
Incrementor step ends | Minimum  =     72 : Maximum =    300

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(81)]), ('state_module', [Number(81), Number(68)]), ('plan_module', [Number(81), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(68), Number(17), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.344016s.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.136339s with result Satisfiable.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.48035490000029313, Incremental time limit = None
Running cumulative time = 4.246698300001299, Cumulative time limit = 1766.2729984000016
Used memory = (RSS = 2221.808594Mb, VMS = 2254.378906Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.495467s, Solving = 0.751231s, Total = 4.246698s, Memory = (RSS = 2221.808594Mb, VMS = 2254.378906Mb), Step range = [68-81]), Calls = 11
Final Model :: Total atoms = 25391, Cost = (-1,), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.673861s, Solving = 0.190577s, Total = 0.864439s, Memory = (RSS = 2181.906250Mb, VMS = 2205.359375Mb), Step range = [68-71]
2 : Statistics :: Grounding = 0.226174s, Solving = 0.024530s, Total = 0.250704s, Memory = (RSS = 2185.468750Mb, VMS = 2209.386719Mb), Step range = [72-72]
3 : Statistics :: Grounding = 0.254000s, Solving = 0.033799s, Total = 0.287799s, Memory = (RSS = 2187.804688Mb, VMS = 2210.906250Mb), Step range = [73-73]
4 : Statistics :: Grounding = 0.261119s, Solving = 0.043608s, Total = 0.304727s, Memory = (RSS = 2190.832031Mb, VMS = 2216.601562Mb), Step range = [74-74]
5 : Statistics :: Grounding = 0.267512s, Solving = 0.039554s, Total = 0.307066s, Memory = (RSS = 2193.007812Mb, VMS = 2217.156250Mb), Step range = [75-75]
6 : Statistics :: Grounding = 0.285701s, Solving = 0.052414s, Total = 0.338115s, Memory = (RSS = 2195.144531Mb, VMS = 2217.718750Mb), Step range = [76-76]
7 : Statistics :: Grounding = 0.287554s, Solving = 0.054049s, Total = 0.341603s, Memory = (RSS = 2197.656250Mb, VMS = 2225.179688Mb), Step range = [77-77]
8 : Statistics :: Grounding = 0.291043s, Solving = 0.054694s, Total = 0.345737s, Memory = (RSS = 2199.781250Mb, VMS = 2225.738281Mb), Step range = [78-78]
9 : Statistics :: Grounding = 0.299303s, Solving = 0.056043s, Total = 0.355346s, Memory = (RSS = 2203.066406Mb, VMS = 2227.707031Mb), Step range = [79-79]
10 : Statistics :: Grounding = 0.305184s, Solving = 0.065623s, Total = 0.370807s, Memory = (RSS = 2205.507812Mb, VMS = 2228.265625Mb), Step range = [80-80]
11 : Statistics :: Grounding = 0.344016s, Solving = 0.136339s, Total = 0.480355s, Memory = (RSS = 2221.808594Mb, VMS = 2254.378906Mb), Step range = [81-81]

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.246698s due to: Stop condition reached.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.495467s, Solving = 0.751231s, Total = 4.246698s, Memory = (RSS = 2221.808594Mb, VMS = 2254.378906Mb), Step range = [68-81]), Calls = 11
Model :: Total atoms = 25391, Cost = (-1,), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 13 :: Actions = 13                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 70:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 71:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 72:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,1))
Step 73:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,1))
Step 74:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,1))
Step 75:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 76:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 77:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 78:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 79:
    Current Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 80:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 81:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 24 : Goals achieved = 20 : Goals unachieved = 4 : Complete = False

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 24, Sub-goal Stage Range = [1-24]
Division points [total=5] : [(Index = 4, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 8, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 12, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 16, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [21-24]

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=81, step_range=range(0, 82)

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [21-24], problem number = 6, increment number = 6

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 21)
	('last_sgoals', 24)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1795.7599964)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [21-24] : Concurrency disabled : Minimum search length bound enabled with value 84

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 21
last_sgoals = 24
start_step = 81
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 84

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-29-54] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-29-54] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 81 as problem start state.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 81})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 81})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 81})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 81})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 81})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 81})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 81})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 81})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 81})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 81})

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 81).
holds(1, complete_tower(red,puzzle_room_table), false, 81).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 81).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 81).
holds(1, configuration(manipulator_limb_1), extended, 81).
holds(1, configuration(manipulator_limb_2), extended, 81).
holds(1, configuration(puzzle_room_door), open, 81).
holds(1, configuration(starting_room_door), closed, 81).
holds(1, configuration(store_room_door), open, 81).
holds(1, grasping(manipulator_arm_1), (block,6), 81).
holds(1, grasping(manipulator_arm_2), nothing, 81).
holds(1, grasping(manipulator_end_1), (block,6), 81).
holds(1, grasping(manipulator_end_2), nothing, 81).
holds(1, in((block,1)), (puzzle_room,5,0), 81).
holds(1, in((block,2)), (puzzle_room,5,0), 81).
holds(1, in((block,3)), (puzzle_room,5,0), 81).
holds(1, in((block,4)), (store_room,0,0), 81).
holds(1, in((block,5)), (store_room,0,0), 81).
holds(1, in((block,6)), (puzzle_room,5,0), 81).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 81).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 81).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 81).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 81).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 81).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 81).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 81).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 81).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 81).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 81).
holds(1, in(talos), (puzzle_room,5,0), 81).
holds(1, in_tower((block,1),(block,1)), true, 81).
holds(1, in_tower((block,1),(block,2)), false, 81).
holds(1, in_tower((block,1),(block,3)), false, 81).
holds(1, in_tower((block,1),(block,4)), false, 81).
holds(1, in_tower((block,1),(block,5)), false, 81).
holds(1, in_tower((block,1),(block,6)), false, 81).
holds(1, in_tower((block,2),(block,1)), false, 81).
holds(1, in_tower((block,2),(block,2)), true, 81).
holds(1, in_tower((block,2),(block,3)), false, 81).
holds(1, in_tower((block,2),(block,4)), false, 81).
holds(1, in_tower((block,2),(block,5)), false, 81).
holds(1, in_tower((block,2),(block,6)), false, 81).
holds(1, in_tower((block,3),(block,1)), false, 81).
holds(1, in_tower((block,3),(block,2)), false, 81).
holds(1, in_tower((block,3),(block,3)), true, 81).
holds(1, in_tower((block,3),(block,4)), false, 81).
holds(1, in_tower((block,3),(block,5)), false, 81).
holds(1, in_tower((block,3),(block,6)), false, 81).
holds(1, in_tower((block,4),(block,1)), false, 81).
holds(1, in_tower((block,4),(block,2)), false, 81).
holds(1, in_tower((block,4),(block,3)), false, 81).
holds(1, in_tower((block,4),(block,4)), false, 81).
holds(1, in_tower((block,4),(block,5)), false, 81).
holds(1, in_tower((block,4),(block,6)), false, 81).
holds(1, in_tower((block,5),(block,1)), false, 81).
holds(1, in_tower((block,5),(block,2)), false, 81).
holds(1, in_tower((block,5),(block,3)), false, 81).
holds(1, in_tower((block,5),(block,4)), false, 81).
holds(1, in_tower((block,5),(block,5)), false, 81).
holds(1, in_tower((block,5),(block,6)), false, 81).
holds(1, in_tower((block,6),(block,1)), false, 81).
holds(1, in_tower((block,6),(block,2)), false, 81).
holds(1, in_tower((block,6),(block,3)), false, 81).
holds(1, in_tower((block,6),(block,4)), false, 81).
holds(1, in_tower((block,6),(block,5)), false, 81).
holds(1, in_tower((block,6),(block,6)), false, 81).
holds(1, on((block,1)), puzzle_room_table_left, 81).
holds(1, on((block,2)), puzzle_room_table_right, 81).
holds(1, on((block,3)), puzzle_room_table_left, 81).
holds(1, on((block,4)), nothing, 81).
holds(1, on((block,5)), nothing, 81).
holds(1, on((block,6)), nothing, 81).
holds(1, tower_base((block,1),puzzle_room_table), true, 81).
holds(1, tower_base((block,2),puzzle_room_table), true, 81).
holds(1, tower_base((block,3),puzzle_room_table), true, 81).
holds(1, tower_base((block,4),puzzle_room_table), false, 81).
holds(1, tower_base((block,5),puzzle_room_table), false, 81).
holds(1, tower_base((block,6),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 81).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 81).
holds(2, complete_tower(blue,puzzle_room_table), false, 81).
holds(2, complete_tower(red,puzzle_room_table), false, 81).
holds(2, configuration(manipulator_arm_1), extended, 81).
holds(2, configuration(manipulator_arm_2), extended, 81).
holds(2, configuration(puzzle_room_door), open, 81).
holds(2, configuration(starting_room_door), closed, 81).
holds(2, configuration(store_room_door), open, 81).
holds(2, grasping(manipulator_arm_1), (block,6), 81).
holds(2, grasping(manipulator_arm_2), nothing, 81).
holds(2, in((block,1)), puzzle_room, 81).
holds(2, in((block,2)), puzzle_room, 81).
holds(2, in((block,3)), puzzle_room, 81).
holds(2, in((block,4)), store_room, 81).
holds(2, in((block,5)), store_room, 81).
holds(2, in((block,6)), puzzle_room, 81).
holds(2, in(manipulator_arm_1), puzzle_room, 81).
holds(2, in(manipulator_arm_2), puzzle_room, 81).
holds(2, in(puzzle_room_table), puzzle_room, 81).
holds(2, in(talos), puzzle_room, 81).
holds(2, in_tower((block,1),(block,1)), true, 81).
holds(2, in_tower((block,1),(block,2)), false, 81).
holds(2, in_tower((block,1),(block,3)), false, 81).
holds(2, in_tower((block,1),(block,4)), false, 81).
holds(2, in_tower((block,1),(block,5)), false, 81).
holds(2, in_tower((block,1),(block,6)), false, 81).
holds(2, in_tower((block,2),(block,1)), false, 81).
holds(2, in_tower((block,2),(block,2)), true, 81).
holds(2, in_tower((block,2),(block,3)), false, 81).
holds(2, in_tower((block,2),(block,4)), false, 81).
holds(2, in_tower((block,2),(block,5)), false, 81).
holds(2, in_tower((block,2),(block,6)), false, 81).
holds(2, in_tower((block,3),(block,1)), false, 81).
holds(2, in_tower((block,3),(block,2)), false, 81).
holds(2, in_tower((block,3),(block,3)), true, 81).
holds(2, in_tower((block,3),(block,4)), false, 81).
holds(2, in_tower((block,3),(block,5)), false, 81).
holds(2, in_tower((block,3),(block,6)), false, 81).
holds(2, in_tower((block,4),(block,1)), false, 81).
holds(2, in_tower((block,4),(block,2)), false, 81).
holds(2, in_tower((block,4),(block,3)), false, 81).
holds(2, in_tower((block,4),(block,4)), false, 81).
holds(2, in_tower((block,4),(block,5)), false, 81).
holds(2, in_tower((block,4),(block,6)), false, 81).
holds(2, in_tower((block,5),(block,1)), false, 81).
holds(2, in_tower((block,5),(block,2)), false, 81).
holds(2, in_tower((block,5),(block,3)), false, 81).
holds(2, in_tower((block,5),(block,4)), false, 81).
holds(2, in_tower((block,5),(block,5)), false, 81).
holds(2, in_tower((block,5),(block,6)), false, 81).
holds(2, in_tower((block,6),(block,1)), false, 81).
holds(2, in_tower((block,6),(block,2)), false, 81).
holds(2, in_tower((block,6),(block,3)), false, 81).
holds(2, in_tower((block,6),(block,4)), false, 81).
holds(2, in_tower((block,6),(block,5)), false, 81).
holds(2, in_tower((block,6),(block,6)), false, 81).
holds(2, on((block,1)), puzzle_room_table, 81).
holds(2, on((block,2)), puzzle_room_table, 81).
holds(2, on((block,3)), puzzle_room_table, 81).
holds(2, on((block,4)), nothing, 81).
holds(2, on((block,5)), nothing, 81).
holds(2, on((block,6)), nothing, 81).
holds(2, tower_base((block,1),puzzle_room_table), true, 81).
holds(2, tower_base((block,2),puzzle_room_table), true, 81).
holds(2, tower_base((block,3),puzzle_room_table), true, 81).
holds(2, tower_base((block,4),puzzle_room_table), false, 81).
holds(2, tower_base((block,5),puzzle_room_table), false, 81).
holds(2, tower_base((block,6),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 81).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 81).

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=84']

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 24})

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 21).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 22).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 23).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 24).

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=81, step_range=range(0, 82)

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-54] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 81, Total actions = 81, Produced sub-goal stages = 0

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=84']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002628FAE8940>]
	incrementor = SolveIncrementor(step_start=81, step_increase=1, step_increase_initial=4, step_end_min=85, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1762.0263001000003, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 81), range_=None), IncPart(name='plan_module', args=('#inc', 81, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 81, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 81, 21, 24, 'sequential', 'false'), range_=None)]

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 822 rules

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004650500000025204s

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118337s.

[03-03-2022_22-29-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.502926s with result Satisfiable.

[03-03-2022_22-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002628F957D60>

[03-03-2022_22-29-56] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 81)
	('last_sgoals', 24)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 21)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002628F957D60>)

[03-03-2022_22-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 81). %* None *%
#program plan_module(#inc, 81, false, false). %* None *%
#program optimisation_module(#inc, 81, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 81, 21, 24, sequential, false). %* None *%

[03-03-2022_22-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     80 : Current =     84
Incrementor step ends | Minimum  =     85 : Maximum =    300

[03-03-2022_22-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(81), Number(81)]), ('plan_module', [Number(81), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(81), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(81), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(82), Number(81)]), ('plan_module', [Number(82), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(82), Number(81), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(81), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(83), Number(81)]), ('plan_module', [Number(83), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(83), Number(81), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(81), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(84), Number(81)]), ('plan_module', [Number(84), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(84), Number(81), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(81), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.689348s.

[03-03-2022_22-29-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.212256s with result Satisfiable.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9016038999998273, Incremental time limit = None
Running cumulative time = 0.9016038999998273, Cumulative time limit = 1762.0263001000003
Used memory = (RSS = 2190.433594Mb, VMS = 2213.777344Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.689348s, Solving = 0.212256s, Total = 0.901604s, Memory = (RSS = 2190.433594Mb, VMS = 2213.777344Mb), Step range = [81-84]), Calls = 1
Final Model :: Total atoms = 21420, Cost = (-3,), Optimality proven = False, Number = 3, Thread ID = 1, Model type = ModelType.StableModel

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     84 : Current =     85
Incrementor step ends | Minimum  =     85 : Maximum =    300

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(85), Number(81)]), ('plan_module', [Number(85), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(85), Number(81), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(81), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.246921s.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025037s with result Unsatisfiable.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27195789999996123, Incremental time limit = None
Running cumulative time = 1.1735617999997885, Cumulative time limit = 1762.0263001000003
Used memory = (RSS = 2194.300781Mb, VMS = 2218.121094Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     85 : Maximum =    300

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(81)]), ('plan_module', [Number(86), Number(81), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(86), Number(81), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(81), Number(21), Number(24), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250667s.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073524s with result Satisfiable.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3241915999997218, Incremental time limit = None
Running cumulative time = 1.4977533999995103, Cumulative time limit = 1762.0263001000003
Used memory = (RSS = 2204.101562Mb, VMS = 2227.113281Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.186936s, Solving = 0.310817s, Total = 1.497753s, Memory = (RSS = 2204.101562Mb, VMS = 2227.113281Mb), Step range = [81-86]), Calls = 3
Final Model :: Total atoms = 22217, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.689348s, Solving = 0.212256s, Total = 0.901604s, Memory = (RSS = 2190.433594Mb, VMS = 2213.777344Mb), Step range = [81-84]
2 : Statistics :: Grounding = 0.246921s, Solving = 0.025037s, Total = 0.271958s, Memory = (RSS = 2194.300781Mb, VMS = 2218.121094Mb), Step range = [85-85]
3 : Statistics :: Grounding = 0.250667s, Solving = 0.073524s, Total = 0.324192s, Memory = (RSS = 2204.101562Mb, VMS = 2227.113281Mb), Step range = [86-86]

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.497753s due to: Stop condition reached.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 24, Last requested goal index = 24, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.186936s, Solving = 0.310817s, Total = 1.497753s, Memory = (RSS = 2204.101562Mb, VMS = 2227.113281Mb), Step range = [81-86]), Calls = 3
Model :: Total atoms = 22217, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 70:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 71:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 72:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,1))
Step 73:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,1))
Step 74:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,1))
Step 75:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 76:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 77:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 78:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 79:
    Current Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 80:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 81:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 82:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 83:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 84:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 85:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 24 : Goals achieved = 24 : Goals unachieved = 0 : Complete = False

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-2].

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 20, Sub-goal Stage Range = [1-20]
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-20]

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [11-20], problem number = 2, increment number = 7

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1798.0040212000017)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [11-20] : Concurrency disabled : Minimum search length bound enabled with value 33

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 11
last_sgoals = 20
start_step = 24
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 33

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[03-03-2022_22-29-58] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-29-58] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 24 as problem start state.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 24})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 24})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 24})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 24})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 24})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 24})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 24})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 24})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 24})

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 24).
holds(2, complete_tower(red,puzzle_room_table), false, 24).
holds(2, configuration(manipulator_arm_1), extended, 24).
holds(2, configuration(manipulator_arm_2), extended, 24).
holds(2, configuration(puzzle_room_door), open, 24).
holds(2, configuration(starting_room_door), closed, 24).
holds(2, configuration(store_room_door), open, 24).
holds(2, grasping(manipulator_arm_1), nothing, 24).
holds(2, grasping(manipulator_arm_2), (block,2), 24).
holds(2, in((block,1)), puzzle_room, 24).
holds(2, in((block,2)), puzzle_room, 24).
holds(2, in((block,3)), puzzle_room, 24).
holds(2, in((block,4)), store_room, 24).
holds(2, in((block,5)), store_room, 24).
holds(2, in((block,6)), puzzle_room, 24).
holds(2, in(manipulator_arm_1), puzzle_room, 24).
holds(2, in(manipulator_arm_2), puzzle_room, 24).
holds(2, in(puzzle_room_table), puzzle_room, 24).
holds(2, in(talos), puzzle_room, 24).
holds(2, in_tower((block,1),(block,1)), true, 24).
holds(2, in_tower((block,1),(block,2)), false, 24).
holds(2, in_tower((block,1),(block,3)), false, 24).
holds(2, in_tower((block,1),(block,4)), false, 24).
holds(2, in_tower((block,1),(block,5)), false, 24).
holds(2, in_tower((block,1),(block,6)), false, 24).
holds(2, in_tower((block,2),(block,1)), false, 24).
holds(2, in_tower((block,2),(block,2)), false, 24).
holds(2, in_tower((block,2),(block,3)), false, 24).
holds(2, in_tower((block,2),(block,4)), false, 24).
holds(2, in_tower((block,2),(block,5)), false, 24).
holds(2, in_tower((block,2),(block,6)), false, 24).
holds(2, in_tower((block,3),(block,1)), false, 24).
holds(2, in_tower((block,3),(block,2)), true, 24).
holds(2, in_tower((block,3),(block,3)), true, 24).
holds(2, in_tower((block,3),(block,4)), false, 24).
holds(2, in_tower((block,3),(block,5)), false, 24).
holds(2, in_tower((block,3),(block,6)), false, 24).
holds(2, in_tower((block,4),(block,1)), false, 24).
holds(2, in_tower((block,4),(block,2)), false, 24).
holds(2, in_tower((block,4),(block,3)), false, 24).
holds(2, in_tower((block,4),(block,4)), false, 24).
holds(2, in_tower((block,4),(block,5)), false, 24).
holds(2, in_tower((block,4),(block,6)), false, 24).
holds(2, in_tower((block,5),(block,1)), false, 24).
holds(2, in_tower((block,5),(block,2)), false, 24).
holds(2, in_tower((block,5),(block,3)), false, 24).
holds(2, in_tower((block,5),(block,4)), false, 24).
holds(2, in_tower((block,5),(block,5)), false, 24).
holds(2, in_tower((block,5),(block,6)), false, 24).
holds(2, in_tower((block,6),(block,1)), false, 24).
holds(2, in_tower((block,6),(block,2)), false, 24).
holds(2, in_tower((block,6),(block,3)), false, 24).
holds(2, in_tower((block,6),(block,4)), false, 24).
holds(2, in_tower((block,6),(block,5)), false, 24).
holds(2, in_tower((block,6),(block,6)), true, 24).
holds(2, on((block,1)), puzzle_room_table, 24).
holds(2, on((block,2)), (block,3), 24).
holds(2, on((block,3)), puzzle_room_table, 24).
holds(2, on((block,4)), nothing, 24).
holds(2, on((block,5)), nothing, 24).
holds(2, on((block,6)), puzzle_room_table, 24).
holds(2, tower_base((block,1),puzzle_room_table), true, 24).
holds(2, tower_base((block,2),puzzle_room_table), false, 24).
holds(2, tower_base((block,3),puzzle_room_table), true, 24).
holds(2, tower_base((block,4),puzzle_room_table), false, 24).
holds(2, tower_base((block,5),puzzle_room_table), false, 24).
holds(2, tower_base((block,6),puzzle_room_table), true, 24).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 24).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 24).
holds(3, complete_tower(blue,puzzle_room_table), false, 24).
holds(3, complete_tower(red,puzzle_room_table), false, 24).
holds(3, grasping(manipulator_arm_1), nothing, 24).
holds(3, grasping(manipulator_arm_2), (block,2), 24).
holds(3, in((block,1)), puzzle_room, 24).
holds(3, in((block,2)), puzzle_room, 24).
holds(3, in((block,3)), puzzle_room, 24).
holds(3, in((block,4)), store_room, 24).
holds(3, in((block,5)), store_room, 24).
holds(3, in((block,6)), puzzle_room, 24).
holds(3, in(manipulator_arm_1), puzzle_room, 24).
holds(3, in(manipulator_arm_2), puzzle_room, 24).
holds(3, in(puzzle_room_table), puzzle_room, 24).
holds(3, in(talos), puzzle_room, 24).
holds(3, in_tower((block,1),(block,1)), true, 24).
holds(3, in_tower((block,1),(block,2)), false, 24).
holds(3, in_tower((block,1),(block,3)), false, 24).
holds(3, in_tower((block,1),(block,4)), false, 24).
holds(3, in_tower((block,1),(block,5)), false, 24).
holds(3, in_tower((block,1),(block,6)), false, 24).
holds(3, in_tower((block,2),(block,1)), false, 24).
holds(3, in_tower((block,2),(block,2)), false, 24).
holds(3, in_tower((block,2),(block,3)), false, 24).
holds(3, in_tower((block,2),(block,4)), false, 24).
holds(3, in_tower((block,2),(block,5)), false, 24).
holds(3, in_tower((block,2),(block,6)), false, 24).
holds(3, in_tower((block,3),(block,1)), false, 24).
holds(3, in_tower((block,3),(block,2)), true, 24).
holds(3, in_tower((block,3),(block,3)), true, 24).
holds(3, in_tower((block,3),(block,4)), false, 24).
holds(3, in_tower((block,3),(block,5)), false, 24).
holds(3, in_tower((block,3),(block,6)), false, 24).
holds(3, in_tower((block,4),(block,1)), false, 24).
holds(3, in_tower((block,4),(block,2)), false, 24).
holds(3, in_tower((block,4),(block,3)), false, 24).
holds(3, in_tower((block,4),(block,4)), false, 24).
holds(3, in_tower((block,4),(block,5)), false, 24).
holds(3, in_tower((block,4),(block,6)), false, 24).
holds(3, in_tower((block,5),(block,1)), false, 24).
holds(3, in_tower((block,5),(block,2)), false, 24).
holds(3, in_tower((block,5),(block,3)), false, 24).
holds(3, in_tower((block,5),(block,4)), false, 24).
holds(3, in_tower((block,5),(block,5)), false, 24).
holds(3, in_tower((block,5),(block,6)), false, 24).
holds(3, in_tower((block,6),(block,1)), false, 24).
holds(3, in_tower((block,6),(block,2)), false, 24).
holds(3, in_tower((block,6),(block,3)), false, 24).
holds(3, in_tower((block,6),(block,4)), false, 24).
holds(3, in_tower((block,6),(block,5)), false, 24).
holds(3, in_tower((block,6),(block,6)), true, 24).
holds(3, on((block,1)), puzzle_room_table, 24).
holds(3, on((block,2)), (block,3), 24).
holds(3, on((block,3)), puzzle_room_table, 24).
holds(3, on((block,4)), nothing, 24).
holds(3, on((block,5)), nothing, 24).
holds(3, on((block,6)), puzzle_room_table, 24).
holds(3, tower_base((block,1),puzzle_room_table), true, 24).
holds(3, tower_base((block,2),puzzle_room_table), false, 24).
holds(3, tower_base((block,3),puzzle_room_table), true, 24).
holds(3, tower_base((block,4),puzzle_room_table), false, 24).
holds(3, tower_base((block,5),puzzle_room_table), false, 24).
holds(3, tower_base((block,6),puzzle_room_table), true, 24).
holds(3, unordered_tower((block,1),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 24).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 24).

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=33']

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 20})

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 11).
sub_goal(3, talos, move(store_room), in(talos), store_room, 12).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 13).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 14).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 15).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 18).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 19).
sub_goal(3, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 20).

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=24, step_range=range(0, 25)

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 24, Total actions = 24, Produced sub-goal stages = 24
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=33']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002626BCBF310>]
	incrementor = SolveIncrementor(step_start=24, step_increase=1, step_increase_initial=10, step_end_min=34, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1793.7640176000018, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 24), range_=None), IncPart(name='plan_module', args=('#inc', 24, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 24, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 24, 11, 20, 'sequential', 'false'), range_=None)]

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 800 rules

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00472410000020318s

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105071s.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019507s with result Satisfiable.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002628FF65310>

[03-03-2022_22-29-58] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 24)
	('last_sgoals', 20)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 11)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002628FF65310>)

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 24). %* None *%
#program plan_module(#inc, 24, false, true). %* None *%
#program optimisation_module(#inc, 24, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 24, 11, 20, sequential, false). %* None *%

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     23 : Current =     33
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(24), Number(24)]), ('plan_module', [Number(24), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(24), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(25), Number(24)]), ('plan_module', [Number(25), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(25), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(26), Number(24)]), ('plan_module', [Number(26), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(26), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(27), Number(24)]), ('plan_module', [Number(27), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(27), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(28), Number(24)]), ('plan_module', [Number(28), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(28), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(29), Number(24)]), ('plan_module', [Number(29), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(29), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(30), Number(24)]), ('plan_module', [Number(30), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(30), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(31), Number(24)]), ('plan_module', [Number(31), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(31), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(24)]), ('plan_module', [Number(32), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(32), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(24)]), ('plan_module', [Number(33), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(33), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.351698s.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.129344s with result Satisfiable.

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.48104149999971924, Incremental time limit = None
Running cumulative time = 0.48104149999971924, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2182.464844Mb, VMS = 2204.304688Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.351698s, Solving = 0.129344s, Total = 0.481041s, Memory = (RSS = 2182.464844Mb, VMS = 2204.304688Mb), Step range = [24-33]), Calls = 1
Final Model :: Total atoms = 20326, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(24)]), ('plan_module', [Number(34), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(34), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080796s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013444s with result Unsatisfiable.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09424029999991035, Incremental time limit = None
Running cumulative time = 0.5752817999996296, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2182.625000Mb, VMS = 2204.468750Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(24)]), ('plan_module', [Number(35), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(35), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082032s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012004s with result Unsatisfiable.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09403650000012931, Incremental time limit = None
Running cumulative time = 0.6693182999997589, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2182.785156Mb, VMS = 2204.625000Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(24)]), ('plan_module', [Number(36), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085119s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012743s with result Unsatisfiable.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.097862300000088, Incremental time limit = None
Running cumulative time = 0.7671805999998469, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2182.945312Mb, VMS = 2204.789062Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(24)]), ('plan_module', [Number(37), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(37), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.086462s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013857s with result Unsatisfiable.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10031919999983074, Incremental time limit = None
Running cumulative time = 0.8674997999996776, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2183.109375Mb, VMS = 2204.949219Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(24)]), ('plan_module', [Number(38), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(38), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088925s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017538s with result Unsatisfiable.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10646349999979066, Incremental time limit = None
Running cumulative time = 0.9739632999994683, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2189.125000Mb, VMS = 2213.304688Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(24)]), ('plan_module', [Number(39), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(39), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098687s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018468s with result Unsatisfiable.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11715519999961543, Incremental time limit = None
Running cumulative time = 1.0911184999990837, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2189.722656Mb, VMS = 2213.468750Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(24)]), ('plan_module', [Number(40), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(40), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.093483s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020345s with result Unsatisfiable.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11382819999971616, Incremental time limit = None
Running cumulative time = 1.2049466999987999, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2190.257812Mb, VMS = 2213.636719Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(24)]), ('plan_module', [Number(41), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(41), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.093113s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019220s with result Unsatisfiable.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11233249999986583, Incremental time limit = None
Running cumulative time = 1.3172791999986657, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2190.800781Mb, VMS = 2213.789062Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(24)]), ('plan_module', [Number(42), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096317s.

[03-03-2022_22-29-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023910s with result Unsatisfiable.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12022690000003422, Incremental time limit = None
Running cumulative time = 1.4375060999987, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2191.394531Mb, VMS = 2213.953125Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(24)]), ('plan_module', [Number(43), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(43), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102330s.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034630s with result Unsatisfiable.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13696029999982784, Incremental time limit = None
Running cumulative time = 1.5744663999985278, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2192.058594Mb, VMS = 2214.113281Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     34 : Maximum =    300

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(24)]), ('plan_module', [Number(44), Number(24), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(44), Number(24), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(24), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.103586s.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073339s with result Satisfiable.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17692529999976614, Incremental time limit = None
Running cumulative time = 1.751391699998294, Cumulative time limit = 1793.7640176000018
Used memory = (RSS = 2194.875000Mb, VMS = 2220.367188Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.362549s, Solving = 0.388843s, Total = 1.751392s, Memory = (RSS = 2194.875000Mb, VMS = 2220.367188Mb), Step range = [24-44]), Calls = 12
Final Model :: Total atoms = 25525, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.351698s, Solving = 0.129344s, Total = 0.481041s, Memory = (RSS = 2182.464844Mb, VMS = 2204.304688Mb), Step range = [24-33]
2 : Statistics :: Grounding = 0.080796s, Solving = 0.013444s, Total = 0.094240s, Memory = (RSS = 2182.625000Mb, VMS = 2204.468750Mb), Step range = [34-34]
3 : Statistics :: Grounding = 0.082032s, Solving = 0.012004s, Total = 0.094037s, Memory = (RSS = 2182.785156Mb, VMS = 2204.625000Mb), Step range = [35-35]
4 : Statistics :: Grounding = 0.085119s, Solving = 0.012743s, Total = 0.097862s, Memory = (RSS = 2182.945312Mb, VMS = 2204.789062Mb), Step range = [36-36]
5 : Statistics :: Grounding = 0.086462s, Solving = 0.013857s, Total = 0.100319s, Memory = (RSS = 2183.109375Mb, VMS = 2204.949219Mb), Step range = [37-37]
6 : Statistics :: Grounding = 0.088925s, Solving = 0.017538s, Total = 0.106463s, Memory = (RSS = 2189.125000Mb, VMS = 2213.304688Mb), Step range = [38-38]
7 : Statistics :: Grounding = 0.098687s, Solving = 0.018468s, Total = 0.117155s, Memory = (RSS = 2189.722656Mb, VMS = 2213.468750Mb), Step range = [39-39]
8 : Statistics :: Grounding = 0.093483s, Solving = 0.020345s, Total = 0.113828s, Memory = (RSS = 2190.257812Mb, VMS = 2213.636719Mb), Step range = [40-40]
9 : Statistics :: Grounding = 0.093113s, Solving = 0.019220s, Total = 0.112332s, Memory = (RSS = 2190.800781Mb, VMS = 2213.789062Mb), Step range = [41-41]
10 : Statistics :: Grounding = 0.096317s, Solving = 0.023910s, Total = 0.120227s, Memory = (RSS = 2191.394531Mb, VMS = 2213.953125Mb), Step range = [42-42]
11 : Statistics :: Grounding = 0.102330s, Solving = 0.034630s, Total = 0.136960s, Memory = (RSS = 2192.058594Mb, VMS = 2214.113281Mb), Step range = [43-43]
12 : Statistics :: Grounding = 0.103586s, Solving = 0.073339s, Total = 0.176925s, Memory = (RSS = 2194.875000Mb, VMS = 2220.367188Mb), Step range = [44-44]

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.751392s due to: Stop condition reached.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-30-00] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.362549s, Solving = 0.388843s, Total = 1.751392s, Memory = (RSS = 2194.875000Mb, VMS = 2220.367188Mb), Step range = [24-44]), Calls = 12
Model :: Total atoms = 25525, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 13:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 15:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 4] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,3))
Step 18:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,3),puzzle_room_table)
Step 20:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,3))
Step 21:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 22:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 23:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
Step 24:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 11] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,2))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 29:
    Current Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 12] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 30:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 32:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,5))
Step 33:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 34:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,4))
Step 35:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 36:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 37:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 38:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 39:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 40:
    Current Sub-goals:
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,5))
Step 41:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 42:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))
Step 43:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 44:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,4),(block,5))

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=24, total_plan_length=44, step_range=range(24, 45)

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  20, AC =  20, CF = 1.0, GT =   3.12s, ST =   0.88s, OT = 0.00s, TT =   4.00s, EF = (LE = 2.0, AC = 2.0), ED = (LE = 0.8, AC = 0.8), EB = (LE = 0.4, AC = 0.4)

[03-03-2022_22-30-01] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=6, plan_length=20, start_step=24, blend=Blend(left=0, right=0)

[03-03-2022_22-30-01] DEBUG :: core.Strategies >> Decided: number_small_problems=4, number_large_problems=2, small_group_size=3, large_group_size=4

[03-03-2022_22-30-01] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=27, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=30, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=33, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=36, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=40, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=5] : [(Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=5] : [(Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [25-27]

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=86, step_range=range(0, 87)

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [25-27], problem number = 7, increment number = 7

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 25)
	('last_sgoals', 27)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1794.0086047000018)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [25-27] : Concurrency disabled : Minimum search length bound enabled with value 88

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 25
last_sgoals = 27
start_step = 86
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 88

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-30-01] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-30-01] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 86 as problem start state.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,2))', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 86})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 86})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 86})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 86})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 86})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,2)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 86})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 86})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 86})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 86})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 86})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 86})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 86})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 86})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 86})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 86})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 86})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 86})

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 86).
holds(1, complete_tower(red,puzzle_room_table), false, 86).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 86).
holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 86).
holds(1, configuration(manipulator_limb_1), extended, 86).
holds(1, configuration(manipulator_limb_2), extended, 86).
holds(1, configuration(puzzle_room_door), open, 86).
holds(1, configuration(starting_room_door), closed, 86).
holds(1, configuration(store_room_door), open, 86).
holds(1, grasping(manipulator_arm_1), nothing, 86).
holds(1, grasping(manipulator_arm_2), (block,2), 86).
holds(1, grasping(manipulator_end_1), nothing, 86).
holds(1, grasping(manipulator_end_2), (block,2), 86).
holds(1, in((block,1)), (puzzle_room,5,0), 86).
holds(1, in((block,2)), (puzzle_room,5,0), 86).
holds(1, in((block,3)), (puzzle_room,5,0), 86).
holds(1, in((block,4)), (store_room,0,0), 86).
holds(1, in((block,5)), (store_room,0,0), 86).
holds(1, in((block,6)), (puzzle_room,5,0), 86).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 86).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 86).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 86).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 86).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 86).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 86).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 86).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 86).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 86).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 86).
holds(1, in(talos), (puzzle_room,5,0), 86).
holds(1, in_tower((block,1),(block,1)), true, 86).
holds(1, in_tower((block,1),(block,2)), false, 86).
holds(1, in_tower((block,1),(block,3)), false, 86).
holds(1, in_tower((block,1),(block,4)), false, 86).
holds(1, in_tower((block,1),(block,5)), false, 86).
holds(1, in_tower((block,1),(block,6)), false, 86).
holds(1, in_tower((block,2),(block,1)), false, 86).
holds(1, in_tower((block,2),(block,2)), false, 86).
holds(1, in_tower((block,2),(block,3)), false, 86).
holds(1, in_tower((block,2),(block,4)), false, 86).
holds(1, in_tower((block,2),(block,5)), false, 86).
holds(1, in_tower((block,2),(block,6)), false, 86).
holds(1, in_tower((block,3),(block,1)), false, 86).
holds(1, in_tower((block,3),(block,2)), true, 86).
holds(1, in_tower((block,3),(block,3)), true, 86).
holds(1, in_tower((block,3),(block,4)), false, 86).
holds(1, in_tower((block,3),(block,5)), false, 86).
holds(1, in_tower((block,3),(block,6)), false, 86).
holds(1, in_tower((block,4),(block,1)), false, 86).
holds(1, in_tower((block,4),(block,2)), false, 86).
holds(1, in_tower((block,4),(block,3)), false, 86).
holds(1, in_tower((block,4),(block,4)), false, 86).
holds(1, in_tower((block,4),(block,5)), false, 86).
holds(1, in_tower((block,4),(block,6)), false, 86).
holds(1, in_tower((block,5),(block,1)), false, 86).
holds(1, in_tower((block,5),(block,2)), false, 86).
holds(1, in_tower((block,5),(block,3)), false, 86).
holds(1, in_tower((block,5),(block,4)), false, 86).
holds(1, in_tower((block,5),(block,5)), false, 86).
holds(1, in_tower((block,5),(block,6)), false, 86).
holds(1, in_tower((block,6),(block,1)), false, 86).
holds(1, in_tower((block,6),(block,2)), false, 86).
holds(1, in_tower((block,6),(block,3)), false, 86).
holds(1, in_tower((block,6),(block,4)), false, 86).
holds(1, in_tower((block,6),(block,5)), false, 86).
holds(1, in_tower((block,6),(block,6)), true, 86).
holds(1, on((block,1)), puzzle_room_table_left, 86).
holds(1, on((block,2)), (block,3), 86).
holds(1, on((block,3)), puzzle_room_table_left, 86).
holds(1, on((block,4)), nothing, 86).
holds(1, on((block,5)), nothing, 86).
holds(1, on((block,6)), puzzle_room_table_right, 86).
holds(1, tower_base((block,1),puzzle_room_table), true, 86).
holds(1, tower_base((block,2),puzzle_room_table), false, 86).
holds(1, tower_base((block,3),puzzle_room_table), true, 86).
holds(1, tower_base((block,4),puzzle_room_table), false, 86).
holds(1, tower_base((block,5),puzzle_room_table), false, 86).
holds(1, tower_base((block,6),puzzle_room_table), true, 86).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 86).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 86).
holds(2, complete_tower(blue,puzzle_room_table), false, 86).
holds(2, complete_tower(red,puzzle_room_table), false, 86).
holds(2, configuration(manipulator_arm_1), extended, 86).
holds(2, configuration(manipulator_arm_2), extended, 86).
holds(2, configuration(puzzle_room_door), open, 86).
holds(2, configuration(starting_room_door), closed, 86).
holds(2, configuration(store_room_door), open, 86).
holds(2, grasping(manipulator_arm_1), nothing, 86).
holds(2, grasping(manipulator_arm_2), (block,2), 86).
holds(2, in((block,1)), puzzle_room, 86).
holds(2, in((block,2)), puzzle_room, 86).
holds(2, in((block,3)), puzzle_room, 86).
holds(2, in((block,4)), store_room, 86).
holds(2, in((block,5)), store_room, 86).
holds(2, in((block,6)), puzzle_room, 86).
holds(2, in(manipulator_arm_1), puzzle_room, 86).
holds(2, in(manipulator_arm_2), puzzle_room, 86).
holds(2, in(puzzle_room_table), puzzle_room, 86).
holds(2, in(talos), puzzle_room, 86).
holds(2, in_tower((block,1),(block,1)), true, 86).
holds(2, in_tower((block,1),(block,2)), false, 86).
holds(2, in_tower((block,1),(block,3)), false, 86).
holds(2, in_tower((block,1),(block,4)), false, 86).
holds(2, in_tower((block,1),(block,5)), false, 86).
holds(2, in_tower((block,1),(block,6)), false, 86).
holds(2, in_tower((block,2),(block,1)), false, 86).
holds(2, in_tower((block,2),(block,2)), false, 86).
holds(2, in_tower((block,2),(block,3)), false, 86).
holds(2, in_tower((block,2),(block,4)), false, 86).
holds(2, in_tower((block,2),(block,5)), false, 86).
holds(2, in_tower((block,2),(block,6)), false, 86).
holds(2, in_tower((block,3),(block,1)), false, 86).
holds(2, in_tower((block,3),(block,2)), true, 86).
holds(2, in_tower((block,3),(block,3)), true, 86).
holds(2, in_tower((block,3),(block,4)), false, 86).
holds(2, in_tower((block,3),(block,5)), false, 86).
holds(2, in_tower((block,3),(block,6)), false, 86).
holds(2, in_tower((block,4),(block,1)), false, 86).
holds(2, in_tower((block,4),(block,2)), false, 86).
holds(2, in_tower((block,4),(block,3)), false, 86).
holds(2, in_tower((block,4),(block,4)), false, 86).
holds(2, in_tower((block,4),(block,5)), false, 86).
holds(2, in_tower((block,4),(block,6)), false, 86).
holds(2, in_tower((block,5),(block,1)), false, 86).
holds(2, in_tower((block,5),(block,2)), false, 86).
holds(2, in_tower((block,5),(block,3)), false, 86).
holds(2, in_tower((block,5),(block,4)), false, 86).
holds(2, in_tower((block,5),(block,5)), false, 86).
holds(2, in_tower((block,5),(block,6)), false, 86).
holds(2, in_tower((block,6),(block,1)), false, 86).
holds(2, in_tower((block,6),(block,2)), false, 86).
holds(2, in_tower((block,6),(block,3)), false, 86).
holds(2, in_tower((block,6),(block,4)), false, 86).
holds(2, in_tower((block,6),(block,5)), false, 86).
holds(2, in_tower((block,6),(block,6)), true, 86).
holds(2, on((block,1)), puzzle_room_table, 86).
holds(2, on((block,2)), (block,3), 86).
holds(2, on((block,3)), puzzle_room_table, 86).
holds(2, on((block,4)), nothing, 86).
holds(2, on((block,5)), nothing, 86).
holds(2, on((block,6)), puzzle_room_table, 86).
holds(2, tower_base((block,1),puzzle_room_table), true, 86).
holds(2, tower_base((block,2),puzzle_room_table), false, 86).
holds(2, tower_base((block,3),puzzle_room_table), true, 86).
holds(2, tower_base((block,4),puzzle_room_table), false, 86).
holds(2, tower_base((block,5),puzzle_room_table), false, 86).
holds(2, tower_base((block,6),puzzle_room_table), true, 86).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 86).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 86).

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=88']

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 27})

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 25).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 26).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 27).

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=86, step_range=range(0, 87)

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 86, Total actions = 86, Produced sub-goal stages = 0

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=88']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002626BCBFF70>]
	incrementor = SolveIncrementor(step_start=86, step_increase=1, step_increase_initial=3, step_end_min=89, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1757.0257633000042, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 86), range_=None), IncPart(name='plan_module', args=('#inc', 86, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 86, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 86, 25, 27, 'sequential', 'false'), range_=None)]

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 821 rules

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0048571000002084475s

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117170s.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023012s with result Satisfiable.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002629031F0E0>

[03-03-2022_22-30-01] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 86)
	('last_sgoals', 27)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 25)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002629031F0E0>)

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 86). %* None *%
#program plan_module(#inc, 86, false, false). %* None *%
#program optimisation_module(#inc, 86, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 86, 25, 27, sequential, false). %* None *%

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     85 : Current =     88
Incrementor step ends | Minimum  =     89 : Maximum =    300

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(88)]), ('state_module', [Number(86), Number(86)]), ('plan_module', [Number(86), Number(86), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(86), Number(86), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(86), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(87), Number(86)]), ('plan_module', [Number(87), Number(86), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(87), Number(86), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(86), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(88), Number(86)]), ('plan_module', [Number(88), Number(86), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(88), Number(86), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(88)]), ('action_preconditions', [Number(88)]), ('variable_relations', [Number(88)]), ('abstraction_mappings', [Number(88)]), ('conformance_module', [Number(88), Number(86), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.498111s.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.139145s with result Satisfiable.

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6372564999996939, Incremental time limit = None
Running cumulative time = 0.6372564999996939, Cumulative time limit = 1757.0257633000042
Used memory = (RSS = 2184.480469Mb, VMS = 2205.988281Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.498111s, Solving = 0.139145s, Total = 0.637256s, Memory = (RSS = 2184.480469Mb, VMS = 2205.988281Mb), Step range = [86-88]), Calls = 1
Final Model :: Total atoms = 21017, Cost = (-2,), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     88 : Current =     89
Incrementor step ends | Minimum  =     89 : Maximum =    300

[03-03-2022_22-30-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(89)]), ('state_module', [Number(89), Number(86)]), ('plan_module', [Number(89), Number(86), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(89), Number(86), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(89)]), ('action_preconditions', [Number(89)]), ('variable_relations', [Number(89)]), ('abstraction_mappings', [Number(89)]), ('conformance_module', [Number(89), Number(86), Number(25), Number(27), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169802s.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032330s with result Satisfiable.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20213149999972302, Incremental time limit = None
Running cumulative time = 0.8393879999994169, Cumulative time limit = 1757.0257633000042
Used memory = (RSS = 2187.964844Mb, VMS = 2209.578125Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.667913s, Solving = 0.171475s, Total = 0.839388s, Memory = (RSS = 2187.964844Mb, VMS = 2209.578125Mb), Step range = [86-89]), Calls = 2
Final Model :: Total atoms = 21416, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.498111s, Solving = 0.139145s, Total = 0.637256s, Memory = (RSS = 2184.480469Mb, VMS = 2205.988281Mb), Step range = [86-88]
2 : Statistics :: Grounding = 0.169802s, Solving = 0.032330s, Total = 0.202131s, Memory = (RSS = 2187.964844Mb, VMS = 2209.578125Mb), Step range = [89-89]

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.839388s due to: Stop condition reached.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 27, Last requested goal index = 27, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.667913s, Solving = 0.171475s, Total = 0.839388s, Memory = (RSS = 2187.964844Mb, VMS = 2209.578125Mb), Step range = [86-89]), Calls = 2
Model :: Total atoms = 21416, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 70:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 71:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 72:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,1))
Step 73:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,1))
Step 74:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,1))
Step 75:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 76:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 77:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 78:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 79:
    Current Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 80:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 81:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 82:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 83:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 84:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 85:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 87:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 88:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 44 : Goals achieved = 27 : Goals unachieved = 17 : Complete = False

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=5] : [(Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [28-30]

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=89, step_range=range(0, 90)

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [28-30], problem number = 8, increment number = 8

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 28)
	('last_sgoals', 30)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1794.0086047000018)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [28-30] : Concurrency disabled : Minimum search length bound enabled with value 91

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 28
last_sgoals = 30
start_step = 89
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 91

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-30-02] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-30-02] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 89 as problem start state.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 89})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 89})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 89})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 89})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 89})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 89})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 89})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 89})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 89})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 89})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 89})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 89})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 89})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 89})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 89})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 89})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 89})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 89})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 89})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 89})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 89})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 89})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 89})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 89})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 89})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 89})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 89})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 89})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 89})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 89})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 89})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 89})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 89})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 89})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 89})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 89})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 89})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 89})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 89})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 89})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 89})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 89})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 89})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 89})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 89})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 89})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 89})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 89})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 89})

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 89).
holds(1, complete_tower(red,puzzle_room_table), false, 89).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 89).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 89).
holds(1, configuration(manipulator_limb_1), retracted, 89).
holds(1, configuration(manipulator_limb_2), retracted, 89).
holds(1, configuration(puzzle_room_door), open, 89).
holds(1, configuration(starting_room_door), closed, 89).
holds(1, configuration(store_room_door), open, 89).
holds(1, grasping(manipulator_arm_1), nothing, 89).
holds(1, grasping(manipulator_arm_2), nothing, 89).
holds(1, grasping(manipulator_end_1), nothing, 89).
holds(1, grasping(manipulator_end_2), nothing, 89).
holds(1, in((block,1)), (puzzle_room,5,0), 89).
holds(1, in((block,2)), (puzzle_room,5,0), 89).
holds(1, in((block,3)), (puzzle_room,5,0), 89).
holds(1, in((block,4)), (store_room,0,0), 89).
holds(1, in((block,5)), (store_room,0,0), 89).
holds(1, in((block,6)), (puzzle_room,5,0), 89).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 89).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 89).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 89).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 89).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 89).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 89).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 89).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 89).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 89).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 89).
holds(1, in(talos), (puzzle_room,5,0), 89).
holds(1, in_tower((block,1),(block,1)), true, 89).
holds(1, in_tower((block,1),(block,2)), false, 89).
holds(1, in_tower((block,1),(block,3)), false, 89).
holds(1, in_tower((block,1),(block,4)), false, 89).
holds(1, in_tower((block,1),(block,5)), false, 89).
holds(1, in_tower((block,1),(block,6)), false, 89).
holds(1, in_tower((block,2),(block,1)), false, 89).
holds(1, in_tower((block,2),(block,2)), false, 89).
holds(1, in_tower((block,2),(block,3)), false, 89).
holds(1, in_tower((block,2),(block,4)), false, 89).
holds(1, in_tower((block,2),(block,5)), false, 89).
holds(1, in_tower((block,2),(block,6)), false, 89).
holds(1, in_tower((block,3),(block,1)), false, 89).
holds(1, in_tower((block,3),(block,2)), true, 89).
holds(1, in_tower((block,3),(block,3)), true, 89).
holds(1, in_tower((block,3),(block,4)), false, 89).
holds(1, in_tower((block,3),(block,5)), false, 89).
holds(1, in_tower((block,3),(block,6)), false, 89).
holds(1, in_tower((block,4),(block,1)), false, 89).
holds(1, in_tower((block,4),(block,2)), false, 89).
holds(1, in_tower((block,4),(block,3)), false, 89).
holds(1, in_tower((block,4),(block,4)), false, 89).
holds(1, in_tower((block,4),(block,5)), false, 89).
holds(1, in_tower((block,4),(block,6)), false, 89).
holds(1, in_tower((block,5),(block,1)), false, 89).
holds(1, in_tower((block,5),(block,2)), false, 89).
holds(1, in_tower((block,5),(block,3)), false, 89).
holds(1, in_tower((block,5),(block,4)), false, 89).
holds(1, in_tower((block,5),(block,5)), false, 89).
holds(1, in_tower((block,5),(block,6)), false, 89).
holds(1, in_tower((block,6),(block,1)), false, 89).
holds(1, in_tower((block,6),(block,2)), false, 89).
holds(1, in_tower((block,6),(block,3)), false, 89).
holds(1, in_tower((block,6),(block,4)), false, 89).
holds(1, in_tower((block,6),(block,5)), false, 89).
holds(1, in_tower((block,6),(block,6)), true, 89).
holds(1, on((block,1)), puzzle_room_table_left, 89).
holds(1, on((block,2)), (block,3), 89).
holds(1, on((block,3)), puzzle_room_table_left, 89).
holds(1, on((block,4)), nothing, 89).
holds(1, on((block,5)), nothing, 89).
holds(1, on((block,6)), puzzle_room_table_right, 89).
holds(1, tower_base((block,1),puzzle_room_table), true, 89).
holds(1, tower_base((block,2),puzzle_room_table), false, 89).
holds(1, tower_base((block,3),puzzle_room_table), true, 89).
holds(1, tower_base((block,4),puzzle_room_table), false, 89).
holds(1, tower_base((block,5),puzzle_room_table), false, 89).
holds(1, tower_base((block,6),puzzle_room_table), true, 89).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 89).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 89).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 89).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 89).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 89).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 89).
holds(2, complete_tower(blue,puzzle_room_table), false, 89).
holds(2, complete_tower(red,puzzle_room_table), false, 89).
holds(2, configuration(manipulator_arm_1), retracted, 89).
holds(2, configuration(manipulator_arm_2), retracted, 89).
holds(2, configuration(puzzle_room_door), open, 89).
holds(2, configuration(starting_room_door), closed, 89).
holds(2, configuration(store_room_door), open, 89).
holds(2, grasping(manipulator_arm_1), nothing, 89).
holds(2, grasping(manipulator_arm_2), nothing, 89).
holds(2, in((block,1)), puzzle_room, 89).
holds(2, in((block,2)), puzzle_room, 89).
holds(2, in((block,3)), puzzle_room, 89).
holds(2, in((block,4)), store_room, 89).
holds(2, in((block,5)), store_room, 89).
holds(2, in((block,6)), puzzle_room, 89).
holds(2, in(manipulator_arm_1), puzzle_room, 89).
holds(2, in(manipulator_arm_2), puzzle_room, 89).
holds(2, in(puzzle_room_table), puzzle_room, 89).
holds(2, in(talos), puzzle_room, 89).
holds(2, in_tower((block,1),(block,1)), true, 89).
holds(2, in_tower((block,1),(block,2)), false, 89).
holds(2, in_tower((block,1),(block,3)), false, 89).
holds(2, in_tower((block,1),(block,4)), false, 89).
holds(2, in_tower((block,1),(block,5)), false, 89).
holds(2, in_tower((block,1),(block,6)), false, 89).
holds(2, in_tower((block,2),(block,1)), false, 89).
holds(2, in_tower((block,2),(block,2)), false, 89).
holds(2, in_tower((block,2),(block,3)), false, 89).
holds(2, in_tower((block,2),(block,4)), false, 89).
holds(2, in_tower((block,2),(block,5)), false, 89).
holds(2, in_tower((block,2),(block,6)), false, 89).
holds(2, in_tower((block,3),(block,1)), false, 89).
holds(2, in_tower((block,3),(block,2)), true, 89).
holds(2, in_tower((block,3),(block,3)), true, 89).
holds(2, in_tower((block,3),(block,4)), false, 89).
holds(2, in_tower((block,3),(block,5)), false, 89).
holds(2, in_tower((block,3),(block,6)), false, 89).
holds(2, in_tower((block,4),(block,1)), false, 89).
holds(2, in_tower((block,4),(block,2)), false, 89).
holds(2, in_tower((block,4),(block,3)), false, 89).
holds(2, in_tower((block,4),(block,4)), false, 89).
holds(2, in_tower((block,4),(block,5)), false, 89).
holds(2, in_tower((block,4),(block,6)), false, 89).
holds(2, in_tower((block,5),(block,1)), false, 89).
holds(2, in_tower((block,5),(block,2)), false, 89).
holds(2, in_tower((block,5),(block,3)), false, 89).
holds(2, in_tower((block,5),(block,4)), false, 89).
holds(2, in_tower((block,5),(block,5)), false, 89).
holds(2, in_tower((block,5),(block,6)), false, 89).
holds(2, in_tower((block,6),(block,1)), false, 89).
holds(2, in_tower((block,6),(block,2)), false, 89).
holds(2, in_tower((block,6),(block,3)), false, 89).
holds(2, in_tower((block,6),(block,4)), false, 89).
holds(2, in_tower((block,6),(block,5)), false, 89).
holds(2, in_tower((block,6),(block,6)), true, 89).
holds(2, on((block,1)), puzzle_room_table, 89).
holds(2, on((block,2)), (block,3), 89).
holds(2, on((block,3)), puzzle_room_table, 89).
holds(2, on((block,4)), nothing, 89).
holds(2, on((block,5)), nothing, 89).
holds(2, on((block,6)), puzzle_room_table, 89).
holds(2, tower_base((block,1),puzzle_room_table), true, 89).
holds(2, tower_base((block,2),puzzle_room_table), false, 89).
holds(2, tower_base((block,3),puzzle_room_table), true, 89).
holds(2, tower_base((block,4),puzzle_room_table), false, 89).
holds(2, tower_base((block,5),puzzle_room_table), false, 89).
holds(2, tower_base((block,6),puzzle_room_table), true, 89).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 89).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 89).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 89).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 89).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 89).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 89).

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=91']

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 30})

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 28).
sub_goal(2, talos, move(store_room), in(talos), store_room, 29).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 30).

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=89, step_range=range(0, 90)

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 89, Total actions = 89, Produced sub-goal stages = 0

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=91']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002626BCBFD30>]
	incrementor = SolveIncrementor(step_start=89, step_increase=1, step_increase_initial=3, step_end_min=92, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1756.1863753000048, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 89), range_=None), IncPart(name='plan_module', args=('#inc', 89, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 89, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 89, 28, 30, 'sequential', 'false'), range_=None)]

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 821 rules

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0051075999999739s

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124951s.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024018s with result Satisfiable.

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000026290504180>

[03-03-2022_22-30-02] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 89)
	('last_sgoals', 30)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 28)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000026290504180>)

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 89). %* None *%
#program plan_module(#inc, 89, false, false). %* None *%
#program optimisation_module(#inc, 89, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 89, 28, 30, sequential, false). %* None *%

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     88 : Current =     91
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(91)]), ('state_module', [Number(89), Number(89)]), ('plan_module', [Number(89), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(89), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(89)]), ('action_preconditions', [Number(89)]), ('variable_relations', [Number(89)]), ('abstraction_mappings', [Number(89)]), ('conformance_module', [Number(89), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(90), Number(89)]), ('plan_module', [Number(90), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(90), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(90)]), ('action_preconditions', [Number(90)]), ('variable_relations', [Number(90)]), ('abstraction_mappings', [Number(90)]), ('conformance_module', [Number(90), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(91), Number(89)]), ('plan_module', [Number(91), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(91), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(91)]), ('action_preconditions', [Number(91)]), ('variable_relations', [Number(91)]), ('abstraction_mappings', [Number(91)]), ('conformance_module', [Number(91), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.484920s.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122290s with result Satisfiable.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6072094000001016, Incremental time limit = None
Running cumulative time = 0.6072094000001016, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2183.328125Mb, VMS = 2204.812500Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.484920s, Solving = 0.122290s, Total = 0.607209s, Memory = (RSS = 2183.328125Mb, VMS = 2204.812500Mb), Step range = [89-91]), Calls = 1
Final Model :: Total atoms = 21019, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     91 : Current =     92
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(92)]), ('state_module', [Number(92), Number(89)]), ('plan_module', [Number(92), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(92), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(92)]), ('action_preconditions', [Number(92)]), ('variable_relations', [Number(92)]), ('abstraction_mappings', [Number(92)]), ('conformance_module', [Number(92), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.219276s.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020538s with result Unsatisfiable.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2398137000004681, Incremental time limit = None
Running cumulative time = 0.8470231000005697, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2183.535156Mb, VMS = 2205.023438Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     92 : Current =     93
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(93)]), ('state_module', [Number(93), Number(89)]), ('plan_module', [Number(93), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(93), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(93)]), ('action_preconditions', [Number(93)]), ('variable_relations', [Number(93)]), ('abstraction_mappings', [Number(93)]), ('conformance_module', [Number(93), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235490s.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032522s with result Unsatisfiable.

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2680121000003055, Incremental time limit = None
Running cumulative time = 1.1150352000008752, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2183.980469Mb, VMS = 2205.472656Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     93 : Current =     94
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(94)]), ('state_module', [Number(94), Number(89)]), ('plan_module', [Number(94), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(94), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(94)]), ('action_preconditions', [Number(94)]), ('variable_relations', [Number(94)]), ('abstraction_mappings', [Number(94)]), ('conformance_module', [Number(94), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257353s.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044578s with result Unsatisfiable.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30193119999967166, Incremental time limit = None
Running cumulative time = 1.4169664000005469, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2191.273438Mb, VMS = 2214.203125Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     94 : Current =     95
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(95)]), ('state_module', [Number(95), Number(89)]), ('plan_module', [Number(95), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(95), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(95)]), ('action_preconditions', [Number(95)]), ('variable_relations', [Number(95)]), ('abstraction_mappings', [Number(95)]), ('conformance_module', [Number(95), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.265802s.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044297s with result Unsatisfiable.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31009880000010526, Incremental time limit = None
Running cumulative time = 1.7270652000006521, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2194.964844Mb, VMS = 2217.222656Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     95 : Current =     96
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(96)]), ('state_module', [Number(96), Number(89)]), ('plan_module', [Number(96), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(96), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(96)]), ('action_preconditions', [Number(96)]), ('variable_relations', [Number(96)]), ('abstraction_mappings', [Number(96)]), ('conformance_module', [Number(96), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.289806s.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060981s with result Unsatisfiable.

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35078699999985474, Incremental time limit = None
Running cumulative time = 2.077852200000507, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2197.355469Mb, VMS = 2221.910156Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     96 : Current =     97
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(97)]), ('state_module', [Number(97), Number(89)]), ('plan_module', [Number(97), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(97), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(97)]), ('action_preconditions', [Number(97)]), ('variable_relations', [Number(97)]), ('abstraction_mappings', [Number(97)]), ('conformance_module', [Number(97), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.282979s.

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083868s with result Unsatisfiable.

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.36684740000009697, Incremental time limit = None
Running cumulative time = 2.444699600000604, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2199.601562Mb, VMS = 2222.472656Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     97 : Current =     98
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(98)]), ('state_module', [Number(98), Number(89)]), ('plan_module', [Number(98), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(98), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(98)]), ('action_preconditions', [Number(98)]), ('variable_relations', [Number(98)]), ('abstraction_mappings', [Number(98)]), ('conformance_module', [Number(98), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.296234s.

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.103494s with result Unsatisfiable.

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3997281999995721, Incremental time limit = None
Running cumulative time = 2.844427800000176, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2206.218750Mb, VMS = 2236.582031Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     98 : Current =     99
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(99)]), ('state_module', [Number(99), Number(89)]), ('plan_module', [Number(99), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(99), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(99)]), ('action_preconditions', [Number(99)]), ('variable_relations', [Number(99)]), ('abstraction_mappings', [Number(99)]), ('conformance_module', [Number(99), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.297026s.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078461s with result Unsatisfiable.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3754871000001003, Incremental time limit = None
Running cumulative time = 3.2199149000002762, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2209.855469Mb, VMS = 2238.554688Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     99 : Current =    100
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(100)]), ('state_module', [Number(100), Number(89)]), ('plan_module', [Number(100), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(100), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(100)]), ('action_preconditions', [Number(100)]), ('variable_relations', [Number(100)]), ('abstraction_mappings', [Number(100)]), ('conformance_module', [Number(100), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.303128s.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122035s with result Unsatisfiable.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.425163099999736, Incremental time limit = None
Running cumulative time = 3.6450780000000123, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2212.718750Mb, VMS = 2239.113281Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =    100 : Current =    101
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(101)]), ('state_module', [Number(101), Number(89)]), ('plan_module', [Number(101), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(101), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(101)]), ('action_preconditions', [Number(101)]), ('variable_relations', [Number(101)]), ('abstraction_mappings', [Number(101)]), ('conformance_module', [Number(101), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.309680s.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.115434s with result Unsatisfiable.

[03-03-2022_22-30-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4251136999996561, Incremental time limit = None
Running cumulative time = 4.070191699999668, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2215.792969Mb, VMS = 2239.671875Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =    101 : Current =    102
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(102)]), ('state_module', [Number(102), Number(89)]), ('plan_module', [Number(102), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(102), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(102)]), ('action_preconditions', [Number(102)]), ('variable_relations', [Number(102)]), ('abstraction_mappings', [Number(102)]), ('conformance_module', [Number(102), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.321641s.

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.125497s with result Unsatisfiable.

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4471377000004395, Incremental time limit = None
Running cumulative time = 4.517329400000108, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2218.476562Mb, VMS = 2241.289062Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =    102 : Current =    103
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(103)]), ('state_module', [Number(103), Number(89)]), ('plan_module', [Number(103), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(103), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(103)]), ('action_preconditions', [Number(103)]), ('variable_relations', [Number(103)]), ('abstraction_mappings', [Number(103)]), ('conformance_module', [Number(103), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.318639s.

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.138851s with result Unsatisfiable.

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.45749060000025565, Incremental time limit = None
Running cumulative time = 4.9748200000003635, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2221.261719Mb, VMS = 2254.898438Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =    103 : Current =    104
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(104)]), ('state_module', [Number(104), Number(89)]), ('plan_module', [Number(104), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(104), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(104)]), ('action_preconditions', [Number(104)]), ('variable_relations', [Number(104)]), ('abstraction_mappings', [Number(104)]), ('conformance_module', [Number(104), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.315198s.

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.137442s with result Unsatisfiable.

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4526393000001008, Incremental time limit = None
Running cumulative time = 5.427459300000464, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2224.085938Mb, VMS = 2256.246094Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =    104 : Current =    105
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(105)]), ('state_module', [Number(105), Number(89)]), ('plan_module', [Number(105), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(105), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(105)]), ('action_preconditions', [Number(105)]), ('variable_relations', [Number(105)]), ('abstraction_mappings', [Number(105)]), ('conformance_module', [Number(105), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.317548s.

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122639s with result Unsatisfiable.

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4401874999998654, Incremental time limit = None
Running cumulative time = 5.86764680000033, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2227.007812Mb, VMS = 2256.804688Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =    105 : Current =    106
Incrementor step ends | Minimum  =     92 : Maximum =    300

[03-03-2022_22-30-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(106)]), ('state_module', [Number(106), Number(89)]), ('plan_module', [Number(106), Number(89), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(106), Number(89), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(106)]), ('action_preconditions', [Number(106)]), ('variable_relations', [Number(106)]), ('abstraction_mappings', [Number(106)]), ('conformance_module', [Number(106), Number(89), Number(28), Number(30), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.318879s.

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.232042s with result Satisfiable.

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5509204999998474, Incremental time limit = None
Running cumulative time = 6.418567300000177, Cumulative time limit = 1756.1863753000048
Used memory = (RSS = 2232.039062Mb, VMS = 2259.621094Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.833600s, Solving = 1.584967s, Total = 6.418567s, Memory = (RSS = 2232.039062Mb, VMS = 2259.621094Mb), Step range = [89-106]), Calls = 16
Final Model :: Total atoms = 26980, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.484920s, Solving = 0.122290s, Total = 0.607209s, Memory = (RSS = 2183.328125Mb, VMS = 2204.812500Mb), Step range = [89-91]
2 : Statistics :: Grounding = 0.219276s, Solving = 0.020538s, Total = 0.239814s, Memory = (RSS = 2183.535156Mb, VMS = 2205.023438Mb), Step range = [92-92]
3 : Statistics :: Grounding = 0.235490s, Solving = 0.032522s, Total = 0.268012s, Memory = (RSS = 2183.980469Mb, VMS = 2205.472656Mb), Step range = [93-93]
4 : Statistics :: Grounding = 0.257353s, Solving = 0.044578s, Total = 0.301931s, Memory = (RSS = 2191.273438Mb, VMS = 2214.203125Mb), Step range = [94-94]
5 : Statistics :: Grounding = 0.265802s, Solving = 0.044297s, Total = 0.310099s, Memory = (RSS = 2194.964844Mb, VMS = 2217.222656Mb), Step range = [95-95]
6 : Statistics :: Grounding = 0.289806s, Solving = 0.060981s, Total = 0.350787s, Memory = (RSS = 2197.355469Mb, VMS = 2221.910156Mb), Step range = [96-96]
7 : Statistics :: Grounding = 0.282979s, Solving = 0.083868s, Total = 0.366847s, Memory = (RSS = 2199.601562Mb, VMS = 2222.472656Mb), Step range = [97-97]
8 : Statistics :: Grounding = 0.296234s, Solving = 0.103494s, Total = 0.399728s, Memory = (RSS = 2206.218750Mb, VMS = 2236.582031Mb), Step range = [98-98]
9 : Statistics :: Grounding = 0.297026s, Solving = 0.078461s, Total = 0.375487s, Memory = (RSS = 2209.855469Mb, VMS = 2238.554688Mb), Step range = [99-99]
10 : Statistics :: Grounding = 0.303128s, Solving = 0.122035s, Total = 0.425163s, Memory = (RSS = 2212.718750Mb, VMS = 2239.113281Mb), Step range = [100-100]
11 : Statistics :: Grounding = 0.309680s, Solving = 0.115434s, Total = 0.425114s, Memory = (RSS = 2215.792969Mb, VMS = 2239.671875Mb), Step range = [101-101]
12 : Statistics :: Grounding = 0.321641s, Solving = 0.125497s, Total = 0.447138s, Memory = (RSS = 2218.476562Mb, VMS = 2241.289062Mb), Step range = [102-102]
13 : Statistics :: Grounding = 0.318639s, Solving = 0.138851s, Total = 0.457491s, Memory = (RSS = 2221.261719Mb, VMS = 2254.898438Mb), Step range = [103-103]
14 : Statistics :: Grounding = 0.315198s, Solving = 0.137442s, Total = 0.452639s, Memory = (RSS = 2224.085938Mb, VMS = 2256.246094Mb), Step range = [104-104]
15 : Statistics :: Grounding = 0.317548s, Solving = 0.122639s, Total = 0.440187s, Memory = (RSS = 2227.007812Mb, VMS = 2256.804688Mb), Step range = [105-105]
16 : Statistics :: Grounding = 0.318879s, Solving = 0.232042s, Total = 0.550920s, Memory = (RSS = 2232.039062Mb, VMS = 2259.621094Mb), Step range = [106-106]

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 6.418567s due to: Stop condition reached.

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.833600s, Solving = 1.584967s, Total = 6.418567s, Memory = (RSS = 2232.039062Mb, VMS = 2259.621094Mb), Step range = [89-106]), Calls = 16
Model :: Total atoms = 26980, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 17 :: Actions = 17                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 70:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 71:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 72:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,1))
Step 73:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,1))
Step 74:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,1))
Step 75:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 76:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 77:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 78:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 79:
    Current Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 80:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 81:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 82:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 83:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 84:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 85:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 87:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 88:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 90:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 91:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 92:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 93:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 94:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 95:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 96:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 97:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 98:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 99:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 100:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 101:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 102:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 103:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 104:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 105:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 106:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 8 : Total constraining sub-goal stages = 44 : Goals achieved = 30 : Goals unachieved = 14 : Complete = False

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 9 by method ground-first is [1-1].

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 9 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=5] : [(Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [31-33]

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=106, step_range=range(0, 107)

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 106, Total actions = 106, Produced sub-goal stages = 0

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 106, Total actions = 106, Produced sub-goal stages = 0

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 106, Total actions = 106, Produced sub-goal stages = 0

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [31-33], problem number = 9, increment number = 9

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 31)
	('last_sgoals', 33)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1794.0086047000018)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [31-33] : Concurrency disabled : Minimum search length bound enabled with value 108

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 31
last_sgoals = 33
start_step = 106
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 108

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-30-10] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-30-10] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 106 as problem start state.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 106})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 106})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 106})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 106})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 106})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 106})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 106})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 106})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 106})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 106})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 106})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,5,1)', 'S': 106})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,5,1)', 'S': 106})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,5,1)', 'S': 106})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,5,1)', 'S': 106})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,5,1)', 'S': 106})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,5,1)', 'S': 106})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 106})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,5,1)', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 106})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 106})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 106})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 106})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 106})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 106})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 106})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 106})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 106})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 106})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 106})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 106})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 106})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 106})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 106})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 106})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 106})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 106})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 106})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 106})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 106})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 106})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 106})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 106})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 106})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 106})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 106})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 106})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 106})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 106})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 106})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 106})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 106})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 106})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 106})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 106})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 106})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 106})

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 106).
holds(1, complete_tower(red,puzzle_room_table), false, 106).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 106).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 106).
holds(1, configuration(manipulator_limb_1), extended, 106).
holds(1, configuration(manipulator_limb_2), retracted, 106).
holds(1, configuration(puzzle_room_door), open, 106).
holds(1, configuration(starting_room_door), closed, 106).
holds(1, configuration(store_room_door), open, 106).
holds(1, grasping(manipulator_arm_1), nothing, 106).
holds(1, grasping(manipulator_arm_2), nothing, 106).
holds(1, grasping(manipulator_end_1), nothing, 106).
holds(1, grasping(manipulator_end_2), nothing, 106).
holds(1, in((block,1)), (puzzle_room,5,0), 106).
holds(1, in((block,2)), (puzzle_room,5,0), 106).
holds(1, in((block,3)), (puzzle_room,5,0), 106).
holds(1, in((block,4)), (store_room,0,0), 106).
holds(1, in((block,5)), (store_room,0,0), 106).
holds(1, in((block,6)), (puzzle_room,5,0), 106).
holds(1, in(manipulator_arm_1), (store_room,5,1), 106).
holds(1, in(manipulator_arm_2), (store_room,5,1), 106).
holds(1, in(manipulator_end_1), (store_room,5,1), 106).
holds(1, in(manipulator_end_2), (store_room,5,1), 106).
holds(1, in(manipulator_limb_1), (store_room,5,1), 106).
holds(1, in(manipulator_limb_2), (store_room,5,1), 106).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 106).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 106).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 106).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 106).
holds(1, in(talos), (store_room,5,1), 106).
holds(1, in_tower((block,1),(block,1)), true, 106).
holds(1, in_tower((block,1),(block,2)), false, 106).
holds(1, in_tower((block,1),(block,3)), false, 106).
holds(1, in_tower((block,1),(block,4)), false, 106).
holds(1, in_tower((block,1),(block,5)), false, 106).
holds(1, in_tower((block,1),(block,6)), false, 106).
holds(1, in_tower((block,2),(block,1)), false, 106).
holds(1, in_tower((block,2),(block,2)), false, 106).
holds(1, in_tower((block,2),(block,3)), false, 106).
holds(1, in_tower((block,2),(block,4)), false, 106).
holds(1, in_tower((block,2),(block,5)), false, 106).
holds(1, in_tower((block,2),(block,6)), false, 106).
holds(1, in_tower((block,3),(block,1)), false, 106).
holds(1, in_tower((block,3),(block,2)), true, 106).
holds(1, in_tower((block,3),(block,3)), true, 106).
holds(1, in_tower((block,3),(block,4)), false, 106).
holds(1, in_tower((block,3),(block,5)), false, 106).
holds(1, in_tower((block,3),(block,6)), false, 106).
holds(1, in_tower((block,4),(block,1)), false, 106).
holds(1, in_tower((block,4),(block,2)), false, 106).
holds(1, in_tower((block,4),(block,3)), false, 106).
holds(1, in_tower((block,4),(block,4)), false, 106).
holds(1, in_tower((block,4),(block,5)), false, 106).
holds(1, in_tower((block,4),(block,6)), false, 106).
holds(1, in_tower((block,5),(block,1)), false, 106).
holds(1, in_tower((block,5),(block,2)), false, 106).
holds(1, in_tower((block,5),(block,3)), false, 106).
holds(1, in_tower((block,5),(block,4)), false, 106).
holds(1, in_tower((block,5),(block,5)), false, 106).
holds(1, in_tower((block,5),(block,6)), false, 106).
holds(1, in_tower((block,6),(block,1)), false, 106).
holds(1, in_tower((block,6),(block,2)), false, 106).
holds(1, in_tower((block,6),(block,3)), false, 106).
holds(1, in_tower((block,6),(block,4)), false, 106).
holds(1, in_tower((block,6),(block,5)), false, 106).
holds(1, in_tower((block,6),(block,6)), true, 106).
holds(1, on((block,1)), puzzle_room_table_left, 106).
holds(1, on((block,2)), (block,3), 106).
holds(1, on((block,3)), puzzle_room_table_left, 106).
holds(1, on((block,4)), nothing, 106).
holds(1, on((block,5)), nothing, 106).
holds(1, on((block,6)), puzzle_room_table_right, 106).
holds(1, tower_base((block,1),puzzle_room_table), true, 106).
holds(1, tower_base((block,2),puzzle_room_table), false, 106).
holds(1, tower_base((block,3),puzzle_room_table), true, 106).
holds(1, tower_base((block,4),puzzle_room_table), false, 106).
holds(1, tower_base((block,5),puzzle_room_table), false, 106).
holds(1, tower_base((block,6),puzzle_room_table), true, 106).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 106).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 106).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 106).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 106).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 106).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 106).
holds(2, complete_tower(blue,puzzle_room_table), false, 106).
holds(2, complete_tower(red,puzzle_room_table), false, 106).
holds(2, configuration(manipulator_arm_1), extended, 106).
holds(2, configuration(manipulator_arm_2), retracted, 106).
holds(2, configuration(puzzle_room_door), open, 106).
holds(2, configuration(starting_room_door), closed, 106).
holds(2, configuration(store_room_door), open, 106).
holds(2, grasping(manipulator_arm_1), nothing, 106).
holds(2, grasping(manipulator_arm_2), nothing, 106).
holds(2, in((block,1)), puzzle_room, 106).
holds(2, in((block,2)), puzzle_room, 106).
holds(2, in((block,3)), puzzle_room, 106).
holds(2, in((block,4)), store_room, 106).
holds(2, in((block,5)), store_room, 106).
holds(2, in((block,6)), puzzle_room, 106).
holds(2, in(manipulator_arm_1), store_room, 106).
holds(2, in(manipulator_arm_2), store_room, 106).
holds(2, in(puzzle_room_table), puzzle_room, 106).
holds(2, in(talos), store_room, 106).
holds(2, in_tower((block,1),(block,1)), true, 106).
holds(2, in_tower((block,1),(block,2)), false, 106).
holds(2, in_tower((block,1),(block,3)), false, 106).
holds(2, in_tower((block,1),(block,4)), false, 106).
holds(2, in_tower((block,1),(block,5)), false, 106).
holds(2, in_tower((block,1),(block,6)), false, 106).
holds(2, in_tower((block,2),(block,1)), false, 106).
holds(2, in_tower((block,2),(block,2)), false, 106).
holds(2, in_tower((block,2),(block,3)), false, 106).
holds(2, in_tower((block,2),(block,4)), false, 106).
holds(2, in_tower((block,2),(block,5)), false, 106).
holds(2, in_tower((block,2),(block,6)), false, 106).
holds(2, in_tower((block,3),(block,1)), false, 106).
holds(2, in_tower((block,3),(block,2)), true, 106).
holds(2, in_tower((block,3),(block,3)), true, 106).
holds(2, in_tower((block,3),(block,4)), false, 106).
holds(2, in_tower((block,3),(block,5)), false, 106).
holds(2, in_tower((block,3),(block,6)), false, 106).
holds(2, in_tower((block,4),(block,1)), false, 106).
holds(2, in_tower((block,4),(block,2)), false, 106).
holds(2, in_tower((block,4),(block,3)), false, 106).
holds(2, in_tower((block,4),(block,4)), false, 106).
holds(2, in_tower((block,4),(block,5)), false, 106).
holds(2, in_tower((block,4),(block,6)), false, 106).
holds(2, in_tower((block,5),(block,1)), false, 106).
holds(2, in_tower((block,5),(block,2)), false, 106).
holds(2, in_tower((block,5),(block,3)), false, 106).
holds(2, in_tower((block,5),(block,4)), false, 106).
holds(2, in_tower((block,5),(block,5)), false, 106).
holds(2, in_tower((block,5),(block,6)), false, 106).
holds(2, in_tower((block,6),(block,1)), false, 106).
holds(2, in_tower((block,6),(block,2)), false, 106).
holds(2, in_tower((block,6),(block,3)), false, 106).
holds(2, in_tower((block,6),(block,4)), false, 106).
holds(2, in_tower((block,6),(block,5)), false, 106).
holds(2, in_tower((block,6),(block,6)), true, 106).
holds(2, on((block,1)), puzzle_room_table, 106).
holds(2, on((block,2)), (block,3), 106).
holds(2, on((block,3)), puzzle_room_table, 106).
holds(2, on((block,4)), nothing, 106).
holds(2, on((block,5)), nothing, 106).
holds(2, on((block,6)), puzzle_room_table, 106).
holds(2, tower_base((block,1),puzzle_room_table), true, 106).
holds(2, tower_base((block,2),puzzle_room_table), false, 106).
holds(2, tower_base((block,3),puzzle_room_table), true, 106).
holds(2, tower_base((block,4),puzzle_room_table), false, 106).
holds(2, tower_base((block,5),puzzle_room_table), false, 106).
holds(2, tower_base((block,6),puzzle_room_table), true, 106).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 106).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 106).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 106).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 106).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 106).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 106).

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=108']

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 33})

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 31).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 32).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 33).

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=106, step_range=range(0, 107)

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 106, Total actions = 106, Produced sub-goal stages = 0

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 106, Total actions = 106, Produced sub-goal stages = 0

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 106, Total actions = 106, Produced sub-goal stages = 0

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=108']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000026255CD5820>]
	incrementor = SolveIncrementor(step_start=106, step_increase=1, step_increase_initial=3, step_end_min=109, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1749.7678080000046, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 106), range_=None), IncPart(name='plan_module', args=('#inc', 106, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 106, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 106, 31, 33, 'sequential', 'false'), range_=None)]

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 821 rules

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004663299999720039s

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118003s.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023659s with result Satisfiable.

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x00000262908BAB80>

[03-03-2022_22-30-10] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 106)
	('last_sgoals', 33)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 31)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x00000262908BAB80>)

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 106). %* None *%
#program plan_module(#inc, 106, false, false). %* None *%
#program optimisation_module(#inc, 106, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 106, 31, 33, sequential, false). %* None *%

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    105 : Current =    108
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(108)]), ('state_module', [Number(106), Number(106)]), ('plan_module', [Number(106), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(106), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(106)]), ('action_preconditions', [Number(106)]), ('variable_relations', [Number(106)]), ('abstraction_mappings', [Number(106)]), ('conformance_module', [Number(106), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(107), Number(106)]), ('plan_module', [Number(107), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(107), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(107)]), ('action_preconditions', [Number(107)]), ('variable_relations', [Number(107)]), ('abstraction_mappings', [Number(107)]), ('conformance_module', [Number(107), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(108), Number(106)]), ('plan_module', [Number(108), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(108), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(108)]), ('action_preconditions', [Number(108)]), ('variable_relations', [Number(108)]), ('abstraction_mappings', [Number(108)]), ('conformance_module', [Number(108), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.498926s.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.124653s with result Satisfiable.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.623579300000074, Incremental time limit = None
Running cumulative time = 0.623579300000074, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2185.152344Mb, VMS = 2206.562500Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.498926s, Solving = 0.124653s, Total = 0.623579s, Memory = (RSS = 2185.152344Mb, VMS = 2206.562500Mb), Step range = [106-108]), Calls = 1
Final Model :: Total atoms = 21021, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    108 : Current =    109
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(109)]), ('state_module', [Number(109), Number(106)]), ('plan_module', [Number(109), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(109), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(109)]), ('action_preconditions', [Number(109)]), ('variable_relations', [Number(109)]), ('abstraction_mappings', [Number(109)]), ('conformance_module', [Number(109), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.167186s.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013951s with result Unsatisfiable.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18113759999960166, Incremental time limit = None
Running cumulative time = 0.8047168999996757, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2185.226562Mb, VMS = 2206.640625Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    109 : Current =    110
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(110)]), ('state_module', [Number(110), Number(106)]), ('plan_module', [Number(110), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(110), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(110)]), ('action_preconditions', [Number(110)]), ('variable_relations', [Number(110)]), ('abstraction_mappings', [Number(110)]), ('conformance_module', [Number(110), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235990s.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019551s with result Unsatisfiable.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25554090000014185, Incremental time limit = None
Running cumulative time = 1.0602577999998175, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2185.437500Mb, VMS = 2206.847656Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    110 : Current =    111
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(111)]), ('state_module', [Number(111), Number(106)]), ('plan_module', [Number(111), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(111), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(111)]), ('action_preconditions', [Number(111)]), ('variable_relations', [Number(111)]), ('abstraction_mappings', [Number(111)]), ('conformance_module', [Number(111), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.236706s.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035892s with result Unsatisfiable.

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27259810000032303, Incremental time limit = None
Running cumulative time = 1.3328559000001405, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2191.617188Mb, VMS = 2215.535156Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    111 : Current =    112
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(112)]), ('state_module', [Number(112), Number(106)]), ('plan_module', [Number(112), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(112), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(112)]), ('action_preconditions', [Number(112)]), ('variable_relations', [Number(112)]), ('abstraction_mappings', [Number(112)]), ('conformance_module', [Number(112), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.255209s.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037733s with result Unsatisfiable.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2929425000002084, Incremental time limit = None
Running cumulative time = 1.625798400000349, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2194.023438Mb, VMS = 2217.093750Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    112 : Current =    113
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(113)]), ('state_module', [Number(113), Number(106)]), ('plan_module', [Number(113), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(113), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(113)]), ('action_preconditions', [Number(113)]), ('variable_relations', [Number(113)]), ('abstraction_mappings', [Number(113)]), ('conformance_module', [Number(113), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261860s.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044774s with result Unsatisfiable.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3066334999994069, Incremental time limit = None
Running cumulative time = 1.9324318999997558, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2197.250000Mb, VMS = 2223.175781Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    113 : Current =    114
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(114)]), ('state_module', [Number(114), Number(106)]), ('plan_module', [Number(114), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(114), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(114)]), ('action_preconditions', [Number(114)]), ('variable_relations', [Number(114)]), ('abstraction_mappings', [Number(114)]), ('conformance_module', [Number(114), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.273776s.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056227s with result Unsatisfiable.

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3300033999998959, Incremental time limit = None
Running cumulative time = 2.2624352999996518, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2199.449219Mb, VMS = 2223.734375Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    114 : Current =    115
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(115)]), ('state_module', [Number(115), Number(106)]), ('plan_module', [Number(115), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(115), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(115)]), ('action_preconditions', [Number(115)]), ('variable_relations', [Number(115)]), ('abstraction_mappings', [Number(115)]), ('conformance_module', [Number(115), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.279653s.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049143s with result Unsatisfiable.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3287959999997838, Incremental time limit = None
Running cumulative time = 2.5912312999994356, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2201.757812Mb, VMS = 2224.292969Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =    115 : Current =    116
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(116)]), ('state_module', [Number(116), Number(106)]), ('plan_module', [Number(116), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(116), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(116)]), ('action_preconditions', [Number(116)]), ('variable_relations', [Number(116)]), ('abstraction_mappings', [Number(116)]), ('conformance_module', [Number(116), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286972s.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059924s with result Unsatisfiable.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34689620000017385, Incremental time limit = None
Running cumulative time = 2.9381274999996094, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2208.460938Mb, VMS = 2238.410156Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =    116 : Current =    117
Incrementor step ends | Minimum  =    109 : Maximum =    300

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(117)]), ('state_module', [Number(117), Number(106)]), ('plan_module', [Number(117), Number(106), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(117), Number(106), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(117)]), ('action_preconditions', [Number(117)]), ('variable_relations', [Number(117)]), ('abstraction_mappings', [Number(117)]), ('conformance_module', [Number(117), Number(106), Number(31), Number(33), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286296s.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.079129s with result Satisfiable.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3654252000001179, Incremental time limit = None
Running cumulative time = 3.3035526999997273, Cumulative time limit = 1749.7678080000046
Used memory = (RSS = 2213.085938Mb, VMS = 2240.972656Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.782575s, Solving = 0.520977s, Total = 3.303553s, Memory = (RSS = 2213.085938Mb, VMS = 2240.972656Mb), Step range = [106-117]), Calls = 10
Final Model :: Total atoms = 24595, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.498926s, Solving = 0.124653s, Total = 0.623579s, Memory = (RSS = 2185.152344Mb, VMS = 2206.562500Mb), Step range = [106-108]
2 : Statistics :: Grounding = 0.167186s, Solving = 0.013951s, Total = 0.181138s, Memory = (RSS = 2185.226562Mb, VMS = 2206.640625Mb), Step range = [109-109]
3 : Statistics :: Grounding = 0.235990s, Solving = 0.019551s, Total = 0.255541s, Memory = (RSS = 2185.437500Mb, VMS = 2206.847656Mb), Step range = [110-110]
4 : Statistics :: Grounding = 0.236706s, Solving = 0.035892s, Total = 0.272598s, Memory = (RSS = 2191.617188Mb, VMS = 2215.535156Mb), Step range = [111-111]
5 : Statistics :: Grounding = 0.255209s, Solving = 0.037733s, Total = 0.292943s, Memory = (RSS = 2194.023438Mb, VMS = 2217.093750Mb), Step range = [112-112]
6 : Statistics :: Grounding = 0.261860s, Solving = 0.044774s, Total = 0.306633s, Memory = (RSS = 2197.250000Mb, VMS = 2223.175781Mb), Step range = [113-113]
7 : Statistics :: Grounding = 0.273776s, Solving = 0.056227s, Total = 0.330003s, Memory = (RSS = 2199.449219Mb, VMS = 2223.734375Mb), Step range = [114-114]
8 : Statistics :: Grounding = 0.279653s, Solving = 0.049143s, Total = 0.328796s, Memory = (RSS = 2201.757812Mb, VMS = 2224.292969Mb), Step range = [115-115]
9 : Statistics :: Grounding = 0.286972s, Solving = 0.059924s, Total = 0.346896s, Memory = (RSS = 2208.460938Mb, VMS = 2238.410156Mb), Step range = [116-116]
10 : Statistics :: Grounding = 0.286296s, Solving = 0.079129s, Total = 0.365425s, Memory = (RSS = 2213.085938Mb, VMS = 2240.972656Mb), Step range = [117-117]

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.303553s due to: Stop condition reached.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30, 107: 31, 108: 31, 109: 31, 110: 31, 111: 31, 112: 31, 113: 31, 114: 31, 115: 32, 116: 32, 117: 33}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106, 31: 114, 32: 116, 33: 117}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 33, Last requested goal index = 33, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.782575s, Solving = 0.520977s, Total = 3.303553s, Memory = (RSS = 2213.085938Mb, VMS = 2240.972656Mb), Step range = [106-117]), Calls = 10
Model :: Total atoms = 24595, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 11 :: Actions = 11                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 70:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 71:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 72:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,1))
Step 73:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,1))
Step 74:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,1))
Step 75:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 76:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 77:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 78:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 79:
    Current Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 80:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 81:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 82:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 83:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 84:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 85:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 87:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 88:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 90:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 91:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 92:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 93:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 94:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 95:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 96:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 97:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 98:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 99:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 100:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 101:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 102:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 103:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 104:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 105:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 106:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 107:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 108:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 109:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 110:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 111:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 112:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 113:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 114:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 115:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 116:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 117:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Monolevel problem 9 at level 1 solved.

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Online planning increment 9 finished.

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 9 : Total constraining sub-goal stages = 44 : Goals achieved = 33 : Goals unachieved = 11 : Complete = False

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 10 by method ground-first is [1-1].

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 10 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=5] : [(Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [34-36]

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=117, step_range=range(0, 118)

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 117, Total actions = 117, Produced sub-goal stages = 0

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 117, Total actions = 117, Produced sub-goal stages = 0

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 117, Total actions = 117, Produced sub-goal stages = 0

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [34-36], problem number = 10, increment number = 10

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 34)
	('last_sgoals', 36)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1794.0086047000018)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [34-36] : Concurrency disabled : Minimum search length bound enabled with value 119

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 34
last_sgoals = 36
start_step = 117
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 119

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-30-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-30-14] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 117 as problem start state.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 117})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 117})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 117})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 117})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 117})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 117})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 117})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 117})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 117})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 117})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 117})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0,0)', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 117})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 117})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 117})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 117})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 117})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 117})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 117})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 117})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 117})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 117})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 117})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 117})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 117})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 117})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 117})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 117})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 117})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 117})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 117})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 117})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 117})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 117})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 117})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 117})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 117})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 117})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 117})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 117})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 117})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 117})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 117})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 117})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 117})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 117})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 117})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 117})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 117})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 117})

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 117).
holds(1, complete_tower(red,puzzle_room_table), false, 117).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 117).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 117).
holds(1, configuration(manipulator_limb_1), retracted, 117).
holds(1, configuration(manipulator_limb_2), retracted, 117).
holds(1, configuration(puzzle_room_door), open, 117).
holds(1, configuration(starting_room_door), closed, 117).
holds(1, configuration(store_room_door), open, 117).
holds(1, grasping(manipulator_arm_1), nothing, 117).
holds(1, grasping(manipulator_arm_2), (block,5), 117).
holds(1, grasping(manipulator_end_1), nothing, 117).
holds(1, grasping(manipulator_end_2), (block,5), 117).
holds(1, in((block,1)), (puzzle_room,5,0), 117).
holds(1, in((block,2)), (puzzle_room,5,0), 117).
holds(1, in((block,3)), (puzzle_room,5,0), 117).
holds(1, in((block,4)), (store_room,0,0), 117).
holds(1, in((block,5)), (store_room,0,0), 117).
holds(1, in((block,6)), (puzzle_room,5,0), 117).
holds(1, in(manipulator_arm_1), (store_room,0,0), 117).
holds(1, in(manipulator_arm_2), (store_room,0,0), 117).
holds(1, in(manipulator_end_1), (store_room,0,0), 117).
holds(1, in(manipulator_end_2), (store_room,0,0), 117).
holds(1, in(manipulator_limb_1), (store_room,0,0), 117).
holds(1, in(manipulator_limb_2), (store_room,0,0), 117).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 117).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 117).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 117).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 117).
holds(1, in(talos), (store_room,0,0), 117).
holds(1, in_tower((block,1),(block,1)), true, 117).
holds(1, in_tower((block,1),(block,2)), false, 117).
holds(1, in_tower((block,1),(block,3)), false, 117).
holds(1, in_tower((block,1),(block,4)), false, 117).
holds(1, in_tower((block,1),(block,5)), false, 117).
holds(1, in_tower((block,1),(block,6)), false, 117).
holds(1, in_tower((block,2),(block,1)), false, 117).
holds(1, in_tower((block,2),(block,2)), false, 117).
holds(1, in_tower((block,2),(block,3)), false, 117).
holds(1, in_tower((block,2),(block,4)), false, 117).
holds(1, in_tower((block,2),(block,5)), false, 117).
holds(1, in_tower((block,2),(block,6)), false, 117).
holds(1, in_tower((block,3),(block,1)), false, 117).
holds(1, in_tower((block,3),(block,2)), true, 117).
holds(1, in_tower((block,3),(block,3)), true, 117).
holds(1, in_tower((block,3),(block,4)), false, 117).
holds(1, in_tower((block,3),(block,5)), false, 117).
holds(1, in_tower((block,3),(block,6)), false, 117).
holds(1, in_tower((block,4),(block,1)), false, 117).
holds(1, in_tower((block,4),(block,2)), false, 117).
holds(1, in_tower((block,4),(block,3)), false, 117).
holds(1, in_tower((block,4),(block,4)), false, 117).
holds(1, in_tower((block,4),(block,5)), false, 117).
holds(1, in_tower((block,4),(block,6)), false, 117).
holds(1, in_tower((block,5),(block,1)), false, 117).
holds(1, in_tower((block,5),(block,2)), false, 117).
holds(1, in_tower((block,5),(block,3)), false, 117).
holds(1, in_tower((block,5),(block,4)), false, 117).
holds(1, in_tower((block,5),(block,5)), false, 117).
holds(1, in_tower((block,5),(block,6)), false, 117).
holds(1, in_tower((block,6),(block,1)), false, 117).
holds(1, in_tower((block,6),(block,2)), false, 117).
holds(1, in_tower((block,6),(block,3)), false, 117).
holds(1, in_tower((block,6),(block,4)), false, 117).
holds(1, in_tower((block,6),(block,5)), false, 117).
holds(1, in_tower((block,6),(block,6)), true, 117).
holds(1, on((block,1)), puzzle_room_table_left, 117).
holds(1, on((block,2)), (block,3), 117).
holds(1, on((block,3)), puzzle_room_table_left, 117).
holds(1, on((block,4)), nothing, 117).
holds(1, on((block,5)), nothing, 117).
holds(1, on((block,6)), puzzle_room_table_right, 117).
holds(1, tower_base((block,1),puzzle_room_table), true, 117).
holds(1, tower_base((block,2),puzzle_room_table), false, 117).
holds(1, tower_base((block,3),puzzle_room_table), true, 117).
holds(1, tower_base((block,4),puzzle_room_table), false, 117).
holds(1, tower_base((block,5),puzzle_room_table), false, 117).
holds(1, tower_base((block,6),puzzle_room_table), true, 117).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 117).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 117).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 117).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 117).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 117).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 117).
holds(2, complete_tower(blue,puzzle_room_table), false, 117).
holds(2, complete_tower(red,puzzle_room_table), false, 117).
holds(2, configuration(manipulator_arm_1), retracted, 117).
holds(2, configuration(manipulator_arm_2), retracted, 117).
holds(2, configuration(puzzle_room_door), open, 117).
holds(2, configuration(starting_room_door), closed, 117).
holds(2, configuration(store_room_door), open, 117).
holds(2, grasping(manipulator_arm_1), nothing, 117).
holds(2, grasping(manipulator_arm_2), (block,5), 117).
holds(2, in((block,1)), puzzle_room, 117).
holds(2, in((block,2)), puzzle_room, 117).
holds(2, in((block,3)), puzzle_room, 117).
holds(2, in((block,4)), store_room, 117).
holds(2, in((block,5)), store_room, 117).
holds(2, in((block,6)), puzzle_room, 117).
holds(2, in(manipulator_arm_1), store_room, 117).
holds(2, in(manipulator_arm_2), store_room, 117).
holds(2, in(puzzle_room_table), puzzle_room, 117).
holds(2, in(talos), store_room, 117).
holds(2, in_tower((block,1),(block,1)), true, 117).
holds(2, in_tower((block,1),(block,2)), false, 117).
holds(2, in_tower((block,1),(block,3)), false, 117).
holds(2, in_tower((block,1),(block,4)), false, 117).
holds(2, in_tower((block,1),(block,5)), false, 117).
holds(2, in_tower((block,1),(block,6)), false, 117).
holds(2, in_tower((block,2),(block,1)), false, 117).
holds(2, in_tower((block,2),(block,2)), false, 117).
holds(2, in_tower((block,2),(block,3)), false, 117).
holds(2, in_tower((block,2),(block,4)), false, 117).
holds(2, in_tower((block,2),(block,5)), false, 117).
holds(2, in_tower((block,2),(block,6)), false, 117).
holds(2, in_tower((block,3),(block,1)), false, 117).
holds(2, in_tower((block,3),(block,2)), true, 117).
holds(2, in_tower((block,3),(block,3)), true, 117).
holds(2, in_tower((block,3),(block,4)), false, 117).
holds(2, in_tower((block,3),(block,5)), false, 117).
holds(2, in_tower((block,3),(block,6)), false, 117).
holds(2, in_tower((block,4),(block,1)), false, 117).
holds(2, in_tower((block,4),(block,2)), false, 117).
holds(2, in_tower((block,4),(block,3)), false, 117).
holds(2, in_tower((block,4),(block,4)), false, 117).
holds(2, in_tower((block,4),(block,5)), false, 117).
holds(2, in_tower((block,4),(block,6)), false, 117).
holds(2, in_tower((block,5),(block,1)), false, 117).
holds(2, in_tower((block,5),(block,2)), false, 117).
holds(2, in_tower((block,5),(block,3)), false, 117).
holds(2, in_tower((block,5),(block,4)), false, 117).
holds(2, in_tower((block,5),(block,5)), false, 117).
holds(2, in_tower((block,5),(block,6)), false, 117).
holds(2, in_tower((block,6),(block,1)), false, 117).
holds(2, in_tower((block,6),(block,2)), false, 117).
holds(2, in_tower((block,6),(block,3)), false, 117).
holds(2, in_tower((block,6),(block,4)), false, 117).
holds(2, in_tower((block,6),(block,5)), false, 117).
holds(2, in_tower((block,6),(block,6)), true, 117).
holds(2, on((block,1)), puzzle_room_table, 117).
holds(2, on((block,2)), (block,3), 117).
holds(2, on((block,3)), puzzle_room_table, 117).
holds(2, on((block,4)), nothing, 117).
holds(2, on((block,5)), nothing, 117).
holds(2, on((block,6)), puzzle_room_table, 117).
holds(2, tower_base((block,1),puzzle_room_table), true, 117).
holds(2, tower_base((block,2),puzzle_room_table), false, 117).
holds(2, tower_base((block,3),puzzle_room_table), true, 117).
holds(2, tower_base((block,4),puzzle_room_table), false, 117).
holds(2, tower_base((block,5),puzzle_room_table), false, 117).
holds(2, tower_base((block,6),puzzle_room_table), true, 117).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 117).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 117).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 117).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 117).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 117).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 117).

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=119']

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 34})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 36})

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 3 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 34).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 35).
sub_goal(2, talos, move(hallway), in(talos), hallway, 36).

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=117, step_range=range(0, 118)

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 117, Total actions = 117, Produced sub-goal stages = 0

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 117, Total actions = 117, Produced sub-goal stages = 0

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 117, Total actions = 117, Produced sub-goal stages = 0

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=119']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000026255CD5160>]
	incrementor = SolveIncrementor(step_start=117, step_increase=1, step_increase_initial=3, step_end_min=120, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1746.4642553000049, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 117), range_=None), IncPart(name='plan_module', args=('#inc', 117, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 117, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 117, 34, 36, 'sequential', 'false'), range_=None)]

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 821 rules

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004648599999654834s

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116749s.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022136s with result Satisfiable.

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000026290CC5180>

[03-03-2022_22-30-14] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 117)
	('last_sgoals', 36)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 34)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000026290CC5180>)

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 117). %* None *%
#program plan_module(#inc, 117, false, false). %* None *%
#program optimisation_module(#inc, 117, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 117, 34, 36, sequential, false). %* None *%

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    116 : Current =    119
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(119)]), ('state_module', [Number(117), Number(117)]), ('plan_module', [Number(117), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(117), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(117)]), ('action_preconditions', [Number(117)]), ('variable_relations', [Number(117)]), ('abstraction_mappings', [Number(117)]), ('conformance_module', [Number(117), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(118), Number(117)]), ('plan_module', [Number(118), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(118), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(118)]), ('action_preconditions', [Number(118)]), ('variable_relations', [Number(118)]), ('abstraction_mappings', [Number(118)]), ('conformance_module', [Number(118), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(119), Number(117)]), ('plan_module', [Number(119), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(119), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(119)]), ('action_preconditions', [Number(119)]), ('variable_relations', [Number(119)]), ('abstraction_mappings', [Number(119)]), ('conformance_module', [Number(119), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.476110s.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.112489s with result Satisfiable.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5885989000003065, Incremental time limit = None
Running cumulative time = 0.5885989000003065, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2186.218750Mb, VMS = 2207.511719Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.476110s, Solving = 0.112489s, Total = 0.588599s, Memory = (RSS = 2186.218750Mb, VMS = 2207.511719Mb), Step range = [117-119]), Calls = 1
Final Model :: Total atoms = 21017, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    119 : Current =    120
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(120)]), ('state_module', [Number(120), Number(117)]), ('plan_module', [Number(120), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(120), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(120)]), ('action_preconditions', [Number(120)]), ('variable_relations', [Number(120)]), ('abstraction_mappings', [Number(120)]), ('conformance_module', [Number(120), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.219590s.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020535s with result Unsatisfiable.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24012510000056864, Incremental time limit = None
Running cumulative time = 0.8287240000008751, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2186.394531Mb, VMS = 2207.687500Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    120 : Current =    121
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(121)]), ('state_module', [Number(121), Number(117)]), ('plan_module', [Number(121), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(121), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(121)]), ('action_preconditions', [Number(121)]), ('variable_relations', [Number(121)]), ('abstraction_mappings', [Number(121)]), ('conformance_module', [Number(121), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.231720s.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027359s with result Unsatisfiable.

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2590784999997595, Incremental time limit = None
Running cumulative time = 1.0878025000006346, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2186.781250Mb, VMS = 2208.074219Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    121 : Current =    122
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(122)]), ('state_module', [Number(122), Number(117)]), ('plan_module', [Number(122), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(122), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(122)]), ('action_preconditions', [Number(122)]), ('variable_relations', [Number(122)]), ('abstraction_mappings', [Number(122)]), ('conformance_module', [Number(122), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.253752s.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041396s with result Unsatisfiable.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2951476000002913, Incremental time limit = None
Running cumulative time = 1.3829501000009259, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2193.683594Mb, VMS = 2216.503906Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    122 : Current =    123
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(123)]), ('state_module', [Number(123), Number(117)]), ('plan_module', [Number(123), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(123), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(123)]), ('action_preconditions', [Number(123)]), ('variable_relations', [Number(123)]), ('abstraction_mappings', [Number(123)]), ('conformance_module', [Number(123), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261132s.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040746s with result Unsatisfiable.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30187819999991916, Incremental time limit = None
Running cumulative time = 1.684828300000845, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2197.453125Mb, VMS = 2219.535156Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    123 : Current =    124
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(124)]), ('state_module', [Number(124), Number(117)]), ('plan_module', [Number(124), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(124), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(124)]), ('action_preconditions', [Number(124)]), ('variable_relations', [Number(124)]), ('abstraction_mappings', [Number(124)]), ('conformance_module', [Number(124), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.273520s.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057475s with result Unsatisfiable.

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3309946999997919, Incremental time limit = None
Running cumulative time = 2.015823000000637, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2199.820312Mb, VMS = 2224.062500Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    124 : Current =    125
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(125)]), ('state_module', [Number(125), Number(117)]), ('plan_module', [Number(125), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(125), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(125)]), ('action_preconditions', [Number(125)]), ('variable_relations', [Number(125)]), ('abstraction_mappings', [Number(125)]), ('conformance_module', [Number(125), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.276787s.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058371s with result Unsatisfiable.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33515810000017154, Incremental time limit = None
Running cumulative time = 2.3509811000008085, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2202.132812Mb, VMS = 2224.625000Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    125 : Current =    126
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(126)]), ('state_module', [Number(126), Number(117)]), ('plan_module', [Number(126), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(126), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(126)]), ('action_preconditions', [Number(126)]), ('variable_relations', [Number(126)]), ('abstraction_mappings', [Number(126)]), ('conformance_module', [Number(126), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286024s.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083671s with result Unsatisfiable.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3696949999998651, Incremental time limit = None
Running cumulative time = 2.7206761000006736, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2207.417969Mb, VMS = 2238.769531Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =    126 : Current =    127
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(127)]), ('state_module', [Number(127), Number(117)]), ('plan_module', [Number(127), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(127), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(127)]), ('action_preconditions', [Number(127)]), ('variable_relations', [Number(127)]), ('abstraction_mappings', [Number(127)]), ('conformance_module', [Number(127), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.295023s.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.113325s with result Unsatisfiable.

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.40834789999962595, Incremental time limit = None
Running cumulative time = 3.1290240000002996, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2210.023438Mb, VMS = 2239.328125Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =    127 : Current =    128
Incrementor step ends | Minimum  =    120 : Maximum =    300

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(128)]), ('state_module', [Number(128), Number(117)]), ('plan_module', [Number(128), Number(117), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(128), Number(117), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(128)]), ('action_preconditions', [Number(128)]), ('variable_relations', [Number(128)]), ('abstraction_mappings', [Number(128)]), ('conformance_module', [Number(128), Number(117), Number(34), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.301004s.

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.166070s with result Satisfiable.

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4670739000002868, Incremental time limit = None
Running cumulative time = 3.5960979000005864, Cumulative time limit = 1746.4642553000049
Used memory = (RSS = 2214.765625Mb, VMS = 2242.140625Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.874661s, Solving = 0.721437s, Total = 3.596098s, Memory = (RSS = 2214.765625Mb, VMS = 2242.140625Mb), Step range = [117-128]), Calls = 10
Final Model :: Total atoms = 24576, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.476110s, Solving = 0.112489s, Total = 0.588599s, Memory = (RSS = 2186.218750Mb, VMS = 2207.511719Mb), Step range = [117-119]
2 : Statistics :: Grounding = 0.219590s, Solving = 0.020535s, Total = 0.240125s, Memory = (RSS = 2186.394531Mb, VMS = 2207.687500Mb), Step range = [120-120]
3 : Statistics :: Grounding = 0.231720s, Solving = 0.027359s, Total = 0.259078s, Memory = (RSS = 2186.781250Mb, VMS = 2208.074219Mb), Step range = [121-121]
4 : Statistics :: Grounding = 0.253752s, Solving = 0.041396s, Total = 0.295148s, Memory = (RSS = 2193.683594Mb, VMS = 2216.503906Mb), Step range = [122-122]
5 : Statistics :: Grounding = 0.261132s, Solving = 0.040746s, Total = 0.301878s, Memory = (RSS = 2197.453125Mb, VMS = 2219.535156Mb), Step range = [123-123]
6 : Statistics :: Grounding = 0.273520s, Solving = 0.057475s, Total = 0.330995s, Memory = (RSS = 2199.820312Mb, VMS = 2224.062500Mb), Step range = [124-124]
7 : Statistics :: Grounding = 0.276787s, Solving = 0.058371s, Total = 0.335158s, Memory = (RSS = 2202.132812Mb, VMS = 2224.625000Mb), Step range = [125-125]
8 : Statistics :: Grounding = 0.286024s, Solving = 0.083671s, Total = 0.369695s, Memory = (RSS = 2207.417969Mb, VMS = 2238.769531Mb), Step range = [126-126]
9 : Statistics :: Grounding = 0.295023s, Solving = 0.113325s, Total = 0.408348s, Memory = (RSS = 2210.023438Mb, VMS = 2239.328125Mb), Step range = [127-127]
10 : Statistics :: Grounding = 0.301004s, Solving = 0.166070s, Total = 0.467074s, Memory = (RSS = 2214.765625Mb, VMS = 2242.140625Mb), Step range = [128-128]

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.596098s due to: Stop condition reached.

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-30-18] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30, 107: 31, 108: 31, 109: 31, 110: 31, 111: 31, 112: 31, 113: 31, 114: 31, 115: 32, 116: 32, 117: 33}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106, 31: 114, 32: 116, 33: 117}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30, 107: 31, 108: 31, 109: 31, 110: 31, 111: 31, 112: 31, 113: 31, 114: 31, 115: 32, 116: 32, 117: 33, 118: 34, 119: 34, 120: 34, 121: 35, 122: 36, 123: 36, 124: 36, 125: 36, 126: 36, 127: 36, 128: 36}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106, 31: 114, 32: 116, 33: 117, 34: 120, 35: 121, 36: 128}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.874661s, Solving = 0.721437s, Total = 3.596098s, Memory = (RSS = 2214.765625Mb, VMS = 2242.140625Mb), Step range = [117-128]), Calls = 10
Model :: Total atoms = 24576, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 11 :: Actions = 11                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 70:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 71:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 72:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,1))
Step 73:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,1))
Step 74:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,1))
Step 75:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 76:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 77:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 78:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 79:
    Current Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 80:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 81:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 82:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 83:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 84:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 85:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 87:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 88:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 90:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 91:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 92:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 93:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 94:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 95:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 96:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 97:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 98:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 99:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 100:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 101:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 102:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 103:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 104:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 105:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 106:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 107:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 108:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 109:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 110:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 111:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 112:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 113:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 114:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 115:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 116:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 117:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 118:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 119:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 120:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 121:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 122:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 123:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 124:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 125:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 126:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 127:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 128:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Monolevel problem 10 at level 1 solved.

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Online planning increment 10 finished.

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 10 : Total constraining sub-goal stages = 44 : Goals achieved = 36 : Goals unachieved = 8 : Complete = False

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 11 by method ground-first is [1-1].

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 11 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=5] : [(Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-40]

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=128, step_range=range(0, 129)

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 128, Total actions = 128, Produced sub-goal stages = 0

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 128, Total actions = 128, Produced sub-goal stages = 0

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 128, Total actions = 128, Produced sub-goal stages = 0

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-40], problem number = 11, increment number = 11

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 40)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1794.0086047000018)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [37-40] : Concurrency disabled : Minimum search length bound enabled with value 131

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 37
last_sgoals = 40
start_step = 128
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 131

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[03-03-2022_22-30-19] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-30-19] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 128 as problem start state.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 128})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,5))', 'S': 128})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 128})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 128})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 128})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 128})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 128})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 128})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 128})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 128})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,5)', 'S': 128})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 128})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 128})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 128})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 128})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 128})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 128})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 128})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 128})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,0,1)', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 128})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 128})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 128})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 128})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 128})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 128})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 128})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 128})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 128})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 128})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 128})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 128})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 128})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 128})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 128})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 128})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'S': 128})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 128})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 128})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 128})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'hallway', 'S': 128})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'hallway', 'S': 128})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 128})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 128})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 128})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 128})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 128})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 128})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 128})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 128})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 128})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 128})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 128})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 128})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 128})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 128})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 128})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 128})

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 128).
holds(1, complete_tower(red,puzzle_room_table), false, 128).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 128).
holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 128).
holds(1, configuration(manipulator_limb_1), retracted, 128).
holds(1, configuration(manipulator_limb_2), retracted, 128).
holds(1, configuration(puzzle_room_door), open, 128).
holds(1, configuration(starting_room_door), closed, 128).
holds(1, configuration(store_room_door), open, 128).
holds(1, grasping(manipulator_arm_1), (block,4), 128).
holds(1, grasping(manipulator_arm_2), (block,5), 128).
holds(1, grasping(manipulator_end_1), (block,4), 128).
holds(1, grasping(manipulator_end_2), (block,5), 128).
holds(1, in((block,1)), (puzzle_room,5,0), 128).
holds(1, in((block,2)), (puzzle_room,5,0), 128).
holds(1, in((block,3)), (puzzle_room,5,0), 128).
holds(1, in((block,4)), (hallway,0,1), 128).
holds(1, in((block,5)), (hallway,0,1), 128).
holds(1, in((block,6)), (puzzle_room,5,0), 128).
holds(1, in(manipulator_arm_1), (hallway,0,1), 128).
holds(1, in(manipulator_arm_2), (hallway,0,1), 128).
holds(1, in(manipulator_end_1), (hallway,0,1), 128).
holds(1, in(manipulator_end_2), (hallway,0,1), 128).
holds(1, in(manipulator_limb_1), (hallway,0,1), 128).
holds(1, in(manipulator_limb_2), (hallway,0,1), 128).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 128).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 128).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 128).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 128).
holds(1, in(talos), (hallway,0,1), 128).
holds(1, in_tower((block,1),(block,1)), true, 128).
holds(1, in_tower((block,1),(block,2)), false, 128).
holds(1, in_tower((block,1),(block,3)), false, 128).
holds(1, in_tower((block,1),(block,4)), false, 128).
holds(1, in_tower((block,1),(block,5)), false, 128).
holds(1, in_tower((block,1),(block,6)), false, 128).
holds(1, in_tower((block,2),(block,1)), false, 128).
holds(1, in_tower((block,2),(block,2)), false, 128).
holds(1, in_tower((block,2),(block,3)), false, 128).
holds(1, in_tower((block,2),(block,4)), false, 128).
holds(1, in_tower((block,2),(block,5)), false, 128).
holds(1, in_tower((block,2),(block,6)), false, 128).
holds(1, in_tower((block,3),(block,1)), false, 128).
holds(1, in_tower((block,3),(block,2)), true, 128).
holds(1, in_tower((block,3),(block,3)), true, 128).
holds(1, in_tower((block,3),(block,4)), false, 128).
holds(1, in_tower((block,3),(block,5)), false, 128).
holds(1, in_tower((block,3),(block,6)), false, 128).
holds(1, in_tower((block,4),(block,1)), false, 128).
holds(1, in_tower((block,4),(block,2)), false, 128).
holds(1, in_tower((block,4),(block,3)), false, 128).
holds(1, in_tower((block,4),(block,4)), false, 128).
holds(1, in_tower((block,4),(block,5)), false, 128).
holds(1, in_tower((block,4),(block,6)), false, 128).
holds(1, in_tower((block,5),(block,1)), false, 128).
holds(1, in_tower((block,5),(block,2)), false, 128).
holds(1, in_tower((block,5),(block,3)), false, 128).
holds(1, in_tower((block,5),(block,4)), false, 128).
holds(1, in_tower((block,5),(block,5)), false, 128).
holds(1, in_tower((block,5),(block,6)), false, 128).
holds(1, in_tower((block,6),(block,1)), false, 128).
holds(1, in_tower((block,6),(block,2)), false, 128).
holds(1, in_tower((block,6),(block,3)), false, 128).
holds(1, in_tower((block,6),(block,4)), false, 128).
holds(1, in_tower((block,6),(block,5)), false, 128).
holds(1, in_tower((block,6),(block,6)), true, 128).
holds(1, on((block,1)), puzzle_room_table_left, 128).
holds(1, on((block,2)), (block,3), 128).
holds(1, on((block,3)), puzzle_room_table_left, 128).
holds(1, on((block,4)), nothing, 128).
holds(1, on((block,5)), nothing, 128).
holds(1, on((block,6)), puzzle_room_table_right, 128).
holds(1, tower_base((block,1),puzzle_room_table), true, 128).
holds(1, tower_base((block,2),puzzle_room_table), false, 128).
holds(1, tower_base((block,3),puzzle_room_table), true, 128).
holds(1, tower_base((block,4),puzzle_room_table), false, 128).
holds(1, tower_base((block,5),puzzle_room_table), false, 128).
holds(1, tower_base((block,6),puzzle_room_table), true, 128).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 128).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 128).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 128).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 128).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 128).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 128).
holds(2, complete_tower(blue,puzzle_room_table), false, 128).
holds(2, complete_tower(red,puzzle_room_table), false, 128).
holds(2, configuration(manipulator_arm_1), retracted, 128).
holds(2, configuration(manipulator_arm_2), retracted, 128).
holds(2, configuration(puzzle_room_door), open, 128).
holds(2, configuration(starting_room_door), closed, 128).
holds(2, configuration(store_room_door), open, 128).
holds(2, grasping(manipulator_arm_1), (block,4), 128).
holds(2, grasping(manipulator_arm_2), (block,5), 128).
holds(2, in((block,1)), puzzle_room, 128).
holds(2, in((block,2)), puzzle_room, 128).
holds(2, in((block,3)), puzzle_room, 128).
holds(2, in((block,4)), hallway, 128).
holds(2, in((block,5)), hallway, 128).
holds(2, in((block,6)), puzzle_room, 128).
holds(2, in(manipulator_arm_1), hallway, 128).
holds(2, in(manipulator_arm_2), hallway, 128).
holds(2, in(puzzle_room_table), puzzle_room, 128).
holds(2, in(talos), hallway, 128).
holds(2, in_tower((block,1),(block,1)), true, 128).
holds(2, in_tower((block,1),(block,2)), false, 128).
holds(2, in_tower((block,1),(block,3)), false, 128).
holds(2, in_tower((block,1),(block,4)), false, 128).
holds(2, in_tower((block,1),(block,5)), false, 128).
holds(2, in_tower((block,1),(block,6)), false, 128).
holds(2, in_tower((block,2),(block,1)), false, 128).
holds(2, in_tower((block,2),(block,2)), false, 128).
holds(2, in_tower((block,2),(block,3)), false, 128).
holds(2, in_tower((block,2),(block,4)), false, 128).
holds(2, in_tower((block,2),(block,5)), false, 128).
holds(2, in_tower((block,2),(block,6)), false, 128).
holds(2, in_tower((block,3),(block,1)), false, 128).
holds(2, in_tower((block,3),(block,2)), true, 128).
holds(2, in_tower((block,3),(block,3)), true, 128).
holds(2, in_tower((block,3),(block,4)), false, 128).
holds(2, in_tower((block,3),(block,5)), false, 128).
holds(2, in_tower((block,3),(block,6)), false, 128).
holds(2, in_tower((block,4),(block,1)), false, 128).
holds(2, in_tower((block,4),(block,2)), false, 128).
holds(2, in_tower((block,4),(block,3)), false, 128).
holds(2, in_tower((block,4),(block,4)), false, 128).
holds(2, in_tower((block,4),(block,5)), false, 128).
holds(2, in_tower((block,4),(block,6)), false, 128).
holds(2, in_tower((block,5),(block,1)), false, 128).
holds(2, in_tower((block,5),(block,2)), false, 128).
holds(2, in_tower((block,5),(block,3)), false, 128).
holds(2, in_tower((block,5),(block,4)), false, 128).
holds(2, in_tower((block,5),(block,5)), false, 128).
holds(2, in_tower((block,5),(block,6)), false, 128).
holds(2, in_tower((block,6),(block,1)), false, 128).
holds(2, in_tower((block,6),(block,2)), false, 128).
holds(2, in_tower((block,6),(block,3)), false, 128).
holds(2, in_tower((block,6),(block,4)), false, 128).
holds(2, in_tower((block,6),(block,5)), false, 128).
holds(2, in_tower((block,6),(block,6)), true, 128).
holds(2, on((block,1)), puzzle_room_table, 128).
holds(2, on((block,2)), (block,3), 128).
holds(2, on((block,3)), puzzle_room_table, 128).
holds(2, on((block,4)), nothing, 128).
holds(2, on((block,5)), nothing, 128).
holds(2, on((block,6)), puzzle_room_table, 128).
holds(2, tower_base((block,1),puzzle_room_table), true, 128).
holds(2, tower_base((block,2),puzzle_room_table), false, 128).
holds(2, tower_base((block,3),puzzle_room_table), true, 128).
holds(2, tower_base((block,4),puzzle_room_table), false, 128).
holds(2, tower_base((block,5),puzzle_room_table), false, 128).
holds(2, tower_base((block,6),puzzle_room_table), true, 128).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 128).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 128).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 128).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 128).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 128).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 128).

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=131']

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 40})

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 37).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 38).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 39).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 40).

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=128, step_range=range(0, 129)

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 128, Total actions = 128, Produced sub-goal stages = 0

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 128, Total actions = 128, Produced sub-goal stages = 0

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 128, Total actions = 128, Produced sub-goal stages = 0

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt', '-c', 'minimum_search_length_bound=131']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000026255CD5430>]
	incrementor = SolveIncrementor(step_start=128, step_increase=1, step_increase_initial=4, step_end_min=132, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1742.8681574000043, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 128), range_=None), IncPart(name='plan_module', args=('#inc', 128, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 128, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 128, 37, 40, 'sequential', 'false'), range_=None)]

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 822 rules

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004564400000163005s

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115966s.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021878s with result Satisfiable.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000026290ACFE50>

[03-03-2022_22-30-19] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 128)
	('last_sgoals', 40)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 37)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000026290ACFE50>)

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 128). %* None *%
#program plan_module(#inc, 128, false, false). %* None *%
#program optimisation_module(#inc, 128, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 128, 37, 40, sequential, false). %* None *%

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    127 : Current =    131
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(131)]), ('state_module', [Number(128), Number(128)]), ('plan_module', [Number(128), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(128), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(128)]), ('action_preconditions', [Number(128)]), ('variable_relations', [Number(128)]), ('abstraction_mappings', [Number(128)]), ('conformance_module', [Number(128), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(129), Number(128)]), ('plan_module', [Number(129), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(129), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(129)]), ('action_preconditions', [Number(129)]), ('variable_relations', [Number(129)]), ('abstraction_mappings', [Number(129)]), ('conformance_module', [Number(129), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(130), Number(128)]), ('plan_module', [Number(130), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(130), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(130)]), ('action_preconditions', [Number(130)]), ('variable_relations', [Number(130)]), ('abstraction_mappings', [Number(130)]), ('conformance_module', [Number(130), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(131), Number(128)]), ('plan_module', [Number(131), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(131), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(131)]), ('action_preconditions', [Number(131)]), ('variable_relations', [Number(131)]), ('abstraction_mappings', [Number(131)]), ('conformance_module', [Number(131), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.655765s.

[03-03-2022_22-30-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.180674s with result Satisfiable.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8364387000001443, Incremental time limit = None
Running cumulative time = 0.8364387000001443, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2192.640625Mb, VMS = 2215.386719Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.655765s, Solving = 0.180674s, Total = 0.836439s, Memory = (RSS = 2192.640625Mb, VMS = 2215.386719Mb), Step range = [128-131]), Calls = 1
Final Model :: Total atoms = 21419, Cost = (0,), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    131 : Current =    132
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(132)]), ('state_module', [Number(132), Number(128)]), ('plan_module', [Number(132), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(132), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(132)]), ('action_preconditions', [Number(132)]), ('variable_relations', [Number(132)]), ('abstraction_mappings', [Number(132)]), ('conformance_module', [Number(132), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.229870s.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024905s with result Unsatisfiable.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2547754999995959, Incremental time limit = None
Running cumulative time = 1.0912141999997402, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2196.207031Mb, VMS = 2219.394531Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    132 : Current =    133
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(133)]), ('state_module', [Number(133), Number(128)]), ('plan_module', [Number(133), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(133), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(133)]), ('action_preconditions', [Number(133)]), ('variable_relations', [Number(133)]), ('abstraction_mappings', [Number(133)]), ('conformance_module', [Number(133), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.238147s.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033856s with result Unsatisfiable.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27200319999974454, Incremental time limit = None
Running cumulative time = 1.3632173999994848, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2198.546875Mb, VMS = 2220.906250Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    133 : Current =    134
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(134)]), ('state_module', [Number(134), Number(128)]), ('plan_module', [Number(134), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(134), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(134)]), ('action_preconditions', [Number(134)]), ('variable_relations', [Number(134)]), ('abstraction_mappings', [Number(134)]), ('conformance_module', [Number(134), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257683s.

[03-03-2022_22-30-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044431s with result Unsatisfiable.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30211350000035964, Incremental time limit = None
Running cumulative time = 1.6653308999998444, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2201.546875Mb, VMS = 2226.554688Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    134 : Current =    135
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(135)]), ('state_module', [Number(135), Number(128)]), ('plan_module', [Number(135), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(135), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(135)]), ('action_preconditions', [Number(135)]), ('variable_relations', [Number(135)]), ('abstraction_mappings', [Number(135)]), ('conformance_module', [Number(135), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268940s.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044100s with result Unsatisfiable.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3130401999997048, Incremental time limit = None
Running cumulative time = 1.9783710999995492, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2203.664062Mb, VMS = 2227.105469Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    135 : Current =    136
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(136)]), ('state_module', [Number(136), Number(128)]), ('plan_module', [Number(136), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(136), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(136)]), ('action_preconditions', [Number(136)]), ('variable_relations', [Number(136)]), ('abstraction_mappings', [Number(136)]), ('conformance_module', [Number(136), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.276326s.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048073s with result Unsatisfiable.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3243984000000637, Incremental time limit = None
Running cumulative time = 2.302769499999613, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2205.832031Mb, VMS = 2227.667969Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    136 : Current =    137
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(137)]), ('state_module', [Number(137), Number(128)]), ('plan_module', [Number(137), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(137), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(137)]), ('action_preconditions', [Number(137)]), ('variable_relations', [Number(137)]), ('abstraction_mappings', [Number(137)]), ('conformance_module', [Number(137), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.283924s.

[03-03-2022_22-30-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059875s with result Unsatisfiable.

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3437988000000587, Incremental time limit = None
Running cumulative time = 2.6465682999996716, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2208.171875Mb, VMS = 2235.066406Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    137 : Current =    138
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(138)]), ('state_module', [Number(138), Number(128)]), ('plan_module', [Number(138), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(138), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(138)]), ('action_preconditions', [Number(138)]), ('variable_relations', [Number(138)]), ('abstraction_mappings', [Number(138)]), ('conformance_module', [Number(138), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287465s.

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062054s with result Unsatisfiable.

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3495195999998941, Incremental time limit = None
Running cumulative time = 2.9960878999995657, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2211.437500Mb, VMS = 2237.035156Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =    138 : Current =    139
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(139)]), ('state_module', [Number(139), Number(128)]), ('plan_module', [Number(139), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(139), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(139)]), ('action_preconditions', [Number(139)]), ('variable_relations', [Number(139)]), ('abstraction_mappings', [Number(139)]), ('conformance_module', [Number(139), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.295209s.

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060880s with result Unsatisfiable.

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3560883999998623, Incremental time limit = None
Running cumulative time = 3.352176299999428, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2213.945312Mb, VMS = 2237.597656Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =    139 : Current =    140
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(140)]), ('state_module', [Number(140), Number(128)]), ('plan_module', [Number(140), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(140), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(140)]), ('action_preconditions', [Number(140)]), ('variable_relations', [Number(140)]), ('abstraction_mappings', [Number(140)]), ('conformance_module', [Number(140), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.295332s.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059141s with result Unsatisfiable.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3544721000002937, Incremental time limit = None
Running cumulative time = 3.7066483999997217, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2216.027344Mb, VMS = 2238.148438Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =    140 : Current =    141
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(141)]), ('state_module', [Number(141), Number(128)]), ('plan_module', [Number(141), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(141), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(141)]), ('action_preconditions', [Number(141)]), ('variable_relations', [Number(141)]), ('abstraction_mappings', [Number(141)]), ('conformance_module', [Number(141), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.296129s.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.087300s with result Unsatisfiable.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38342850000026374, Incremental time limit = None
Running cumulative time = 4.0900768999999855, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2224.781250Mb, VMS = 2256.589844Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =    141 : Current =    142
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(142)]), ('state_module', [Number(142), Number(128)]), ('plan_module', [Number(142), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(142), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(142)]), ('action_preconditions', [Number(142)]), ('variable_relations', [Number(142)]), ('abstraction_mappings', [Number(142)]), ('conformance_module', [Number(142), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.304133s.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.076425s with result Unsatisfiable.

[03-03-2022_22-30-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3805580000007467, Incremental time limit = None
Running cumulative time = 4.470634900000732, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2227.539062Mb, VMS = 2257.933594Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =    142 : Current =    143
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(143)]), ('state_module', [Number(143), Number(128)]), ('plan_module', [Number(143), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(143), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(143)]), ('action_preconditions', [Number(143)]), ('variable_relations', [Number(143)]), ('abstraction_mappings', [Number(143)]), ('conformance_module', [Number(143), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306086s.

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078475s with result Unsatisfiable.

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38456159999986994, Incremental time limit = None
Running cumulative time = 4.855196500000602, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2230.355469Mb, VMS = 2258.496094Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =    143 : Current =    144
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(144)]), ('state_module', [Number(144), Number(128)]), ('plan_module', [Number(144), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(144), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(144)]), ('action_preconditions', [Number(144)]), ('variable_relations', [Number(144)]), ('abstraction_mappings', [Number(144)]), ('conformance_module', [Number(144), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307792s.

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.096936s with result Unsatisfiable.

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.40472850000060134, Incremental time limit = None
Running cumulative time = 5.259925000001203, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2233.191406Mb, VMS = 2259.753906Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =    144 : Current =    145
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(145)]), ('state_module', [Number(145), Number(128)]), ('plan_module', [Number(145), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(145), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(145)]), ('action_preconditions', [Number(145)]), ('variable_relations', [Number(145)]), ('abstraction_mappings', [Number(145)]), ('conformance_module', [Number(145), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311917s.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.103977s with result Unsatisfiable.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.41589390000035564, Incremental time limit = None
Running cumulative time = 5.675818900001559, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2236.000000Mb, VMS = 2260.324219Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =    145 : Current =    146
Incrementor step ends | Minimum  =    132 : Maximum =    300

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(146)]), ('state_module', [Number(146), Number(128)]), ('plan_module', [Number(146), Number(128), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(146), Number(128), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(146)]), ('action_preconditions', [Number(146)]), ('variable_relations', [Number(146)]), ('abstraction_mappings', [Number(146)]), ('conformance_module', [Number(146), Number(128), Number(37), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306711s.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.135446s with result Satisfiable.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4421572000001106, Incremental time limit = None
Running cumulative time = 6.11797610000167, Cumulative time limit = 1742.8681574000043
Used memory = (RSS = 2245.781250Mb, VMS = 2286.484375Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.921429s, Solving = 1.196548s, Total = 6.117976s, Memory = (RSS = 2245.781250Mb, VMS = 2286.484375Mb), Step range = [128-146]), Calls = 16
Final Model :: Total atoms = 27362, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.655765s, Solving = 0.180674s, Total = 0.836439s, Memory = (RSS = 2192.640625Mb, VMS = 2215.386719Mb), Step range = [128-131]
2 : Statistics :: Grounding = 0.229870s, Solving = 0.024905s, Total = 0.254775s, Memory = (RSS = 2196.207031Mb, VMS = 2219.394531Mb), Step range = [132-132]
3 : Statistics :: Grounding = 0.238147s, Solving = 0.033856s, Total = 0.272003s, Memory = (RSS = 2198.546875Mb, VMS = 2220.906250Mb), Step range = [133-133]
4 : Statistics :: Grounding = 0.257683s, Solving = 0.044431s, Total = 0.302114s, Memory = (RSS = 2201.546875Mb, VMS = 2226.554688Mb), Step range = [134-134]
5 : Statistics :: Grounding = 0.268940s, Solving = 0.044100s, Total = 0.313040s, Memory = (RSS = 2203.664062Mb, VMS = 2227.105469Mb), Step range = [135-135]
6 : Statistics :: Grounding = 0.276326s, Solving = 0.048073s, Total = 0.324398s, Memory = (RSS = 2205.832031Mb, VMS = 2227.667969Mb), Step range = [136-136]
7 : Statistics :: Grounding = 0.283924s, Solving = 0.059875s, Total = 0.343799s, Memory = (RSS = 2208.171875Mb, VMS = 2235.066406Mb), Step range = [137-137]
8 : Statistics :: Grounding = 0.287465s, Solving = 0.062054s, Total = 0.349520s, Memory = (RSS = 2211.437500Mb, VMS = 2237.035156Mb), Step range = [138-138]
9 : Statistics :: Grounding = 0.295209s, Solving = 0.060880s, Total = 0.356088s, Memory = (RSS = 2213.945312Mb, VMS = 2237.597656Mb), Step range = [139-139]
10 : Statistics :: Grounding = 0.295332s, Solving = 0.059141s, Total = 0.354472s, Memory = (RSS = 2216.027344Mb, VMS = 2238.148438Mb), Step range = [140-140]
11 : Statistics :: Grounding = 0.296129s, Solving = 0.087300s, Total = 0.383429s, Memory = (RSS = 2224.781250Mb, VMS = 2256.589844Mb), Step range = [141-141]
12 : Statistics :: Grounding = 0.304133s, Solving = 0.076425s, Total = 0.380558s, Memory = (RSS = 2227.539062Mb, VMS = 2257.933594Mb), Step range = [142-142]
13 : Statistics :: Grounding = 0.306086s, Solving = 0.078475s, Total = 0.384562s, Memory = (RSS = 2230.355469Mb, VMS = 2258.496094Mb), Step range = [143-143]
14 : Statistics :: Grounding = 0.307792s, Solving = 0.096936s, Total = 0.404729s, Memory = (RSS = 2233.191406Mb, VMS = 2259.753906Mb), Step range = [144-144]
15 : Statistics :: Grounding = 0.311917s, Solving = 0.103977s, Total = 0.415894s, Memory = (RSS = 2236.000000Mb, VMS = 2260.324219Mb), Step range = [145-145]
16 : Statistics :: Grounding = 0.306711s, Solving = 0.135446s, Total = 0.442157s, Memory = (RSS = 2245.781250Mb, VMS = 2286.484375Mb), Step range = [146-146]

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 6.117976s due to: Stop condition reached.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30, 107: 31, 108: 31, 109: 31, 110: 31, 111: 31, 112: 31, 113: 31, 114: 31, 115: 32, 116: 32, 117: 33, 118: 34, 119: 34, 120: 34, 121: 35, 122: 36, 123: 36, 124: 36, 125: 36, 126: 36, 127: 36, 128: 36}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106, 31: 114, 32: 116, 33: 117, 34: 120, 35: 121, 36: 128}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30, 107: 31, 108: 31, 109: 31, 110: 31, 111: 31, 112: 31, 113: 31, 114: 31, 115: 32, 116: 32, 117: 33, 118: 34, 119: 34, 120: 34, 121: 35, 122: 36, 123: 36, 124: 36, 125: 36, 126: 36, 127: 36, 128: 36, 129: 37, 130: 37, 131: 37, 132: 37, 133: 37, 134: 37, 135: 37, 136: 37, 137: 37, 138: 38, 139: 38, 140: 38, 141: 38, 142: 38, 143: 38, 144: 38, 145: 39, 146: 40}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106, 31: 114, 32: 116, 33: 117, 34: 120, 35: 121, 36: 128, 37: 137, 38: 144, 39: 145, 40: 146}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 40, Last requested goal index = 40, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.921429s, Solving = 1.196548s, Total = 6.117976s, Memory = (RSS = 2245.781250Mb, VMS = 2286.484375Mb), Step range = [128-146]), Calls = 16
Model :: Total atoms = 27362, Cost = (-1,), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 18 :: Actions = 18                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 70:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 71:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 72:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,1))
Step 73:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,1))
Step 74:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,1))
Step 75:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 76:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 77:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 78:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 79:
    Current Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 80:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 81:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 82:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 83:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 84:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 85:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 87:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 88:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 90:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 91:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 92:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 93:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 94:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 95:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 96:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 97:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 98:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 99:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 100:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 101:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 102:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 103:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 104:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 105:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 106:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 107:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 108:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 109:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 110:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 111:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 112:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 113:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 114:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 115:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 116:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 117:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 118:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 119:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 120:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 121:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 122:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 123:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 124:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 125:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 126:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 127:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 128:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 129:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 130:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 131:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 132:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 133:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 134:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 135:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 136:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 137:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 138:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 139:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 140:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 141:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 142:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 143:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 144:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 145:
    Current Sub-goals:
        [Index = 39] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 39] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 146:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Monolevel problem 11 at level 1 solved.

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Online planning increment 11 finished.

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 11 : Total constraining sub-goal stages = 44 : Goals achieved = 40 : Goals unachieved = 4 : Complete = False

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 12 by method ground-first is [1-1].

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 12 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 20, Sub-goal Stage Range = [25-44]
Division points [total=5] : [(Index = 27, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 33, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [41-44]

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=146, step_range=range(0, 147)

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 146, Total actions = 146, Produced sub-goal stages = 0

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 146, Total actions = 146, Produced sub-goal stages = 0

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 146, Total actions = 146, Produced sub-goal stages = 0

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [41-44], problem number = 12, increment number = 12

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 41)
	('last_sgoals', 44)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1794.0086047000018)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [41-44] : Concurrency disabled : Minimum search length bound enabled with value 149

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 41
last_sgoals = 44
start_step = 146
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 149

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[03-03-2022_22-30-26] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[03-03-2022_22-30-26] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 146 as problem start state.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 146})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 146})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 146})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 146})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 146})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 146})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 146})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 146})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 146})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 146})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 146})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 146})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 146})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 146})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 146})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 146})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 146})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 146})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 146})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 146})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 146})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 146})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 146})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 146})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 146})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 146})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 146})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 146})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 146})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 146})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 146})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 146})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 146})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 146})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 146})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 146})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 146})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 146})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 146})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 146})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 146})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 146})

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 146).
holds(1, complete_tower(red,puzzle_room_table), false, 146).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 146).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 146).
holds(1, configuration(manipulator_limb_1), retracted, 146).
holds(1, configuration(manipulator_limb_2), extended, 146).
holds(1, configuration(puzzle_room_door), open, 146).
holds(1, configuration(starting_room_door), closed, 146).
holds(1, configuration(store_room_door), open, 146).
holds(1, grasping(manipulator_arm_1), (block,4), 146).
holds(1, grasping(manipulator_arm_2), nothing, 146).
holds(1, grasping(manipulator_end_1), (block,4), 146).
holds(1, grasping(manipulator_end_2), nothing, 146).
holds(1, in((block,1)), (puzzle_room,5,0), 146).
holds(1, in((block,2)), (puzzle_room,5,0), 146).
holds(1, in((block,3)), (puzzle_room,5,0), 146).
holds(1, in((block,4)), (puzzle_room,5,0), 146).
holds(1, in((block,5)), (puzzle_room,5,0), 146).
holds(1, in((block,6)), (puzzle_room,5,0), 146).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 146).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 146).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 146).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 146).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 146).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 146).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 146).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 146).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 146).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 146).
holds(1, in(talos), (puzzle_room,5,0), 146).
holds(1, in_tower((block,1),(block,1)), true, 146).
holds(1, in_tower((block,1),(block,2)), false, 146).
holds(1, in_tower((block,1),(block,3)), false, 146).
holds(1, in_tower((block,1),(block,4)), false, 146).
holds(1, in_tower((block,1),(block,5)), false, 146).
holds(1, in_tower((block,1),(block,6)), false, 146).
holds(1, in_tower((block,2),(block,1)), false, 146).
holds(1, in_tower((block,2),(block,2)), false, 146).
holds(1, in_tower((block,2),(block,3)), false, 146).
holds(1, in_tower((block,2),(block,4)), false, 146).
holds(1, in_tower((block,2),(block,5)), false, 146).
holds(1, in_tower((block,2),(block,6)), false, 146).
holds(1, in_tower((block,3),(block,1)), false, 146).
holds(1, in_tower((block,3),(block,2)), true, 146).
holds(1, in_tower((block,3),(block,3)), true, 146).
holds(1, in_tower((block,3),(block,4)), false, 146).
holds(1, in_tower((block,3),(block,5)), false, 146).
holds(1, in_tower((block,3),(block,6)), false, 146).
holds(1, in_tower((block,4),(block,1)), false, 146).
holds(1, in_tower((block,4),(block,2)), false, 146).
holds(1, in_tower((block,4),(block,3)), false, 146).
holds(1, in_tower((block,4),(block,4)), false, 146).
holds(1, in_tower((block,4),(block,5)), false, 146).
holds(1, in_tower((block,4),(block,6)), false, 146).
holds(1, in_tower((block,5),(block,1)), false, 146).
holds(1, in_tower((block,5),(block,2)), false, 146).
holds(1, in_tower((block,5),(block,3)), false, 146).
holds(1, in_tower((block,5),(block,4)), false, 146).
holds(1, in_tower((block,5),(block,5)), false, 146).
holds(1, in_tower((block,5),(block,6)), false, 146).
holds(1, in_tower((block,6),(block,1)), false, 146).
holds(1, in_tower((block,6),(block,2)), false, 146).
holds(1, in_tower((block,6),(block,3)), false, 146).
holds(1, in_tower((block,6),(block,4)), false, 146).
holds(1, in_tower((block,6),(block,5)), true, 146).
holds(1, in_tower((block,6),(block,6)), true, 146).
holds(1, on((block,1)), puzzle_room_table_left, 146).
holds(1, on((block,2)), (block,3), 146).
holds(1, on((block,3)), puzzle_room_table_left, 146).
holds(1, on((block,4)), nothing, 146).
holds(1, on((block,5)), (block,6), 146).
holds(1, on((block,6)), puzzle_room_table_right, 146).
holds(1, tower_base((block,1),puzzle_room_table), true, 146).
holds(1, tower_base((block,2),puzzle_room_table), false, 146).
holds(1, tower_base((block,3),puzzle_room_table), true, 146).
holds(1, tower_base((block,4),puzzle_room_table), false, 146).
holds(1, tower_base((block,5),puzzle_room_table), false, 146).
holds(1, tower_base((block,6),puzzle_room_table), true, 146).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 146).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 146).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 146).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 146).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 146).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 146).
holds(2, complete_tower(blue,puzzle_room_table), false, 146).
holds(2, complete_tower(red,puzzle_room_table), false, 146).
holds(2, configuration(manipulator_arm_1), retracted, 146).
holds(2, configuration(manipulator_arm_2), extended, 146).
holds(2, configuration(puzzle_room_door), open, 146).
holds(2, configuration(starting_room_door), closed, 146).
holds(2, configuration(store_room_door), open, 146).
holds(2, grasping(manipulator_arm_1), (block,4), 146).
holds(2, grasping(manipulator_arm_2), nothing, 146).
holds(2, in((block,1)), puzzle_room, 146).
holds(2, in((block,2)), puzzle_room, 146).
holds(2, in((block,3)), puzzle_room, 146).
holds(2, in((block,4)), puzzle_room, 146).
holds(2, in((block,5)), puzzle_room, 146).
holds(2, in((block,6)), puzzle_room, 146).
holds(2, in(manipulator_arm_1), puzzle_room, 146).
holds(2, in(manipulator_arm_2), puzzle_room, 146).
holds(2, in(puzzle_room_table), puzzle_room, 146).
holds(2, in(talos), puzzle_room, 146).
holds(2, in_tower((block,1),(block,1)), true, 146).
holds(2, in_tower((block,1),(block,2)), false, 146).
holds(2, in_tower((block,1),(block,3)), false, 146).
holds(2, in_tower((block,1),(block,4)), false, 146).
holds(2, in_tower((block,1),(block,5)), false, 146).
holds(2, in_tower((block,1),(block,6)), false, 146).
holds(2, in_tower((block,2),(block,1)), false, 146).
holds(2, in_tower((block,2),(block,2)), false, 146).
holds(2, in_tower((block,2),(block,3)), false, 146).
holds(2, in_tower((block,2),(block,4)), false, 146).
holds(2, in_tower((block,2),(block,5)), false, 146).
holds(2, in_tower((block,2),(block,6)), false, 146).
holds(2, in_tower((block,3),(block,1)), false, 146).
holds(2, in_tower((block,3),(block,2)), true, 146).
holds(2, in_tower((block,3),(block,3)), true, 146).
holds(2, in_tower((block,3),(block,4)), false, 146).
holds(2, in_tower((block,3),(block,5)), false, 146).
holds(2, in_tower((block,3),(block,6)), false, 146).
holds(2, in_tower((block,4),(block,1)), false, 146).
holds(2, in_tower((block,4),(block,2)), false, 146).
holds(2, in_tower((block,4),(block,3)), false, 146).
holds(2, in_tower((block,4),(block,4)), false, 146).
holds(2, in_tower((block,4),(block,5)), false, 146).
holds(2, in_tower((block,4),(block,6)), false, 146).
holds(2, in_tower((block,5),(block,1)), false, 146).
holds(2, in_tower((block,5),(block,2)), false, 146).
holds(2, in_tower((block,5),(block,3)), false, 146).
holds(2, in_tower((block,5),(block,4)), false, 146).
holds(2, in_tower((block,5),(block,5)), false, 146).
holds(2, in_tower((block,5),(block,6)), false, 146).
holds(2, in_tower((block,6),(block,1)), false, 146).
holds(2, in_tower((block,6),(block,2)), false, 146).
holds(2, in_tower((block,6),(block,3)), false, 146).
holds(2, in_tower((block,6),(block,4)), false, 146).
holds(2, in_tower((block,6),(block,5)), true, 146).
holds(2, in_tower((block,6),(block,6)), true, 146).
holds(2, on((block,1)), puzzle_room_table, 146).
holds(2, on((block,2)), (block,3), 146).
holds(2, on((block,3)), puzzle_room_table, 146).
holds(2, on((block,4)), nothing, 146).
holds(2, on((block,5)), (block,6), 146).
holds(2, on((block,6)), puzzle_room_table, 146).
holds(2, tower_base((block,1),puzzle_room_table), true, 146).
holds(2, tower_base((block,2),puzzle_room_table), false, 146).
holds(2, tower_base((block,3),puzzle_room_table), true, 146).
holds(2, tower_base((block,4),puzzle_room_table), false, 146).
holds(2, tower_base((block,5),puzzle_room_table), false, 146).
holds(2, tower_base((block,6),puzzle_room_table), true, 146).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 146).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 146).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 146).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 146).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 146).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 146).

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=149']

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 44})

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 41).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 42).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 43).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 44).

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=146, step_range=range(0, 147)

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 146, Total actions = 146, Produced sub-goal stages = 0

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 146, Total actions = 146, Produced sub-goal stages = 0

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 146, Total actions = 146, Produced sub-goal stages = 0

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=149']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002628CCE6700>]
	incrementor = SolveIncrementor(step_start=146, step_increase=1, step_increase_initial=4, step_end_min=150, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1736.7501813000026, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 146), range_=None), IncPart(name='plan_module', args=('#inc', 146, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 146, 'false', 'false', 'false', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 146, 41, 44, 'sequential', 'false'), range_=None)]

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 822 rules

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004668800000217743s

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.114996s.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022338s with result Satisfiable.

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002629050E630>

[03-03-2022_22-30-26] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 146)
	('last_sgoals', 44)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002626CD9CAC0>)
	('first_sgoals', 41)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002629050E630>)

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 146). %* None *%
#program plan_module(#inc, 146, false, true). %* None *%
#program optimisation_module(#inc, 146, false, false, false, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 146, 41, 44, sequential, false). %* None *%

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    145 : Current =    149
Incrementor step ends | Minimum  =    150 : Maximum =    300

[03-03-2022_22-30-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(149)]), ('state_module', [Number(146), Number(146)]), ('plan_module', [Number(146), Number(146), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(146), Number(146), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(146)]), ('action_preconditions', [Number(146)]), ('variable_relations', [Number(146)]), ('abstraction_mappings', [Number(146)]), ('conformance_module', [Number(146), Number(146), Number(41), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(147), Number(146)]), ('plan_module', [Number(147), Number(146), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(147), Number(146), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(147)]), ('action_preconditions', [Number(147)]), ('variable_relations', [Number(147)]), ('abstraction_mappings', [Number(147)]), ('conformance_module', [Number(147), Number(146), Number(41), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(148), Number(146)]), ('plan_module', [Number(148), Number(146), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(148), Number(146), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(148)]), ('action_preconditions', [Number(148)]), ('variable_relations', [Number(148)]), ('abstraction_mappings', [Number(148)]), ('conformance_module', [Number(148), Number(146), Number(41), Number(44), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(149), Number(146)]), ('plan_module', [Number(149), Number(146), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(149), Number(146), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(149)]), ('action_preconditions', [Number(149)]), ('variable_relations', [Number(149)]), ('abstraction_mappings', [Number(149)]), ('conformance_module', [Number(149), Number(146), Number(41), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.658137s.

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.155161s with result Satisfiable.

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8132981999997355, Incremental time limit = None
Running cumulative time = 0.8132981999997355, Cumulative time limit = 1736.7501813000026
Used memory = (RSS = 2193.144531Mb, VMS = 2214.925781Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.658137s, Solving = 0.155161s, Total = 0.813298s, Memory = (RSS = 2193.144531Mb, VMS = 2214.925781Mb), Step range = [146-149]), Calls = 1
Final Model :: Total atoms = 21976, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    149 : Current =    150
Incrementor step ends | Minimum  =    150 : Maximum =    300

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(150)]), ('state_module', [Number(150), Number(146)]), ('plan_module', [Number(150), Number(146), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(150), Number(146), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(150)]), ('action_preconditions', [Number(150)]), ('variable_relations', [Number(150)]), ('abstraction_mappings', [Number(150)]), ('conformance_module', [Number(150), Number(146), Number(41), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242102s.

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030916s with result Unsatisfiable.

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2730179999998654, Incremental time limit = None
Running cumulative time = 1.086316199999601, Cumulative time limit = 1736.7501813000026
Used memory = (RSS = 2198.433594Mb, VMS = 2221.082031Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    150 : Current =    151
Incrementor step ends | Minimum  =    150 : Maximum =    300

[03-03-2022_22-30-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(151)]), ('state_module', [Number(151), Number(146)]), ('plan_module', [Number(151), Number(146), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(151), Number(146), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(151)]), ('action_preconditions', [Number(151)]), ('variable_relations', [Number(151)]), ('abstraction_mappings', [Number(151)]), ('conformance_module', [Number(151), Number(146), Number(41), Number(44), Function('sequential', [], True), Function('false', [], True)])]

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250586s.

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057337s with result Satisfiable.

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30792250000013155, Incremental time limit = None
Running cumulative time = 1.3942386999997325, Cumulative time limit = 1736.7501813000026
Used memory = (RSS = 2203.027344Mb, VMS = 2224.664062Mb), Total system virtual memory = 16324.0078125Mb

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.150825s, Solving = 0.243413s, Total = 1.394239s, Memory = (RSS = 2203.027344Mb, VMS = 2224.664062Mb), Step range = [146-151]), Calls = 3
Final Model :: Total atoms = 23084, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.658137s, Solving = 0.155161s, Total = 0.813298s, Memory = (RSS = 2193.144531Mb, VMS = 2214.925781Mb), Step range = [146-149]
2 : Statistics :: Grounding = 0.242102s, Solving = 0.030916s, Total = 0.273018s, Memory = (RSS = 2198.433594Mb, VMS = 2221.082031Mb), Step range = [150-150]
3 : Statistics :: Grounding = 0.250586s, Solving = 0.057337s, Total = 0.307923s, Memory = (RSS = 2203.027344Mb, VMS = 2224.664062Mb), Step range = [151-151]

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.394239s due to: Stop condition reached.

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[03-03-2022_22-30-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30, 107: 31, 108: 31, 109: 31, 110: 31, 111: 31, 112: 31, 113: 31, 114: 31, 115: 32, 116: 32, 117: 33, 118: 34, 119: 34, 120: 34, 121: 35, 122: 36, 123: 36, 124: 36, 125: 36, 126: 36, 127: 36, 128: 36, 129: 37, 130: 37, 131: 37, 132: 37, 133: 37, 134: 37, 135: 37, 136: 37, 137: 37, 138: 38, 139: 38, 140: 38, 141: 38, 142: 38, 143: 38, 144: 38, 145: 39, 146: 40}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106, 31: 114, 32: 116, 33: 117, 34: 120, 35: 121, 36: 128, 37: 137, 38: 144, 39: 145, 40: 146}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 10, 35: 10, 36: 10, 37: 10, 38: 10, 39: 10, 40: 10, 41: 10, 42: 11, 43: 11, 44: 11, 45: 11, 46: 11, 47: 11, 48: 11, 49: 12, 50: 12, 51: 13, 52: 14, 53: 14, 54: 14, 55: 14, 56: 14, 57: 14, 58: 14, 59: 15, 60: 15, 61: 15, 62: 15, 63: 15, 64: 15, 65: 15, 66: 15, 67: 15, 68: 16, 69: 17, 70: 17, 71: 17, 72: 17, 73: 17, 74: 17, 75: 17, 76: 17, 77: 17, 78: 17, 79: 18, 80: 19, 81: 20, 82: 21, 83: 22, 84: 22, 85: 23, 86: 24, 87: 25, 88: 26, 89: 27, 90: 28, 91: 28, 92: 28, 93: 28, 94: 28, 95: 28, 96: 28, 97: 29, 98: 29, 99: 29, 100: 29, 101: 29, 102: 29, 103: 29, 104: 29, 105: 29, 106: 30, 107: 31, 108: 31, 109: 31, 110: 31, 111: 31, 112: 31, 113: 31, 114: 31, 115: 32, 116: 32, 117: 33, 118: 34, 119: 34, 120: 34, 121: 35, 122: 36, 123: 36, 124: 36, 125: 36, 126: 36, 127: 36, 128: 36, 129: 37, 130: 37, 131: 37, 132: 37, 133: 37, 134: 37, 135: 37, 136: 37, 137: 37, 138: 38, 139: 38, 140: 38, 141: 38, 142: 38, 143: 38, 144: 38, 145: 39, 146: 40, 147: 41, 148: 41, 149: 42, 150: 43, 151: 44}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 41, 11: 48, 12: 50, 13: 51, 14: 58, 15: 67, 16: 68, 17: 78, 18: 79, 19: 80, 20: 81, 21: 82, 22: 84, 23: 85, 24: 86, 25: 87, 26: 88, 27: 89, 28: 96, 29: 105, 30: 106, 31: 114, 32: 116, 33: 117, 34: 120, 35: 121, 36: 128, 37: 137, 38: 144, 39: 145, 40: 146, 41: 148, 42: 149, 43: 150, 44: 151}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 5, 19: 5, 20: 6, 21: 7, 22: 8, 23: 9, 24: 10, 25: 11, 26: 11, 27: 12, 28: 12, 29: 12, 30: 13, 31: 13, 32: 13, 33: 14, 34: 14, 35: 15, 36: 15, 37: 15, 38: 16, 39: 16, 40: 17, 41: 18, 42: 19, 43: 20, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 17, 5: 19, 6: 20, 7: 21, 8: 22, 9: 23, 10: 24, 11: 26, 12: 29, 13: 32, 14: 34, 15: 37, 16: 39, 17: 40, 18: 41, 19: 42, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 44, Last requested goal index = 44, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.150825s, Solving = 0.243413s, Total = 1.394239s, Memory = (RSS = 2203.027344Mb, VMS = 2224.664062Mb), Step range = [146-151]), Calls = 3
Model :: Total atoms = 23084, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 5 :: Actions = 5                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,0))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 34:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 35:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 36:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 37:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 38:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 39:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 40:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 41:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 43:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 44:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 45:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 46:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 47:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 48:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 50:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 51:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 53:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 54:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 55:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 56:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 57:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 58:
    Current Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 14] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 59:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 60:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 61:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 62:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 63:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 64:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 65:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 66:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 67:
    Current Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 15] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 68:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 69:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 70:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 71:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 72:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,1))
Step 73:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,1))
Step 74:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,1))
Step 75:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 76:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 77:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 78:
    Current Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : grasp(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 79:
    Current Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 18] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 80:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 81:
    Current Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : release(manipulator_arm_2,(block,3)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 82:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 83:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
Step 84:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 85:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,2))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 87:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 88:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,2))
Step 89:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 90:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 91:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 92:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 93:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 94:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 95:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 96:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 97:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 98:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 99:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 100:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 101:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 102:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 103:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 104:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 105:
    Current Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 29] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 106:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 107:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 108:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 109:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 110:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 111:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 112:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 113:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 114:
    Current Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 31] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 115:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 116:
    Current Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 32] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 117:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 118:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 119:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 120:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 121:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 122:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 123:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 124:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 125:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 126:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 127:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 128:
    Current Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 36] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 129:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 130:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 131:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 132:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 133:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 134:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 135:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 136:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 137:
    Current Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 37] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 138:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 139:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 140:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 141:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 142:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 143:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 144:
    Current Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 38] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 145:
    Current Sub-goals:
        [Index = 39] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 39] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 146:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 147:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 148:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 149:
    Current Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 42] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))
Step 150:
    Current Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 43] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 151:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Monolevel problem 12 at level 1 solved.

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Online planning increment 12 finished.

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=151, step_range=range(0, 152)

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 151, Total actions = 151, Produced sub-goal stages = 0

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 151, Total actions = 151, Produced sub-goal stages = 0

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 151, Total actions = 151, Produced sub-goal stages = 0

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 151, Actions = 151

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 10.043105899999773, Average ground wait time = 5.150788974999955, Absolution time = 58.652662099998906)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.23s, ST =   0.76s, OT = 0.00s, TT =   2.00s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  44, AC =  44, CF = 1.0, GT =   3.12s, ST =   0.88s, OT = 0.00s, TT =   4.00s, EF = (LE = 2.2, AC = 2.2), ED = (LE = 2.0, AC = 2.0), EB = (LE = 0.9, AC = 0.9)        |     
     |        Lvl = 1 (com-ref), LE = 151, AC = 151, CF = 1.0, GT =  41.10s, ST =  11.56s, OT = 0.00s, TT =  52.66s, EF = (LE = 3.4, AC = 3.4), ED = (LE = 3.4, AC = 3.4), EB = (LE = 1.0, AC = 1.0)        |     
     ========================================================================================================================================================================================================     

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=151, step_range=range(0, 152)

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 151, Total actions = 151, Produced sub-goal stages = 0

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 151, Total actions = 151, Produced sub-goal stages = 0

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[03-03-2022_22-30-28] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Total actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 151, Total actions = 151, Produced sub-goal stages = 0

[03-03-2022_22-30-28] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 75.311328s            
      ================================================      

[03-03-2022_22-30-28] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 3938.675191s, Proccess time 6524.859375s         
  ################################################################################################  

[03-03-2022_22-30-28] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=5.5281099844341, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.299999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-28] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=6.457805674703398, rmse_div_indices=1.374368541872554, rmse_div_steps=6.1883713665988225
Mean Absolute Errors: mae_mchild=5.139462809917357, mae_div_indices=1.0512820512820515, mae_div_steps=4.487179487179488

[03-03-2022_22-30-28] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=5.375872022286244, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=6.683112892498847, rmse_div_indices=1.374368541872554, rmse_div_steps=6.165193864317276
Mean Absolute Errors: mae_mchild=5.266528925619834, mae_div_indices=1.0512820512820515, mae_div_steps=4.769230769230769

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=6.42884126417817, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.749999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=5.810608529887665, rmse_div_indices=1.9785170998831216, rmse_div_steps=5.763594112532306
Mean Absolute Errors: mae_mchild=4.6642561983471085, mae_div_indices=1.5384615384615397, mae_div_steps=4.717948717948716

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=6.002915958099029, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.049999999999999, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=5.7264008475364925, rmse_div_indices=1.8292495308606331, rmse_div_steps=8.65636715416417
Mean Absolute Errors: mae_mchild=4.75, mae_div_indices=1.4615384615384615, mae_div_steps=7.038461538461538

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=6.403124237432848, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.6999999999999975, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=6.091905447679817, rmse_div_indices=1.9785170998831216, rmse_div_steps=8.016875896837814
Mean Absolute Errors: mae_mchild=5.02582644628099, mae_div_indices=1.5384615384615397, mae_div_steps=6.269230769230765

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=5.943483826847684, rmse_div_indices=0.0, rmse_div_steps=2.886751345948129
Mean Absolute Errors: mae_mchild=5.449999999999998, mae_div_indices=0.0, mae_div_steps=1.6666666666666667

[03-03-2022_22-30-29] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=7.877193032294385, rmse_div_indices=2.2274511131646553, rmse_div_steps=13.805308343587928
Mean Absolute Errors: mae_mchild=6.641156462585035, mae_div_indices=1.6923076923076923, mae_div_steps=11.26923076923077

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=5.244044240850757, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.299999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=6.95311556898794, rmse_div_indices=1.374368541872554, rmse_div_steps=7.610791371411077
Mean Absolute Errors: mae_mchild=5.794421487603306, mae_div_indices=1.0512820512820515, mae_div_steps=5.705128205128204

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=5.038849074937648, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=6.348093844182319, rmse_div_indices=0.9957173250742362, rmse_div_steps=6.545778962218496
Mean Absolute Errors: mae_mchild=5.193181818181818, mae_div_indices=0.769230769230769, mae_div_steps=5.102564102564106

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=6.184658438426489, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.549999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=5.739952594327234, rmse_div_indices=1.9785170998831216, rmse_div_steps=5.661479526356197
Mean Absolute Errors: mae_mchild=4.641528925619836, mae_div_indices=1.5384615384615397, mae_div_steps=4.641025641025639

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=7.827196177431608, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.149999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=10.136851750739861, rmse_div_indices=5.170180773509688, rmse_div_steps=26.92941469969921
Mean Absolute Errors: mae_mchild=7.715986394557828, mae_div_indices=4.230769230769231, mae_div_steps=21.038461538461533

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=5.5398555937858145, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.649999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-30] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=7.047488709280635, rmse_div_indices=1.374368541872554, rmse_div_steps=7.61387902754922
Mean Absolute Errors: mae_mchild=5.785123966942149, mae_div_indices=1.0512820512820515, mae_div_steps=5.423076923076923

[03-03-2022_22-30-31] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=5.86259328283994, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.549999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-31] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=7.408376290132564, rmse_div_indices=1.9785170998831216, rmse_div_steps=7.206434090983716
Mean Absolute Errors: mae_mchild=5.950413223140496, mae_div_indices=1.5384615384615397, mae_div_steps=5.1923076923076925

[03-03-2022_22-30-31] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=6.542553018508905, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.999999999999998, mae_div_indices=0.0, mae_div_steps=2.0

[03-03-2022_22-30-31] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=6.3318637153965405, rmse_div_indices=2.7942248133771033, rmse_div_steps=13.148112535564303
Mean Absolute Errors: mae_mchild=5.090136054421771, mae_div_indices=2.076923076923077, mae_div_steps=10.961538461538456

[03-03-2022_22-30-31] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=8.450739612601962, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.649999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[03-03-2022_22-30-31] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=11.6723625551577, rmse_div_indices=5.170180773509688, rmse_div_steps=29.7743113335072
Mean Absolute Errors: mae_mchild=9.297619047619047, mae_div_indices=4.230769230769231, mae_div_steps=23.807692307692307

[03-03-2022_22-30-31] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=7.887014644337867, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.199999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[03-03-2022_22-30-31] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=10.020137509372175, rmse_div_indices=5.170180773509688, rmse_div_steps=26.826862573837353
Mean Absolute Errors: mae_mchild=7.620748299319733, mae_div_indices=4.230769230769231, mae_div_steps=20.961538461538456

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=5.385164807134502, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.2799999999999985, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=7.3809945521259115, rmse_div_indices=1.9785170998831216, rmse_div_steps=7.09888940393008
Mean Absolute Errors: mae_mchild=5.904958677685951, mae_div_indices=1.5384615384615397, mae_div_steps=5.115384615384615

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=6.058465152165191, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.149999999999999, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=5.023480392438335, rmse_div_indices=1.8292495308606331, rmse_div_steps=6.793740834762141
Mean Absolute Errors: mae_mchild=4.144557823129252, mae_div_indices=1.4615384615384615, mae_div_steps=5.153846153846159

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=8.406247676579603, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.599999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=11.652968148358884, rmse_div_indices=5.170180773509688, rmse_div_steps=29.7743113335072
Mean Absolute Errors: mae_mchild=9.25, mae_div_indices=4.230769230769231, mae_div_steps=23.807692307692307

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=5.233545643251809, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.549999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=6.234298458746363, rmse_div_indices=0.9957173250742362, rmse_div_steps=6.545778962218496
Mean Absolute Errors: mae_mchild=5.136363636363637, mae_div_indices=0.769230769230769, mae_div_steps=5.102564102564106

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=5.553377350765927, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.299999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-32] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=6.480242540864481, rmse_div_indices=1.374368541872554, rmse_div_steps=6.1883713665988225
Mean Absolute Errors: mae_mchild=5.16219008264463, mae_div_indices=1.0512820512820515, mae_div_steps=4.487179487179488

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=5.8463663928973855, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=6.870988687022421, rmse_div_indices=1.9785170998831216, rmse_div_steps=6.282607249076919
Mean Absolute Errors: mae_mchild=5.508264462809915, mae_div_indices=1.5384615384615397, mae_div_steps=4.8076923076923075

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=5.478138369920933, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.4499999999999975, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=6.683112892498847, rmse_div_indices=1.374368541872554, rmse_div_steps=6.165193864317276
Mean Absolute Errors: mae_mchild=5.266528925619834, mae_div_indices=1.0512820512820515, mae_div_steps=4.769230769230769

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=6.451356446515724, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.999999999999997, mae_div_indices=0.0, mae_div_steps=2.0

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=10.045133170507157, rmse_div_indices=2.849501380883702, rmse_div_steps=17.349012878640906
Mean Absolute Errors: mae_mchild=8.738636363636363, mae_div_indices=2.1538461538461546, mae_div_steps=14.192307692307695

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=5.086255990411807, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=8.18136046699503, rmse_div_indices=0.9957173250742362, rmse_div_steps=8.9900823798551
Mean Absolute Errors: mae_mchild=6.722107438016531, mae_div_indices=0.769230769230769, mae_div_steps=6.730769230769227

[03-03-2022_22-30-33] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=7.887014644337867, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.199999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=11.596643603092357, rmse_div_indices=5.170180773509688, rmse_div_steps=29.7743113335072
Mean Absolute Errors: mae_mchild=9.202380952380953, mae_div_indices=4.230769230769231, mae_div_steps=23.807692307692307

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=6.542553018508905, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.999999999999998, mae_div_indices=0.0, mae_div_steps=2.0

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=6.381626060149543, rmse_div_indices=2.7942248133771033, rmse_div_steps=13.233641732504074
Mean Absolute Errors: mae_mchild=5.050453514739231, mae_div_indices=2.076923076923077, mae_div_steps=11.038461538461535

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=5.009990019950139, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.399999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=6.327474363297083, rmse_div_indices=0.9957173250742362, rmse_div_steps=6.66995111400735
Mean Absolute Errors: mae_mchild=5.159090909090909, mae_div_indices=0.769230769230769, mae_div_steps=5.102564102564106

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=5.842944463196615, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.479999999999999, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=6.666707558414534, rmse_div_indices=1.9785170998831216, rmse_div_steps=6.590672637293236
Mean Absolute Errors: mae_mchild=5.41219008264463, mae_div_indices=1.5384615384615397, mae_div_steps=4.910256410256407

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=8.450739612601962, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.649999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[03-03-2022_22-30-34] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=10.071039243478731, rmse_div_indices=5.170180773509688, rmse_div_steps=26.955348485334255
Mean Absolute Errors: mae_mchild=7.620748299319733, mae_div_indices=4.230769230769231, mae_div_steps=21.11538461538461

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=6.179805822192149, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.549999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=6.180376670165333, rmse_div_indices=1.9785170998831216, rmse_div_steps=8.098815466832907
Mean Absolute Errors: mae_mchild=5.094008264462809, mae_div_indices=1.5384615384615397, mae_div_steps=6.346153846153841

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=7.274613391789284, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=8.531767932239298, rmse_div_indices=4.25069124594766, rmse_div_steps=21.792950518635433
Mean Absolute Errors: mae_mchild=6.962809917355372, mae_div_indices=3.384615384615385, mae_div_steps=18.26923076923077

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=5.52358579185659, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=6.683112892498847, rmse_div_indices=1.374368541872554, rmse_div_steps=6.165193864317276
Mean Absolute Errors: mae_mchild=5.266528925619834, mae_div_indices=1.0512820512820515, mae_div_steps=4.769230769230769

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=5.999999999999999, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.899999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=7.823382915844901, rmse_div_indices=1.9785170998831216, rmse_div_steps=5.909665413468457
Mean Absolute Errors: mae_mchild=5.9400826446281005, mae_div_indices=1.5384615384615397, mae_div_steps=4.512820512820516

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=5.994163828258282, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.4499999999999975, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-35] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=6.017686569844973, rmse_div_indices=1.9785170998831216, rmse_div_steps=7.68177163059508
Mean Absolute Errors: mae_mchild=5.082644628099174, mae_div_indices=1.5384615384615397, mae_div_steps=6.076923076923077

[03-03-2022_22-30-36] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=6.076183012385323, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.499999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-36] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=5.9579058873049915, rmse_div_indices=1.9785170998831216, rmse_div_steps=7.68177163059508
Mean Absolute Errors: mae_mchild=5.014462809917355, mae_div_indices=1.5384615384615397, mae_div_steps=6.076923076923077

[03-03-2022_22-30-36] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=5.787918451395112, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.799999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-36] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=6.895976638711365, rmse_div_indices=1.374368541872554, rmse_div_steps=7.610791371411077
Mean Absolute Errors: mae_mchild=5.726239669421488, mae_div_indices=1.0512820512820515, mae_div_steps=5.705128205128204

[03-03-2022_22-30-36] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=5.74499782419454, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.949999999999998, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-36] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=5.919201175395179, rmse_div_indices=1.8292495308606331, rmse_div_steps=9.016426130731627
Mean Absolute Errors: mae_mchild=4.842970521541948, mae_div_indices=1.4615384615384615, mae_div_steps=7.269230769230765

[03-03-2022_22-30-36] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=6.403124237432848, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.6999999999999975, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-36] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=5.960332891862517, rmse_div_indices=1.9785170998831216, rmse_div_steps=7.763945269889926
Mean Absolute Errors: mae_mchild=5.014462809917355, mae_div_indices=1.5384615384615397, mae_div_steps=6.153846153846154

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=7.887014644337867, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.199999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=11.614082174752543, rmse_div_indices=5.170180773509688, rmse_div_steps=29.674678405359987
Mean Absolute Errors: mae_mchild=9.25, mae_div_indices=4.230769230769231, mae_div_steps=23.73076923076923

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=7.538567503179896, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.9499999999999975, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=7.071268691620402, rmse_div_indices=4.25069124594766, rmse_div_steps=18.829220109036108
Mean Absolute Errors: mae_mchild=5.482438016528925, mae_div_indices=3.384615384615385, mae_div_steps=15.423076923076922

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=5.151698748956502, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=3.9999999999999973, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=6.480242540864481, rmse_div_indices=1.374368541872554, rmse_div_steps=6.1883713665988225
Mean Absolute Errors: mae_mchild=5.16219008264463, mae_div_indices=1.0512820512820515, mae_div_steps=4.487179487179488

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=5.295280917949489, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.399999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=7.800637688491078, rmse_div_indices=1.9785170998831216, rmse_div_steps=5.909665413468457
Mean Absolute Errors: mae_mchild=5.894628099173556, mae_div_indices=1.5384615384615397, mae_div_steps=4.512820512820516

[03-03-2022_22-30-37] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=5.466260147486578, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.599999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=6.895976638711365, rmse_div_indices=1.374368541872554, rmse_div_steps=7.610791371411077
Mean Absolute Errors: mae_mchild=5.726239669421488, mae_div_indices=1.0512820512820515, mae_div_steps=5.705128205128204

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=5.648893696999439, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.549999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=6.936455229944527, rmse_div_indices=1.374368541872554, rmse_div_steps=7.610791371411077
Mean Absolute Errors: mae_mchild=5.7716942148760335, mae_div_indices=1.0512820512820515, mae_div_steps=5.705128205128204

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=5.23259018078045, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.599999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=8.244441528430082, rmse_div_indices=0.9957173250742362, rmse_div_steps=9.026373986846949
Mean Absolute Errors: mae_mchild=6.790289256198349, mae_div_indices=0.769230769230769, mae_div_steps=6.807692307692305

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=7.3576490810584305, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.749999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=14.314082283719566, rmse_div_indices=5.170180773509688, rmse_div_steps=31.501950149917118
Mean Absolute Errors: mae_mchild=12.238662131519268, mae_div_indices=4.230769230769231, mae_div_steps=25.65384615384615

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=7.411477585475112, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.849999999999997, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[03-03-2022_22-30-38] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=7.102754529112381, rmse_div_indices=4.25069124594766, rmse_div_steps=18.829220109036108
Mean Absolute Errors: mae_mchild=5.505165289256198, mae_div_indices=3.384615384615385, mae_div_steps=15.423076923076922

[03-03-2022_22-30-39] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=4.752893855326457, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.049999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[03-03-2022_22-30-39] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=8.40839984875416, rmse_div_indices=0.9957173250742362, rmse_div_steps=9.227247369453902
Mean Absolute Errors: mae_mchild=6.88119834710744, mae_div_indices=0.769230769230769, mae_div_steps=6.961538461538458

[03-03-2022_22-30-39] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=5.642694391866352, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[03-03-2022_22-30-39] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=6.936231828844181, rmse_div_indices=1.374368541872554, rmse_div_steps=7.61387902754922
Mean Absolute Errors: mae_mchild=5.694214876033058, mae_div_indices=1.0512820512820515, mae_div_steps=5.423076923076923

[03-03-2022_22-30-39] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=5.012983143797713, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[03-03-2022_22-30-39] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=8.284379281674921, rmse_div_indices=0.9957173250742362, rmse_div_steps=8.9900823798551
Mean Absolute Errors: mae_mchild=6.767561983471077, mae_div_indices=0.769230769230769, mae_div_steps=6.730769230769227

[03-03-2022_22-30-40] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL  LE  AC  CF        GT        ST  OT        TT        LT        CT       WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  0   3  20  20 1.0  1.218903  0.769553 0.0  1.988456  1.988456  1.988456 1.988456  619.394531  624.144531  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  0   2  44  44 1.0  3.072947  0.883103 0.0  3.956050  4.413296  5.944506 3.032558  654.640625  659.714844  0.954545  1.000000  0.911280  1.000000   1.000000  0.954545  0.869858  0.954545   0.954545 0.954545
  0   1 145 145 1.0 38.507277 12.694900 0.0 51.202176 10.096393 57.146682 4.908227  724.617188  736.621094  0.889655  0.758830  0.469944  1.000000   1.000000  0.675097  0.418088  0.889655   0.889655 0.818136
  1   3  20  20 1.0  1.223314  0.830745 0.0  2.054060  2.054060  2.054060 2.054060  639.714844  643.656250  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  1   2  44  44 1.0  3.053560  0.902839 0.0  3.956399  4.418817  6.010459 3.065588  659.433594  665.667969  0.954545  1.000000  0.906830  1.000000   1.000000  0.954545  0.865610  0.954545   0.954545 0.954545
  1   1 141 141 1.0 37.078771 11.952374 0.0 49.031145 10.155815 55.041604 4.731835  748.199219  761.632812  0.914894  0.757536  0.475336  1.000000   1.000000  0.693065  0.434882  0.914894   0.914894 0.840951
  2   3  20  20 1.0  1.223531  0.726721 0.0  1.950252  1.950252  1.950252 1.950252  663.515625  667.125000  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  2   2  44  44 1.0  3.095050  1.044313 0.0  4.139363  4.712540  6.089615 3.104686  715.628906  721.394531  0.954545  1.000000  0.901678  1.000000   1.000000  0.954545  0.860692  0.954545   0.954545 0.954545
  2   1 145 145 1.0 38.190985 13.894250 0.0 52.085234 10.589029 58.174849 4.997524  795.093750  823.617188  0.889655  0.748463  0.467388  1.000000   1.000000  0.665874  0.415814  0.889655   0.889655 0.815061
  3   3  20  20 1.0  1.226086  0.837865 0.0  2.063951  2.063951  2.063951 2.063951  713.277344  718.019531  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  3   2  42  42 1.0  2.877941  0.902410 0.0  3.780351  4.454304  5.844303 2.982698  745.539062  751.503906  1.000000  1.000000  0.918338  1.000000   1.000000  1.000000  0.918338  1.000000   1.000000 1.000000
  3   1 147 147 1.0 39.135662 12.876082 0.0 52.011744 10.098977 57.856047 4.955714  819.070312  832.093750  0.877551  0.758774  0.468175  1.000000   1.000000  0.665863  0.410848  0.877551   0.877551 0.806988
  4   3  20  20 1.0  1.220444  0.785672 0.0  2.006116  2.006116  2.006116 2.006116  735.390625  742.085938  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  4   2  44  44 1.0  3.057578  0.995647 0.0  4.053225  4.674394  6.059340 3.089919  790.472656  798.968750  0.954545  1.000000  0.903625  1.000000   1.000000  0.954545  0.862551  0.954545   0.954545 0.954545
  4   1 157 157 1.0 42.629785 14.075343 0.0 56.705127 10.360704 62.764468 5.364580  890.363281  909.125000  0.821656  0.753168  0.456539  0.958529   1.000000  0.618845  0.375118  0.787581   0.821656 0.754052
  5   3  20  20 1.0  1.218753  1.062327 0.0  2.281080  2.281080  2.281080 2.281080  835.988281  843.070312  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  5   2  42  42 1.0  2.903568  1.017917 0.0  3.921484  5.060049  6.202564 3.161619  896.390625  908.136719  1.000000  0.992220  0.894654  1.000000   1.000000  0.992220  0.894654  1.000000   1.000000 0.997407
  5   1 141 141 1.0 37.720518 13.187930 0.0 50.908447 10.626948 57.111012 4.923487 1004.019531 1044.242188  0.914894  0.747697  0.470034  1.000000   1.000000  0.684064  0.430031  0.914894   0.914894 0.837950
  6   3  20  20 1.0  1.223422  0.669797 0.0  1.893220  1.893220  1.893220 1.893220  891.671875  900.839844  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  6   2  44  44 1.0  3.068777  1.190476 0.0  4.259252  4.529248  6.152472 3.136411  910.328125  921.894531  0.954545  1.000000  0.897724  1.000000   1.000000  0.954545  0.856918  0.954545   0.954545 0.954545
  6   1 149 149 1.0 39.653441 13.646919 0.0 53.300361 10.091078 59.452833 5.105833  994.550781 1012.320312  0.865772  0.758947  0.464277  0.986579   1.000000  0.657075  0.401958  0.854152   0.865772 0.796206
  7   3  20  20 1.0  1.227999  0.625568 0.0  1.853567  1.853567  1.853567 1.853567  906.089844  914.910156  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  7   2  44  44 1.0  3.059953  1.049509 0.0  4.109462  4.333088  5.963029 3.042032  938.480469  950.910156  0.954545  1.000000  0.910015  1.000000   1.000000  0.954545  0.868650  0.954545   0.954545 0.954545
  7   1 143 143 1.0 37.168819 11.146929 0.0 48.315749 10.029632 54.278777 4.678076  991.843750 1019.507812  0.902098  0.760299  0.477345  1.000000   1.000000  0.685864  0.430612  0.902098   0.902098 0.830020
  8   3  20  20 1.0  1.223145  0.786321 0.0  2.009465  2.009465  2.009465 2.009465  929.402344  937.722656  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  8   2  44  44 1.0  3.084215  0.961940 0.0  4.046155  4.657204  6.055621 3.088673  967.808594  977.839844  0.954545  1.000000  0.903866  1.000000   1.000000  0.954545  0.862781  0.954545   0.954545 0.954545
  8   1 145 145 1.0 38.258358 13.010060 0.0 51.268418 10.597549 57.324039 4.933786 1049.136719 1080.718750  0.889655  0.748291  0.469500  1.000000   1.000000  0.665721  0.417693  0.889655   0.889655 0.815010
  9   3  20  20 1.0  1.228172  0.734087 0.0  1.962260  1.962260  1.962260 1.962260  964.585938  973.308594  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  9   2  42  42 1.0  3.015378  1.546032 0.0  4.561410  5.860987  6.523670 3.323637 1122.421875 1136.617188  1.000000  0.917136  0.876498  1.000000   1.000000  0.917136  0.876498  1.000000   1.000000 0.972379
  9   1 139 139 1.0 39.529793 50.484128 0.0 90.013922 11.917234 96.537592 8.204357 1280.519531 1323.156250  0.928058  0.723964  0.395959  0.808403   0.819568  0.671880  0.367473  0.750245   0.760607 0.786848
 10   3  20  20 1.0  1.229816  0.766809 0.0  1.996625  1.996625  1.996625 1.996625 1118.832031 1131.734375  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 10   2  44  44 1.0  3.080948  0.950479 0.0  4.031427  4.430490  6.028052 3.075291 1153.085938 1165.609375  0.954545  1.000000  0.905667  1.000000   1.000000  0.954545  0.864500  0.954545   0.954545 0.954545
 10   1 153 153 1.0 40.575018 12.187821 0.0 52.762839 10.439352 58.790891 5.035184 1222.691406 1242.585938  0.843137  0.751529  0.465879  0.995387   1.000000  0.633642  0.392800  0.839248   0.843137 0.773305
 11   3  20  20 1.0  1.229281  0.882924 0.0  2.112205  2.112205  2.112205 2.112205 1148.332031 1160.492188  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 11   2  44  44 1.0  3.082788  0.966990 0.0  4.049777  4.715688  6.161982 3.142319 1175.820312 1188.433594  0.954545  1.000000  0.897135  1.000000   1.000000  0.954545  0.856357  0.954545   0.954545 0.954545
 11   1 153 153 1.0 40.809873 14.930151 0.0 55.740025 10.347945 61.902007 5.294549 1258.621094 1291.332031  0.843137  0.753436  0.458511  0.965558   1.000000  0.635250  0.386588  0.814098   0.843137 0.773841
 12   3  20  20 1.0  1.230563  1.156762 0.0  2.387325  2.387325  2.387325 2.387325 1174.019531 1186.226562  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 12   2  42  42 1.0  2.922237  0.933886 0.0  3.856123  5.196212  6.243448 3.183038 1202.234375 1216.300781  1.000000  0.976098  0.892201  1.000000   1.000000  0.976098  0.892201  1.000000   1.000000 0.992033
 12   1 139 139 1.0 36.275004 11.295355 0.0 47.570359 10.959692 53.813807 4.620420 1264.546875 1286.128906  0.928058  0.741161  0.478584  1.000000   1.000000  0.687840  0.444154  0.928058   0.928058 0.847985
 13   3  20  20 1.0  1.231180  0.801082 0.0  2.032262  2.032262  2.032262 2.032262 1193.980469 1205.792969  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 13   2  42  42 1.0  3.016560  1.564362 0.0  4.580922  5.949379  6.613184 3.367585 1272.378906 1288.210938  1.000000  0.910946  0.871848  1.000000   1.000000  0.910946  0.871848  1.000000   1.000000 0.970315
 13   1 147 147 1.0 42.221574 41.515664 0.0 83.737238 12.374056 90.350422 7.665498 1413.402344 1455.035156  0.877551  0.716480  0.405191  0.826702   0.843269  0.628747  0.355576  0.725473   0.740011 0.748770
 14   3  20  20 1.0  1.235167  0.788913 0.0  2.024080  2.024080  2.024080 2.024080 1269.906250 1284.640625  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 14   2  42  42 1.0  3.049147  1.521084 0.0  4.570231  5.928624  6.594310 3.358548 1303.250000 1324.554688  1.000000  0.912374  0.872815  1.000000   1.000000  0.912374  0.872815  1.000000   1.000000 0.970791
 14   1 139 139 1.0 39.536836 41.960689 0.0 81.497526 12.025810 88.091836 7.477812 1440.097656 1485.804688  0.928058  0.722146  0.408727  0.833714   0.850599  0.670194  0.379322  0.773735   0.789405 0.795885
 15   3  20  20 1.0  1.233832  0.904360 0.0  2.138192  2.138192  2.138192 2.138192 1301.523438 1316.984375  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 15   2  44  44 1.0  3.131614  1.135286 0.0  4.266900  4.941641  6.405093 3.263751 1331.871094 1346.933594  0.954545  1.000000  0.882919  1.000000   1.000000  0.954545  0.842786  0.954545   0.954545 0.954545
 15   1 153 153 1.0 40.873859 14.984044 0.0 55.857903 11.015064 62.262996 5.325460 1406.628906 1442.750000  0.843137  0.740104  0.457682  0.962410   1.000000  0.624009  0.385889  0.811443   0.843137 0.770095
 16   3  20  20 1.0  1.235391  0.740613 0.0  1.976004  1.976004  1.976004 1.976004 1326.234375 1340.359375  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 16   2  42  42 1.0  2.884672  0.788005 0.0  3.672677  4.371590  5.648680 2.884583 1354.242188 1369.542969  1.000000  1.000000  0.933297  1.000000   1.000000  1.000000  0.933297  1.000000   1.000000 1.000000
 16   1 143 143 1.0 38.033387 12.279835 0.0 50.313222 10.057244 55.961902 4.799948 1430.328125 1451.996094  0.902098  0.759690  0.472952  1.000000   1.000000  0.685315  0.426649  0.902098   0.902098 0.829837
 17   3  20  20 1.0  1.235473  0.790271 0.0  2.025743  2.025743  2.025743 2.025743 1349.277344 1363.269531  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 17   2  42  42 1.0  3.050336  1.556353 0.0  4.606689  5.966411  6.632432 3.377524 1380.226562 1402.976562  1.000000  0.909785  0.870869  1.000000   1.000000  0.909785  0.870869  1.000000   1.000000 0.969928
 17   1 147 147 1.0 42.151513 44.596730 0.0 86.748243 12.262887 93.380676 7.959639 1518.898438 1559.281250  0.877551  0.718263  0.400590  0.816404   0.830282  0.630312  0.351538  0.716436   0.728615 0.745493
 18   3  20  20 1.0  1.233833  0.654675 0.0  1.888508  1.888508  1.888508 1.888508 1378.144531 1392.957031  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 18   2  44  44 1.0  3.077419  0.837856 0.0  3.915275  4.128754  5.803783 2.963280 1410.730469 1425.429688  0.954545  1.000000  0.921302  1.000000   1.000000  0.954545  0.879424  0.954545   0.954545 0.954545
 18   1 143 143 1.0 37.372757 11.529806 0.0 48.902563  9.982799 54.706346 4.738576 1460.988281 1495.050781  0.902098  0.761340  0.476215  1.000000   1.000000  0.686803  0.429593  0.902098   0.902098 0.830333
 19   3  20  20 1.0  1.234607  0.669663 0.0  1.904271  1.904271  1.904271 1.904271 1403.171875 1417.921875  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 19   2  44  44 1.0  3.082605  0.968179 0.0  4.050785  4.328790  5.955055 3.037980 1433.332031 1448.410156  0.954545  1.000000  0.910558  1.000000   1.000000  0.954545  0.869169  0.954545   0.954545 0.954545
 19   1 145 145 1.0 38.501862 12.643713 0.0 51.145574 10.004357 57.100630 4.940132 1506.417969 1528.972656  0.889655  0.760860  0.470060  1.000000   1.000000  0.676903  0.418191  0.889655   0.889655 0.818738
 20   3  20  20 1.0  1.234771  0.811483 0.0  2.046253  2.046253  2.046253 2.046253 1427.578125 1442.304688  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 20   2  44  44 1.0  3.112018  0.959242 0.0  4.071260  4.653249  6.117513 3.119812 1454.597656 1469.968750  0.954545  1.000000  0.899908  1.000000   1.000000  0.954545  0.859003  0.954545   0.954545 0.954545
 20   1 141 141 1.0 37.411308 13.190174 0.0 50.601483 10.485086 56.718996 4.863463 1537.406250 1573.816406  0.914894  0.750584  0.471022  1.000000   1.000000  0.686705  0.430935  0.914894   0.914894 0.838831
 21   3  20  20 1.0  1.238881  0.841933 0.0  2.080815  2.080815  2.080815 2.080815 1446.902344 1461.425781  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 21   2  44  44 1.0  3.082639  0.950091 0.0  4.032730  4.497099  6.113545 3.117830 1475.121094 1489.996094  0.954545  1.000000  0.900158  1.000000   1.000000  0.954545  0.859242  0.954545   0.954545 0.954545
 21   1 141 141 1.0 37.192521 13.054622 0.0 50.247143 10.120302 56.360688 4.833797 1546.656250 1569.167969  0.914894  0.758308  0.471932  1.000000   1.000000  0.693771  0.431768  0.914894   0.914894 0.841186
 22   3  20  20 1.0  1.237054  0.673822 0.0  1.910876  1.910876  1.910876 1.910876 1468.792969 1483.476562  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 22   2  44  44 1.0  3.117605  1.180714 0.0  4.298319  5.050408  6.209195 3.166847 1502.332031 1518.625000  0.954545  0.993439  0.894253  1.000000   1.000000  0.948283  0.853605  0.954545   0.954545 0.952458
 22   1 149 149 1.0 41.079247 17.702994 0.0 58.782240 10.614227 64.991435 5.553064 1597.578125 1639.980469  0.865772  0.747954  0.451576  0.941268   0.988141  0.647557  0.390962  0.814923   0.855505 0.789611
 23   3  20  20 1.0  1.234468  0.733035 0.0  1.967502  1.967502  1.967502 1.967502 1492.347656 1506.968750  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 23   2  44  44 1.0  3.096464  0.850103 0.0  3.946566  4.257507  5.914069 3.017997 1521.226562 1539.835938  0.954545  1.000000  0.913384  1.000000   1.000000  0.954545  0.871867  0.954545   0.954545 0.954545
 23   1 151 151 1.0 40.071252 12.399809 0.0 52.471061 10.663505 58.385130 5.056921 1570.964844 1605.003906  0.854305  0.746964  0.466871  0.992614   1.000000  0.638134  0.398850  0.847995   0.854305 0.782248
 24   3  20  20 1.0  1.234770  0.926927 0.0  2.161698  2.161698  2.161698 2.161698 1513.257812 1528.113281  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 24   2  42  42 1.0  3.060315  1.697023 0.0  4.757338  6.253490  6.919036 3.521337 1572.910156 1589.832031  1.000000  0.891605  0.857081  1.000000   1.000000  0.891605  0.857081  1.000000   1.000000 0.963868
 24   1 147 147 1.0 42.371123 45.374128 0.0 87.745250 12.643962 94.664286 8.026144 1715.000000 1757.652344  0.877551  0.712247  0.398687  0.814182   0.828872  0.625034  0.349869  0.714486   0.727378 0.743321
 25   3  20  20 1.0  1.234996  0.822995 0.0  2.057990  2.057990  2.057990 2.057990 1570.195312 1586.437500  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 25   2  42  42 1.0  2.925956  0.935156 0.0  3.861112  4.860219  5.919103 3.019743 1603.269531 1621.203125  1.000000  1.000000  0.913034  1.000000   1.000000  1.000000  0.913034  1.000000   1.000000 1.000000
 25   1 139 139 1.0 36.374629 11.198850 0.0 47.573479 10.500251 53.492582 4.595302 1660.691406 1685.558594  0.928058  0.750273  0.479448  1.000000   1.000000  0.696296  0.444955  0.928058   0.928058 0.850804
 26   3  20  20 1.0  1.236867  0.866106 0.0  2.102974  2.102974  2.102974 2.102974 1597.597656 1613.410156  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 26   2  44  44 1.0  3.089251  1.571842 0.0  4.661093  4.368132  6.764067 3.443461 1623.710938 1645.781250  0.954545  1.000000  0.864359  1.000000   1.000000  0.954545  0.825070  0.954545   0.954545 0.954545
 26   1 143 143 1.0 37.503280 11.095682 0.0 48.598962 10.850920 55.363029 4.750653 1675.375000 1712.777344  0.902098  0.743263  0.474498  1.000000   1.000000  0.670496  0.428044  0.902098   0.902098 0.824897
 27   3  20  20 1.0  1.238803  1.428090 0.0  2.666894  2.666894  2.666894 2.666894 1617.968750 1635.925781  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 27   2  44  44 1.0  3.093382  1.048078 0.0  4.141460  5.362249  6.808353 3.465585 1647.121094 1664.699219  0.954545  0.958757  0.862238  1.000000   1.000000  0.915177  0.823046  0.954545   0.954545 0.941423
 27   1 145 145 1.0 38.829402 14.388976 0.0 53.218378 10.921467 60.026731 5.202962 1725.730469 1763.210938  0.889655  0.741896  0.462904  0.975347   1.000000  0.660032  0.411825  0.867723   0.889655 0.813114
 28   3  20  20 1.0  1.237828  0.881036 0.0  2.118864  2.118864  2.118864 2.118864 1642.542969 1659.566406  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 28   2  42  42 1.0  3.029291  1.617260 0.0  4.646551  6.094072  6.765415 3.443865 1675.984375 1699.230469  1.000000  0.901393  0.864294  1.000000   1.000000  0.901393  0.864294  1.000000   1.000000 0.967131
 28   1 139 139 1.0 39.572686 41.976284 0.0 81.548970 12.261194 88.314385 7.496767 1819.367188 1865.480469  0.928058  0.718290  0.408375  0.832989   0.850631  0.666614  0.378995  0.773062   0.789434 0.794702
 29   3  20  20 1.0  1.239316  0.889210 0.0  2.128526  2.128526  2.128526 2.128526 1671.562500 1688.820312  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 29   2  44  44 1.0  3.128317  1.008654 0.0  4.136971  4.860571  6.265497 3.194612 1706.753906 1724.433594  0.954545  1.000000  0.890896  1.000000   1.000000  0.954545  0.850401  0.954545   0.954545 0.954545
 29   1 157 157 1.0 41.980611 14.906260 0.0 56.886871 10.666834 63.152368 5.399938 1789.867188 1828.371094  0.821656  0.746897  0.455661  0.955116   1.000000  0.613692  0.374397  0.784777   0.821656 0.752335
 30   3  20  20 1.0  1.237024  0.666671 0.0  1.903695  1.903695  1.903695 1.903695 1701.703125 1718.878906  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 30   2  44  44 1.0  3.217610  2.588847 0.0  5.806457  5.923332  7.710151 3.916762 1731.082031 1757.582031  0.954545  0.912740  0.825086  1.000000   1.000000  0.871252  0.787582  0.954545   0.954545 0.926781
 30   1 153 153 1.0 41.372562 14.287882 0.0 55.660444 12.138299 63.370595 5.417978 1827.644531 1867.347656  0.843137  0.720290  0.455170  0.953408   1.000000  0.607303  0.383770  0.803854   0.843137 0.764526
 31   3  20  20 1.0  1.236281  0.774089 0.0  2.010371  2.010371  2.010371 2.010371 1723.882812 1740.589844  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 31   2  44  44 1.0  3.083830  1.819424 0.0  4.903254  5.291672  6.913625 3.518536 1752.816406 1769.890625  0.954545  0.965855  0.857329  1.000000   1.000000  0.921952  0.818359  0.954545   0.954545 0.943681
 31   1 141 141 1.0 37.287925 11.465222 0.0 48.753147 10.905208 55.666772 4.848146 1830.066406 1855.925781  0.914894  0.742210  0.473712  1.000000   1.000000  0.679043  0.433396  0.914894   0.914894 0.836277
 32   3  20  20 1.0  1.233978  0.684528 0.0  1.918506  1.918506  1.918506 1.918506 1745.382812 1762.195312  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 32   2  44  44 1.0  3.106944  1.079172 0.0  4.186116  4.645105  6.104622 3.113647 1773.718750 1791.125000  0.954545  1.000000  0.900723  1.000000   1.000000  0.954545  0.859781  0.954545   0.954545 0.954545
 32   1 145 145 1.0 38.412044 15.113513 0.0 53.525557 11.191801 59.630180 5.106212 1862.617188 1900.746094  0.889655  0.736785  0.463851  0.986533   1.000000  0.655484  0.412668  0.877674   0.889655 0.811598
 33   3  20  20 1.0  1.237846  0.735240 0.0  1.973086  1.973086  1.973086 1.973086 1768.750000 1785.597656  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 33   2  44  44 1.0  3.099207  0.992430 0.0  4.091636  4.657920  6.064723 3.093833 1797.925781 1815.378906  0.954545  1.000000  0.903276  1.000000   1.000000  0.954545  0.862218  0.954545   0.954545 0.954545
 33   1 153 153 1.0 40.956153 14.661054 0.0 55.617207 11.291519 61.681930 5.277154 1881.781250 1921.093750  0.843137  0.734948  0.459019  0.967363   1.000000  0.619662  0.387016  0.815620   0.843137 0.768645
 34   3  20  20 1.0  1.237341  0.811799 0.0  2.049139  2.049139  2.049139 2.049139 1791.179688 1807.925781  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 34   2  44  44 1.0  3.100244  0.920808 0.0  4.021052  4.658477  6.070191 3.096492 1818.785156 1836.402344  0.954545  1.000000  0.902923  1.000000   1.000000  0.954545  0.861882  0.954545   0.954545 0.954545
 34   1 153 153 1.0 40.993943 15.616739 0.0 56.610682 10.330812 62.680874 5.360808 1907.820312 1947.214844  0.843137  0.753797  0.456729  0.958898   1.000000  0.635554  0.385085  0.808483   0.843137 0.773943
 35   3  20  20 1.0  1.233210  0.771500 0.0  2.004710  2.004710  2.004710 2.004710 1813.988281 1830.750000  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 35   2  44  44 1.0  3.100622  1.139965 0.0  4.240587  4.597377  6.245297 3.183114 1842.472656 1859.792969  0.954545  1.000000  0.892091  1.000000   1.000000  0.954545  0.851541  0.954545   0.954545 0.954545
 35   1 149 149 1.0 39.769217 13.333405 0.0 53.102622 10.313372 59.347920 5.082678 1913.078125 1937.992188  0.865772  0.754165  0.464530  0.989402   1.000000  0.652934  0.402177  0.856596   0.865772 0.794826
 36   3  20  20 1.0  1.235656  0.765821 0.0  2.001477  2.001477  2.001477 2.001477 1836.281250 1853.281250  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 36   2  42  42 1.0  2.887369  0.825676 0.0  3.713045  4.426451  5.714522 2.918681 1864.195312 1882.269531  1.000000  1.000000  0.928073  1.000000   1.000000  1.000000  0.928073  1.000000   1.000000 1.000000
 36   1 151 151 1.0 40.292112 14.339775 0.0 54.631886 11.021922 60.346409 5.166378 1941.320312 1965.562500  0.854305  0.739974  0.462144  0.979467   1.000000  0.632163  0.394812  0.836763   0.854305 0.780257
 37   3  20  20 1.0  1.237233  0.890521 0.0  2.127754  2.127754  2.127754 2.127754 1862.796875 1879.632812  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 37   2  44  44 1.0  3.116119  0.993251 0.0  4.109370  4.828939  6.237124 3.180671 1892.031250 1909.734375  0.954545  1.000000  0.892577  1.000000   1.000000  0.954545  0.852006  0.954545   0.954545 0.954545
 37   1 153 153 1.0 41.045788 15.075848 0.0 56.121636 10.602387 62.358760 5.333601 1971.515625 2009.894531  0.843137  0.748193  0.457463  0.961593   1.000000  0.630829  0.385704  0.810755   0.843137 0.772368
 38   3  20  20 1.0  1.238940  0.722008 0.0  1.960948  1.960948  1.960948 1.960948 1881.921875 1901.550781  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 38   2  42  42 1.0  3.097580  1.700402 0.0  4.797982  6.087868  6.758930 3.441514 1935.347656 1955.203125  1.000000  0.901789  0.864607  1.000000   1.000000  0.901789  0.864607  1.000000   1.000000 0.967263
 38   1 147 147 1.0 42.321534 35.821603 0.0 78.143137 12.155937 84.902067 7.212729 2076.078125 2121.980469  0.877551  0.720001  0.413886  0.844291   0.864394  0.631837  0.363206  0.740909   0.758550 0.755979
 39   3  20  20 1.0  1.237491  0.737250 0.0  1.974741  1.974741  1.974741 1.974741 1933.835938 1953.078125  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 39   2  44  44 1.0  3.222445  1.968490 0.0  5.190934  6.226523  7.165675 3.644452 1964.769531 1991.281250  0.954545  0.893211  0.846260  1.000000   1.000000  0.852611  0.807793  0.954545   0.954545 0.920567
 39   1 145 145 1.0 38.608016 12.745787 0.0 51.353802 12.387611 58.519477 5.014298 2062.191406 2101.347656  0.889655  0.716264  0.466542  0.998106   1.000000  0.637228  0.415061  0.887970   0.889655 0.805513
 40   3  20  20 1.0  1.234885  1.847769 0.0  3.082653  3.082653  3.082653 3.082653 1961.531250 1981.128906  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 40   2  44  44 1.0  3.099578  1.044199 0.0  4.143777  5.640923  7.226431 3.674388 1990.667969 2009.269531  0.954545  0.933926  0.843724  1.000000   1.000000  0.891475  0.805373  0.954545   0.954545 0.933522
 40   1 145 145 1.0 38.639817 13.819031 0.0 52.458848 11.210203 59.685279 5.110973 2060.582031 2086.562500  0.889655  0.736444  0.463719  0.985960   1.000000  0.655181  0.412550  0.877165   0.889655 0.811497
 41   3  20  20 1.0  1.241749  0.794443 0.0  2.036192  2.036192  2.036192 2.036192 1985.304688 2003.894531  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 41   2  44  44 1.0  3.119016  1.031466 0.0  4.150481  4.743262  6.186674 3.154944 2010.996094 2030.070312  0.954545  1.000000  0.895620  1.000000   1.000000  0.954545  0.854910  0.954545   0.954545 0.954545
 41   1 145 145 1.0 38.364102 12.629460 0.0 50.993563 10.362780 57.180237 4.902666 2094.960938 2134.390625  0.889655  0.753125  0.469860  1.000000   1.000000  0.670021  0.418013  0.889655   0.889655 0.816444
 42   3  20  20 1.0  1.238690  0.795183 0.0  2.033873  2.033873  2.033873 2.033873 2005.261719 2023.769531  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 42   2  44  44 1.0  3.083516  1.016474 0.0  4.099990  4.490627  6.133864 3.128303 2036.011719 2054.785156  0.954545  1.000000  0.898882  1.000000   1.000000  0.954545  0.858024  0.954545   0.954545 0.954545
 42   1 149 149 1.0 39.842173 14.354267 0.0 54.196440 10.293667 60.330304 5.165173 2109.027344 2135.226562  0.865772  0.754582  0.462183  0.979605   1.000000  0.653295  0.400145  0.848115   0.865772 0.794946
 43   3  20  20 1.0  1.233585  0.755473 0.0  1.989059  1.989059  1.989059 1.989059 2028.105469 2046.738281  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 43   2  44  44 1.0  3.086071  0.986524 0.0  4.072595  4.435303  6.061654 3.092509 2059.414062 2078.132812  0.954545  1.000000  0.903475  1.000000   1.000000  0.954545  0.862408  0.954545   0.954545 0.954545
 43   1 149 149 1.0 39.866707 14.057224 0.0 53.923931 10.076079 59.985585 5.136391 2129.207031 2155.601562  0.865772  0.759276  0.463002  0.982942   1.000000  0.657359  0.400854  0.851004   0.865772 0.796301
 44   3  20  20 1.0  1.239657  0.787783 0.0  2.027440  2.027440  2.027440 2.027440 2052.644531 2071.066406  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 44   2  44  44 1.0  3.089343  0.863423 0.0  3.952767  4.308488  5.980207 3.051522 2082.964844 2105.496094  0.954545  1.000000  0.908852  1.000000   1.000000  0.954545  0.867541  0.954545   0.954545 0.954545
 44   1 151 151 1.0 39.984257 11.849795 0.0 51.834052  9.987704 57.814259 4.955234 2134.363281 2172.308594  0.854305  0.761230  0.468279  1.000000   1.000000  0.650323  0.400053  0.854305   0.854305 0.786311
 45   3  20  20 1.0  1.238352  0.851271 0.0  2.089623  2.089623  2.089623 2.089623 2076.843750 2095.667969  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 45   2  42  42 1.0  3.055132  1.727683 0.0  4.782815  6.203756  6.872437 3.497965 2107.542969 2135.089844  1.000000  0.894582  0.859228  1.000000   1.000000  0.894582  0.859228  1.000000   1.000000 0.964861
 45   1 145 145 1.0 40.953299 18.491943 0.0 59.445242 12.444439 66.317679 5.663957 2196.148438 2233.105469  0.889655  0.715363  0.448706  0.932067   0.993803  0.636426  0.399194  0.829218   0.884142 0.803408
 46   3  20  20 1.0  1.239970  0.741275 0.0  1.981244  1.981244  1.981244 1.981244 2098.414062 2116.773438  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 46   2  44  44 1.0  3.194524  1.918430 0.0  5.112954  6.159728  7.094198 3.607845 2127.800781 2148.726562  0.954545  0.897275  0.849307  1.000000   1.000000  0.856489  0.810702  0.954545   0.954545 0.921860
 46   1 145 145 1.0 38.711708 14.607081 0.0 53.318789 12.461371 60.412987 5.170925 2223.171875 2262.894531  0.889655  0.715096  0.461987  0.978948   1.000000  0.636189  0.411009  0.870926   0.889655 0.805166
 47   3  20  20 1.0  1.232645  0.711170 0.0  1.943815  1.943815  1.943815 1.943815 2121.726562 2140.148438  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 47   2  44  44 1.0  3.070164  0.858196 0.0  3.928360  4.203301  5.872175 2.997949 2151.769531 2170.242188  0.954545  1.000000  0.916337  1.000000   1.000000  0.954545  0.874685  0.954545   0.954545 0.954545
 47   1 151 151 1.0 39.800796 13.295112 0.0 53.095908 11.135213 58.968082 5.051402 2202.742188 2240.121094  0.854305  0.737839  0.465449  0.993313   1.000000  0.630339  0.397635  0.848592   0.854305 0.779649
 48   3  20  20 1.0  1.234694  0.893756 0.0  2.128450  2.128450  2.128450 2.128450 2144.859375 2163.484375  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 48   2  44  44 1.0  3.079651  1.084765 0.0  4.164416  4.569524  6.292866 3.208107 2175.332031 2194.292969  0.954545  1.000000  0.889294  1.000000   1.000000  0.954545  0.848871  0.954545   0.954545 0.954545
 48   1 153 153 1.0 40.701101 13.730497 0.0 54.431598 10.283387 60.724464 5.197357 2239.964844 2265.847656  0.843137  0.754800  0.461252  0.975970   1.000000  0.636400  0.388899  0.822877   0.843137 0.774225
 49   3  20  20 1.0  1.231914  0.764064 0.0  1.995979  1.995979  1.995979 1.995979 2168.582031 2186.992188  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 49   2  44  44 1.0  3.117850  0.877567 0.0  3.995416  4.240004  5.991395 3.057987 2194.875000 2220.367188  0.954545  1.000000  0.908101  1.000000   1.000000  0.954545  0.866823  0.954545   0.954545 0.954545
 49   1 151 151 1.0 41.101524 11.559743 0.0 52.661267 10.043106 58.652662 5.150789 2245.781250 2286.484375  0.854305  0.760002  0.466216  0.981262   1.000000  0.649273  0.398291  0.838297   0.854305 0.785961

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL     LE     AC  CF        GT       ST  OT        TT        LT        CT       WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3  20.00  20.00 1.0  1.233236  0.82722 0.0  2.060456  2.060456  2.060456 2.060456 1494.283906 1508.697109  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  2  43.44  43.44 1.0  3.068587  1.17944 0.0  4.248027  4.953342  6.308483 3.215441 1530.237266 1546.955781  0.967273  0.975263  0.890570  1.000000   1.000000  0.942940  0.861377  0.967273   0.967273 0.959162
  1 146.80 146.80 1.0 39.512719 17.62071 0.0 57.133428 10.887943 63.441911 5.435290 1615.374687 1647.692812  0.879718  0.743441  0.457071  0.962287   0.977391  0.653951  0.402059  0.846386   0.859395 0.797688

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       LE       AC  CF       GT        ST  OT        TT       LT        CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 0.000000 0.000000 0.0 0.005791  0.197601 0.0  0.197991 0.197991  0.197991 0.197991 454.740465 459.023789  0.000000  0.000000  0.000000  0.000000   0.000000  0.000000  0.000000  0.000000   0.000000 0.000000
  2 0.907115 0.907115 0.0 0.074564  0.381872 0.0  0.416575 0.667503  0.440865 0.220634 449.214792 453.552156  0.020616  0.040337  0.023889  0.000000   0.000000  0.034177  0.028114  0.020616   0.020616 0.017930
  1 4.936329 4.936329 0.0 1.703315 10.611112 0.0 11.451623 0.828555 11.622491 0.967053 446.242095 450.840332  0.029497  0.015420  0.022582  0.058616   0.055852  0.024037  0.023763  0.057406   0.050709 0.029005

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN        GT        ST  OT        TT        YT        WT        ET         RSS         VMS  LE  AC  CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  PP_EF_L  PP_EF_A  SP_ED_L  SP_ED_A  SP_EB_L  SP_EB_A  SP_EBS_L  SP_EBS_A  TOT_CHOICES  PRE_CHOICES
  0   3   1   1  1.218903  0.769553 0.0  1.988456  1.988456  1.988456  0.000000  619.394531  624.144531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   2   1   1  1.859296  0.565543 0.0  2.424839  4.413296  4.413296  1.651820  641.019531  646.929688  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
  0   2   2   2  1.315729  0.336091 0.0  1.651820  6.065115  1.651820  0.000000  654.640625  659.714844  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.875595 0.875595 0.460839 0.460839  0.726861  0.726861            0            0
  0   1   1   1  4.396390  1.286708 0.0  5.683098 10.096393 10.096393  6.595637  680.324219  689.832031  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  0   1   2   2  4.008818  0.935000 0.0  4.943817 16.692031  6.595637  1.294343  669.183594  685.253906  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  0   1   3   3  0.982835  0.311508 0.0  1.294343 17.986374  1.294343  5.265658  595.437500  601.949219   4   4 1.0    0       32     35     4         4        9      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   4   4  4.361002  0.904656 0.0  5.265658 23.252032  5.265658 11.316485  663.183594  672.804688  16  16 1.0    0       36     51     4         4       13      16 4.000000 4.000000 6.000000 6.000000 1.500000 1.500000 -0.403677 -0.403677            0            0
  0   1   5   5  7.180482  4.136003 0.0 11.316485 34.568517 11.316485  2.347114  724.617188  736.621094  24  24 1.0    0       52     75     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
  0   1   6   6  1.726179  0.620936 0.0  2.347114 36.915632  2.347114  1.038026  667.839844  678.417969   7   7 1.0    0       76     82     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
  0   1   7   7  0.754083  0.283944 0.0  1.038026 37.953658  1.038026  1.013040  651.097656  655.519531   3   3 1.0    0       83     85     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
  0   1   8   8  0.752433  0.260607 0.0  1.013040 38.966698  1.013040  6.420583  651.421875  655.843750   3   3 1.0    0       86     88     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  0   1   9   9  4.750959  1.669624 0.0  6.420583 45.387281  6.420583  3.076306  701.812500  710.875000  17  17 1.0    0       89    105     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  0   1  10  10  2.628622  0.447684 0.0  3.076306 48.463587  3.076306  6.234497  672.957031  682.960938  10  10 1.0    0      106    115     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
  0   1  11  11  4.736690  1.497806 0.0  6.234497 54.698084  6.234497  4.200634  697.148438  705.699219  17  17 1.0    0      116    132     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  0   1  12  12  3.489778  0.710856 0.0  4.200634 58.898718  4.200634  0.000000  688.109375  701.796875  13  13 1.0    0      133    145     4         4       41      44 3.250000 3.250000 3.862210 3.862210 1.188372 1.188372 -0.140806 -0.140806            0            0
  1   3   1   1  1.223314  0.830745 0.0  2.054060  2.054060  2.054060  0.000000  639.714844  643.656250  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  1   2   1   1  1.836238  0.528519 0.0  2.364758  4.418817  4.418817  1.712360  659.433594  665.667969  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.798809 2.798809 1.119524 1.119524  0.420353  0.420353            0            2
  1   2   2   2  1.319465  0.392895 0.0  1.712360  6.131177  1.712360  0.000000  654.675781  661.296875  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 1.286684 1.286684 0.677202 0.677202  0.640794  0.640794            0            0
  1   1   1   1  4.390733  1.346265 0.0  5.736998 10.155815 10.155815  6.610644  694.718750  705.117188  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  1   1   2   2  3.974704  0.923580 0.0  4.898284 16.766459  6.610644  3.479712  683.203125  689.898438  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  1   1   3   3  2.839365  0.640347 0.0  3.479712 20.246171  3.479712  1.516686  675.910156  683.324219  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
  1   1   4   4  1.237669  0.279017 0.0  1.516686 21.762857  1.516686 10.790905  657.722656  662.292969   5   5 1.0    0       43     47     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  1   1   5   5  7.100073  3.690832 0.0 10.790905 32.553762 10.790905  2.257539  748.199219  761.632812  24  24 1.0    0       48     71     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
  1   1   6   6  1.723442  0.534097 0.0  2.257539 34.811301  2.257539  1.034275  656.433594  668.578125   7   7 1.0    0       72     78     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
  1   1   7   7  0.749511  0.284763 0.0  1.034275 35.845575  1.034275  1.008044  651.140625  657.726562   3   3 1.0    0       79     81     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1   8   8  0.750294  0.257749 0.0  1.008044 36.853619  1.008044  6.229826  649.496094  655.511719   3   3 1.0    0       82     84     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  1   1   9   9  4.729524  1.500302 0.0  6.229826 43.083445  6.229826  3.170604  713.289062  722.960938  17  17 1.0    0       85    101     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  1   1  10  10  2.638623  0.531981 0.0  3.170604 46.254048  3.170604  6.337594  685.945312  697.160156  10  10 1.0    0      102    111     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
  1   1  11  11  4.719650  1.617945 0.0  6.337594 52.591643  6.337594  4.190381  712.996094  721.335938  17  17 1.0    0      112    128     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  1   1  12  12  3.482334  0.708048 0.0  4.190381 56.782024  4.190381  0.000000  700.214844  713.886719  13  13 1.0    0      129    141     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
  2   3   1   1  1.223531  0.726721 0.0  1.950252  1.950252  1.950252  0.000000  663.515625  667.125000  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   2   1   1  1.975604  0.786684 0.0  2.762288  4.712540  4.712540  1.496833  685.027344  690.429688  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.913570 2.913570 1.120604 1.120604  0.407427  0.407427            0            3
  2   2   2   2  1.221200  0.275633 0.0  1.496833  6.209373  1.496833  0.000000  715.628906  721.394531  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            0
  2   1   1   1  4.416681  1.459809 0.0  5.876490 10.589029 10.589029  6.603097  723.988281  734.238281  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  2   1   2   2  4.035680  1.070584 0.0  5.106264 17.192126  6.603097  3.420972  717.750000  734.738281  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  2   1   3   3  2.836495  0.584477 0.0  3.420972 20.613098  3.420972  1.596662  709.003906  716.445312  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
  2   1   4   4  1.230175  0.366487 0.0  1.596662 22.209760  1.596662 12.046928  690.117188  694.457031   5   5 1.0    0       43     47     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  2   1   5   5  7.339545  4.707383 0.0 12.046928 34.256689 12.046928  2.083777  795.093750  823.617188  25  25 1.0    0       48     72     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
  2   1   6   6  1.436119  0.647657 0.0  2.083777 36.340465  2.083777  1.027094  731.726562  738.410156   6   6 1.0    0       73     78     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  2   1   7   7  0.746064  0.281031 0.0  1.027094 37.367560  1.027094  6.350768  712.867188  718.324219   3   3 1.0    0       79     81     3         3       27      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  2   1   8   8  4.735056  1.615712 0.0  6.350768 43.718327  6.350768  7.027937  758.562500  770.687500  17  17 1.0    0       82     98     3         3       30      32 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  2   1   9   9  4.984332  2.043604 0.0  7.027937 50.746264  7.027937  3.621557  763.828125  776.144531  18  18 1.0    0       99    116     3         3       33      35 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
  2   1  10  10  2.926143  0.695413 0.0  3.621557 54.367821  3.621557  4.441262  742.945312  753.117188  11  11 1.0    0      117    127     3         3       36      38 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
  2   1  11  11  3.771531  0.669731 0.0  4.441262 58.809083  4.441262  1.161205  750.839844  768.226562  14  14 1.0    0      128    141     3         3       39      41 4.666667 4.666667 6.350853 6.350853 1.360897 1.360897 -0.815760 -0.815760            0            2
  2   1  12  12  0.993398  0.167807 0.0  1.161205 59.970287  1.161205  0.000000  719.589844  725.863281   4   4 1.0    0      142    145     3         3       42      44 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
  3   3   1   1  1.226086  0.837865 0.0  2.063951  2.063951  2.063951  0.000000  713.277344  718.019531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  3   2   1   1  1.855357  0.534996 0.0  2.390353  4.454304  4.454304  1.511092  733.953125  740.761719  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
  3   2   2   2  1.124922  0.386170 0.0  1.511092  5.965396  1.511092  0.000000  745.539062  751.503906  17  17 1.0   17       26     42    10        10       11      20 1.700000 1.700000 0.823273 0.823273 0.484278 0.484278  0.739148  0.739148            0            0
  3   1   1   1  4.387099  1.257574 0.0  5.644673 10.098977 10.098977  6.640612  769.851562  780.753906  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  3   1   2   2  4.022921  1.106599 0.0  5.129520 16.739589  6.640612  6.754437  765.121094  782.671875  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  3   1   3   3  5.244106  1.510331 0.0  6.754437 23.494026  6.754437  1.523584  791.109375  816.707031  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
  3   1   4   4  1.241137  0.282447 0.0  1.523584 25.017610  1.523584 10.666607  736.464844  741.671875   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  3   1   5   5  7.107241  3.559366 0.0 10.666607 35.684217 10.666607  2.311166  819.070312  832.093750  24  24 1.0    0       56     79     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
  3   1   6   6  1.714406  0.596759 0.0  2.311166 37.995383  2.311166  0.848022  762.167969  771.136719   7   7 1.0    0       80     86     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
  3   1   7   7  0.603412  0.244610 0.0  0.848022 38.843404  0.848022  6.236725  737.234375  741.886719   2   2 1.0    0       87     88     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  3   1   8   8  4.722327  1.514398 0.0  6.236725 45.080129  6.236725  3.276309  785.957031  795.414062  17  17 1.0    0       89    105     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  3   1   9   9  2.663685  0.612623 0.0  3.276309 48.356438  3.276309  6.384683  763.164062  774.425781  10  10 1.0    0      106    115     3         3       31      33 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
  3   1  10  10  4.775181  1.609502 0.0  6.384683 54.741121  6.384683  3.390154  780.273438  792.449219  17  17 1.0    0      116    132     3         3       34      36 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  3   1  11  11  2.893468  0.496686 0.0  3.390154 58.131275  3.390154  1.337289  761.417969  772.808594  11  11 1.0    0      133    143     3         3       37      39 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            1
  3   1  12  12  1.019784  0.317505 0.0  1.337289 59.468564  1.337289  0.000000  744.296875  753.117188   4   4 1.0    0      144    147     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
  4   3   1   1  1.220444  0.785672 0.0  2.006116  2.006116  2.006116  0.000000  735.390625  742.085938  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   2   1   1  1.937495  0.730783 0.0  2.668278  4.674394  4.674394  1.505443  756.847656  765.257812  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.913570 2.913570 1.120604 1.120604  0.407427  0.407427            0            3
  4   2   2   2  1.221904  0.283539 0.0  1.505443  6.179837  1.505443  0.000000  790.472656  798.968750  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 1.135292 1.135292 0.630718 0.630718  0.670543  0.670543            0            0
  4   1   1   1  4.375298  1.311011 0.0  5.686310 10.360704 10.360704  6.528698  791.625000  804.363281  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  4   1   2   2  4.009901  1.013354 0.0  5.023255 16.889402  6.528698  3.891665  788.601562  808.011719  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  4   1   3   3  3.155277  0.736387 0.0  3.891665 20.781066  3.891665  5.337379  783.527344  790.875000  12  12 1.0    0       32     43     4         4        9      12 3.000000 3.000000 4.000000 4.000000 1.333333 1.333333 -0.160964 -0.160964            0            0
  4   1   4   4  4.356166  0.981212 0.0  5.337379 26.118445  5.337379 11.926417  797.347656  809.683594  16  16 1.0    0       44     59     4         4       13      16 4.000000 4.000000 5.354126 5.354126 1.338532 1.338532 -0.333847 -0.333847            0            0
  4   1   5   5  7.510395  4.416022 0.0 11.926417 38.044862 11.926417  2.016700  877.238281  909.125000  25  25 1.0    0       60     84     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
  4   1   6   6  1.455373  0.561327 0.0  2.016700 40.061562  2.016700  0.938363  799.566406  808.488281   6   6 1.0    0       85     90     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  4   1   7   7  0.755489  0.182874 0.0  0.938363 40.999925  0.938363  6.377434  787.265625  794.933594   3   3 1.0    0       91     93     3         3       27      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  4   1   8   8  4.773021  1.604412 0.0  6.377434 47.377359  6.377434  7.872639  834.933594  849.828125  17  17 1.0    0       94    110     3         3       30      32 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  4   1   9   9  5.898430  1.974209 0.0  7.872639 55.249998  7.872639  3.486267  890.363281  905.937500  18  18 1.0    0      111    128     3         3       33      35 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
  4   1  10  10  2.926693  0.559575 0.0  3.486267 58.736265  3.486267  4.177450  864.136719  876.781250  11  11 1.0    0      129    139     3         3       36      38 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
  4   1  11  11  3.421267  0.756184 0.0  4.177450 62.913716  4.177450  1.461239  869.992188  879.187500  13  13 1.0    0      140    152     3         3       39      41 4.333333 4.333333 5.773503 5.773503 1.332347 1.332347 -0.741304 -0.741304            0            1
  4   1  12  12  1.248214  0.213026 0.0  1.461239 64.374955  1.461239  0.000000  845.515625  853.855469   5   5 1.0    0      153    157     3         3       42      44 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
  5   3   1   1  1.218753  1.062327 0.0  2.281080  2.281080  2.281080  0.000000  835.988281  843.070312  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   2   1   1  1.978153  0.800816 0.0  2.778969  5.060049  5.060049  1.263188  857.320312  866.222656  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.716207 2.716207 1.044695 1.044695  0.429900  0.429900            0            2
  5   2   2   2  1.027804  0.235384 0.0  1.263188  6.323237  1.263188  0.000000  896.390625  908.136719  16  16 1.0   16       27     42    10        10       11      20 1.600000 1.600000 1.074968 1.074968 0.671855 0.671855  0.682989  0.682989            0            0
  5   1   1   1  4.403766  1.163133 0.0  5.566899 10.626948 10.626948  6.471965  894.101562  908.226562  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  5   1   2   2  4.054139  1.154638 0.0  5.208777 17.098913  6.471965  3.429288  889.238281  910.480469  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  5   1   3   3  2.848116  0.581171 0.0  3.429288 20.528201  3.429288  6.840632  877.207031  887.742188  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
  5   1   4   4  5.028281  1.812352 0.0  6.840632 27.368833  6.840632  4.864476  914.343750  942.121094  18  18 1.0    0       43     60     4         4       13      16 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            0
  5   1   5   5  3.755102  1.109374 0.0  4.864476 32.233309  4.864476 12.489067  905.722656  917.070312  14  14 1.0    0       61     74     5         5       17      21 2.800000 2.800000 3.492850 3.492850 1.247446 1.247446  0.066452  0.066452            0            2
  5   1   6   6  7.921852  4.567215 0.0 12.489067 44.722376 12.489067  1.067637 1004.019531 1044.242188  26  26 1.0    0       75    100     5         5       22      26 5.200000 5.200000 3.492850 3.492850 0.671702 0.671702  0.066452  0.066452            0            0
  5   1   7   7  0.770478  0.297159 0.0  1.067637 45.790013  1.067637  0.703379  886.218750  896.316406   3   3 1.0    0      101    103     2         2       27      28 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  5   1   8   8  0.606576  0.096803 0.0  0.703379 46.493392  0.703379  6.544817  885.777344  895.644531   2   2 1.0    0      104    105     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  5   1   9   9  4.800744  1.744074 0.0  6.544817 53.038209  6.544817  3.216521  946.199219  963.742188  17  17 1.0    0      106    122     3         3       31      33 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  5   1  10  10  2.571066  0.645455 0.0  3.216521 56.254730  3.216521  1.495357  917.835938  934.796875  10  10 1.0    0      123    132     3         3       34      36 3.333333 3.333333 4.041452 4.041452 1.212436 1.212436 -0.472489 -0.472489            0            1
  5   1  11  11  1.250017  0.245340 0.0  1.495357 57.750087  1.495357  1.331763  906.273438  916.445312   5   5 1.0    0      133    137     3         3       37      39 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            2
  5   1  12  12  0.979193  0.352569 0.0  1.331763 59.081850  1.331763  0.000000  897.832031  908.718750   4   4 1.0    0      138    141     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
  6   3   1   1  1.223422  0.669797 0.0  1.893220  1.893220  1.893220  0.000000  891.671875  900.839844  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  6   2   1   1  1.849722  0.786306 0.0  2.636028  4.529248  4.529248  1.743575  910.328125  921.894531  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.798809 2.798809 1.119524 1.119524  0.420353  0.420353            0            2
  6   2   2   2  1.320678  0.422896 0.0  1.743575  6.272823  1.743575  0.000000  898.179688  908.027344  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.994429 0.994429 0.523384 0.523384  0.700181  0.700181            0            0
  6   1   1   1  4.401643  1.160188 0.0  5.561830 10.091078 10.091078  6.941504  951.796875  967.710938  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  6   1   2   2  4.064228  1.133701 0.0  5.197929 17.032582  6.941504  7.037385  946.507812  969.488281  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  6   1   3   3  5.292683  1.744702 0.0  7.037385 24.069968  7.037385  1.519857  971.671875 1001.726562  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
  6   1   4   4  1.238491  0.281366 0.0  1.519857 25.589825  1.519857 10.503246  920.980469  930.589844   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  6   1   5   5  7.083522  3.419724 0.0 10.503246 36.093070 10.503246  2.390246  994.550781 1012.320312  24  24 1.0    0       56     79     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
  6   1   6   6  1.719775  0.670471 0.0  2.390246 38.483316  2.390246  1.170197  901.464844  918.187500   7   7 1.0    0       80     86     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
  6   1   7   7  0.753902  0.416294 0.0  1.170197 39.653512  1.170197  0.948053  896.339844  906.210938   3   3 1.0    0       87     89     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1   8   8  0.753889  0.194164 0.0  0.948053 40.601565  0.948053  6.733060  897.128906  907.082031   3   3 1.0    0       90     92     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  6   1   9   9  4.756158  1.976902 0.0  6.733060 47.334625  6.733060  3.115261  953.082031  966.546875  17  17 1.0    0       93    109     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  6   1  10  10  2.642609  0.472652 0.0  3.115261 50.449886  3.115261  6.759412  929.128906  944.562500  10  10 1.0    0      110    119     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
  6   1  11  11  4.775288  1.984124 0.0  6.759412 57.209298  6.759412  4.060702  955.289062  968.667969  17  17 1.0    0      120    136     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  6   1  12  12  3.437448  0.623255 0.0  4.060702 61.270001  4.060702  0.000000  944.343750  962.847656  13  13 1.0    0      137    149     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
  7   3   1   1  1.227999  0.625568 0.0  1.853567  1.853567  1.853567  0.000000  906.089844  914.910156  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   2   1   1  1.751390  0.728131 0.0  2.479522  4.333088  4.333088  1.750976  927.074219  938.171875  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
  7   2   2   2  1.411279  0.339697 0.0  1.750976  6.084065  1.750976  0.000000  938.480469  950.910156  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.247219 1.247219 0.623610 0.623610  0.648355  0.648355            0            0
  7   1   1   1  4.414869  1.281675 0.0  5.696544 10.029632 10.029632  6.760659  966.527344  981.343750  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  7   1   2   2  3.983814  1.025869 0.0  5.009683 16.790291  6.760659  3.438952  956.113281  966.777344  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  7   1   3   3  2.854160  0.584792 0.0  3.438952 20.229243  3.438952  7.512903  950.546875  962.472656  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
  7   1   4   4  5.063667  2.449236 0.0  7.512903 27.742146  7.512903  4.227092  985.007812 1013.976562  18  18 1.0    0       43     60     4         4       13      16 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            0
  7   1   5   5  3.475712  0.751380 0.0  4.227092 31.969239  4.227092  1.832084  967.000000  986.171875  13  13 1.0    0       61     73     4         4       17      20 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            1
  7   1   6   6  1.248658  0.583426 0.0  1.832084 33.801323  1.832084  1.166654  951.000000  960.359375   5   5 1.0    0       74     78     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
  7   1   7   7  0.750548  0.416106 0.0  1.166654 34.967977  1.166654  6.298840  931.496094  939.996094   3   3 1.0    0       79     81     3         3       25      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  7   1   8   8  4.781622  1.517217 0.0  6.298840 41.266816  6.298840  4.047110  978.753906  993.777344  17  17 1.0    0       82     98     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  7   1   9   9  3.417607  0.629503 0.0  4.047110 45.313926  4.047110  2.754752  961.273438  971.828125  13  13 1.0    0       99    111     3         3       31      33 4.333333 4.333333 5.773503 5.773503 1.332347 1.332347 -0.741304 -0.741304            0            0
  7   1  10  10  2.137662  0.617090 0.0  2.754752 48.068678  2.754752  6.321126  943.867188  954.449219   9   9 1.0    0      112    120     3         3       34      36 3.000000 3.000000 2.645751 2.645751 0.881917 0.881917 -0.177451 -0.177451            0            0
  7   1  11  11  5.057775  1.263351 0.0  6.321126 54.389803  6.321126  1.747105  991.843750 1019.507812  18  18 1.0    0      121    138     4         4       37      40 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            1
  7   1  12  12  1.252740  0.494365 0.0  1.747105 56.136908  1.747105  0.000000  944.148438  952.769531   5   5 1.0    0      139    143     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  8   3   1   1  1.223145  0.786321 0.0  2.009465  2.009465  2.009465  0.000000  929.402344  937.722656  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   2   1   1  1.959605  0.688134 0.0  2.647739  4.657204  4.657204  1.520141  950.820312  960.929688  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.875181 2.875181 1.105839 1.105839  0.411708  0.411708            0            3
  8   2   2   2  1.227430  0.292711 0.0  1.520141  6.177345  1.520141  0.000000  967.808594  977.839844  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            0
  8   1   1   1  4.423828  1.516516 0.0  5.940345 10.597549 10.597549  6.463360  990.410156 1005.250000  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
  8   1   2   2  4.045412  0.897807 0.0  4.943219 17.060909  6.463360  3.447517  983.183594 1004.917969  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
  8   1   3   3  2.851466  0.596051 0.0  3.447517 20.508426  3.447517  1.783807  972.882812  984.511719  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
  8   1   4   4  1.237261  0.546546 0.0  1.783807 22.292233  1.783807 10.968442  955.675781  964.902344   5   5 1.0    0       43     47     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
  8   1   5   5  7.395500  3.572942 0.0 10.968442 33.260675 10.968442  2.149685 1049.136719 1080.718750  25  25 1.0    0       48     72     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
  8   1   6   6  1.463037  0.686649 0.0  2.149685 35.410361  2.149685  0.921111  981.667969  991.761719   6   6 1.0    0       73     78     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
  8   1   7   7  0.754182  0.166928 0.0  0.921111 36.331471  0.921111  6.540158  963.917969  974.019531   3   3 1.0    0       79     81     3         3       27      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  8   1   8   8  4.768040  1.772118 0.0  6.540158 42.871629  6.540158  7.107740 1016.386719 1033.726562  17  17 1.0    0       82     98     3         3       30      32 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
  8   1   9   9  5.005432  2.102308 0.0  7.107740 49.979369  7.107740  3.749451 1021.683594 1038.625000  18  18 1.0    0       99    116     3         3       33      35 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
  8   1  10  10  2.925356  0.824095 0.0  3.749451 53.728820  3.749451  4.023941  993.246094 1007.820312  11  11 1.0    0      117    127     3         3       36      38 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
  8   1  11  11  3.418020  0.605921 0.0  4.023941 57.752761  4.023941  1.452668 1000.390625 1011.023438  13  13 1.0    0      128    140     3         3       39      41 4.333333 4.333333 5.773503 5.773503 1.332347 1.332347 -0.741304 -0.741304            0            1
  8   1  12  12  1.238508  0.214160 0.0  1.452668 59.205429  1.452668  0.000000  975.968750  985.738281   5   5 1.0    0      141    145     3         3       42      44 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
  9   3   1   1  1.228172  0.734087 0.0  1.962260  1.962260  1.962260  0.000000  964.585938  973.308594  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   2   1   1  2.517520  1.381207 0.0  3.898727  5.860987  5.860987  0.786286  996.070312 1014.062500  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.685351 2.685351 0.866242 0.866242  0.433521  0.433521            0            2
  9   2   2   2  0.602203  0.184083 0.0  0.786286  6.647273  0.786286  0.000000 1122.421875 1136.617188  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            0
  9   1   1   1  4.702874  1.353373 0.0  6.056247 11.917234 11.917234  6.555180 1038.804688 1063.523438  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
  9   1   2   2  4.359528  1.409366 0.0  5.768894 18.472414  6.555180  4.323079 1034.453125 1061.347656  16  16 1.0    0       18     33     5         5        6      10 3.200000 3.200000 4.919350 4.919350 1.537297 1.537297 -0.104874 -0.104874            0            0
  9   1   3   3  3.489806  0.833273 0.0  4.323079 22.795494  4.323079 10.797118 1020.023438 1034.406250  13  13 1.0    0       34     46     5         5       11      15 2.600000 2.600000 3.577709 3.577709 1.376042 1.376042  0.054826  0.054826            0            0
  9   1   4   4  7.380803  3.416316 0.0 10.797118 33.592612 10.797118  7.584961 1086.652344 1118.070312  25  25 1.0    0       47     71     5         5       16      20 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
  9   1   5   5  5.324529  2.260432 0.0  7.584961 41.177573  7.584961 52.056755 1073.113281 1092.949219  19  19 1.0    0       72     90     5         5       21      25 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
  9   1   6   6 11.590254 40.466501 0.0 52.056755 93.234327 52.056755  0.512596 1280.519531 1323.156250  35  35 1.0    0       91    125     6         6       26      31 5.833333 5.833333 3.920034 3.920034 0.672006 0.672006  0.110754  0.110754            0            1
  9   1   7   7  0.442673  0.069923 0.0  0.512596 93.746923  0.512596  0.876797 1113.730469 1127.636719   1   1 1.0    0      126    126     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
  9   1   8   8  0.765845  0.110951 0.0  0.876797 94.623720  0.876797  1.035539 1117.253906 1130.894531   3   3 1.0    0      127    129     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
  9   1   9   9  0.603878  0.431661 0.0  1.035539 95.659259  1.035539  0.904035 1123.679688 1137.410156   2   2 1.0    0      130    131     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  10  10  0.770358  0.133678 0.0  0.904035 96.563294  0.904035  0.717162 1121.722656 1135.332031   3   3 1.0    0      132    134     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
  9   1  11  11  0.603636  0.113526 0.0  0.717162 97.280456  0.717162  1.171827 1120.945312 1134.406250   2   2 1.0    0      135    136     2         2       39      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
  9   1  12  12  0.769493  0.402334 0.0  1.171827 98.452283  1.171827  0.000000 1119.132812 1132.398438   3   3 1.0    0      137    139     2         2       41      42 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 10   3   1   1  1.229816  0.766809 0.0  1.996625  1.996625  1.996625  0.000000 1118.832031 1131.734375  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 10   2   1   1  1.859631  0.574234 0.0  2.433865  4.430490  4.430490  1.720093 1139.343750 1154.230469  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.758824 2.758824 1.103530 1.103530  0.424948  0.424948            0            2
 10   2   2   2  1.324800  0.395293 0.0  1.720093  6.150583  1.720093  0.000000 1153.085938 1165.609375  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 1.370320 1.370320 0.721221 0.721221  0.625193  0.625193            0            0
 10   1   1   1  4.407594  1.601267 0.0  6.008862 10.439352 10.439352  6.640422 1175.593750 1193.761719  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 10   1   2   2  4.047303  0.873026 0.0  4.920329 17.079774  6.640422  3.828783 1174.445312 1201.398438  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 10   1   3   3  3.125761  0.703022 0.0  3.828783 20.908557  3.828783  5.342460 1168.648438 1182.687500  12  12 1.0    0       32     43     4         4        9      12 3.000000 3.000000 4.000000 4.000000 1.333333 1.333333 -0.160964 -0.160964            0            0
 10   1   4   4  4.373441  0.969019 0.0  5.342460 26.251017  5.342460  9.803982 1183.261719 1201.621094  16  16 1.0    0       44     59     4         4       13      16 4.000000 4.000000 6.000000 6.000000 1.500000 1.500000 -0.403677 -0.403677            0            0
 10   1   5   5  7.082559  2.721423 0.0  9.803982 36.054999  9.803982  2.223460 1222.691406 1242.585938  24  24 1.0    0       60     83     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 10   1   6   6  1.725010  0.498449 0.0  2.223460 38.278458  2.223460  0.938722 1173.144531 1189.531250   7   7 1.0    0       84     90     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 10   1   7   7  0.755375  0.183347 0.0  0.938722 39.217181  0.938722  0.934696 1146.937500 1159.023438   3   3 1.0    0       91     93     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1   8   8  0.757833  0.176863 0.0  0.934696 40.151876  0.934696  6.560047 1147.351562 1159.312500   3   3 1.0    0       94     96     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 10   1   9   9  4.722568  1.837480 0.0  6.560047 46.711924  6.560047  3.128585 1192.097656 1208.339844  17  17 1.0    0       97    113     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 10   1  10  10  2.653011  0.475575 0.0  3.128585 49.840509  3.128585  6.169086 1170.593750 1188.203125  10  10 1.0    0      114    123     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 10   1  11  11  4.748190  1.420896 0.0  6.169086 56.009595  6.169086  4.412617 1193.406250 1209.929688  17  17 1.0    0      124    140     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 10   1  12  12  3.448178  0.964439 0.0  4.412617 60.422212  4.412617  0.000000 1185.851562 1207.945312  13  13 1.0    0      141    153     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
 11   3   1   1  1.229281  0.882924 0.0  2.112205  2.112205  2.112205  0.000000 1148.332031 1160.492188  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   2   1   1  1.961920  0.641563 0.0  2.603483  4.715688  4.715688  1.568949 1169.480469 1183.390625  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.913570 2.913570 1.120604 1.120604  0.407427  0.407427            0            2
 11   2   2   2  1.224102  0.344847 0.0  1.568949  6.284637  1.568949  0.000000 1175.820312 1188.433594  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            0
 11   1   1   1  4.421540  1.210717 0.0  5.632257 10.347945 10.347945  6.867154 1204.527344 1222.550781  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 11   1   2   2  4.059089  1.239116 0.0  5.298205 17.215099  6.867154  6.722545 1200.718750 1225.457031  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 11   1   3   3  5.295621  1.426924 0.0  6.722545 23.937644  6.722545  1.535100 1220.886719 1253.324219  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 11   1   4   4  1.248201  0.286898 0.0  1.535100 25.472744  1.535100 12.096404 1174.968750 1187.703125   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 11   1   5   5  7.479610  4.616794 0.0 12.096404 37.569148 12.096404  2.217716 1258.621094 1291.332031  25  25 1.0    0       56     80     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 11   1   6   6  1.723052  0.494663 0.0  2.217716 39.786864  2.217716  1.298387 1196.671875 1212.835938   7   7 1.0    0       81     87     5         5       22      26 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 11   1   7   7  0.756238  0.542149 0.0  1.298387 41.085251  1.298387  0.927924 1177.316406 1189.359375   3   3 1.0    0       88     90     3         3       27      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 11   1   8   8  0.751415  0.176508 0.0  0.927924 42.013174  0.927924  6.572283 1170.515625 1182.488281   3   3 1.0    0       91     93     3         3       30      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 11   1   9   9  4.749570  1.822713 0.0  6.572283 48.585457  6.572283  7.185254 1215.121094 1231.777344  17  17 1.0    0       94    110     3         3       33      35 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 11   1  10  10  5.009012  2.176242 0.0  7.185254 55.770711  7.185254  3.392489 1219.652344 1235.507812  18  18 1.0    0      111    128     3         3       36      38 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 11   1  11  11  2.866972  0.525517 0.0  3.392489 59.163200  3.392489  4.371386 1195.539062 1212.738281  11  11 1.0    0      129    139     3         3       39      41 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
 11   1  12  12  3.722597  0.648789 0.0  4.371386 63.534586  4.371386  0.000000 1209.656250 1231.980469  14  14 1.0    0      140    153     3         3       42      44 4.666667 4.666667 6.350853 6.350853 1.360897 1.360897 -0.815760 -0.815760            0            0
 12   3   1   1  1.230563  1.156762 0.0  2.387325  2.387325  2.387325  0.000000 1174.019531 1186.226562  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 12   2   1   1  2.077017  0.731871 0.0  2.808887  5.196212  5.196212  1.169863 1195.785156 1209.312500  27  27 1.0   27        1     27    10        10        1      10 2.700000 2.700000 2.710064 2.710064 1.003727 1.003727  0.430619  0.430619            0            2
 12   2   2   2  0.948861  0.221002 0.0  1.169863  6.366075  1.169863  0.000000 1202.234375 1216.300781  15  15 1.0   15       28     42    10        10       11      20 1.500000 1.500000 0.849837 0.849837 0.566558 0.566558  0.732867  0.732867            0            0
 12   1   1   1  4.442403  1.321077 0.0  5.763480 10.959692 10.959692  6.136404 1228.500000 1246.347656  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 12   1   2   2  4.062692  0.903849 0.0  4.966540 17.096096  6.136404  3.812756 1224.464844 1250.199219  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 12   1   3   3  2.863974  0.948782 0.0  3.812756 20.908852  3.812756  4.122291 1215.214844 1230.519531  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 12   1   4   4  3.111372  1.010920 0.0  4.122291 25.031143  4.122291  7.269976 1221.839844 1241.953125  12  12 1.0    0       43     54     5         5       13      17 2.400000 2.400000 2.607681 2.607681 1.086534 1.086534  0.202787  0.202787            0            0
 12   1   5   5  5.686650  1.583325 0.0  7.269976 32.301119  7.269976  8.357980 1254.195312 1273.863281  20  20 1.0    0       55     74     5         5       18      22 4.000000 4.000000 3.741657 3.741657 0.935414 0.935414  0.032963  0.032963            0            1
 12   1   6   6  5.418982  2.938998 0.0  8.357980 40.659099  8.357980  2.806162 1264.546875 1286.128906  19  19 1.0    0       75     93     5         5       23      27 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            1
 12   1   7   7  2.427844  0.378318 0.0  2.806162 43.465262  2.806162  2.750873 1208.496094 1220.839844   9   9 1.0    0       94    102     2         2       28      29 4.500000 4.500000 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 12   1   8   8  2.033190  0.717683 0.0  2.750873 46.216134  2.750873  3.154797 1206.890625 1221.218750   8   8 1.0    0      103    110     2         2       30      31 4.000000 4.000000 4.242641 4.242641 1.060660 1.060660 -1.390294 -1.390294            0            0
 12   1   9   9  2.677185  0.477612 0.0  3.154797 49.370931  3.154797  3.048486 1213.078125 1230.226562  10  10 1.0    0      111    120     2         2       32      33 5.000000 5.000000 5.656854 5.656854 1.131371 1.131371 -1.734841 -1.734841            0            0
 12   1  10  10  2.581574  0.466912 0.0  3.048486 52.419417  3.048486  1.490925 1221.375000 1241.542969  10  10 1.0    0      121    130     3         3       34      36 3.333333 3.333333 4.041452 4.041452 1.212436 1.212436 -0.472489 -0.472489            0            1
 12   1  11  11  1.254179  0.236746 0.0  1.490925 53.910343  1.490925  1.534695 1206.613281 1219.425781   5   5 1.0    0      131    135     3         3       37      39 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            2
 12   1  12  12  0.986069  0.548626 0.0  1.534695 55.445038  1.534695  0.000000 1199.121094 1211.707031   4   4 1.0    0      136    139     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 13   3   1   1  1.231180  0.801082 0.0  2.032262  2.032262  2.032262  0.000000 1193.980469 1205.792969  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   2   1   1  2.516204  1.400914 0.0  3.917117  5.949379  5.949379  0.785790 1224.800781 1245.703125  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.726414 2.726414 0.879488 0.879488  0.428709  0.428709            0            2
 13   2   2   2  0.603179  0.182612 0.0  0.785790  6.735170  0.785790  0.000000 1272.378906 1288.210938  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            0
 13   1   1   1  4.754224  1.670452 0.0  6.424676 12.374056 12.374056 11.126219 1256.710938 1281.746094  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 13   1   2   2  7.091770  3.248659 0.0 10.340429 23.500275 11.126219  4.269808 1291.390625 1332.753906  24  24 1.0    0       18     41     5         5        6      10 4.800000 4.800000 5.310367 5.310367 1.106327 1.106327 -0.144619 -0.144619            0            0
 13   1   3   3  3.472400  0.797409 0.0  4.269808 27.770083  4.269808 10.776556 1246.828125 1263.949219  13  13 1.0    0       42     54     5         5       11      15 2.600000 2.600000 3.577709 3.577709 1.376042 1.376042  0.054826  0.054826            0            0
 13   1   4   4  7.365156  3.411399 0.0 10.776556 38.546639 10.776556  8.123300 1301.773438 1336.324219  25  25 1.0    0       55     79     5         5       16      20 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 13   1   5   5  5.335973  2.787327 0.0  8.123300 46.669940  8.123300 39.927902 1285.675781 1306.710938  19  19 1.0    0       80     98     5         5       21      25 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 13   1   6   6 11.506570 28.421332 0.0 39.927902 86.597841 39.927902  0.516198 1413.402344 1455.035156  35  35 1.0    0       99    133     6         6       26      31 5.833333 5.833333 3.920034 3.920034 0.672006 0.672006  0.110754  0.110754            0            1
 13   1   7   7  0.445313  0.070884 0.0  0.516198 87.114039  0.516198  1.287680 1266.394531 1282.238281   1   1 1.0    0      134    134     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 13   1   8   8  0.772527  0.515153 0.0  1.287680 88.401719  1.287680  0.722500 1268.769531 1284.496094   3   3 1.0    0      135    137     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 13   1   9   9  0.608033  0.114468 0.0  0.722500 89.124220  0.722500  0.878590 1272.742188 1288.503906   2   2 1.0    0      138    139     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 13   1  10  10  0.771958  0.106632 0.0  0.878590 90.002809  0.878590  0.695760 1270.023438 1285.496094   3   3 1.0    0      140    142     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 13   1  11  11  0.603230  0.092530 0.0  0.695760 90.698569  0.695760  1.287411 1270.027344 1285.496094   2   2 1.0    0      143    144     2         2       39      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 13   1  12  12  0.767813  0.519598 0.0  1.287411 91.985980  1.287411  0.000000 1270.578125 1285.996094   3   3 1.0    0      145    147     2         2       41      42 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 14   3   1   1  1.235167  0.788913 0.0  2.024080  2.024080  2.024080  0.000000 1269.906250 1284.640625  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   2   1   1  2.548832  1.355713 0.0  3.904544  5.928624  5.928624  0.788472 1301.128906 1324.554688  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.685351 2.685351 0.866242 0.866242  0.433521  0.433521            0            2
 14   2   2   2  0.603859  0.184613 0.0  0.788472  6.717096  0.788472  0.000000 1303.250000 1319.359375  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            0
 14   1   1   1  4.704640  1.392545 0.0  6.097186 12.025810 12.025810  6.327123 1336.152344 1365.949219  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 14   1   2   2  4.395581  1.143071 0.0  5.538651 18.352933  6.327123  4.710490 1332.425781 1362.750000  16  16 1.0    0       18     33     5         5        6      10 3.200000 3.200000 4.919350 4.919350 1.537297 1.537297 -0.104874 -0.104874            0            0
 14   1   3   3  3.490272  1.220218 0.0  4.710490 23.063424  4.710490 11.436071 1322.808594 1342.535156  13  13 1.0    0       34     46     5         5       11      15 2.600000 2.600000 3.049590 3.049590 1.172919 1.172919  0.130991  0.130991            0            0
 14   1   4   4  7.390068  4.046003 0.0 11.436071 34.499495 11.436071  7.273031 1381.546875 1417.558594  25  25 1.0    0       47     71     5         5       16      20 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 14   1   5   5  5.314587  1.958444 0.0  7.273031 41.772525  7.273031 42.926610 1361.101562 1384.167969  19  19 1.0    0       72     90     5         5       21      25 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 14   1   6   6 11.543661 31.382950 0.0 42.926610 84.699136 42.926610  0.516595 1440.097656 1485.804688  35  35 1.0    0       91    125     6         6       26      31 5.833333 5.833333 3.920034 3.920034 0.672006 0.672006  0.110754  0.110754            0            1
 14   1   7   7  0.445188  0.071407 0.0  0.516595 85.215731  0.516595  0.707612 1297.164062 1313.386719   1   1 1.0    0      126    126     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 14   1   8   8  0.608622  0.098989 0.0  0.707612 85.923342  0.707612  1.346857 1299.832031 1315.894531   2   2 1.0    0      127    128     2         2       33      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1   9   9  0.767328  0.579528 0.0  1.346857 87.270199  1.346857  0.878719 1307.335938 1323.410156   3   3 1.0    0      129    131     2         2       35      36 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 14   1  10  10  0.772642  0.106077 0.0  0.878719 88.148918  0.878719  0.700244 1300.714844 1316.644531   3   3 1.0    0      132    134     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 14   1  11  11  0.607940  0.092304 0.0  0.700244 88.849162  0.700244  0.884579 1300.972656 1316.894531   2   2 1.0    0      135    136     2         2       39      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 14   1  12  12  0.774367  0.110212 0.0  0.884579 89.733741  0.884579  0.000000 1301.402344 1317.144531   3   3 1.0    0      137    139     2         2       41      42 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 15   3   1   1  1.233832  0.904360 0.0  2.138192  2.138192  2.138192  0.000000 1301.523438 1316.984375  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   2   1   1  1.999398  0.804050 0.0  2.803448  4.941641  4.941641  1.585861 1323.328125 1340.378906  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.716207 2.716207 1.044695 1.044695  0.429900  0.429900            0            3
 15   2   2   2  1.235478  0.350382 0.0  1.585861  6.527501  1.585861  0.000000 1331.871094 1346.933594  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 1.135292 1.135292 0.630718 0.630718  0.670543  0.670543            0            0
 15   1   1   1  4.409379  1.664044 0.0  6.073423 11.015064 11.015064  6.549985 1357.035156 1378.128906  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 15   1   2   2  4.057465  0.906659 0.0  4.964124 17.565048  6.549985  6.853948 1354.214844 1382.843750  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 15   1   3   3  5.322509  1.531440 0.0  6.853948 24.418996  6.853948  1.535473 1373.886719 1409.750000  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 15   1   4   4  1.241597  0.293876 0.0  1.535473 25.954469  1.535473 11.696719 1327.625000 1343.261719   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 15   1   5   5  7.461799  4.234920 0.0 11.696719 37.651189 11.696719  1.936661 1406.628906 1442.750000  25  25 1.0    0       56     80     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 15   1   6   6  1.471959  0.464702 0.0  1.936661 39.587850  1.936661  1.662673 1351.875000 1366.828125   6   6 1.0    0       81     86     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 15   1   7   7  0.996488  0.666185 0.0  1.662673 41.250523  1.662673  0.937234 1326.453125 1340.765625   4   4 1.0    0       87     90     3         3       27      29 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 15   1   8   8  0.758514  0.178720 0.0  0.937234 42.187756  0.937234  6.225758 1326.273438 1340.710938   3   3 1.0    0       91     93     3         3       30      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 15   1   9   9  4.768099  1.457659 0.0  6.225758 48.413515  6.225758  7.174070 1369.707031 1388.546875  17  17 1.0    0       94    110     3         3       33      35 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 15   1  10  10  5.017806  2.156264 0.0  7.174070 55.587584  7.174070  3.940508 1371.832031 1389.941406  18  18 1.0    0      111    128     3         3       36      38 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 15   1  11  11  2.921449  1.019059 0.0  3.940508 59.528092  3.940508  4.377433 1350.800781 1369.167969  11  11 1.0    0      129    139     3         3       39      41 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
 15   1  12  12  3.725644  0.651789 0.0  4.377433 63.905525  4.377433  0.000000 1361.753906 1386.367188  14  14 1.0    0      140    153     3         3       42      44 4.666667 4.666667 4.725816 4.725816 1.012675 1.012675 -0.588354 -0.588354            0            0
 16   3   1   1  1.235391  0.740613 0.0  1.976004  1.976004  1.976004  0.000000 1326.234375 1340.359375  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   2   1   1  1.855278  0.540308 0.0  2.395586  4.371590  4.371590  1.397576 1346.722656 1363.101562  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
 16   2   2   2  1.131466  0.266110 0.0  1.397576  5.769166  1.397576  0.000000 1354.242188 1369.542969  17  17 1.0   17       26     42    10        10       11      20 1.700000 1.700000 0.948683 0.948683 0.558049 0.558049  0.710259  0.710259            0            0
 16   1   1   1  4.425042  1.260612 0.0  5.685654 10.057244 10.057244  6.447238 1381.261719 1401.449219  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 16   1   2   2  4.052571  0.997090 0.0  5.049661 16.504482  6.447238  1.237866 1377.453125 1405.074219  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 16   1   3   3  0.988254  0.249611 0.0  1.237866 17.742347  1.237866  5.270347 1346.687500 1362.964844   4   4 1.0    0       32     35     4         4        9      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 16   1   4   4  4.327411  0.942936 0.0  5.270347 23.012694  5.270347 10.620468 1382.753906 1404.761719  16  16 1.0    0       36     51     4         4       13      16 4.000000 4.000000 6.000000 6.000000 1.500000 1.500000 -0.403677 -0.403677            0            0
 16   1   5   5  7.123198  3.497270 0.0 10.620468 33.633162 10.620468  2.663296 1430.328125 1451.996094  24  24 1.0    0       52     75     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 16   1   6   6  1.723076  0.940220 0.0  2.663296 36.296458  2.663296  0.706528 1368.210938 1386.757812   7   7 1.0    0       76     82     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 16   1   7   7  0.607886  0.098642 0.0  0.706528 37.002986  0.706528  6.399208 1342.640625 1356.910156   2   2 1.0    0       83     84     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 16   1   8   8  4.777160  1.622048 0.0  6.399208 43.402194  6.399208  3.181745 1392.562500 1411.613281  17  17 1.0    0       85    101     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 16   1   9   9  2.681089  0.500656 0.0  3.181745 46.583939  3.181745  6.542294 1372.882812 1393.609375  10  10 1.0    0      102    111     3         3       31      33 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 16   1  10  10  4.808973  1.733322 0.0  6.542294 53.126233  6.542294  3.013260 1395.042969 1413.800781  17  17 1.0    0      112    128     3         3       34      36 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 16   1  11  11  2.554353  0.458906 0.0  3.013260 56.139493  3.013260  1.459884 1372.972656 1393.937500  10  10 1.0    0      129    138     3         3       37      39 3.333333 3.333333 4.041452 4.041452 1.212436 1.212436 -0.472489 -0.472489            0            1
 16   1  12  12  1.239679  0.220205 0.0  1.459884 57.599377  1.459884  0.000000 1359.757812 1374.761719   5   5 1.0    0      139    143     3         3       40      42 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 17   3   1   1  1.235473  0.790271 0.0  2.025743  2.025743  2.025743  0.000000 1349.277344 1363.269531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   2   1   1  2.550376  1.390292 0.0  3.940668  5.966411  5.966411  0.788638 1380.125000 1402.976562  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.643651 2.643651 0.852791 0.852791  0.438463  0.438463            0            2
 17   2   2   2  0.603608  0.185030 0.0  0.788638  6.755049  0.788638  0.000000 1380.226562 1395.582031  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            0
 17   1   1   1  4.730840  1.565636 0.0  6.296476 12.262887 12.262887 11.058346 1414.468750 1442.792969  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 17   1   2   2  7.023540  3.246168 0.0 10.269708 23.321233 11.058346  4.315638 1449.250000 1493.324219  24  24 1.0    0       18     41     5         5        6      10 4.800000 4.800000 5.310367 5.310367 1.106327 1.106327 -0.144619 -0.144619            0            0
 17   1   3   3  3.488046  0.827591 0.0  4.315638 27.636871  4.315638 11.087273 1403.390625 1422.710938  13  13 1.0    0       42     54     5         5       11      15 2.600000 2.600000 2.509980 2.509980 0.965377 0.965377  0.219845  0.219845            0            0
 17   1   4   4  7.338605  3.748668 0.0 11.087273 38.724144 11.087273  7.958393 1453.214844 1489.683594  25  25 1.0    0       55     79     5         5       16      20 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 17   1   5   5  5.351397  2.606996 0.0  7.958393 46.682537  7.958393 43.745959 1440.101562 1463.023438  19  19 1.0    0       80     98     5         5       21      25 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 17   1   6   6 11.523325 32.222633 0.0 43.745959 90.428495 43.745959  0.517384 1518.898438 1559.281250  35  35 1.0    0       99    133     6         6       26      31 5.833333 5.833333 3.920034 3.920034 0.672006 0.672006  0.110754  0.110754            0            1
 17   1   7   7  0.445954  0.071431 0.0  0.517384 90.945880  0.517384  0.884962 1374.003906 1389.105469   1   1 1.0    0      134    134     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 17   1   8   8  0.771871  0.113091 0.0  0.884962 91.830842  0.884962  0.722941 1377.886719 1393.113281   3   3 1.0    0      135    137     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 17   1   9   9  0.607718  0.115223 0.0  0.722941 92.553783  0.722941  1.383387 1380.898438 1396.121094   2   2 1.0    0      138    139     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 17   1  10  10  0.773500  0.609887 0.0  1.383387 93.937170  1.383387  0.701643 1377.449219 1392.617188   3   3 1.0    0      140    142     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 17   1  11  11  0.607808  0.093835 0.0  0.701643 94.638813  0.701643  0.876858 1377.898438 1392.867188   2   2 1.0    0      143    144     2         2       39      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 17   1  12  12  0.766344  0.110514 0.0  0.876858 95.515670  0.876858  0.000000 1378.324219 1393.367188   3   3 1.0    0      145    147     2         2       41      42 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 18   3   1   1  1.233833  0.654675 0.0  1.888508  1.888508  1.888508  0.000000 1378.144531 1392.957031  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   2   1   1  1.759516  0.480730 0.0  2.240246  4.128754  4.128754  1.797807 1398.394531 1415.976562  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
 18   2   2   2  1.421751  0.376056 0.0  1.797807  5.926560  1.797807  0.000000 1410.730469 1425.429688  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.154701 1.154701 0.577350 0.577350  0.666613  0.666613            0            0
 18   1   1   1  4.456740  1.397306 0.0  5.854046  9.982799  9.982799  7.340470 1434.777344 1455.218750  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 18   1   2   2  4.055201  1.487462 0.0  5.542663 17.323269  7.340470  3.468151 1431.160156 1458.804688  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 18   1   3   3  2.865189  0.602962 0.0  3.468151 20.791420  3.468151  7.309434 1423.078125 1441.042969  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 18   1   4   4  5.084255  2.225179 0.0  7.309434 28.100854  7.309434  4.276848 1453.429688 1488.320312  18  18 1.0    0       43     60     4         4       13      16 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            0
 18   1   5   5  3.482152  0.794696 0.0  4.276848 32.377703  4.276848  2.064861 1441.996094 1467.441406  13  13 1.0    0       61     73     4         4       17      20 3.250000 3.250000 3.304038 3.304038 1.016627 1.016627 -0.052845 -0.052845            0            2
 18   1   6   6  1.243660  0.821201 0.0  2.064861 34.442563  2.064861  0.936537 1416.523438 1432.152344   5   5 1.0    0       74     78     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 18   1   7   7  0.755878  0.180659 0.0  0.936537 35.379100  0.936537  6.305380 1404.070312 1418.691406   3   3 1.0    0       79     81     3         3       25      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 18   1   8   8  4.806213  1.499167 0.0  6.305380 41.684480  6.305380  4.098377 1447.921875 1468.738281  17  17 1.0    0       82     98     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 18   1   9   9  3.420987  0.677389 0.0  4.098377 45.782856  4.098377  3.047096 1435.769531 1452.820312  13  13 1.0    0       99    111     3         3       31      33 4.333333 4.333333 5.773503 5.773503 1.332347 1.332347 -0.741304 -0.741304            0            0
 18   1  10  10  2.144317  0.902779 0.0  3.047096 48.829952  3.047096  6.494144 1418.226562 1435.324219   9   9 1.0    0      112    120     3         3       34      36 3.000000 3.000000 3.464102 3.464102 1.154701 1.154701 -0.361780 -0.361780            0            0
 18   1  11  11  5.083599  1.410545 0.0  6.494144 55.324096  6.494144  1.538812 1460.988281 1495.050781  18  18 1.0    0      121    138     4         4       37      40 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            1
 18   1  12  12  1.252360  0.286452 0.0  1.538812 56.862908  1.538812  0.000000 1417.652344 1435.859375   5   5 1.0    0      139    143     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 19   3   1   1  1.234607  0.669663 0.0  1.904271  1.904271  1.904271  0.000000 1403.171875 1417.921875  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   2   1   1  1.859263  0.565257 0.0  2.424520  4.328790  4.328790  1.747169 1423.863281 1440.875000  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
 19   2   2   2  1.325696  0.421473 0.0  1.747169  6.075959  1.747169  0.000000 1433.332031 1448.410156  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.875595 0.875595 0.460839 0.460839  0.726861  0.726861            0            0
 19   1   1   1  4.418132  1.257435 0.0  5.675567 10.004357 10.004357  7.315953 1456.867188 1477.300781  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 19   1   2   2  4.058123  1.510661 0.0  5.568784 17.320310  7.315953  1.242904 1452.554688 1480.851562  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 19   1   3   3  0.989697  0.253207 0.0  1.242904 18.563215  1.242904  5.291658 1422.214844 1438.800781   4   4 1.0    0       32     35     4         4        9      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   4   4  4.332322  0.959337 0.0  5.291658 23.854873  5.291658 10.154018 1459.199219 1481.574219  16  16 1.0    0       36     51     4         4       13      16 4.000000 4.000000 6.000000 6.000000 1.500000 1.500000 -0.403677 -0.403677            0            0
 19   1   5   5  7.128217  3.025801 0.0 10.154018 34.008891 10.154018  2.751961 1506.417969 1528.972656  24  24 1.0    0       52     75     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 19   1   6   6  1.728415  1.023546 0.0  2.751961 36.760852  2.751961  0.947626 1445.835938 1464.574219   7   7 1.0    0       76     82     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 19   1   7   7  0.758457  0.189169 0.0  0.947626 37.708478  0.947626  0.942345 1425.593750 1440.132812   3   3 1.0    0       83     85     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 19   1   8   8  0.761142  0.181203 0.0  0.942345 38.650823  0.942345  6.643127 1429.382812 1443.917969   3   3 1.0    0       86     88     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 19   1   9   9  4.783479  1.859649 0.0  6.643127 45.293950  6.643127  3.676206 1471.195312 1489.472656  17  17 1.0    0       89    105     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 19   1  10  10  2.642791  1.033416 0.0  3.676206 48.970156  3.676206  6.231441 1450.570312 1471.234375  10  10 1.0    0      106    115     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 19   1  11  11  4.737738  1.493703 0.0  6.231441 55.201598  6.231441  4.079986 1473.527344 1492.703125  17  17 1.0    0      116    132     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 19   1  12  12  3.443281  0.636705 0.0  4.079986 59.281584  4.079986  0.000000 1466.242188 1490.992188  13  13 1.0    0      133    145     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
 20   3   1   1  1.234771  0.811483 0.0  2.046253  2.046253  2.046253  0.000000 1427.578125 1442.304688  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   2   1   1  1.971939  0.635056 0.0  2.606995  4.653249  4.653249  1.586374 1448.457031 1465.230469  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.913570 2.913570 1.120604 1.120604  0.407427  0.407427            0            3
 20   2   2   2  1.243496  0.342878 0.0  1.586374  6.239623  1.586374  0.000000 1454.597656 1469.968750  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.788811 0.788811 0.438228 0.438228  0.747436  0.747436            0            0
 20   1   1   1  4.439431  1.392407 0.0  5.831837 10.485086 10.485086  7.177261 1480.589844 1501.023438  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 20   1   2   2  4.076057  1.514830 0.0  5.590887 17.662348  7.177261  3.459193 1477.984375 1505.292969  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 20   1   3   3  2.858266  0.600926 0.0  3.459193 21.121540  3.459193  1.538629 1467.906250 1486.804688  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 20   1   4   4  1.247084  0.291545 0.0  1.538629 22.660169  1.538629 11.394805 1450.390625 1465.621094   5   5 1.0    0       43     47     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 20   1   5   5  7.469675  3.925130 0.0 11.394805 34.054974 11.394805  2.512367 1537.406250 1573.816406  25  25 1.0    0       48     72     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 20   1   6   6  1.463913  1.048454 0.0  2.512367 36.567341  2.512367  1.213289 1472.226562 1487.957031   6   6 1.0    0       73     78     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 20   1   7   7  0.998622  0.214667 0.0  1.213289 37.780630  1.213289  0.938026 1448.761719 1463.312500   4   4 1.0    0       79     82     3         3       27      29 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 20   1   8   8  0.757762  0.180265 0.0  0.938026 38.718657  0.938026  6.414923 1448.640625 1463.253906   3   3 1.0    0       83     85     3         3       30      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 20   1   9   9  4.786534  1.628389 0.0  6.414923 45.133580  6.414923  6.494347 1490.523438 1509.628906  17  17 1.0    0       86    102     3         3       33      35 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 20   1  10  10  4.998626  1.495721 0.0  6.494347 51.627926  6.494347  5.577733 1492.968750 1511.488281  18  18 1.0    0      103    120     3         3       36      38 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 20   1  11  11  4.618383  0.959350 0.0  5.577733 57.205659  5.577733  1.155901 1489.078125 1510.558594  17  17 1.0    0      121    137     3         3       39      41 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            1
 20   1  12  12  0.975998  0.179903 0.0  1.155901 58.361561  1.155901  0.000000 1450.906250 1465.375000   4   4 1.0    0      138    141     3         3       42      44 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 21   3   1   1  1.238881  0.841933 0.0  2.080815  2.080815  2.080815  0.000000 1446.902344 1461.425781  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 21   2   1   1  1.853762  0.562522 0.0  2.416284  4.497099  4.497099  1.738561 1467.394531 1484.386719  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.838231 2.838231 1.135292 1.135292  0.415869  0.415869            0            2
 21   2   2   2  1.331480  0.407081 0.0  1.738561  6.235660  1.738561  0.000000 1475.121094 1489.996094  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.994429 0.994429 0.523384 0.523384  0.700181  0.700181            0            0
 21   1   1   1  4.431762  1.191441 0.0  5.623203 10.120302 10.120302  6.729606 1500.222656 1520.554688  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 21   1   2   2  4.055023  0.936021 0.0  4.991044 16.849908  6.729606  4.058520 1497.000000 1525.339844  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 21   1   3   3  2.862174  1.196345 0.0  4.058520 20.908427  4.058520  1.542262 1487.929688 1506.628906  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 21   1   4   4  1.251562  0.290700 0.0  1.542262 22.450689  1.542262 10.482160 1469.593750 1484.683594   5   5 1.0    0       43     47     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 21   1   5   5  7.086561  3.395599 0.0 10.482160 32.932850 10.482160  2.200560 1546.656250 1569.167969  24  24 1.0    0       48     71     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 21   1   6   6  1.733770  0.466790 0.0  2.200560 35.133410  2.200560  1.567509 1487.550781 1506.417969   7   7 1.0    0       72     78     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 21   1   7   7  0.757093  0.810416 0.0  1.567509 36.700918  1.567509  0.947678 1472.308594 1486.917969   3   3 1.0    0       79     81     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1   8   8  0.753958  0.193720 0.0  0.947678 37.648596  0.947678  6.178143 1472.546875 1487.035156   3   3 1.0    0       82     84     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 21   1   9   9  4.729672  1.448472 0.0  6.178143 43.826740  6.178143  3.110261 1513.269531 1532.058594  17  17 1.0    0       85    101     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 21   1  10  10  2.644832  0.465430 0.0  3.110261 46.937001  3.110261  6.351330 1492.199219 1512.609375  10  10 1.0    0      102    111     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 21   1  11  11  4.722801  1.628530 0.0  6.351330 53.288331  6.351330  4.717235 1515.285156 1534.078125  17  17 1.0    0      112    128     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 21   1  12  12  3.443720  1.273515 0.0  4.717235 58.005566  4.717235  0.000000 1506.179688 1530.691406  13  13 1.0    0      129    141     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
 22   3   1   1  1.237054  0.673822 0.0  1.910876  1.910876  1.910876  0.000000 1468.792969 1483.476562  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   2   1   1  2.184875  0.954656 0.0  3.139531  5.050408  5.050408  1.283286 1491.199219 1506.769531  28  28 1.0   28        1     28    10        10        1      10 2.800000 2.800000 2.699794 2.699794 0.964212 0.964212  0.431822  0.431822            0            2
 22   2   2   2  1.037663  0.245623 0.0  1.283286  6.333694  1.283286  0.000000 1502.332031 1518.625000  16  16 1.0   16       29     44    10        10       11      20 1.600000 1.600000 0.843274 0.843274 0.527046 0.527046  0.734410  0.734410            0            0
 22   1   1   1  4.421817  1.142003 0.0  5.563820 10.614227 10.614227  6.301631 1522.062500 1542.636719  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 22   1   2   2  4.084449  0.933896 0.0  5.018345 16.915858  6.301631  7.798650 1519.257812 1547.210938  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 22   1   3   3  5.693355  2.105295 0.0  7.798650 24.714508  7.798650 12.987765 1548.328125 1571.828125  20  20 1.0    0       32     51     5         5        9      13 4.000000 4.000000 3.741657 3.741657 0.935414 0.935414  0.032963  0.032963            0            0
 22   1   4   4  7.937734  5.050031 0.0 12.987765 37.702274 12.987765  1.583267 1589.464844 1626.839844  26  26 1.0    0       52     77     5         5       14      18 5.200000 5.200000 3.492850 3.492850 0.671702 0.671702  0.066452  0.066452            0            1
 22   1   5   5  1.221032  0.362235 0.0  1.583267 39.285541  1.583267 12.876299 1511.121094 1528.804688   5   5 1.0    0       78     82     5         5       19      23 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 22   1   6   6  7.894349  4.981950 0.0 12.876299 52.161840 12.876299  0.709518 1597.578125 1639.980469  26  26 1.0    0       83    108     5         5       24      28 5.200000 5.200000 3.492850 3.492850 0.671702 0.671702  0.066452  0.066452            0            0
 22   1   7   7  0.607912  0.101606 0.0  0.709518 52.871357  0.709518  1.521945 1488.937500 1503.570312   2   2 1.0    0      109    110     2         2       29      30 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 22   1   8   8  0.774086  0.747859 0.0  1.521945 54.393302  1.521945  6.418843 1490.238281 1504.871094   3   3 1.0    0      111    113     2         2       31      32 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 22   1   9   9  4.830753  1.588090 0.0  6.418843 60.812146  6.418843  3.419106 1538.714844 1560.113281  17  17 1.0    0      114    130     3         3       33      35 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 22   1  10  10  2.894271  0.524835 0.0  3.419106 64.231252  3.419106  1.224241 1522.898438 1543.484375  11  11 1.0    0      131    141     3         3       36      38 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            1
 22   1  11  11  1.004558  0.219683 0.0  1.224241 65.455493  1.224241  1.181270 1505.515625 1522.402344   4   4 1.0    0      142    145     3         3       39      41 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 22   1  12  12  0.994287  0.186982 0.0  1.181270 66.636762  1.181270  0.000000 1501.546875 1518.253906   4   4 1.0    0      146    149     3         3       42      44 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 23   3   1   1  1.234468  0.733035 0.0  1.967502  1.967502  1.967502  0.000000 1492.347656 1506.968750  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   2   1   1  1.774594  0.515411 0.0  2.290005  4.257507  4.257507  1.778487 1512.324219 1529.746094  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.796824 2.796824 1.165343 1.165343  0.420580  0.420580            0            3
 23   2   2   2  1.424930  0.353557 0.0  1.778487  6.035994  1.778487  0.000000 1521.226562 1539.835938  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.054093 1.054093 0.527046 0.527046  0.687380  0.687380            0            0
 23   1   1   1  4.428788  1.977209 0.0  6.405998 10.663505 10.663505  6.839781 1546.257812 1566.722656  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 23   1   2   2  4.074699  0.986595 0.0  5.061294 17.503285  6.839781  7.059039 1543.046875 1571.179688  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 23   1   3   3  5.331278  1.727761 0.0  7.059039 24.562324  7.059039  6.828426 1565.554688 1602.207031  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 23   1   4   4  5.041787  1.786638 0.0  6.828426 31.390750  6.828426  4.280268 1557.585938 1572.972656  18  18 1.0    0       51     68     4         4       13      16 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            0
 23   1   5   5  3.497838  0.782430 0.0  4.280268 35.671019  4.280268  2.209156 1554.140625 1579.371094  13  13 1.0    0       69     81     4         4       17      20 3.250000 3.250000 3.304038 3.304038 1.016627 1.016627 -0.052845 -0.052845            0            2
 23   1   6   6  1.238526  0.970630 0.0  2.209156 37.880175  2.209156  0.954119 1530.562500 1546.246094   5   5 1.0    0       82     86     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 23   1   7   7  0.755918  0.198200 0.0  0.954119 38.834293  0.954119  6.312771 1518.078125 1532.804688   3   3 1.0    0       87     89     3         3       25      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 23   1   8   8  4.831057  1.481714 0.0  6.312771 45.147065  6.312771  3.360543 1558.410156 1579.070312  17  17 1.0    0       90    106     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 23   1   9   9  2.836804  0.523739 0.0  3.360543 48.507608  3.360543  3.638968 1540.671875 1562.097656  11  11 1.0    0      107    117     3         3       31      33 3.666667 3.666667 3.785939 3.785939 1.032529 1.032529 -0.425145 -0.425145            0            0
 23   1  10  10  2.986976  0.651992 0.0  3.638968 52.146576  3.638968  7.013316 1541.843750 1562.859375  11  11 1.0    0      118    128     3         3       34      36 3.666667 3.666667 3.055050 3.055050 0.833196 0.833196 -0.274301 -0.274301            0            0
 23   1  11  11  5.063606  1.949711 0.0  7.013316 59.159892  7.013316  1.523162 1570.964844 1605.003906  18  18 1.0    0      129    146     4         4       37      40 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            1
 23   1  12  12  1.261153  0.262010 0.0  1.523162 60.683055  1.523162  0.000000 1527.667969 1542.914062   5   5 1.0    0      147    151     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 24   3   1   1  1.234770  0.926927 0.0  2.161698  2.161698  2.161698  0.000000 1513.257812 1528.113281  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   2   1   1  2.560445  1.531348 0.0  4.091793  6.253490  6.253490  0.789183 1543.843750 1567.777344  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.685351 2.685351 0.866242 0.866242  0.433521  0.433521            0            2
 24   2   2   2  0.603716  0.185467 0.0  0.789183  7.042674  0.789183  0.000000 1572.910156 1589.832031  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            0
 24   1   1   1  4.749152  1.641320 0.0  6.390472 12.643962 12.643962 10.834387 1578.273438 1607.750000  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 24   1   2   2  7.139436  2.905767 0.0 10.045204 23.478349 10.834387  4.346734 1612.734375 1654.210938  24  24 1.0    0       18     41     5         5        6      10 4.800000 4.800000 5.310367 5.310367 1.106327 1.106327 -0.144619 -0.144619            0            0
 24   1   3   3  3.508691  0.838042 0.0  4.346734 27.825082  4.346734 10.763276 1567.648438 1587.667969  13  13 1.0    0       42     54     5         5       11      15 2.600000 2.600000 2.607681 2.607681 1.002954 1.002954  0.202787  0.202787            0            0
 24   1   4   4  7.373266  3.390010 0.0 10.763276 38.588359 10.763276  7.798945 1626.722656 1663.230469  25  25 1.0    0       55     79     5         5       16      20 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 24   1   5   5  5.365533  2.433412 0.0  7.798945 46.387303  7.798945 44.640334 1604.441406 1628.101562  19  19 1.0    0       80     98     5         5       21      25 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 24   1   6   6 11.546507 33.093827 0.0 44.640334 91.027637 44.640334  0.518731 1715.000000 1757.652344  35  35 1.0    0       99    133     6         6       26      31 5.833333 5.833333 3.920034 3.920034 0.672006 0.672006  0.110754  0.110754            0            1
 24   1   7   7  0.447690  0.071041 0.0  0.518731 91.546368  0.518731  1.590806 1565.929688 1582.589844   1   1 1.0    0      134    134     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 24   1   8   8  0.776674  0.814132 0.0  1.590806 93.137174  1.590806  0.722767 1568.648438 1585.347656   3   3 1.0    0      135    137     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 24   1   9   9  0.607850  0.114917 0.0  0.722767 93.859941  0.722767  0.878237 1572.656250 1589.101562   2   2 1.0    0      138    139     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 24   1  10  10  0.769516  0.108721 0.0  0.878237 94.738178  0.878237  0.698012 1569.441406 1585.847656   3   3 1.0    0      140    142     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 24   1  11  11  0.604831  0.093181 0.0  0.698012 95.436190  0.698012  0.877542 1569.941406 1586.347656   2   2 1.0    0      143    144     2         2       39      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 24   1  12  12  0.766182  0.111359 0.0  0.877542 96.313731  0.877542  0.000000 1570.246094 1586.847656   3   3 1.0    0      145    147     2         2       41      42 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 25   3   1   1  1.234996  0.822995 0.0  2.057990  2.057990  2.057990  0.000000 1570.195312 1586.437500  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 25   2   1   1  2.076490  0.725739 0.0  2.802228  4.860219  4.860219  1.179268 1592.660156 1610.039062  27  27 1.0   27        1     27    10        10        1      10 2.700000 2.700000 2.710064 2.710064 1.003727 1.003727  0.430619  0.430619            0            2
 25   2   2   2  0.950866  0.228401 0.0  1.179268  6.039486  1.179268  0.000000 1603.269531 1621.203125  15  15 1.0   15       28     42    10        10       11      20 1.500000 1.500000 0.849837 0.849837 0.566558 0.566558  0.732867  0.732867            0            0
 25   1   1   1  4.430686  1.209346 0.0  5.640032 10.500251 10.500251  6.953108 1631.437500 1653.785156  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 25   1   2   2  4.078625  1.695215 0.0  5.773840 17.453358  6.953108  3.488712 1627.097656 1656.667969  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 25   1   3   3  2.868855  0.619857 0.0  3.488712 20.942070  3.488712  4.128116 1615.320312 1634.312500  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 25   1   4   4  3.104069  1.024046 0.0  4.128116 25.070186  4.128116  7.234771 1623.570312 1647.707031  12  12 1.0    0       43     54     5         5       13      17 2.400000 2.400000 1.949359 1.949359 0.812233 0.812233  0.327972  0.327972            0            0
 25   1   5   5  5.703197  1.531574 0.0  7.234771 32.304957  7.234771  7.845688 1657.707031 1680.628906  20  20 1.0    0       55     74     5         5       18      22 4.000000 4.000000 3.741657 3.741657 0.935414 0.935414  0.032963  0.032963            0            1
 25   1   6   6  5.414538  2.431150 0.0  7.845688 40.150646  7.845688  3.544702 1660.691406 1685.558594  19  19 1.0    0       75     93     5         5       23      27 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            1
 25   1   7   7  2.435409  1.109293 0.0  3.544702 43.695348  3.544702  2.380569 1610.968750 1626.957031   9   9 1.0    0       94    102     2         2       28      29 4.500000 4.500000 3.535534 3.535534 0.785674 0.785674 -1.181272 -1.181272            0            0
 25   1   8   8  2.037832  0.342737 0.0  2.380569 46.075916  2.380569  3.226577 1609.101562 1627.328125   8   8 1.0    0      103    110     2         2       30      31 4.000000 4.000000 4.242641 4.242641 1.060660 1.060660 -1.390294 -1.390294            0            0
 25   1   9   9  2.698398  0.528179 0.0  3.226577 49.302493  3.226577  3.421964 1616.632812 1638.019531  10  10 1.0    0      111    120     2         2       32      33 5.000000 5.000000 5.656854 5.656854 1.131371 1.131371 -1.734841 -1.734841            0            0
 25   1  10  10  2.881074  0.540890 0.0  3.421964 52.724457  3.421964  1.228121 1627.960938 1649.917969  11  11 1.0    0      121    131     3         3       34      36 3.666667 3.666667 3.785939 3.785939 1.032529 1.032529 -0.425145 -0.425145            0            1
 25   1  11  11  1.006449  0.221672 0.0  1.228121 53.952577  1.228121  1.191052 1610.730469 1628.832031   4   4 1.0    0      132    135     3         3       37      39 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 25   1  12  12  1.002056  0.188996 0.0  1.191052 55.143630  1.191052  0.000000 1607.078125 1624.937500   4   4 1.0    0      136    139     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 26   3   1   1  1.236867  0.866106 0.0  2.102974  2.102974  2.102974  0.000000 1597.597656 1613.410156  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   2   1   1  1.773887  0.491271 0.0  2.265158  4.368132  4.368132  2.518790 1617.527344 1636.203125  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
 26   2   2   2  1.418897  1.099893 0.0  2.518790  6.886922  2.518790  0.000000 1623.710938 1645.781250  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.333333 1.333333 0.666667 0.666667  0.632023  0.632023            0            0
 26   1   1   1  4.431807  2.050981 0.0  6.482788 10.850920 10.850920  7.591847 1649.449219 1674.035156  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 26   1   2   2  4.069642  1.003415 0.0  5.073056 18.442767  7.591847  3.467349 1646.113281 1677.894531  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 26   1   3   3  2.863224  0.604125 0.0  3.467349 21.910116  3.467349  6.784104 1635.015625 1656.515625  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 26   1   4   4  4.993995  1.790110 0.0  6.784104 28.694221  6.784104  4.592605 1664.808594 1703.539062  18  18 1.0    0       43     60     4         4       13      16 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            0
 26   1   5   5  3.798944  0.793661 0.0  4.592605 33.286826  4.592605  1.293117 1649.796875 1677.828125  14  14 1.0    0       61     74     4         4       17      20 3.500000 3.500000 4.358899 4.358899 1.245400 1.245400 -0.210968 -0.210968            0            1
 26   1   6   6  1.010900  0.282217 0.0  1.293117 34.579943  1.293117  0.953333 1631.027344 1650.773438   4   4 1.0    0       75     78     4         4       21      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 26   1   7   7  0.754178  0.199155 0.0  0.953333 35.533276  0.953333  6.570240 1620.617188 1638.500000   3   3 1.0    0       79     81     3         3       25      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 26   1   8   8  4.798720  1.771520 0.0  6.570240 42.103516  6.570240  3.725506 1661.105469 1685.027344  17  17 1.0    0       82     98     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 26   1   9   9  3.148423  0.577083 0.0  3.725506 45.829022  3.725506  3.184305 1645.968750 1668.355469  12  12 1.0    0       99    110     3         3       31      33 4.000000 4.000000 5.196152 5.196152 1.299038 1.299038 -0.660211 -0.660211            0            0
 26   1  10  10  2.581514  0.602791 0.0  3.184305 49.013328  3.184305  6.451503 1640.937500 1666.332031  10  10 1.0    0      111    120     3         3       34      36 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 26   1  11  11  5.076780  1.374723 0.0  6.451503 55.464830  6.451503  1.543001 1675.375000 1712.777344  18  18 1.0    0      121    138     4         4       37      40 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            1
 26   1  12  12  1.255309  0.287692 0.0  1.543001 57.007832  1.543001  0.000000 1632.460938 1653.609375   5   5 1.0    0      139    143     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 27   3   1   1  1.238803  1.428090 0.0  2.666894  2.666894  2.666894  0.000000 1617.968750 1635.925781  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   2   1   1  1.971906  0.723450 0.0  2.695356  5.362249  5.362249  1.568920 1639.289062 1658.812500  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.913570 2.913570 1.120604 1.120604  0.407427  0.407427            0            3
 27   2   2   2  1.225533  0.343387 0.0  1.568920  6.931169  1.568920  0.000000 1647.121094 1664.699219  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 1.032796 1.032796 0.573775 0.573775  0.691906  0.691906            0            0
 27   1   1   1  4.407878  1.151339 0.0  5.559218 10.921467 10.921467  6.583122 1672.984375 1696.523438  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 27   1   2   2  4.070268  0.943934 0.0  5.014202 17.504589  6.583122  1.237998 1669.218750 1700.132812  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 27   1   3   3  0.988455  0.249543 0.0  1.237998 18.742587  1.237998  5.337242 1638.648438 1658.027344   4   4 1.0    0       32     35     4         4        9      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   4   4  4.395093  0.942149 0.0  5.337242 24.079829  5.337242 12.401296 1675.808594 1699.343750  16  16 1.0    0       36     51     4         4       13      16 4.000000 4.000000 6.000000 6.000000 1.500000 1.500000 -0.403677 -0.403677            0            0
 27   1   5   5  7.493075  4.908222 0.0 12.401296 36.481126 12.401296  2.663321 1725.730469 1763.210938  25  25 1.0    0       52     76     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 27   1   6   6  1.460395  1.202925 0.0  2.663321 39.144446  2.663321  1.118549 1661.640625 1679.433594   6   6 1.0    0       77     82     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 27   1   7   7  0.923992  0.194558 0.0  1.118549 40.262996  1.118549  0.933826 1641.410156 1658.531250   4   4 1.0    0       83     86     3         3       27      29 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 27   1   8   8  0.754318  0.179507 0.0  0.933826 41.196821  0.933826  6.292296 1641.585938 1658.484375   3   3 1.0    0       87     89     3         3       30      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 27   1   9   9  4.801741  1.490555 0.0  6.292296 47.489117  6.292296  7.197418 1685.234375 1706.550781  17  17 1.0    0       90    106     3         3       33      35 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 27   1  10  10  5.019113  2.178305 0.0  7.197418 54.686534  7.197418  6.073826 1687.910156 1708.625000  18  18 1.0    0      107    124     3         3       36      38 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 27   1  11  11  5.042053  1.031773 0.0  6.073826 60.760360  6.073826  1.675185 1692.429688 1712.851562  18  18 1.0    0      125    142     3         3       39      41 6.000000 6.000000 3.605551 3.605551 0.600925 0.600925 -0.390174 -0.390174            0            0
 27   1  12  12  0.751412  0.923773 0.0  1.675185 62.435545  1.675185  0.000000 1646.429688 1663.464844   3   3 1.0    0      143    145     3         3       42      44 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   3   1   1  1.237828  0.881036 0.0  2.118864  2.118864  2.118864  0.000000 1642.542969 1659.566406  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   2   1   1  2.528158  1.447049 0.0  3.975207  6.094072  6.094072  0.793659 1673.285156 1699.230469  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.726414 2.726414 0.879488 0.879488  0.428709  0.428709            0            2
 28   2   2   2  0.603707  0.189951 0.0  0.793659  6.887730  0.793659  0.000000 1675.984375 1694.671875  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            0
 28   1   1   1  4.739092  1.428030 0.0  6.167122 12.261194 12.261194  6.445993 1704.625000 1735.152344  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 28   1   2   2  4.397870  1.254465 0.0  5.652335 18.707187  6.445993  4.345010 1700.765625 1732.335938  16  16 1.0    0       18     33     5         5        6      10 3.200000 3.200000 4.919350 4.919350 1.537297 1.537297 -0.104874 -0.104874            0            0
 28   1   3   3  3.489840  0.855170 0.0  4.345010 23.052197  4.345010 11.275279 1693.617188 1715.433594  13  13 1.0    0       34     46     5         5       11      15 2.600000 2.600000 2.607681 2.607681 1.002954 1.002954  0.202787  0.202787            0            0
 28   1   4   4  7.406652  3.868627 0.0 11.275279 34.327476 11.275279  8.221020 1745.671875 1785.066406  25  25 1.0    0       47     71     5         5       16      20 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 28   1   5   5  5.322483  2.898537 0.0  8.221020 42.548496  8.221020 41.987874 1727.128906 1753.015625  19  19 1.0    0       72     90     5         5       21      25 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 28   1   6   6 11.517649 30.470225 0.0 41.987874 84.536371 41.987874  0.521392 1819.367188 1865.480469  35  35 1.0    0       91    125     6         6       26      31 5.833333 5.833333 3.920034 3.920034 0.672006 0.672006  0.110754  0.110754            0            1
 28   1   7   7  0.448938  0.072454 0.0  0.521392 85.057763  0.521392  0.885445 1667.527344 1685.222656   1   1 1.0    0      126    126     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 28   1   8   8  0.770185  0.115260 0.0  0.885445 85.943207  0.885445  0.724432 1670.203125 1687.730469   3   3 1.0    0      127    129     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   1   9   9  0.607584  0.116848 0.0  0.724432 86.667639  0.724432  0.892163 1674.218750 1691.738281   2   2 1.0    0      130    131     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 28   1  10  10  0.772001  0.120162 0.0  0.892163 87.559802  0.892163  0.883714 1672.683594 1690.164062   3   3 1.0    0      132    134     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 28   1  11  11  0.770524  0.113191 0.0  0.883714 88.443517  0.883714  1.517693 1671.503906 1688.980469   3   3 1.0    0      135    137     2         2       39      40 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 28   1  12  12  0.610435  0.907259 0.0  1.517693 89.961210  1.517693  0.000000 1671.796875 1689.230469   2   2 1.0    0      138    139     2         2       41      42 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   3   1   1  1.239316  0.889210 0.0  2.128526  2.128526  2.128526  0.000000 1671.562500 1688.820312  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   2   1   1  1.998294  0.733750 0.0  2.732044  4.860571  4.860571  1.528653 1693.312500 1712.238281  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.756810 2.756810 1.060311 1.060311  0.425181  0.425181            0            3
 29   2   2   2  1.234687  0.293966 0.0  1.528653  6.389224  1.528653  0.000000 1706.753906 1724.433594  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 1.135292 1.135292 0.630718 0.630718  0.670543  0.670543            0            0
 29   1   1   1  4.434078  1.372185 0.0  5.806263 10.666834 10.666834  6.601328 1731.378906 1754.808594  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 29   1   2   2  4.068462  1.004213 0.0  5.072675 17.268162  6.601328  3.940550 1726.132812 1756.871094  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 29   1   3   3  3.171027  0.769523 0.0  3.940550 21.208712  3.940550  5.187293 1720.402344 1739.937500  12  12 1.0    0       32     43     4         4        9      12 3.000000 3.000000 4.000000 4.000000 1.333333 1.333333 -0.160964 -0.160964            0            0
 29   1   4   4  4.306945  0.880348 0.0  5.187293 26.396006  5.187293 12.182145 1732.078125 1757.187500  16  16 1.0    0       44     59     4         4       13      16 4.000000 4.000000 6.000000 6.000000 1.500000 1.500000 -0.403677 -0.403677            0            0
 29   1   5   5  7.556048  4.626097 0.0 12.182145 38.578150 12.182145  2.690294 1789.867188 1828.371094  25  25 1.0    0       60     84     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 29   1   6   6  1.452553  1.237742 0.0  2.690294 41.268444  2.690294  0.937412 1716.894531 1735.492188   6   6 1.0    0       85     90     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 29   1   7   7  0.755282  0.182129 0.0  0.937412 42.205856  0.937412  6.440613 1701.160156 1718.105469   3   3 1.0    0       91     93     3         3       27      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 29   1   8   8  4.798547  1.642066 0.0  6.440613 48.646469  6.440613  7.027453 1745.921875 1769.535156  17  17 1.0    0       94    110     3         3       30      32 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 29   1   9   9  5.038770  1.988683 0.0  7.027453 55.673922  7.027453  3.491065 1751.156250 1774.429688  18  18 1.0    0      111    128     3         3       33      35 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 29   1  10  10  2.925309  0.565756 0.0  3.491065 59.164987  3.491065  4.456891 1728.925781 1751.734375  11  11 1.0    0      129    139     3         3       36      38 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
 29   1  11  11  3.753379  0.703512 0.0  4.456891 63.621878  4.456891  1.177381 1738.488281 1768.023438  14  14 1.0    0      140    153     3         3       39      41 4.666667 4.666667 5.507571 5.507571 1.180194 1.180194 -0.704847 -0.704847            0            2
 29   1  12  12  1.000482  0.176900 0.0  1.177381 64.799259  1.177381  0.000000 1707.074219 1724.792969   4   4 1.0    0      154    157     3         3       42      44 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 30   3   1   1  1.237024  0.666671 0.0  1.903695  1.903695  1.903695  0.000000 1701.703125 1718.878906  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 30   2   1   1  2.468931  1.550706 0.0  4.019638  5.923332  5.923332  1.910192 1731.082031 1757.582031  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.666667 2.666667 0.888889 0.888889  0.435729  0.435729            0            2
 30   2   2   2  0.852482  1.057710 0.0  1.910192  7.833524  1.910192  0.000000 1729.195312 1748.656250  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.699206 0.699206 0.499433 0.499433  0.769754  0.769754            0            0
 30   1   1   1  4.764653  1.450314 0.0  6.214966 12.138299 12.138299 12.270820 1768.023438 1800.054688  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 30   1   2   2  7.102424  3.258204 0.0 10.360629 24.409119 12.270820  4.314105 1805.433594 1851.980469  24  24 1.0    0       18     41     5         5        6      10 4.800000 4.800000 5.310367 5.310367 1.106327 1.106327 -0.144619 -0.144619            0            0
 30   1   3   3  3.504522  0.809583 0.0  4.314105 28.723224  4.314105  7.281128 1753.421875 1775.363281  13  13 1.0    0       42     54     5         5       11      15 2.600000 2.600000 3.049590 3.049590 1.172919 1.172919  0.130991  0.130991            0            0
 30   1   4   4  5.303080  1.978048 0.0  7.281128 36.004352  7.281128  4.992141 1780.042969 1807.816406  19  19 1.0    0       55     73     5         5       16      20 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 30   1   5   5  4.058431  0.933710 0.0  4.992141 40.996493  4.992141 12.325746 1758.945312 1778.046875  15  15 1.0    0       74     88     5         5       21      25 3.000000 3.000000 4.472136 4.472136 1.490712 1.490712 -0.056064 -0.056064            0            2
 30   1   6   6  7.928253  4.397493 0.0 12.325746 53.322239 12.325746  2.338427 1827.644531 1867.347656  26  26 1.0    0       89    114     5         5       26      30 5.200000 5.200000 3.492850 3.492850 0.671702 0.671702  0.066452  0.066452            0            0
 30   1   7   7  2.006589  0.331838 0.0  2.338427 55.660666  2.338427  3.023594 1732.406250 1751.511719   8   8 1.0    0      115    122     2         2       31      32 4.000000 4.000000 4.242641 4.242641 1.060660 1.060660 -1.390294 -1.390294            0            0
 30   1   8   8  2.598076  0.425518 0.0  3.023594 58.684260  3.023594  3.298201 1736.035156 1757.277344  10  10 1.0    0      123    132     2         2       33      34 5.000000 5.000000 5.656854 5.656854 1.131371 1.131371 -1.734841 -1.734841            0            0
 30   1   9   9  2.849122  0.449079 0.0  3.298201 61.982461  3.298201  0.901671 1745.343750 1765.976562  11  11 1.0    0      133    143     2         2       35      36 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            1
 30   1  10  10  0.771258  0.130413 0.0  0.901671 62.884133  0.901671  0.936405 1726.914062 1743.707031   3   3 1.0    0      144    146     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 30   1  11  11  0.758247  0.178158 0.0  0.936405 63.820538  0.936405  1.195203 1729.917969 1746.707031   3   3 1.0    0      147    149     3         3       39      41 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 30   1  12  12  1.008770  0.186434 0.0  1.195203 65.015741  1.195203  0.000000 1733.292969 1752.128906   4   4 1.0    0      150    153     3         3       42      44 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 31   3   1   1  1.236281  0.774089 0.0  2.010371  2.010371  2.010371  0.000000 1723.882812 1740.589844  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   2   1   1  1.856651  1.424650 0.0  3.281301  5.291672  5.291672  1.745401 1743.792969 1762.796875  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
 31   2   2   2  1.330918  0.414483 0.0  1.745401  7.037073  1.745401  0.000000 1752.816406 1769.890625  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.737865 0.737865 0.388350 0.388350  0.759984  0.759984            0            0
 31   1   1   1  4.412333  1.201203 0.0  5.613536 10.905208 10.905208  6.751270 1780.085938 1802.472656  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 31   1   2   2  4.053946  0.951923 0.0  5.005869 17.656478  6.751270  3.441426 1775.296875 1806.039062  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 31   1   3   3  2.847138  0.594287 0.0  3.441426 21.097904  3.441426  1.542732 1765.277344 1785.371094  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 31   1   4   4  1.249154  0.293578 0.0  1.542732 22.640636  1.542732 10.644355 1747.976562 1765.406250   5   5 1.0    0       43     47     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 31   1   5   5  7.147032  3.497323 0.0 10.644355 33.284991 10.644355  2.208638 1830.066406 1855.925781  24  24 1.0    0       48     71     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 31   1   6   6  1.725352  0.483286 0.0  2.208638 35.493629  2.208638  1.828104 1768.664062 1789.820312   7   7 1.0    0       72     78     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 31   1   7   7  0.756626  1.071478 0.0  1.828104 37.321733  1.828104  0.941099 1749.863281 1766.812500   3   3 1.0    0       79     81     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 31   1   8   8  0.759493  0.181606 0.0  0.941099 38.262832  0.941099  6.330087 1750.058594 1766.835938   3   3 1.0    0       82     84     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 31   1   9   9  4.771847  1.558240 0.0  6.330087 44.592920  6.330087  3.133673 1790.859375 1812.421875  17  17 1.0    0       85    101     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 31   1  10  10  2.651285  0.482388 0.0  3.133673 47.726592  3.133673  6.364690 1769.531250 1792.699219  10  10 1.0    0      102    111     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 31   1  11  11  4.751711  1.612979 0.0  6.364690 54.091283  6.364690  4.086464 1790.773438 1811.246094  17  17 1.0    0      112    128     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 31   1  12  12  3.443135  0.643329 0.0  4.086464 58.177746  4.086464  0.000000 1782.851562 1809.410156  13  13 1.0    0      129    141     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
 32   3   1   1  1.233978  0.684528 0.0  1.918506  1.918506  1.918506  0.000000 1745.382812 1762.195312  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 32   2   1   1  1.975821  0.750778 0.0  2.726599  4.645105  4.645105  1.582188 1766.304688 1784.843750  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.913570 2.913570 1.120604 1.120604  0.407427  0.407427            0            3
 32   2   2   2  1.234804  0.347385 0.0  1.582188  6.227293  1.582188  0.000000 1773.718750 1791.125000  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            0
 32   1   1   1  4.431968  2.114728 0.0  6.546696 11.191801 11.191801  6.702384 1799.269531 1821.804688  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 32   1   2   2  4.084990  1.035206 0.0  5.120196 17.894185  6.702384  3.460790 1795.636719 1825.664062  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 32   1   3   3  2.857484  0.603306 0.0  3.460790 21.354975  3.460790  1.533429 1787.097656 1807.203125  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 32   1   4   4  1.239513  0.293916 0.0  1.533429 22.888405  1.533429 11.747272 1769.699219 1787.167969   5   5 1.0    0       43     47     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 32   1   5   5  7.456147  4.291125 0.0 11.747272 34.635676 11.747272  1.876010 1862.617188 1900.746094  25  25 1.0    0       48     72     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 32   1   6   6  1.460859  0.415151 0.0  1.876010 36.511687  1.876010  2.043091 1784.550781 1802.132812   6   6 1.0    0       73     78     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 32   1   7   7  0.931685  1.111407 0.0  2.043091 38.554778  2.043091  0.953350 1771.582031 1788.308594   4   4 1.0    0       79     82     3         3       27      29 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 32   1   8   8  0.758072  0.195278 0.0  0.953350 39.508128  0.953350  6.661752 1771.699219 1788.492188   3   3 1.0    0       83     85     3         3       30      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 32   1   9   9  4.803655  1.858097 0.0  6.661752 46.169880  6.661752  7.237935 1812.957031 1834.257812  17  17 1.0    0       86    102     3         3       33      35 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 32   1  10  10  5.013317  2.224618 0.0  7.237935 53.407815  7.237935  3.487441 1815.117188 1835.828125  18  18 1.0    0      103    120     3         3       36      38 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 32   1  11  11  2.922629  0.564812 0.0  3.487441 56.895255  3.487441  4.379295 1792.039062 1812.609375  11  11 1.0    0      121    131     3         3       39      41 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
 32   1  12  12  3.731970  0.647324 0.0  4.379295 61.274550  4.379295  0.000000 1804.277344 1831.632812  14  14 1.0    0      132    145     3         3       42      44 4.666667 4.666667 6.350853 6.350853 1.360897 1.360897 -0.815760 -0.815760            0            0
 33   3   1   1  1.237846  0.735240 0.0  1.973086  1.973086  1.973086  0.000000 1768.750000 1785.597656  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   2   1   1  1.971945  0.712889 0.0  2.684834  4.657920  4.657920  1.529746 1789.753906 1808.484375  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.716207 2.716207 1.044695 1.044695  0.429900  0.429900            0            3
 33   2   2   2  1.230933  0.298814 0.0  1.529746  6.187666  1.529746  0.000000 1797.925781 1815.378906  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            0
 33   1   1   1  4.444637  2.188962 0.0  6.633599 11.291519 11.291519  6.592001 1821.972656 1844.496094  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 33   1   2   2  4.076561  0.985694 0.0  5.062255 17.883521  6.592001  6.723608 1818.988281 1849.324219  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 33   1   3   3  5.278651  1.444958 0.0  6.723608 24.607129  6.723608  1.532251 1841.273438 1880.546875  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 33   1   4   4  1.240059  0.292192 0.0  1.532251 26.139380  1.532251 10.595901 1790.375000 1807.925781   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 33   1   5   5  7.446738  3.149162 0.0 10.595901 36.735281 10.595901  1.923784 1881.781250 1921.093750  25  25 1.0    0       56     80     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 33   1   6   6  1.475219  0.448565 0.0  1.923784 38.659065  1.923784  0.928449 1812.980469 1830.648438   6   6 1.0    0       81     86     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 33   1   7   7  0.757336  0.171113 0.0  0.928449 39.587514  0.928449  7.381594 1791.816406 1808.671875   3   3 1.0    0       87     89     3         3       27      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 33   1   8   8  4.810312  2.571282 0.0  7.381594 46.969108  7.381594  7.234661 1834.976562 1858.351562  17  17 1.0    0       90    106     3         3       30      32 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 33   1   9   9  5.042892  2.191769 0.0  7.234661 54.203769  7.234661  3.574613 1838.421875 1861.410156  18  18 1.0    0      107    124     3         3       33      35 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 33   1  10  10  2.958975  0.615638 0.0  3.574613 57.778382  3.574613  4.069373 1820.546875 1842.652344  11  11 1.0    0      125    135     3         3       36      38 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
 33   1  11  11  3.446338  0.623034 0.0  4.069373 61.847754  4.069373  1.478095 1826.199219 1844.738281  13  13 1.0    0      136    148     3         3       39      41 4.333333 4.333333 5.773503 5.773503 1.332347 1.332347 -0.741304 -0.741304            0            1
 33   1  12  12  1.256658  0.221437 0.0  1.478095 63.325850  1.478095  0.000000 1801.859375 1819.410156   5   5 1.0    0      149    153     3         3       42      44 1.666667 1.666667 1.154701 1.154701 0.692820 0.692820  0.301253  0.301253            0            0
 34   3   1   1  1.237341  0.811799 0.0  2.049139  2.049139  2.049139  0.000000 1791.179688 1807.925781  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   2   1   1  1.968801  0.640537 0.0  2.609338  4.658477  4.658477  1.534506 1812.378906 1831.078125  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.796824 2.796824 1.075701 1.075701  0.420580  0.420580            0            3
 34   2   2   2  1.234957  0.299548 0.0  1.534506  6.192983  1.534506  0.000000 1818.785156 1836.402344  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            0
 34   1   1   1  4.446286  1.226049 0.0  5.672335 10.330812 10.330812  6.551468 1846.570312 1869.253906  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 34   1   2   2  4.057819  0.959144 0.0  5.016963 16.882281  6.551468  7.727089 1842.523438 1872.839844  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 34   1   3   3  5.320063  2.407026 0.0  7.727089 24.609369  7.727089  1.540372 1865.160156 1902.804688  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 34   1   4   4  1.250376  0.289996 0.0  1.540372 26.149741  1.540372 12.338623 1814.242188 1831.613281   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 34   1   5   5  7.523138  4.815485 0.0 12.338623 38.488364 12.338623  1.880261 1907.820312 1947.214844  25  25 1.0    0       56     80     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 34   1   6   6  1.466984  0.413278 0.0  1.880261 40.368626  1.880261  0.938384 1830.523438 1849.250000   6   6 1.0    0       81     86     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 34   1   7   7  0.757225  0.181159 0.0  0.938384 41.307009  0.938384  6.190063 1812.960938 1829.828125   3   3 1.0    0       87     89     3         3       27      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 34   1   8   8  4.782247  1.407816 0.0  6.190063 47.497072  6.190063  6.802875 1855.933594 1879.781250  17  17 1.0    0       90    106     3         3       30      32 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 34   1   9   9  5.033220  1.769655 0.0  6.802875 54.299947  6.802875  3.498570 1860.500000 1883.804688  18  18 1.0    0      107    124     3         3       33      35 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 34   1  10  10  2.925833  0.572737 0.0  3.498570 57.798517  3.498570  5.050943 1840.832031 1863.230469  11  11 1.0    0      125    135     3         3       36      38 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
 34   1  11  11  3.457073  1.593870 0.0  5.050943 62.849460  5.050943  1.480234 1848.320312 1866.867188  13  13 1.0    0      136    148     3         3       39      41 4.333333 4.333333 5.773503 5.773503 1.332347 1.332347 -0.741304 -0.741304            0            1
 34   1  12  12  1.256646  0.223588 0.0  1.480234 64.329694  1.480234  0.000000 1823.746094 1841.542969   5   5 1.0    0      149    153     3         3       42      44 1.666667 1.666667 0.577350 0.577350 0.346410 0.346410  0.585162  0.585162            0            0
 35   3   1   1  1.233210  0.771500 0.0  2.004710  2.004710  2.004710  0.000000 1813.988281 1830.750000  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 35   2   1   1  1.875995  0.716672 0.0  2.592667  4.597377  4.597377  1.768851 1834.847656 1853.968750  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
 35   2   2   2  1.326439  0.442412 0.0  1.768851  6.366228  1.768851  0.000000 1842.472656 1859.792969  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 1.370320 1.370320 0.721221 0.721221  0.625193  0.625193            0            0
 35   1   1   1  4.433942  1.282053 0.0  5.715995 10.313372 10.313372  6.900015 1868.328125 1891.378906  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 35   1   2   2  4.058782  1.072382 0.0  5.131164 17.213387  6.900015  6.821741 1863.507812 1894.035156  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 35   1   3   3  5.323400  1.498341 0.0  6.821741 24.035128  6.821741  1.535901 1884.984375 1923.507812  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 35   1   4   4  1.242528  0.293373 0.0  1.535901 25.571029  1.535901 10.372235 1836.738281 1854.195312   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 35   1   5   5  7.120378  3.251857 0.0 10.372235 35.943264 10.372235  3.186899 1913.078125 1937.992188  24  24 1.0    0       56     79     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 35   1   6   6  1.720312  1.466587 0.0  3.186899 39.130163  3.186899  0.958705 1854.882812 1875.878906   7   7 1.0    0       80     86     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 35   1   7   7  0.756463  0.202242 0.0  0.958705 40.088868  0.958705  0.938919 1839.921875 1856.968750   3   3 1.0    0       87     89     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1   8   8  0.758106  0.180813 0.0  0.938919 41.027787  0.938919  6.522232 1836.753906 1853.753906   3   3 1.0    0       90     92     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 35   1   9   9  4.781155  1.741077 0.0  6.522232 47.550019  6.522232  3.141978 1879.230469 1899.933594  17  17 1.0    0       93    109     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 35   1  10  10  2.661768  0.480211 0.0  3.141978 50.691997  3.141978  6.190388 1859.300781 1882.410156  10  10 1.0    0      110    119     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 35   1  11  11  4.745530  1.444858 0.0  6.190388 56.882385  6.190388  4.109755 1881.031250 1902.203125  17  17 1.0    0      120    136     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 35   1  12  12  3.448133  0.661622 0.0  4.109755 60.992140  4.109755  0.000000 1873.613281 1900.484375  13  13 1.0    0      137    149     4         4       41      44 3.250000 3.250000 3.304038 3.304038 1.016627 1.016627 -0.052845 -0.052845            0            0
 36   3   1   1  1.235656  0.765821 0.0  2.001477  2.001477  2.001477  0.000000 1836.281250 1853.281250  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 36   2   1   1  1.855300  0.569674 0.0  2.424974  4.426451  4.426451  1.410911 1856.476562 1875.730469  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.838231 2.838231 1.135292 1.135292  0.415869  0.415869            0            2
 36   2   2   2  1.135599  0.275312 0.0  1.410911  5.837362  1.410911  0.000000 1864.195312 1882.269531  17  17 1.0   17       26     42    10        10       11      20 1.700000 1.700000 0.948683 0.948683 0.558049 0.558049  0.710259  0.710259            0            0
 36   1   1   1  4.408445  2.187026 0.0  6.595471 11.021922 11.021922  6.321930 1889.843750 1912.210938  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 36   1   2   2  3.998584  0.912435 0.0  4.911019 17.343852  6.321930  3.898318 1883.750000 1903.660156  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 36   1   3   3  3.147849  0.750469 0.0  3.898318 21.242170  3.898318  5.219915 1879.496094 1897.863281  12  12 1.0    0       32     43     4         4        9      12 3.000000 3.000000 4.000000 4.000000 1.333333 1.333333 -0.160964 -0.160964            0            0
 36   1   4   4  4.312564  0.907351 0.0  5.219915 26.462085  5.219915 11.943682 1892.500000 1917.203125  16  16 1.0    0       44     59     4         4       13      16 4.000000 4.000000 4.760952 4.760952 1.190238 1.190238 -0.263154 -0.263154            0            0
 36   1   5   5  7.251026  4.692656 0.0 11.943682 38.405767 11.943682  2.220878 1941.320312 1965.562500  24  24 1.0    0       60     83     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 36   1   6   6  1.734340  0.486538 0.0  2.220878 40.626645  2.220878  0.709034 1882.714844 1903.738281   7   7 1.0    0       84     90     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 36   1   7   7  0.609202  0.099833 0.0  0.709034 41.335680  0.709034  6.464070 1852.851562 1869.656250   2   2 1.0    0       91     92     2         2       26      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 36   1   8   8  4.761406  1.702664 0.0  6.464070 47.799749  6.464070  3.187463 1902.464844 1924.371094  17  17 1.0    0       93    109     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 36   1   9   9  2.686901  0.500562 0.0  3.187463 50.987212  3.187463  6.420677 1883.390625 1907.359375  10  10 1.0    0      110    119     3         3       31      33 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 36   1  10  10  4.794554  1.626123 0.0  6.420677 57.407889  6.420677  3.396041 1908.375000 1930.476562  17  17 1.0    0      120    136     3         3       34      36 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 36   1  11  11  2.870281  0.525760 0.0  3.396041 60.803930  3.396041  1.192611 1889.039062 1910.703125  11  11 1.0    0      137    147     3         3       37      39 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            1
 36   1  12  12  1.003423  0.189187 0.0  1.192611 61.996540  1.192611  0.000000 1871.921875 1890.910156   4   4 1.0    0      148    151     3         3       40      42 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 37   3   1   1  1.237233  0.890521 0.0  2.127754  2.127754  2.127754  0.000000 1862.796875 1879.632812  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   2   1   1  1.983039  0.718146 0.0  2.701185  4.828939  4.828939  1.532404 1884.273438 1903.023438  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.913570 2.913570 1.120604 1.120604  0.407427  0.407427            0            3
 37   2   2   2  1.237973  0.294431 0.0  1.532404  6.361343  1.532404  0.000000 1892.031250 1909.734375  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 1.135292 1.135292 0.630718 0.630718  0.670543  0.670543            0            0
 37   1   1   1  4.444701  1.328747 0.0  5.773448 10.602387 10.602387  6.615709 1914.281250 1936.554688  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 37   1   2   2  4.076929  1.006376 0.0  5.083305 17.218096  6.615709  6.744598 1909.664062 1939.992188  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 37   1   3   3  5.300386  1.444213 0.0  6.744598 23.962694  6.744598  1.539536 1933.527344 1971.425781  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 37   1   4   4  1.246673  0.292863 0.0  1.539536 25.502230  1.539536 12.908154 1884.796875 1902.988281   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 37   1   5   5  7.484446  5.423708 0.0 12.908154 38.410384 12.908154  1.875144 1971.515625 2009.894531  25  25 1.0    0       56     80     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 37   1   6   6  1.452771  0.422372 0.0  1.875144 40.285527  1.875144  0.938553 1905.937500 1924.542969   6   6 1.0    0       81     86     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 37   1   7   7  0.756598  0.181955 0.0  0.938553 41.224080  0.938553  6.332991 1886.230469 1903.160156   3   3 1.0    0       87     89     3         3       27      29 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 37   1   8   8  4.823836  1.509155 0.0  6.332991 47.557071  6.332991  7.258627 1923.832031 1952.019531  17  17 1.0    0       90    106     3         3       30      32 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 37   1   9   9  5.040644  2.217983 0.0  7.258627 54.815698  7.258627  3.579421 1928.359375 1955.039062  18  18 1.0    0      107    124     3         3       33      35 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 37   1  10  10  2.953842  0.625578 0.0  3.579421 58.395119  3.579421  4.432976 1910.753906 1936.289062  11  11 1.0    0      125    135     3         3       36      38 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
 37   1  11  11  3.746360  0.686616 0.0  4.432976 62.828095  4.432976  1.175116 1919.343750 1952.109375  14  14 1.0    0      136    149     3         3       39      41 4.666667 4.666667 4.725816 4.725816 1.012675 1.012675 -0.588354 -0.588354            0            2
 37   1  12  12  0.995681  0.179435 0.0  1.175116 64.003211  1.175116  0.000000 1888.167969 1909.140625   4   4 1.0    0      150    153     3         3       42      44 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 38   3   1   1  1.238940  0.722008 0.0  1.960948  1.960948  1.960948  0.000000 1881.921875 1901.550781  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   2   1   1  2.594965  1.531955 0.0  4.126920  6.087868  6.087868  0.795161 1913.214844 1941.003906  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.685351 2.685351 0.866242 0.866242  0.433521  0.433521            0            2
 38   2   2   2  0.607344  0.187817 0.0  0.795161  6.883028  0.795161  0.000000 1935.347656 1955.203125  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            0
 38   1   1   1  4.715599  1.352470 0.0  6.068069 12.155937 12.155937 10.575601 1946.867188 1980.871094  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 38   1   2   2  7.138276  2.642164 0.0  9.780440 22.731538 10.575601  4.308639 1989.359375 2037.933594  24  24 1.0    0       18     41     5         5        6      10 4.800000 4.800000 5.310367 5.310367 1.106327 1.106327 -0.144619 -0.144619            0            0
 38   1   3   3  3.503122  0.805517 0.0  4.308639 27.040177  4.308639 11.360023 1937.882812 1962.445312  13  13 1.0    0       42     54     5         5       11      15 2.600000 2.600000 3.049590 3.049590 1.172919 1.172919  0.130991  0.130991            0            0
 38   1   4   4  7.376353  3.983670 0.0 11.360023 38.400200 11.360023  7.251821 1995.410156 2036.832031  25  25 1.0    0       55     79     5         5       16      20 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 38   1   5   5  5.337577  1.914244 0.0  7.251821 45.652020  7.251821 35.188513 1967.574219 1995.839844  19  19 1.0    0       80     98     5         5       21      25 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 38   1   6   6 11.548128 23.640385 0.0 35.188513 80.840534 35.188513  0.521544 2076.078125 2121.980469  35  35 1.0    0       99    133     6         6       26      31 5.833333 5.833333 3.920034 3.920034 0.672006 0.672006  0.110754  0.110754            0            1
 38   1   7   7  0.448728  0.072816 0.0  0.521544 81.362078  0.521544  1.776313 1929.351562 1949.226562   1   1 1.0    0      134    134     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 38   1   8   8  0.607265  1.169048 0.0  1.776313 83.138391  1.776313  0.921573 1931.839844 1951.484375   2   2 1.0    0      135    136     2         2       33      34 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1   9   9  0.773265  0.148308 0.0  0.921573 84.059964  0.921573  0.900369 1939.464844 1959.000000   3   3 1.0    0      137    139     2         2       35      36 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 38   1  10  10  0.773403  0.126965 0.0  0.900369 84.960333  0.900369  0.706969 1936.242188 1955.742188   3   3 1.0    0      140    142     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 38   1  11  11  0.611724  0.095245 0.0  0.706969 85.667302  0.706969  0.885440 1934.238281 1953.738281   2   2 1.0    0      143    144     2         2       39      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 38   1  12  12  0.772239  0.113201 0.0  0.885440 86.552742  0.885440  0.000000 1934.261719 1953.738281   3   3 1.0    0      145    147     2         2       41      42 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 39   3   1   1  1.237491  0.737250 0.0  1.974741  1.974741  1.974741  0.000000 1933.835938 1953.078125  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 39   2   1   1  2.476243  1.775539 0.0  4.251782  6.226523  6.226523  1.062381 1963.109375 1991.281250  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.748737 2.748737 0.916246 0.916246  0.426115  0.426115            0            2
 39   2   2   2  0.849892  0.212489 0.0  1.062381  7.288904  1.062381  0.000000 1964.769531 1986.062500  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.699206 0.699206 0.499433 0.499433  0.769754  0.769754            0            0
 39   1   1   1  4.732105  1.428983 0.0  6.161088 12.387611 12.387611  6.571604 2003.464844 2038.246094  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 39   1   2   2  4.391943  1.117280 0.0  5.509223 18.959215  6.571604  4.333342 1999.832031 2035.878906  16  16 1.0    0       18     33     5         5        6      10 3.200000 3.200000 4.919350 4.919350 1.537297 1.537297 -0.104874 -0.104874            0            0
 39   1   3   3  3.512431  0.820911 0.0  4.333342 23.292557  4.333342  7.353753 1988.152344 2013.312500  13  13 1.0    0       34     46     5         5       11      15 2.600000 2.600000 3.049590 3.049590 1.172919 1.172919  0.130991  0.130991            0            0
 39   1   4   4  5.295023  2.058730 0.0  7.353753 30.646310  7.353753  5.020757 2011.597656 2042.269531  19  19 1.0    0       47     65     5         5       16      20 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 39   1   5   5  4.043734  0.977023 0.0  5.020757 35.667068  5.020757 12.818538 2000.320312 2021.796875  15  15 1.0    0       66     80     5         5       21      25 3.000000 3.000000 4.472136 4.472136 1.490712 1.490712 -0.056064 -0.056064            0            2
 39   1   6   6  7.926546  4.891992 0.0 12.818538 48.485606 12.818538  2.325642 2062.191406 2101.347656  26  26 1.0    0       81    106     5         5       26      30 5.200000 5.200000 3.492850 3.492850 0.671702 0.671702  0.066452  0.066452            0            0
 39   1   7   7  1.996328  0.329314 0.0  2.325642 50.811248  2.325642  3.002913 1967.761719 1988.660156   8   8 1.0    0      107    114     2         2       31      32 4.000000 4.000000 4.242641 4.242641 1.060660 1.060660 -1.390294 -1.390294            0            0
 39   1   8   8  2.586350  0.416563 0.0  3.002913 53.814161  3.002913  3.256545 1972.468750 1991.621094  10  10 1.0    0      115    124     2         2       33      34 5.000000 5.000000 5.656854 5.656854 1.131371 1.131371 -1.734841 -1.734841            0            0
 39   1   9   9  2.823990  0.432555 0.0  3.256545 57.070706  3.256545  0.725088 1977.324219 1999.640625  11  11 1.0    0      125    135     2         2       35      36 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            0
 39   1  10  10  0.609504  0.115584 0.0  0.725088 57.795794  0.725088  1.206036 1962.902344 1981.585938   2   2 1.0    0      136    137     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 39   1  11  11  0.986415  0.219621 0.0  1.206036 59.001830  1.206036  1.169751 1974.667969 1995.550781   4   4 1.0    0      138    141     3         3       39      41 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 39   1  12  12  0.988372  0.181379 0.0  1.169751 60.171580  1.169751  0.000000 1966.347656 1987.257812   4   4 1.0    0      142    145     3         3       42      44 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 40   3   1   1  1.234885  1.847769 0.0  3.082653  3.082653  3.082653  0.000000 1961.531250 1981.128906  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   2   1   1  1.871138  0.687131 0.0  2.558270  5.640923  5.640923  1.707853 1981.734375 2003.550781  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.838231 2.838231 1.135292 1.135292  0.415869  0.415869            0            2
 40   2   2   2  1.331651  0.376202 0.0  1.707853  7.348776  1.707853  0.000000 1990.667969 2009.269531  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.737865 0.737865 0.388350 0.388350  0.759984  0.759984            0            0
 40   1   1   1  4.429827  1.139454 0.0  5.569281 11.210203 11.210203  6.618461 2016.386719 2041.000000  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 40   1   2   2  4.021372  0.889236 0.0  4.910608 17.828665  6.618461  1.249033 2011.101562 2032.644531  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 40   1   3   3  0.995051  0.253982 0.0  1.249033 19.077698  1.249033  5.257209 1982.800781 2003.441406   4   4 1.0    0       32     35     4         4        9      12 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   4   4  4.329708  0.927501 0.0  5.257209 24.334906  5.257209 11.655150 2019.972656 2046.203125  16  16 1.0    0       36     51     4         4       13      16 4.000000 4.000000 6.000000 6.000000 1.500000 1.500000 -0.403677 -0.403677            0            0
 40   1   5   5  7.223504  4.431645 0.0 11.655150 35.990056 11.655150  2.245235 2060.582031 2086.562500  24  24 1.0    0       52     75     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 40   1   6   6  1.737594  0.507641 0.0  2.245235 38.235292  2.245235  2.092536 2010.117188 2032.699219   7   7 1.0    0       76     82     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 40   1   7   7  0.761445  1.331092 0.0  2.092536 40.327828  2.092536  0.941643 1987.359375 2005.703125   3   3 1.0    0       83     85     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 40   1   8   8  0.756574  0.185069 0.0  0.941643 41.269471  0.941643  6.226371 1987.507812 2005.976562   3   3 1.0    0       86     88     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 40   1   9   9  4.749772  1.476600 0.0  6.226371 47.495842  6.226371  3.134470 2029.734375 2052.253906  17  17 1.0    0       89    105     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 40   1  10  10  2.659197  0.475273 0.0  3.134470 50.630312  3.134470  6.581845 2005.929688 2029.445312  10  10 1.0    0      106    115     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 40   1  11  11  4.801386  1.780458 0.0  6.581845 57.212157  6.581845  4.119523 2031.167969 2053.210938  17  17 1.0    0      116    132     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 40   1  12  12  3.455039  0.664484 0.0  4.119523 61.331680  4.119523  0.000000 2022.851562 2051.367188  13  13 1.0    0      133    145     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
 41   3   1   1  1.241749  0.794443 0.0  2.036192  2.036192  2.036192  0.000000 1985.304688 2003.894531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 41   2   1   1  1.996225  0.710845 0.0  2.707070  4.743262  4.743262  1.566627 2006.691406 2026.820312  26  26 1.0   26        1     26    10        10        1      10 2.600000 2.600000 2.756810 2.756810 1.060311 1.060311  0.425181  0.425181            0            3
 41   2   2   2  1.226688  0.339938 0.0  1.566627  6.309889  1.566627  0.000000 2010.996094 2030.070312  18  18 1.0   18       27     44    10        10       11      20 1.800000 1.800000 0.918937 0.918937 0.510520 0.510520  0.716939  0.716939            0            0
 41   1   1   1  4.444571  1.174946 0.0  5.619517 10.362780 10.362780  6.583682 2039.406250 2064.011719  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 41   1   2   2  4.079894  0.937161 0.0  5.017055 16.946461  6.583682  3.469309 2035.792969 2066.929688  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 41   1   3   3  2.860821  0.608489 0.0  3.469309 20.415770  3.469309  2.687902 2026.523438 2048.187500  11  11 1.0    0       32     42     4         4        9      12 2.750000 2.750000 2.872281 2.872281 1.044466 1.044466  0.023408  0.023408            0            0
 41   1   4   4  1.250891  1.437011 0.0  2.687902 23.103672  2.687902 10.591964 2008.867188 2027.906250   5   5 1.0    0       43     47     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 41   1   5   5  7.396841  3.195123 0.0 10.591964 33.695636 10.591964  1.906964 2094.960938 2134.390625  25  25 1.0    0       48     72     5         5       17      21 5.000000 5.000000 3.741657 3.741657 0.748331 0.748331  0.032963  0.032963            0            1
 41   1   6   6  1.480219  0.426745 0.0  1.906964 35.602600  1.906964  1.123930 2022.769531 2041.828125   6   6 1.0    0       73     78     5         5       22      26 1.200000 1.200000 0.447214 0.447214 0.372678 0.372678  0.770330  0.770330            0            2
 41   1   7   7  0.929541  0.194389 0.0  1.123930 36.726530  1.123930  0.936783 2005.480469 2023.996094   4   4 1.0    0       79     82     3         3       27      29 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 41   1   8   8  0.757283  0.179500 0.0  0.936783 37.663313  0.936783  6.146246 2005.605469 2023.925781   3   3 1.0    0       83     85     3         3       30      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 41   1   9   9  4.762535  1.383710 0.0  6.146246 43.809558  6.146246  7.139392 2049.730469 2073.164062  17  17 1.0    0       86    102     3         3       33      35 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 41   1  10  10  5.028896  2.110495 0.0  7.139392 50.948950  7.139392  3.480977 2054.015625 2076.535156  18  18 1.0    0      103    120     3         3       36      38 6.000000 6.000000 4.582576 4.582576 0.763763 0.763763 -0.565293 -0.565293            0            0
 41   1  11  11  2.921077  0.559900 0.0  3.480977 54.429927  3.480977  4.402060 2027.917969 2050.562500  11  11 1.0    0      121    131     3         3       39      41 3.666667 3.666667 4.618802 4.618802 1.259673 1.259673 -0.571181 -0.571181            0            0
 41   1  12  12  3.735207  0.666853 0.0  4.402060 58.831987  4.402060  0.000000 2040.851562 2069.535156  14  14 1.0    0      132    145     3         3       42      44 4.666667 4.666667 4.725816 4.725816 1.012675 1.012675 -0.588354 -0.588354            0            0
 42   3   1   1  1.238690  0.795183 0.0  2.033873  2.033873  2.033873  0.000000 2005.261719 2023.769531  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 42   2   1   1  1.863156  0.593597 0.0  2.456754  4.490627  4.490627  1.765979 2025.718750 2046.515625  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.758824 2.758824 1.103530 1.103530  0.424948  0.424948            0            2
 42   2   2   2  1.323893  0.442085 0.0  1.765979  6.256606  1.765979  0.000000 2036.011719 2054.785156  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 1.370320 1.370320 0.721221 0.721221  0.625193  0.625193            0            0
 42   1   1   1  4.436098  1.366942 0.0  5.803040 10.293667 10.293667  6.748740 2061.386719 2085.562500  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 42   1   2   2  4.062331  0.920431 0.0  4.982761 17.042407  6.748740  6.829038 2057.039062 2088.675781  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 42   1   3   3  5.320147  1.508891 0.0  6.829038 23.871445  6.829038  1.540602 2078.832031 2118.414062  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 42   1   4   4  1.247400  0.293202 0.0  1.540602 25.412047  1.540602 11.389413 2029.718750 2048.699219   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 42   1   5   5  7.194843  4.194570 0.0 11.389413 36.801460 11.389413  2.249644 2109.027344 2135.226562  24  24 1.0    0       56     79     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 42   1   6   6  1.723848  0.525796 0.0  2.249644 39.051104  2.249644  2.145652 2059.316406 2081.972656   7   7 1.0    0       80     86     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 42   1   7   7  0.755322  1.390330 0.0  2.145652 41.196756  2.145652  1.002601 2032.843750 2051.214844   3   3 1.0    0       87     89     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1   8   8  0.812168  0.190432 0.0  1.002601 42.199357  1.002601  6.368494 2029.546875 2047.914062   3   3 1.0    0       90     92     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 42   1   9   9  4.729931  1.638564 0.0  6.368494 48.567851  6.368494  3.141648 2073.054688 2095.457031  17  17 1.0    0       93    109     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 42   1  10  10  2.655709  0.485939 0.0  3.141648 51.709499  3.141648  6.148532 2050.019531 2073.851562  10  10 1.0    0      110    119     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 42   1  11  11  4.733781  1.414751 0.0  6.148532 57.858032  6.148532  4.124047 2073.210938 2095.445312  17  17 1.0    0      120    136     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 42   1  12  12  3.454008  0.670040 0.0  4.124047 61.982079  4.124047  0.000000 2065.953125 2094.457031  13  13 1.0    0      137    149     4         4       41      44 3.250000 3.250000 3.304038 3.304038 1.016627 1.016627 -0.052845 -0.052845            0            0
 43   3   1   1  1.233585  0.755473 0.0  1.989059  1.989059  1.989059  0.000000 2028.105469 2046.738281  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 43   2   1   1  1.854800  0.591444 0.0  2.446244  4.435303  4.435303  1.749714 2048.851562 2069.699219  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
 43   2   2   2  1.335611  0.414103 0.0  1.749714  6.185017  1.749714  0.000000 2059.414062 2078.132812  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.994429 0.994429 0.523384 0.523384  0.700181  0.700181            0            0
 43   1   1   1  4.437376  1.203400 0.0  5.640776 10.076079 10.076079  6.779592 2083.585938 2107.812500  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 43   1   2   2  4.085219  0.944660 0.0  5.029878 16.855671  6.779592  6.719630 2079.546875 2111.695312  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 43   1   3   3  5.321001  1.398629 0.0  6.719630 23.575301  6.719630  2.743918 2099.914062 2139.808594  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 43   1   4   4  1.252756  1.491162 0.0  2.743918 26.319219  2.743918 11.472686 2051.714844 2070.875000   5   5 1.0    0       51     55     4         4       13      16 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 43   1   5   5  7.204559  4.268126 0.0 11.472686 37.791905 11.472686  2.200990 2129.207031 2155.601562  24  24 1.0    0       56     79     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 43   1   6   6  1.734063  0.466928 0.0  2.200990 39.992895  2.200990  0.966674 2071.843750 2094.542969   7   7 1.0    0       80     86     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 43   1   7   7  0.761831  0.204843 0.0  0.966674 40.959569  0.966674  0.941270 2056.652344 2075.050781   3   3 1.0    0       87     89     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1   8   8  0.758435  0.182834 0.0  0.941270 41.900838  0.941270  6.257768 2053.453125 2071.835938   3   3 1.0    0       90     92     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 43   1   9   9  4.760401  1.497367 0.0  6.257768 48.158607  6.257768  3.121332 2098.578125 2121.117188  17  17 1.0    0       93    109     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 43   1  10  10  2.642892  0.478440 0.0  3.121332 51.279939  3.121332  6.237587 2074.093750 2097.378906  10  10 1.0    0      110    119     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 43   1  11  11  4.732690  1.504897 0.0  6.237587 57.517525  6.237587  4.119169 2099.617188 2122.429688  17  17 1.0    0      120    136     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 43   1  12  12  3.458347  0.660822 0.0  4.119169 61.636694  4.119169  0.000000 2090.183594 2118.785156  13  13 1.0    0      137    149     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
 44   3   1   1  1.239657  0.787783 0.0  2.027440  2.027440  2.027440  0.000000 2052.644531 2071.066406  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   2   1   1  1.774151  0.506897 0.0  2.281048  4.308488  4.308488  1.794557 2072.320312 2093.621094  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
 44   2   2   2  1.419042  0.375514 0.0  1.794557  6.103045  1.794557  0.000000 2082.964844 2105.496094  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 1.333333 1.333333 0.666667 0.666667  0.632023  0.632023            0            0
 44   1   1   1  4.427106  1.252110 0.0  5.679216  9.987704  9.987704  6.830586 2107.316406 2131.898438  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 44   1   2   2  4.069952  0.966078 0.0  5.036030 16.818290  6.830586  6.804554 2103.554688 2135.761719  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 44   1   3   3  5.345284  1.459270 0.0  6.804554 23.622844  6.804554  6.681058 2124.480469 2163.824219  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 44   1   4   4  5.031447  1.649611 0.0  6.681058 30.303902  6.681058  4.288813 2123.710938 2163.046875  18  18 1.0    0       51     68     4         4       13      16 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            0
 44   1   5   5  3.507854  0.780959 0.0  4.288813 34.592715  4.288813  1.535668 2110.152344 2139.488281  13  13 1.0    0       69     81     4         4       17      20 3.250000 3.250000 3.862210 3.862210 1.188372 1.188372 -0.140806 -0.140806            0            2
 44   1   6   6  1.241520  0.294148 0.0  1.535668 36.128382  1.535668  0.957469 2088.605469 2108.136719   5   5 1.0    0       82     86     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            1
 44   1   7   7  0.757650  0.199819 0.0  0.957469 37.085851  0.957469  6.403842 2079.703125 2098.460938   3   3 1.0    0       87     89     3         3       25      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 44   1   8   8  4.820759  1.583083 0.0  6.403842 43.489693  6.403842  4.948900 2120.019531 2144.734375  17  17 1.0    0       90    106     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 44   1   9   9  3.150363  1.798537 0.0  4.948900 48.438594  4.948900  3.124666 2105.082031 2128.066406  12  12 1.0    0      107    118     3         3       31      33 4.000000 4.000000 5.196152 5.196152 1.299038 1.299038 -0.660211 -0.660211            0            0
 44   1  10  10  2.570426  0.554240 0.0  3.124666 51.563259  3.124666  6.341164 2098.738281 2125.921875  10  10 1.0    0      119    128     3         3       34      36 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 44   1  11  11  5.074963  1.266201 0.0  6.341164 57.904424  6.341164  1.558390 2134.363281 2172.308594  18  18 1.0    0      129    146     4         4       37      40 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            1
 44   1  12  12  1.268433  0.289957 0.0  1.558390 59.462814  1.558390  0.000000 2091.218750 2113.359375   5   5 1.0    0      147    151     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 45   3   1   1  1.238352  0.851271 0.0  2.089623  2.089623  2.089623  0.000000 2076.843750 2095.667969  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   2   1   1  2.553927  1.560206 0.0  4.114134  6.203756  6.203756  0.792174 2107.542969 2135.089844  31  31 1.0   31        1     31    10        10        1      10 3.100000 3.100000 2.558211 2.558211 0.825229 0.825229  0.448768  0.448768            0            2
 45   2   2   2  0.605171  0.187003 0.0  0.792174  6.995931  0.792174  0.000000 2101.496094 2119.847656  11  11 1.0   11       32     42    10        10       11      20 1.100000 1.100000 0.316228 0.316228 0.287480 0.287480  0.880669  0.880669            0            0
 45   1   1   1  4.730956  1.509727 0.0  6.240683 12.444439 12.444439 10.259960 2139.500000 2172.121094  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 45   1   2   2  7.081105  2.386680 0.0  9.467785 22.704398 10.259960 14.982897 2177.210938 2224.949219  24  24 1.0    0       18     41     5         5        6      10 4.800000 4.800000 5.310367 5.310367 1.106327 1.106327 -0.144619 -0.144619            0            0
 45   1   3   3  7.971856  7.011041 0.0 14.982897 37.687296 14.982897  6.127948 2189.718750 2233.105469  26  26 1.0    0       42     67     5         5       11      15 5.200000 5.200000 3.492850 3.492850 0.671702 0.671702  0.066452  0.066452            0            0
 45   1   4   4  4.780673  1.347275 0.0  6.127948 43.815244  6.127948  7.900414 2150.371094 2181.691406  17  17 1.0    0       68     84     5         5       16      20 3.400000 3.400000 3.286335 3.286335 0.966569 0.966569  0.095689  0.095689            0            1
 45   1   5   5  6.056551  1.843863 0.0  7.900414 51.715658  7.900414 11.586716 2165.136719 2190.812500  21  21 1.0    0       85    105     5         5       21      25 4.200000 4.200000 3.563706 3.563706 0.848501 0.848501  0.056730  0.056730            0            0
 45   1   6   6  7.621093  3.965622 0.0 11.586716 63.302374 11.586716  0.524092 2196.148438 2221.796875  26  26 1.0    0      106    131     6         6       26      31 4.333333 4.333333 3.444803 3.444803 0.794955 0.794955  0.167447  0.167447            0            1
 45   1   7   7  0.452716  0.071376 0.0  0.524092 63.826465  0.524092  0.910422 2095.097656 2113.625000   1   1 1.0    0      132    132     1         1       32      32 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 45   1   8   8  0.777233  0.133189 0.0  0.910422 64.736887  0.910422  0.724815 2101.671875 2120.140625   3   3 1.0    0      133    135     2         2       33      34 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 45   1   9   9  0.608680  0.116134 0.0  0.724815 65.461701  0.724815  0.913108 2101.984375 2120.394531   2   2 1.0    0      136    137     2         2       35      36 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  10  10  0.775248  0.137861 0.0  0.913108 66.374810  0.913108  0.708195 2103.539062 2122.074219   3   3 1.0    0      138    140     2         2       37      38 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            1
 45   1  11  11  0.608054  0.100141 0.0  0.708195 67.083005  0.708195  0.884476 2099.328125 2117.636719   2   2 1.0    0      141    142     2         2       39      40 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 45   1  12  12  0.771902  0.112575 0.0  0.884476 67.967481  0.884476  0.000000 2099.597656 2118.136719   3   3 1.0    0      143    145     2         2       41      42 1.500000 1.500000 0.707107 0.707107 0.471405 0.471405  0.228447  0.228447            0            0
 46   3   1   1  1.239970  0.741275 0.0  1.981244  1.981244  1.981244  0.000000 2098.414062 2116.773438  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 46   2   1   1  2.453075  1.725408 0.0  4.178484  6.159728  6.159728  1.055963 2123.402344 2143.304688  30  30 1.0   30        1     30    10        10        1      10 3.000000 3.000000 2.666667 2.666667 0.888889 0.888889  0.435729  0.435729            0            2
 46   2   2   2  0.843884  0.212079 0.0  1.055963  7.215691  1.055963  0.000000 2127.800781 2148.726562  14  14 1.0   14       31     44    10        10       11      20 1.400000 1.400000 0.699206 0.699206 0.499433 0.499433  0.769754  0.769754            0            0
 46   1   1   1  4.755823  1.545820 0.0  6.301643 12.461371 12.461371  6.583172 2160.968750 2192.500000  17  17 1.0    0        1     17     5         5        1       5 3.400000 3.400000 2.880972 2.880972 0.847345 0.847345  0.157417  0.157417            0            0
 46   1   2   2  4.378831  1.148378 0.0  5.527208 19.044543  6.583172  4.306592 2156.988281 2190.535156  16  16 1.0    0       18     33     5         5        6      10 3.200000 3.200000 4.919350 4.919350 1.537297 1.537297 -0.104874 -0.104874            0            0
 46   1   3   3  3.502933  0.803659 0.0  4.306592 23.351134  4.306592  8.557027 2150.210938 2174.601562  13  13 1.0    0       34     46     5         5       11      15 2.600000 2.600000 2.607681 2.607681 1.002954 1.002954  0.202787  0.202787            0            0
 46   1   4   4  5.314202  3.242826 0.0  8.557027 31.908162  8.557027  5.018430 2170.308594 2198.132812  19  19 1.0    0       47     65     5         5       16      20 3.800000 3.800000 3.898718 3.898718 1.025978 1.025978  0.012715  0.012715            0            0
 46   1   5   5  4.046917  0.971513 0.0  5.018430 36.926591  5.018430 13.334805 2161.632812 2182.500000  15  15 1.0    0       66     80     5         5       21      25 3.000000 3.000000 4.472136 4.472136 1.490712 1.490712 -0.056064 -0.056064            0            2
 46   1   6   6  7.926881  5.407923 0.0 13.334805 50.261396 13.334805  2.308208 2223.171875 2262.894531  26  26 1.0    0       81    106     5         5       26      30 5.200000 5.200000 3.492850 3.492850 0.671702 0.671702  0.066452  0.066452            0            0
 46   1   7   7  1.997874  0.310334 0.0  2.308208 52.569604  2.308208  3.091237 2130.687500 2151.570312   8   8 1.0    0      107    114     2         2       31      32 4.000000 4.000000 4.242641 4.242641 1.060660 1.060660 -1.390294 -1.390294            0            0
 46   1   8   8  2.636832  0.454405 0.0  3.091237 55.660842  3.091237  3.247544 2136.910156 2158.550781  10  10 1.0    0      115    124     2         2       33      34 5.000000 5.000000 5.656854 5.656854 1.131371 1.131371 -1.734841 -1.734841            0            0
 46   1   9   9  2.827098  0.420446 0.0  3.247544 58.908386  3.247544  0.741472 2140.234375 2162.718750  11  11 1.0    0      125    135     2         2       35      36 5.500000 5.500000 6.363961 6.363961 1.157084 1.157084 -1.880482 -1.880482            0            0
 46   1  10  10  0.608819  0.132653 0.0  0.741472 59.649858  0.741472  1.224258 2128.523438 2147.019531   2   2 1.0    0      136    137     2         2       37      38 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 46   1  11  11  0.998608  0.225650 0.0  1.224258 60.874116  1.224258  1.176982 2134.515625 2155.335938   4   4 1.0    0      138    141     3         3       39      41 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            1
 46   1  12  12  0.989256  0.187726 0.0  1.176982 62.051098  1.176982  0.000000 2131.175781 2151.683594   4   4 1.0    0      142    145     3         3       42      44 1.333333 1.333333 0.577350 0.577350 0.433013 0.433013  0.585162  0.585162            0            0
 47   3   1   1  1.232645  0.711170 0.0  1.943815  1.943815  1.943815  0.000000 2121.726562 2140.148438  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   2   1   1  1.754932  0.504554 0.0  2.259486  4.203301  4.203301  1.792597 2141.246094 2162.417969  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
 47   2   2   2  1.419242  0.373356 0.0  1.792597  5.995898  1.792597  0.000000 2151.769531 2170.242188  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 0.942809 0.942809 0.471405 0.471405  0.711570  0.711570            0            0
 47   1   1   1  4.412187  2.519726 0.0  6.931913 11.135213 11.135213  6.802727 2176.742188 2201.484375  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 47   1   2   2  4.041018  0.969112 0.0  5.010130 17.937941  6.802727  6.970297 2172.089844 2204.406250  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 47   1   3   3  5.331054  1.639243 0.0  6.970297 24.908238  6.970297  6.667416 2192.648438 2231.585938  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 47   1   4   4  5.029192  1.638224 0.0  6.667416 31.575654  6.667416  4.610622 2192.003906 2230.253906  18  18 1.0    0       51     68     4         4       13      16 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            0
 47   1   5   5  3.822225  0.788396 0.0  4.610622 36.186276  4.610622  1.301809 2178.363281 2206.359375  14  14 1.0    0       69     82     4         4       17      20 3.500000 3.500000 4.358899 4.358899 1.245400 1.245400 -0.210968 -0.210968            0            1
 47   1   6   6  1.001482  0.300327 0.0  1.301809 37.488085  1.301809  0.959206 2162.527344 2182.968750   4   4 1.0    0       83     86     4         4       21      24 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            2
 47   1   7   7  0.759440  0.199765 0.0  0.959206 38.447291  0.959206  6.400603 2148.621094 2167.265625   3   3 1.0    0       87     89     3         3       25      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 47   1   8   8  4.833077  1.567527 0.0  6.400603 44.847894  6.400603  4.107806 2189.128906 2213.550781  17  17 1.0    0       90    106     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 47   1   9   9  3.460996  0.646810 0.0  4.107806 48.955700  4.107806  2.560099 2177.062500 2197.695312  13  13 1.0    0      107    119     3         3       31      33 4.333333 4.333333 4.932883 4.932883 1.138358 1.138358 -0.620690 -0.620690            0            0
 47   1  10  10  2.157677  0.402422 0.0  2.560099 51.515799  2.560099  7.662998 2159.320312 2180.136719   9   9 1.0    0      120    128     3         3       34      36 3.000000 3.000000 3.464102 3.464102 1.154701 1.154701 -0.361780 -0.361780            0            0
 47   1  11  11  5.050798  2.612200 0.0  7.662998 59.178797  7.662998  1.438031 2202.742188 2240.121094  18  18 1.0    0      129    146     4         4       37      40 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            1
 47   1  12  12  1.182451  0.255580 0.0  1.438031 60.616828  1.438031  0.000000 2157.085938 2176.191406   5   5 1.0    0      147    151     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0
 48   3   1   1  1.234694  0.893756 0.0  2.128450  2.128450  2.128450  0.000000 2144.859375 2163.484375  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 48   2   1   1  1.859481  0.581593 0.0  2.441074  4.569524  4.569524  1.846691 2165.503906 2186.199219  25  25 1.0   25        1     25    10        10        1      10 2.500000 2.500000 2.915476 2.915476 1.166190 1.166190  0.407215  0.407215            0            2
 48   2   2   2  1.323895  0.522796 0.0  1.846691  6.416215  1.846691  0.000000 2175.332031 2194.292969  19  19 1.0   19       26     44    10        10       11      20 1.900000 1.900000 0.994429 0.994429 0.523384 0.523384  0.700181  0.700181            0            0
 48   1   1   1  4.439021  1.274842 0.0  5.713863 10.283387 10.283387  6.766920 2199.144531 2223.589844  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 48   1   2   2  4.007761  0.912468 0.0  4.920229 17.050307  6.766920  3.839749 2192.746094 2214.066406  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 48   1   3   3  3.146469  0.693280 0.0  3.839749 20.890056  3.839749  5.261546 2184.761719 2204.023438  12  12 1.0    0       32     43     4         4        9      12 3.000000 3.000000 4.000000 4.000000 1.333333 1.333333 -0.160964 -0.160964            0            0
 48   1   4   4  4.321912  0.939634 0.0  5.261546 26.151602  5.261546 10.763010 2202.355469 2228.613281  16  16 1.0    0       44     59     4         4       13      16 4.000000 4.000000 4.760952 4.760952 1.190238 1.190238 -0.263154 -0.263154            0            0
 48   1   5   5  7.190489  3.572522 0.0 10.763010 36.914613 10.763010  2.230997 2239.964844 2265.847656  24  24 1.0    0       60     83     4         4       17      20 6.000000 6.000000 3.464102 3.464102 0.577350 0.577350 -0.079185 -0.079185            0            1
 48   1   6   6  1.724612  0.506385 0.0  2.230997 39.145610  2.230997  2.313801 2195.363281 2217.968750   7   7 1.0    0       84     90     5         5       21      25 1.400000 1.400000 0.547723 0.547723 0.391230 0.391230  0.728611  0.728611            0            1
 48   1   7   7  0.757379  1.556423 0.0  2.313801 41.459411  2.313801  0.954648 2172.542969 2190.964844   3   3 1.0    0       91     93     3         3       26      28 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1   8   8  0.754632  0.200016 0.0  0.954648 42.414058  0.954648  6.365197 2172.882812 2191.507812   3   3 1.0    0       94     96     3         3       29      31 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            1
 48   1   9   9  4.759894  1.605303 0.0  6.365197 48.779256  6.365197  3.122909 2213.308594 2235.601562  17  17 1.0    0       97    113     3         3       32      34 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 48   1  10  10  2.649660  0.473249 0.0  3.122909 51.902164  3.122909  6.354756 2189.140625 2212.792969  10  10 1.0    0      114    123     3         3       35      37 3.333333 3.333333 3.214550 3.214550 0.964365 0.964365 -0.309418 -0.309418            0            0
 48   1  11  11  4.763475  1.591281 0.0  6.354756 58.256920  6.354756  4.111364 2213.742188 2236.433594  17  17 1.0    0      124    140     3         3       38      40 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 48   1  12  12  3.462710  0.648653 0.0  4.111364 62.368284  4.111364  0.000000 2206.339844 2234.703125  13  13 1.0    0      141    153     4         4       41      44 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            0
 49   3   1   1  1.231914  0.764064 0.0  1.995979  1.995979  1.995979  0.000000 2168.582031 2186.992188  20  20 1.0   20        1     20     1         0        1       1 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   2   1   1  1.755301  0.488724 0.0  2.244025  4.240004  4.240004  1.875969 2188.386719 2209.550781  24  24 1.0   24        1     24    10        10        1      10 2.400000 2.400000 2.756810 2.756810 1.148671 1.148671  0.425181  0.425181            0            3
 49   2   2   2  1.467619  0.408350 0.0  1.875969  6.115973  1.875969  0.000000 2194.875000 2220.367188  20  20 1.0   20       25     44    10        10       11      20 2.000000 2.000000 0.816497 0.816497 0.408248 0.408248  0.740765  0.740765            0            0
 49   1   1   1  4.442120  1.360982 0.0  5.803102 10.043106 10.043106  7.220970 2222.710938 2247.105469  16  16 1.0    0        1     16     4         4        1       4 4.000000 4.000000 2.943920 2.943920 0.735980 0.735980  0.010185  0.010185            0            0
 49   1   2   2  4.230647  1.114354 0.0  5.345001 17.264076  7.220970  7.223898 2218.781250 2250.726562  15  15 1.0    0       17     31     4         4        5       8 3.750000 3.750000 5.500000 5.500000 1.466667 1.466667 -0.350220 -0.350220            0            0
 49   1   3   3  5.562155  1.661743 0.0  7.223898 24.487974  7.223898  7.298151 2234.800781 2277.953125  19  19 1.0    0       32     50     4         4        9      12 4.750000 4.750000 3.862210 3.862210 0.813097 0.813097 -0.140806 -0.140806            0            0
 49   1   4   4  5.306713  1.991438 0.0  7.298151 31.786125  7.298151  4.389628 2234.703125 2276.308594  18  18 1.0    0       51     68     4         4       13      16 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            0
 49   1   5   5  3.614442  0.775186 0.0  4.389628 36.175752  4.389628  3.119017 2221.808594 2254.378906  13  13 1.0    0       69     81     4         4       17      20 3.250000 3.250000 4.500000 4.500000 1.384615 1.384615 -0.229716 -0.229716            0            1
 49   1   6   6  1.305273  1.813743 0.0  3.119017 39.294769  3.119017  0.979571 2204.101562 2227.113281   5   5 1.0    0       82     86     4         4       21      24 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            2
 49   1   7   7  0.785083  0.194487 0.0  0.979571 40.274340  0.979571  6.567536 2187.964844 2209.578125   3   3 1.0    0       87     89     3         3       25      27 1.000000 1.000000 0.000000 0.000000 0.000000 0.000000  1.000000  1.000000            0            0
 49   1   8   8  4.958551  1.608985 0.0  6.567536 46.841876  6.567536  3.445215 2232.039062 2259.621094  17  17 1.0    0       90    106     3         3       28      30 5.666667 5.666667 4.163332 4.163332 0.734706 0.734706 -0.494232 -0.494232            0            0
 49   1   9   9  2.900578  0.544637 0.0  3.445215 50.287091  3.445215  3.734983 2213.085938 2240.972656  11  11 1.0    0      107    117     3         3       31      33 3.666667 3.666667 3.785939 3.785939 1.032529 1.032529 -0.425145 -0.425145            0            0
 49   1  10  10  2.991410  0.743573 0.0  3.734983 54.022074  3.734983  6.255821 2214.765625 2242.140625  11  11 1.0    0      118    128     3         3       34      36 3.666667 3.666667 3.055050 3.055050 0.833196 0.833196 -0.274301 -0.274301            0            0
 49   1  11  11  5.037395  1.218426 0.0  6.255821 60.277894  6.255821  1.531573 2245.781250 2286.484375  18  18 1.0    0      129    146     4         4       37      40 4.500000 4.500000 4.123106 4.123106 0.916246 0.916246 -0.178509 -0.178509            0            1
 49   1  12  12  1.265822  0.265752 0.0  1.531573 61.809468  1.531573  0.000000 2203.027344 2224.664062   5   5 1.0    0      147    151     4         4       41      44 1.250000 1.250000 0.500000 0.500000 0.400000 0.400000  0.707519  0.707519            0            0

[03-03-2022_22-30-40] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-03-03_21-22-18_PL2_hcr_online_2_6_min_bound_preach_opt.xlsx

[03-03-2022_22-30-47] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-03-03_21-22-18_PL2_hcr_online_2_6_min_bound_preach_opt.dat

[03-03-2022_22-30-47] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-03-03_21-22-18_PL2_hcr_online_2_6_min_bound_preach_opt.png

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[03-03-2022_22-30-47] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[03-03-2022_22-30-50] INFO :: __main__ >> Overall time: Real = 4112.4849865, Process = 6773.109375

[03-03-2022_22-30-50] INFO :: __main__ >> Exiting with code 0

